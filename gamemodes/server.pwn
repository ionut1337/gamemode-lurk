// < zeex >
#pragma warning disable 239
#pragma warning disable 214
#pragma warning disable 208

#pragma dynamic ( 45000 )

// < Define settings/configuration >
#define ANTI_CHEAT
#define VERSION_HOST
#define SYSTEM_BID
#define STATUS
#define CRATES
#define panel_functions
#define PET
#define UBERSYS
#define RADAR
#define HEIST_SYSTEM
#define CITY_LV
#define CASINO
//#define APARTMENT_SYS
//#define DEBUG_SERVER
\
// < Define extra-code >
//#define OBJECT_QUEST
//#define EVENT_CALENDAR
//#define HALLOWEEN_MOD
//#define XMAS_MODE
#define EMOTES_SYSTEM

#define HOTEL_DB_ID 56
#define mechanic_job 10
#define FACTION_COP 1
#define FACTION_TAXI 3

#include "/INCLUDES_FILES/INCLUDE_CONFIG"
//#include "/INCLUDES_FILES/INCLUDE_CONFIG-TESTE"

// < Includes >
#include "a_samp"
#include "sscanf2"
#include "streamer"
#include <foreach>
#include <YSI\y_hooks>
#include "Pawn.CMD"
#include "strlib"
#include "a_mysql_r39"
#include "a_fireworks"
#include "gvar"
#include "fly"
#include "beaZone"
#include "crashdetect"
#include "fixes_rpg"
#if defined panel_functions
	#include "socket" 
#endif
#include "BustAim"
#include "mSelection"
#include "antiadvertising"
#include "interiors"
#include "YSF"
#include "profiler"
#include <YSI\y_stringhash>

#if defined CRATES
	#include "crates"
#endif


AntiDeAMX()
{
	new a[][] =
	{
		"Unarmed (Fist)",
		"Brass K"
	};
	#pragma unused a
}


native WP_Hash( buffer[], len, const str[] );
//native IsValidVehicle( vehicleid );
native gpci( playerid, const serial[], maxlen );

#define KEY_AIM 				( 128 )
#define MAX_FAIL_LOGINS         ( 3 )
#define MAX_CLANS               ( 30+1 )
#define MAX_JOBS                ( 14+1 )
#define MAX_TURFS               ( 24+1 )
#define MAX_HOUSES              ( 82+1 )
#define MAX_BUSINESS            ( 66+1 )
#define MAX_FACTIONS            ( 10+1 )
#define MAX_APARTMENTS          ( 24 )
#define MAX_ATMS                ( 8+1 )
#define MAX_TELES               ( 10+1 )
#define MAX_HEISTS				( 5 )
#define MAX_SVEHICLES           ( 191+1 ) // < masini de pe harta(plus cele de la factiuni) >
#define MAX_QUESTOBJ			( 35+1 )
#define MAX_EVENTS				( 6+1 )
#define MAX_RACES 				( 7 ) // RACE SYSTEM
#define MAX_SLOTS          		( 10 ) // < personal vehicles >
#define VEHICLE_DESPAWN_TIMER   ( 1200 ) // < 20 minute personal vehicle >
#define LEVEL_MULTYPLIER        ( 4 ) // Level * 4
#define EX_SPLITLENGTH 			( 113 )
#define EX_SPLITLENGTHH 		( 128 )
#define LIMIT_LENGHT			( 50 )
#define SPECIAL_ACTION_PISSING 	( 68 )
#define MAX_ZONE_NAME 			( 28 )
#define MAX_PAINT               ( 4 )
#define SAVE_TIME				( 180 )
#define GIFT_VEHICLE			( 434 ) // Hotknife
#define NBM_DIST				( 12 ) // 12 meters
#define RESPAWN_TIME			( 60 ) // 1 minute
#define WEAPON_RESPAWN_TIME 	( 60 ) // 60 secunde
#define ATTACH_INDEX        	( 8 ) // Head
#define CHECKPOINT_TIMER 		( 2 ) // secunde pentru verificare Checkpoint
#define CIVIL_SKIN_MALE			( 101 )
#define CIVIL_SKIN_FEMALE		( 12 )

#define MAX_VEHICLEHEALTH 		( 999.0 )

#define BUSTAIM_MAX_PL_PERCENT_ALLOWED ( 5 )
#define FREQUENCY_MAX_PL_PERCENT_ALLOWED ( 100 )
#define MAX_QUESTS				( 10 )

#define QUEST_PAINTBALL			( 0 )
#define QUEST_ROB				( 1 )
#define QUEST_FARMER			( 2 )
#define QUEST_SWEEPER			( 3 )
#define QUEST_PILOT				( 4 )
#define QUEST_CHILLIAD			( 5 )
#define QUEST_DRUGS				( 6 )
#define QUEST_CARJACK			( 7 )
#define QUEST_TRUCKER			( 8 )

#define REPORT_STUCK			( 1 )
#define REPORT_DM 				( 2 )
#define REPORT_CHEAT			( 3 )

// < Define Bodyparts >
#define BODY_PART_TORSO 		( 3 )
#define BODY_PART_CHEST 		( 4 )
#define BODY_PART_LEFT_ARM 		( 5 )
#define BODY_PART_RIGHT_ARM 	( 6 )
#define BODY_PART_LEFT_LEG 		( 7 )
#define BODY_PART_RIGHT_LEG 	( 8 )
#define BODY_PART_HEAD 			( 9 )

// < Define other things >
#define SYNTAX_MESSAGE          "Syntax: "COL_W""
#define ERROR_MESSAGE			"ERROR: "COL_W""

#define	SpeedCheck(%0,%1,%2,%3,%4) 				floatround(floatsqroot(%4?(%0*%0+%1*%1+%2*%2):(%0*%0+%1*%1) ) *%3*1.6)
#define AdminOnly "{cef0ac}You are not an admin/helper with necesarry level to use this command."
#define RELEASED(%0) \
	(((newkeys & (%0)) != (%0)) && ((oldkeys & (%0)) == (%0)))


// helped defines

#define type_add     1
#define type_remove  2

#define ClearPlayerChat(%0) for( new _line, _lines = 200; _line < _lines; _line++) SendClientMessage( %0, ~1, " " )
#define GetPlayerMysqlID(%0) playerVariables[ %0 ][ pKey ]
#define GetServerData(%0) serverVariables[ %0 ]
#define MAX_PHONE_NUMBERS ( 99999 )
#define MAX_KEYS ( 1000 )
#define RATE_INC (500)
#define RATE_MAX (2500)
#define THRESOLD_ACTION 1	

new Vector:phone_numbers,
    phoneNumbers[99999];

new playerKeys[ MAX_KEYS ] = {INVALID_PLAYER_ID, ...};
stock bool:False = false;
stock bool:True = true;

stock Float:frandom(Float:max, Float:min = 0.0, dp = 4)
{
	new
	// Get the multiplication for storing fractional parts.
	Float:mul = floatpower(10.0, dp),
	// Get the max and min as integers, with extra dp.
	imin = floatround(min * mul),
	imax = floatround(max * mul);
	// Get a random int between two bounds and convert it to a float.
	return float(random(imax - imin) + imin) / mul;
}

stock SetPlayerHealthEx( playerid, Float:health )
{
	SetPlayerHealth( playerid, health );
}
//#define SetPlayerHealth SetPlayerHealthEx

stock SetPlayerArmourEx( playerid, Float:armour )
{
	SetPlayerArmour( playerid, armour );
}
//#define SetPlayerArmour SetPlayerArmourEx

stock Float:GetPlayerHealthEx( playerid )
{
	new Float:gHealth;
	GetPlayerHealth( playerid, gHealth );
	return gHealth;
}
stock Float:GetPlayerArmourEx( playerid )
{ 
	new Float:gArmour;
	GetPlayerArmour( playerid, gArmour );
	return gArmour;
}

/*#if defined VERSION_HOST
RandomEx( min, max ) { return random( max - min ) + min; } // by Y_Less
#endif*/


#define DisablePlayerCheckpointText(%0,%1)\
	do{\
		DisablePlayerCheckpoint(%0);\
		SendClientMessage(%0,COLOR_RED,(%1));\
	}\
	while(False)

#define FormatMSGSplit(%0,%1,%2,%3)\
	do{\
		gsBigString[0]=EOS;\
		format(gsBigString, sizeof(gsBigString), (%2), %3);\
		SendSplitMessage((%0),(%1), gsBigString);\
	}\
	while(False)

#define CheckPlayerAction(%0)\
	do{\
		if( playerVariables[%0][pPaintBall] != -1 || playerVariables[%0][pRaceArena] || playerVariables[%0][pDoingJob] )\
			return SendClientMessage( %0, COLOR_GREY, "Nu poti folosi aceasta comanda in Paintball/RaceArena/Job!" );\
	}\
	while(False)

#define AHCheck(%0,%1,%2)\
	do{\
		if(playerVariables[(%0)][pAdminLevel] < (%1) && playerVariables[(%0)][pHelper] < (%2)){\
			return SendClientMessage( playerid, COLOR_WHITE, AdminOnly );\
		}\
	}\
	while(False)

#define showHelp(%0)\
	do{\
		ShowPlayerDialog( %0, DIALOG_HELP, DIALOG_STYLE_LIST, "Server's Commands", Help_String(), "Select", "Exit" );\
	}\
	while(False)

#define CheckAccountBlocked(%0)\
	do{\
		if(playerVariables[%0][pBlocked])\
			return SendClientMessage( %0, COLOR_GREY, "Contul tau este blocat (/pinhelp), nu poti cumpara / vinde bunuri!" );\
	}\
	while(False)

#define CheckPlayerActiveCP(%0)\
	do{\
		if( playerVariables[%0][ pCP ] )\
			return ShowPlayerDialog( %0, DIALOG_KILLCP, DIALOG_STYLE_MSGBOX, "Anulare Checkpoint", "Esti sigur ca vrei sa anulezi checkpoint-ul curent?", "Da", "Nu" );\
	}\
	while(False)

#define CheckPlayerAnim(%0)\
	do{\
		if(IsPlayerInAnyVehicle(%0))return SendClientMessage(%0,~1,"You can't use animation!");\
		if(IsPlayerFalling(%0))return SendClientMessage(%0,~1,"You can't use animation!");\
		if(playerVariables[playerid][pFreezed])return SendClientMessage(%0,~1,"You can't use animation!");\
	}\
	while(False)

#define function%0(%1) \
			forward%0(%1); public%0(%1)

#define SQL_Function%0(%1) \
			forward%0(%1); public%0(%1)

// < Define Colors >
#define 				COL_S                      				"{3399ff}"
#define 				COL_G                      				"{6EF83C}"
#define 				COL_R                       			"{990000}"
#define 				COL_LYE    								"{f0e690}"
#define 				COL_LR                                  "{FF3D3D}"
#define 				COL_W                      				"{FFFFFF}"
#define 				COL_O                      				"{FFAF00}"
#define 				COL_YE                          		"{FFFF00}"
#define 				COL_GRI	                        		"{C0C0C0}"
#define 				COL_LG 									"{9ACD32}"
#define 				COL_JOB 								"{0651cc}"
#define 				COL_B 									"{3366CC}"
#define 				COL_BLUE 								"{2D67CC}"
#define 				COLOR_RM								"{F08C0A}"

#define 				COLOR_FADE								0xE6E6E6E6
#define 				COLOR_ROB  								0x0C8176FF
#define 				COLOR_ADV 								0x00FF00AA
#define 				COLOR_HITMAN 							0xA5443B00
#define 				COLOR_NEWS 								0xEFC6FF00
#define 				COLOR_DARKGREEN							0x085E14FF
#define 				COLOR_Grove 							0x57CC1300
#define 				COLOR_Vagos 							0xFF970000
#define 	            COLOR_NEWSRP 							0xFFA500AA
#define 				COLOR_GRAD1 							0xB4B5B7FF
#define 				COLOR_ADMCHAT 							0xFFC266AA
#define 				COLOR_ADMIN 							0xCC6633FF
#define 				COLOR_ADMCOMMANDS						0xFFC000FF
#define					COLOR_DARKPINK      					0xFF80C0C8
#define 				COLOR_ERROR    							0xFF0000FF
#define 				COLOR_RED2          					0xFF0000FF
#define 				COLOR_ULTRARED 							0xFF0000FF
#define 				COLOR_BLACK 							0x000000AA
#define 				COLOR_SI 								0x66FF9900
#define                 COLOR_IN                                0x20d9d3d3
#define					COLOR_SMS								0xD5EAFFFF
#define 				TEAM_GROVE_COLOR 						0x00D900C8
#define 				COLOR_LIGHTBLUE 						0x33CCFFAA
#define 				COLOR_REPORT 							0xAA0000FF
#define 				COLOR_LIGHTGREEN 						0x9ACD32AA
#define                 COLOR_GROUP                             0x01FCFFC8
#define 				COLOR_YELLOW 							0xFFFF0000
#define 				COLOR_YELLOW_3D 						0xFFFF00FF
#define 				COLOR_RED 								0xE6000000
#define 				COLOR_WHITE 							0xFFFFFF00
#define 				COLOR_RACEMESSAGE						0xF08C0AFF
#define 				COLOR_SOLID_WHITE 						0xFFFFFFFF
#define 				COLOR_ALLDEPT 							0xff353535
#define 				COLOR_LIGHT								0xAFD9FAFF
#define 				COLOR_GREY 								0xCECECEFF
#define                 COLOR_ASKQ                              0xFF0000FF
#define 				COLOR_PURPLE 							0xC2A2DAAA
#define                 COLOR_LIGHTRED                          0xFF6347AA
#define 				COLOR_NICESKY 							0x00C2ECFF
#define 				COLOR_GREEN 							0x00FF00AA
#define                 COLOR_TEAL                              0x67AAB1FF
#define 				COLOR_DCHAT		 						0xFFD7004A
#define                 COLOR_CHATBUBBLE						0xFFFFFFCC
#define                 COLOR_NEWBIE							0xBED9EFFF
#define                 COLOR_RADIOCHAT                         0x8D8DFFFF
#define 				COLOR_BID								0x433D75FF
#define 				COLOR_LIGHT_BID							0x877AC8FF
#define                 COLOR_GENANNOUNCE                   	0xA9C4E4FF
#define					COLOR_COOLBLUE							0x0064FFAA
#define 				COLOR_HOTORANGE 						0xF97804FF
#define 				COLOR_STAFF								0xcef0acac
#define 				COLOR_NOB								0x9dfe8080
#define 				COLOR_MAYOR 							0xB3F856FF
#define 				COLOR_FRED 								0xFF0000C8
#define					COLOR_ATTACK 							0x4dad2b2b
#define                 COLOR_GOV                               0x1732e8e8
#define                 COLOR_IN2                               0xe7aaa5a5
#define                 COLOR_HIT                               0x1732e8e8
#define 				TEAM_AZTECAS_COLOR 						0x01FCFFC8
#define 				COLOR_DBLUE 							0x2641FEAA
#define 				COLOR_BLUE 								0x2641FEAA
#define 				COLOR_GRAD6 							0xF0F0F0FF
#define 				COLOR_GRAD2 							0xBFC0C2FF
#define 				COLOR_AFK 								0xAFAFAFAA
#define 				COLOR_GROVE 							0x00E800FF
#define 				COLOR_RussianMafia 						0x4F4F4FFF

#define 				FACTION_COLOR_1							0x0064FF00
#define 				FACTION_COLOR_2 						0xFFFF0000
#define 				FACTION_COLOR_3							0xFF634700
#define 				FACTION_COLOR_4							0x66FF9900
#define 				FACTION_COLOR_5							0x6A5ACD00
#define 				FACTION_COLOR_6							0x7FFFD400
#define 				FACTION_COLOR_7							0xE6000000
#define 				FACTION_COLOR_8							0xA52A2A00
#define 				FACTION_COLOR_10						0x4111b000
#define 				FACTION_COLOR_11						0x00640000
#define 				FACTION_COLOR_12						0xFF970000
#define 				FACTION_COLOR_13						0xA5443B00
#define 				FACTION_COLOR_14						0xEFC6FF00
#define 				FACTION_COLOR_15						0x4F4F4F00

#define 				FACTION_SOLID_COLOR_1					0x0064FFFF
#define 				FACTION_SOLID_COLOR_2 					0xFFFF00FF
#define 				FACTION_SOLID_COLOR_3					0xFF6347FF
#define 				FACTION_SOLID_COLOR_4					0x66FF99FF
#define 				FACTION_SOLID_COLOR_5					0x6A5ACDFF
#define 				FACTION_SOLID_COLOR_6					0x7FFFD4FF
#define 				FACTION_SOLID_COLOR_7					0xE60000FF
#define 				FACTION_SOLID_COLOR_8					0xA52A2AFF
#define 				FACTION_SOLID_COLOR_10					0x4111b0FF
#define 				FACTION_SOLID_COLOR_11					0x006400FF
#define 				FACTION_SOLID_COLOR_12					0xFF9700FF
#define 				FACTION_SOLID_COLOR_13					0xA5443BFF
#define 				FACTION_SOLID_COLOR_14					0xEFC6FFFF
#define 				FACTION_SOLID_COLOR_15					0x4F4F4FFF

// < Define player's iterators >

#define premium_p 1
#define vip_p 2
#define MAX_PREMIUM 3	

new 
	Iterator:server_admins<MAX_PLAYERS>,
	Iterator:server_managers<MAX_PLAYERS>,
	Iterator:Staff<MAX_PLAYERS>,
	Iterator:server_helpers<MAX_PLAYERS>,
	Iterator:Racers<MAX_PLAYERS>,
	Iterator:server_reporters<MAX_PLAYERS>,
	Iterator:server_instructors<MAX_PLAYERS>,
	Iterator:server_leaders<MAX_PLAYERS>,
	Iterator:server_wanteds<MAX_PLAYERS>,
	Iterator:playersStream[MAX_PLAYERS]<MAX_PLAYERS>,
	Iterator:vehiclePlayerStream[MAX_VEHICLES]<MAX_PLAYERS>,
	Iterator:playerJobs[MAX_JOBS]<MAX_PLAYERS>,
	Iterator:playerClans[MAX_CLANS]<MAX_PLAYERS>,
	Iterator:server_reports<MAX_PLAYERS>,
	Iterator:playerPaint[MAX_PAINT]<MAX_PLAYERS>,
	Iterator:playerRenters[MAX_HOUSES]<MAX_PLAYERS>,
	Iterator:Departments<MAX_PLAYERS>,
	Iterator:playerFaction[MAX_FACTIONS]<MAX_PLAYERS>,
	Iterator:playerFreq[FREQUENCY_MAX_PL_PERCENT_ALLOWED]<MAX_PLAYERS>,
	Iterator:normalPlayers<MAX_PLAYERS>,
	Iterator:server_newbies<MAX_PLAYERS>,
	Iterator:server_contracts<MAX_PLAYERS>,
	Iterator:playerTurfs<MAX_PLAYERS>,
	Iterator:premiumPlayers[MAX_PREMIUM]<MAX_PLAYERS>,
	Iterator:livePlayers[MAX_PLAYERS]<MAX_PLAYERS>,
	Iterator:getDriverEarnings[MAX_PLAYERS]<MAX_PLAYERS>,
	Iterator:playerUber[MAX_PLAYERS]<MAX_PLAYERS>,
	Iterator:playerFinds[MAX_PLAYERS]<MAX_PLAYERS>,
	Iterator:playerSpec[MAX_PLAYERS]<MAX_PLAYERS>,
	Iterator:ServerSpawnCars<MAX_VEHICLES>,
	Iterator:desyncPlayers<MAX_PLAYERS>,
	Iterator:playerWithHud<MAX_PLAYERS>
;

#if defined HEIST_SYSTEM
	new Iterator:Heists[MAX_PLAYERS]<MAX_PLAYERS>;
#endif

// < > // 

new mechanics;

// < Define server's variables >
new
	#if defined EVENT_CALENDAR
	Iterator:ServerEvents<MAX_EVENTS>,
	#endif
	#if defined OBJECT_QUEST
	Iterator:QuestObjects<MAX_QUESTOBJ>,
	#endif
	Iterator:ServerClans<MAX_CLANS>,
	Iterator:ServerATMS<MAX_ATMS>,
	Iterator:ServerJobs<MAX_JOBS>,
	Iterator:ServerHouses<MAX_HOUSES>,
	Iterator:ServerBusiness<MAX_BUSINESS>,
	Iterator:ServerVehicles<MAX_SVEHICLES>,
	#if defined HEIST_SYSTEM
	Iterator:ServerHeists<MAX_HEISTS>,
	#endif
	Iterator:ServerTurfs<MAX_TURFS>,
	Iterator:ServerFactions<MAX_FACTIONS>
;


// < Load TextDraws >
new 
    PlayerText:PLAYER_TD[ 11 ],
	PlayerText:WAR_TD[ 3 ],
	PlayerText:CLOCK_TD[ 2 ],
	PlayerText:JOB_TD[ 5 ],
	PlayerText:SPECTATE_TD,
	PlayerText:SERVER_TD[ 6 ],
	PlayerText:GETGIFT_TD[ 5 ],
	PlayerText:PIN_TD[ 14 ],
	PlayerText:TUT_TD[ 2 ],
	PlayerText:FIND_TD,
	PlayerText:MINIGAME_TD,
	PlayerText: CeasPTD, 
	PlayerText:ticks_td,
	Text: CeasTD,
	Text: REPORT_TD;

new Float:PlayerVelocCheck[MAX_PLAYERS][3],
	selection_skinlist = mS_INVALID_LISTID,
	targetVehicleID[MAX_PLAYERS],
	selection_hatslist = mS_INVALID_LISTID,
	selection_glasseslist = mS_INVALID_LISTID,
	selection_rentcars = mS_INVALID_LISTID,
	ActorHandsup[ MAX_ACTORS ],
	ROB_SAFE[ 5 ],
	GOLD_SAFE[ 34 ],
	Text3D:ROB_SAFE_3D,
	ROB_SAFE_HEALTH = 100,
	Actor_Rob[ 3 ],
	#if defined CRATES
	CrateSkinSaves[MAX_PLAYERS],
	alreadyOwn[MAX_PLAYERS],
	#endif
	#if defined HEIST_SYSTEM
	Mike, Mike2, Mike3, Leader, Player1, Player2, Player3,
	#endif
	engine, lights, alarm, doors, bonnet, boot, objective,
	LSPD_GATE[ 2 ],
	NR_GATE[ 2 ],
	Server_Zone[ 10 ],
	#if defined PET
	Text3D: PetText[MAX_PLAYERS],
	#endif
	Spawn_Zone[ 3 ],
	HealthDrop[ MAX_PLAYERS ],
	WeaponDrop[ MAX_PLAYERS ][ 14 ],
	WeaponData[ MAX_PLAYERS ][ 14 ][ 2 ],
	WeaponSystem[ MAX_PLAYERS ][ 47 ],
	forbidWords[ 100 ][ 32 ];

// < Enums >
enum LIST_ANTIFLOOD
{
	lastCheck,
	floodRate
}
enum playerEnum
{
	pKey,
	pFirstSpawn,
	pAdminLevel,
	pManager,
	pAdminDuty,
	pHelper,
	pHelperDuty,
	pHelperTokens,
	pHelperColor,
	pRadarON,
	pAdminColor,
	pRentAP,
	pSpamCheck2,
	pSpamCheck,
	Float:pAP_POS[3],
	pNewbieRequesting,
	pNewbieTime,
	pFirstPress,
	pTimePlayed,
	pPlayerInMod,
	pHelpedPlayers,
	pNewbieQuestion,
	pAdminReports,
	pBlocked,
	pLevel,
	pPaintball,
	FK_DEATHSPAM,
	E_FK_DEATHSPAM,
	pPaintKills,
	pWeaponTimer,
	pPaintDeaths,
	pCity,
	pAFKHits,
	pRadarZone,
	pQuestTimer,
	pPaydayStatus,
	pRaceArena,
	pSpeedBoost,
	pRaceArenaCP,
	pRaceArenaSeconds,
	pPaintBall,
	pPaintBallKills,
	pPaintBallDeaths,
	pPaintBallLevel,
	pChatTime,
	pCMDTime,
	pSpectatingFaction,
	pSpectating,
	pSpecInterior,
	pSpecVirtual,
	pSpecMode,
	pSpectatedBy,
	pReferral,
	pReferralString,
	pRP,
	pAdTime,
	pArrests,
	pRobs,
	pRobPoints,
	pRaceVotedVehicle,
	pRaceVotedVehicleID,
	pRaceVotedMap,
	pRaceVotedType,
	pFreePoints,
	pRobSlots,
	pRobPlayers,
	pRobStatus,
	pRobTime,
	pWarnings,
	pMuted,
	pRMuted,
	pNMuted,
	pFreezed,
	pPayday,
	pSex,
	pGasCan,
	pBonusTaken,
	pPlayTime,
	pGiftBoxTime,
	pAFKTime,
	pAFKTimeNow,
	pTurfs,
	pFly,
	pEnterTime,
	pSpawned,
	pSaveTime,
	pPhone,
	pPhoneLast,
	pPhoneNumber,
	pPhoneCredit,
	pPhoneStatus,
	pPhoneBook,
	pPhoneCall,
	pGamblingSkill,
	pGamblingNextLevel,
	pReportAccepted,
	pReported,
	pReportedID,
	pReportType,
	pReportTimer,
	pFailLogin,
	pHeadValue,
	pYoutuber,
	pHeadTaken,
	pHeadChasing,
	pHeadChased,
	pUndercover,
	pMoney,
	pMaterials,
	pFireworks,
	pJobHype,
	pDrugs,
	pUseDrugs,
	pUsingDrugs,
	pBankMoney,
	pHiddenColors,
	pPremium,
	pPremiumPoints,
	pPremiumColor,
	pVIP,
	pFaction,
	pFactionLeader,
	pFactionWar,
	pFactionWarKills,
	pFactionWarDeaths,
	pFactionWarSeconds,
	pFactionRank,
	pFactionDays,
	pFactionLW,
	pFactionRunners,
	pFactionTickets,
	pFactionDrugs,
	pFactionLicenses,
	pFactionDepositedMoney,
	pFactionDepositedDrugs,
	pFactionDepositedMats,
	pFactionMatsUsed,
	pFactionOrders,
	pFactionLicensesGiven,
	pFactionPatients,
	pFactionContracts,
	pFactionNews,
	pFactionFreeNews,
	pFactionLives,
	pFactionSessionStatus,
	pFactionNewsSessions,
	pSelected,
	pTakingLive,
	pLiveOffer,
	pLiveMoney,
	bool:pLiveStatus,
	pFP,
	pFW,
	pJob,
	pJobValue,
	pJobValue2,
	pFishing,
	pFishes,
	pFishesValue,
	pJobTimer,
	pClan,
	pClanRank,
	pClanDays,
	pClanWarns,
	pClanTag,
	pSelectClanKey,
	pSelectRank,
	pSelectFriend,
	pHouse,
	pRentRoom,
	pBusiness,
	pLastBusiness,
	GET_AREA_BIZZ,
	GET_AREA_HOUSE,
	GET_AREA_FACTION,
	GET_AREA_TELES,
	GET_AREA_JOBS,
	GET_AREA_APARTMENT,
	pLastBusinessTimer,
	VehicleSlot,
	pFaggioVehicle,
	pDamageTax,
	pSweeperCP,
	pTransporterCP,
	pGarbageCP,
	pJobLastCP,
	pDMVCP,
	pTakeExam,
	pTakeFaggio,
	pMedicCall,
	pMedicAccept,
	pMedicClient,
	pTaxiCall,
	pTaxiClient,
	pTaxiAccept,
	pTaxiDriver,
	pTaxiValue,
	pTaxiCost,
	pMechanicCall,
	pMechanicAccept,
	pMechanicClient,
	pRefillOffer,
	pRefillPrice,
	pRepairOffer,
	pRepairPrice,
	pDiceOffer,
	pDiceOffer2,
	pDiceTotal,
	pDicePrice,
	pFreeOffer,
	pFreePrice,
	pDoingJob,
	pVSlots,
	pSkin,
	pPrisonTime,
	pPrisonTimer,
	pCrimes,
	pWanted,
	pWantedTime,
	pFreezeType,
	pFindPlayer,
	pFindPlayerTimer,
	pGunLicense,
	pCarLicense,
	pFlyLicense,
	pBoatLicense,
	pOnDuty,
	pCarSelected,
	pFarmerTime,
	pFarmerTimer,
	pTotalEarnings,
	vSpeed,
	pCP,
	pRCP,
	pRandomCP,
	pDrunkLevelLast,
	pFPS,
	pLoopingAnim,
	pKillerID,
	pKillerID2,
	pKillerTime,
	pWTalkie,
	pNotifications,
	pSpawnType,
	pLastWeaponID,
	pPlayerTimer,
	pBackTimer,
	pBackTimer2,
	pAFKPosTimer,
	pTempPINCount,
	pPINStatus,
	pPizzaBoxes,
	pHat,
	pGlasses,
	pCarRent,
	pSpawnChoose,
	pBot,
	pWTalkieFRQ,
	pWTalkieStatus,
	bool:pHatStatus,
	bool:pGlassesStatus,
	bool:pTeleport,
	bool:pSpawnedTimer,
	bool:pKicked,
	bool:pSeatBelt,
	bool:pHelmet,
	bool:pLogged,
	bool:pSleeping,
	bool:pFirstNormalSpawn,
	bool:pRaceArenaLeaving,
	bool:pPaintBallVotedMap,
	bool:pPaintBallVotedWeapon,
	bool:pRaceVoted,
	Float:DistanceGPS,
	Float:OldPos[ 3 ],
	Float:pTPos[ 3 ],
	Float:pAFKPosNew[ 3 ],
	Float:pAFKPosOld[ 3 ],
	Float:pTaxiDistance,
	Float:pSpecPosition[ 3 ],
	Float:pSpecHealth,
	Float:pSpecArmour,
	pPaintBallLeaving,
#if defined HEIST_SYSTEM
	pHeistKey,
	pHeistOwner,
	pHeistStatus,
	pHeistBizz,
	pHeistVehicle,
	pHeist[5],
	pHeistCount,
#endif
	pTempPIN[ 129 ],
	pPIN[ 129 ],
	pIPAddress[ 24 ],
	pDice[ 2 ],
	pHud[ 10 ],
	pTog[ 12 ],
	pQuest[ 2 ],
	pQuestValue[ 2 ],
	pQuestProgress[ 2 ],
	pCheating[ 13 ],
	Vehicle[ MAX_SLOTS ],
	pCrimeReason[ 128 ],
	pNewbieRequest[ 64 ],
	pNormalName[ MAX_PLAYER_NAME ],
	pEMail[ 32 ],
	pAddress[ 64 ],
	pSerial[ 128 ],
	pReportMessage[ 128 ],
	pChatText[ 256 ],
	VehicleLock[ 32 ],
	pAdString[ 256 ],
	pSelectClanName[ 32 ],
	pCheatingReason[ 64 ],
	pQuestObjects[ 128 ],
	pLocationGPS[ 64 ],
	pJobVehicle[ 2 ],
	jSkill[ MAX_JOBS ],
	jSkillPoints[ MAX_JOBS ],
	pQuestObject[ MAX_QUESTOBJ ],
	pQuestObjectPickup[ MAX_QUESTOBJ ],
	Text3D:pWantedText,
#if defined CRATES
	pCrates,
	pCrateEnding,
	pCrateTimer,
	pCrateSkins[10],
	pCrateSkinAmount[10],
#endif
#if defined UBERSYS
	pUberAccepted,
	pUberCalled,
	pUberOnClient,
	pUberOnWork,
	pUberPrice,
	pUberFinalCost,
	Float:pUberDistance,
#endif
#if defined PET
	pPet,
	pPetStatus,
	pPetLevel,
	pPetID,
	pPetType[5],
	pPetPoints,
	pPetName[32],
#endif

};

// < others > // 
static const MONTH_NAMES[12][] = {
	"Jan", "Feb", "Mar", "Apr", "Mai", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
};

new server_admins,
	server_helpers,
	server_managers,
	server_leaders,
	server_reports,
	server_reporters,
	server_instructors,
	server_players,
	server_houses,
	server_bussines,
	server_vehicles,
	server_wanteds,
	server_newbies,
	server_contracts;

//rRace System
/*static Float:Kabul_Race[ 22 ][ 3 ] = 
{
	{3666.364257, 1847.581787, 13.770917}, {3713.930175, 1938.693481, 13.769132}, {3791.901611, 2014.597167, 22.030101},
	{3881.900878, 2010.285400, 21.989562}, {3902.477539, 1935.510986, 21.993768}, {3848.807128, 1868.911254, 21.993837},
	{3780.222656, 1749.931030, 13.737993}, {3832.394531, 1704.672241, 13.738694}, {3878.017333, 1623.562866, 13.408140},
	{3941.538330, 1553.759033, 25.481302}, {3936.563476, 1479.993774, 25.415481}, {3858.969726, 1463.122192, 28.909181},
	{3806.164306, 1483.412231, 40.119785}, {3777.291015, 1545.192871, 43.093471}, {3784.681152, 1607.014648, 42.198482},
	{3752.728515, 1667.886596, 41.583446}, {3697.291748, 1661.659912, 41.579895}, {3695.541748, 1661.256591, 41.580268},
	{3662.544921, 1706.362670, 37.015842}, {3664.970458, 1751.741455, 19.448253}, {3667.419433, 1815.492065, 13.767546},
};*/

static Float:Cars_Races[][4] =
{
	{1435.0112, 1248.1558, 10.5486, 358.5080},		//Airport_Race [1] 
	{1428.3883, 1248.1473, 10.5634, 358.1997},		//Airport_Race [1]
	{1441.5115, 1248.1748, 10.5642, 358.5681},		//Airport_Race [1]
	{-1978.6871, -2803.6077, 3.3947, 99.6452}, 		//Beach_Race [2]
	{-1976.1509, -2811.3813, 3.1128, 100.002},	 	//Beach_Race [2]
	{-1973.7004, -2819.7815, 3.4576, 98.8016}, 		//Beach_Race [2]
	{-2374.8186,-2263.2222,14.7957,294.91210}, 		//Chilliad_Race [3]
	{-2370.4099,-2272.0171,15.0865,327.23330},	 	//Chilliad_Race [3]
	{-2372.7429,-2267.1357,15.0813,293.83580}, 		//Chilliad_Race [3]
	{345.1461, -99.92940, 1.08050, 270.29130}, 		//Hard_Race [4]
	{345.3925, -96.63440, 1.08390, 269.28430}, 		//Hard_Race [4]
	{345.2259, -93.48550, 1.09020, 269.71900} 		//Hard_Race [4]
};

static Float:Airport_Race[][3] = //PRIMA CURSA [1]
{
	{1431.8304, 1344.8613, 10.5586}, {1433.2665, 1452.1180, 10.5474}, {1566.8260, 1582.2185, 10.5474}, 
	{1706.4091, 1606.8059, 9.79920}, {1717.7596, 1710.9010, 10.7413}, {1567.4181, 1748.4669, 10.4592}, 
	{1340.1095, 1873.5367, 10.3989}, {1227.8711, 1637.3779, 6.46140}, {1206.6873, 1193.2703, 6.53960}, 
	{1374.2900, 840.88920, 6.54710}, {1781.0212, 834.51350, 10.3989}, {1797.3607, 1044.3048, 6.43120}, 
	{1789.0034, 1456.9305, 6.46520}, {1750.7521, 1635.1351, 8.28200}, {1703.9229, 1607.7738, 9.92820}, 
	{1477.6093, 1578.3810, 10.5395}, {1427.7354, 1730.3400, 10.5474}, {1388.7345, 1548.5510, 10.5396}, 
	{1432.6527, 1260.5432, 10.5474}, {1608.9603, 1641.0607, 10.5474}
};

static Float:Beach_Race[][3] = //A DOUA CURSA [2]
{
	{-2054.580322, -2822.356933, 2.923270}, {-2100.949707, -2819.369873, 2.914880}, {-2155.126953, -2834.715576, 0.718553},
	{-2190.471923, -2820.147949, 2.624536}, {-2234.326660, -2811.492919, 4.960860}, {-2283.518554, -2795.109863, 16.945123},
	{-2314.068847, -2792.549072, 10.896131}, {-2387.078125, -2791.579101, 4.643362}, {-2505.445800, -2755.059570, 10.299550},
	{-2550.908203, -2737.425537, 8.310360}, {-2601.317871, -2700.318603, 11.673904}, {-2611.781738, -2665.479980, 11.197258},
	{-2627.523437, -2625.502929, 4.583506}, {-2630.540527, -2588.906494, 3.208372}, {-2641.269775, -2547.755859, 3.099204},
	{-2661.262939, -2506.570556, 11.269327}, {-2674.101074, -2455.485595, 5.388269}, {-2730.552246, -2342.098632, 10.703293},
	{-2719.582275, -2296.574951, 13.642421}, {-2671.282958, -2242.983642, 4.697881}, {-2621.767333, -2234.752929, 18.967466},
	{-2595.915771, -2259.025634, 19.838047}, {-2563.073486, -2295.538818, 13.724998}
};

static Float:Chilliad_Race[][3] = //A TREIA CURSA [3]
{
	{-2347.410644, -2231.172119, 20.972846}, {-2336.418701, -2185.899414, 34.357540}, {-2289.307861, -2156.256347, 47.889091},
	{-2288.544433, -2155.850097, 48.144763}, {-2241.581542, -2123.238769, 65.037162}, {-2197.959472, -2079.206787, 80.403144},
	{-2160.017333, -2034.509277, 92.303466}, {-2135.429199, -1992.776000, 96.118911}, {-2114.713134, -1938.073608, 100.749626},
	{-2101.288330, -1891.641357, 109.758895}, {-2118.871093, -1892.648437, 111.992324}, {-2119.017333, -1892.842041, 112.034301},
	{-2139.745605, -1939.764648, 117.011756}, {-2158.227294, -1979.365478, 118.214256}, {-2191.692138, -2013.676757, 119.103767},
	{-2223.912353, -2051.747802, 119.548782}, {-2268.338867, -2079.009765, 118.893676}, {-2330.379394, -2098.070556, 114.127914},
	{-2383.499267, -2098.543457, 116.536186}, {-2435.092529, -2086.219970, 123.653251}, {-2471.897705, -2064.468750, 135.922256},
	{-2487.323486, -2041.074096, 147.955001}, {-2521.228027, -1980.329589, 171.222457}, {-2555.520507, -1924.040527, 188.864379},
	{-2584.020019, -1886.539550, 201.016433}, {-2613.597167, -1853.810180, 211.778686}, {-2651.292480, -1779.164794, 239.095458},
	{-2643.511718, -1730.161621, 258.547424}, {-2620.521484, -1764.287109, 260.897888}, {-2592.169677, -1812.195678, 265.814727},
	{-2565.513427, -1850.263427, 279.916656}, {-2515.663818, -1883.521972, 297.897338}, {-2548.806640, -1834.148071, 312.047821},
	{-2590.726806, -1778.336181, 318.826416}, {-2602.490722, -1715.767578, 324.645446}, {-2600.121093, -1652.203735, 339.794311},
	{-2588.160400, -1625.744628, 344.407562}, {-2585.190917, -1670.636718, 351.873931}, {-2580.638916, -1741.944458, 349.446533},
	{-2543.932128, -1799.410766, 373.117858}, {-2535.011962, -1779.784423, 379.600402}, {-2561.457275, -1727.980590, 387.723114},
	{-2553.415771, -1669.394409, 399.035217}, {-2530.683105, -1682.894531, 401.214813}, {-2518.824218, -1726.385009, 401.807617},
	{-2500.650878, -1768.822509, 402.423431}, {-2449.259033, -1811.016601, 409.418457}, {-2439.964843, -1786.324218, 413.646850},
	{-2459.103027, -1735.911987, 426.492950}, {-2459.234130, -1734.987670, 426.731842}, {-2428.237060, -1735.613281, 433.481536},
	{-2363.588623, -1813.082153, 431.738403}, {-2312.482910, -1802.261474, 440.381134}, {-2284.976318, -1754.325561, 458.351715}

};

static Float:Hard_Race[][3] = //A PATRA CURSA [4]
{
	{387.621124, -65.120643, 2.989674}, {425.611633, 7.250640, 6.885860}, {471.426239, 39.120658, 15.077836}, {508.006439, 51.709911, 20.339756}, 
	{527.553283, 5.810519, 24.539495}, {558.643737, -24.132801, 26.832138}, {597.554260, -69.218315, 19.825782}, 
	{659.751831, -59.652702, 18.776214}, {711.480895, -1.750968, 34.225612}, {769.906738, 23.051305, 57.411323}, 
	{832.772644, 34.742477, 81.748550}, {894.497375, 8.913370, 91.707405}, {954.234313, -14.958735, 91.882690}, 
	{955.940979, -14.988803, 91.940147}, {1038.088378, -0.221599, 86.098251}, {1084.116088, 2.254045, 72.303649}, 
	{1147.181396, 25.897226, 53.755741}, {1221.840332, 67.784202, 24.358621}, {1234.503051, 86.757667, 21.999610}, 
	{1201.401977, 121.075981, 22.583679}, {1111.249389, 138.754867, 31.229890}, {1016.149902, 154.437988, 29.084995}, 
	{928.114013, 190.083557, 35.012279}, {895.469970, 243.035400, 27.990537}, {853.300292, 267.770874, 20.693122}, 
	{818.592407, 258.971588, 28.666637}, {791.606506, 222.556701, 35.736129}, {732.007141, 216.271987, 27.027488}, 
	{664.959472, 221.575729, 24.976333}, {620.276306, 214.692382, 23.118263}, {538.408142, 151.468353, 25.658843}, 
	{530.269592, 4.797755, 24.505130}, {529.570922, -77.871131, 35.391235}, {499.854370, -180.888229, 37.019584}, 
	{469.573822, -197.571853, 24.565227}, {414.765350, -241.854171, 5.934898}, {362.548461, -270.953826, 2.817980}, 
	{308.577453, -309.864685, 5.880296}, {216.033325, -353.255981, 4.866135}, {333.278320, -390.574127, 13.153599}, 
	{368.230895, -415.787994, 23.803163}, {427.115570, -553.649841, 41.444297}, {414.520782, -630.591247, 32.424503}, 
	{434.638061, -671.035400, 25.206693}, {433.123840, -696.085266, 24.637622}, {475.620452, -690.618408, 21.492433}, 
	{577.683776, -756.454833, 25.465286}, {616.270141, -815.294494, 22.545059}, {650.787902, -930.783142, 44.486183}, 
	{674.639770, -967.682617, 51.843311}, {631.349365, -979.519226, 64.313461}, {606.322204, -967.338073, 78.274208}, 
	{576.619934, -961.996643, 85.613006}, {512.606872, -967.259399, 83.473724}, {511.315643, -967.462341, 83.653861}, 
	{482.835784, -970.839233, 78.085052}, {444.908569, -983.661071, 78.632881}, {367.197296, -1003.927368, 90.694396}, 
	{307.389129, -992.870788, 68.296783}, {215.105361, - 945.052185, 32.967838}, {213.649673, -944.326110, 32.841522}, 
	{162.824279, -898.671630, 19.613681}, {111.176864, -857.989562, 20.975248}, {25.943820, -841.124938, 15.711591}, 
	{-25.614076, -831.013183, 12.568605}, {-64.917442, -872.199218, 14.966272}, {-89.889999, -923.184265, 19.147779}, 
	{-122.341789, -973.174255, 25.746183}, {-150.350555, -974.828430, 27.975435}, {-208.508956, -1003.091308, 16.409475}, 
	{-277.186737, -1044.452026, 39.805301}, {-314.322692, -1081.230590, 52.157463}, {-362.506622, -1112.415283, 69.813255}, 
	{-383.153747, -1099.334838, 66.221923}, {-428.212890, -1053.441650, 52.207740}, {-465.315521, -998.721679, 26.611907}, 
	{-497.735321, -1021.355773, 24.884668}, {-547.197509, -1030.447631, 24.526960}, {-581.252258, -1098.031372, 23.929218}, 
	{-576.250671, -1154.157226, 22.562189}, {-671.092468, -1257.838623, 33.759220}, {-706.029296, -1262.671630, 58.738227}, 
	{-746.481506, -1270.502319, 69.419723}, {-781.438171, -1272.752685, 77.477073}, {-825.634460, -1285.789550, 78.636589}, 
	{-838.921020, -1368.122436, 88.431449}, {-854.761291, -1422.851562, 94.241477}, {-907.474792, -1488.056152, 95.527709}, 
	{-975.365234, -1500.297729, 86.030952}, {-1038.012573, -1517.074584, 76.202819}, {-1125.222412, -1612.252563, 76.719650}, 
	{-1151.923706, -1667.031005, 82.779823}, {-1159.457275, -1720.687255, 102.212547}, {-1146.151611, -1775.308837, 118.209197}, 
	{-1152.536743, -1802.489379, 105.665077}, {-1198.949829, -1864.424560, 71.422317}, {-1198.975830, -1847.941162, 66.106239}, 
	{-1203.041870, -1804.601196, 52.890720}, {-1266.045166, -1729.997192, 46.456745}, {-1310.237548, -1631.367431, 52.511112} 
};

enum raceSystemEnum
{
	rTotalCP,
	BestRacerTime,

	rName[40],

	BestRacer[30],
	BestRacerDateTime[40]
}
enum vehicleEnum
{
	vKey,
	vJob,
	vFaction
};
enum serverEnum
{
	Float:VehicleGas[ MAX_VEHICLES ],
	VehicleRadio[ MAX_VEHICLES ],
	GPS_Timer[ MAX_PLAYERS ],
	ServerTimers[10],
	GiftBoxStatus,
	GiftBoxObject,
	respawnVehicles,
	maxConnections,
	currentBID,
	currentBIDTimer,
	currentBIDPlayer,
	VehicleOwnerHeist[ MAX_VEHICLES ],
	calendarStatus,
	forbidWordsCount,
	rob_players,
	bool:BonusStatus,
	bool:gateNRStatus[ 2 ],
	bool:gateLSPDStatus[ 2 ],
	Text3D:GiftBoxText,
	Float:GiftBoxPos[ 4 ],
	// < jobs workers > // 
	workers_fisher,
	workers_pilot,
	workers_pizza,
	workers_farmer,
	workers_trucker,
	workers_mechanic,
	workers_sweeper,
	workers_garbage,
	workers_transporter,
	// < other counts > //
	other_count_ads,
	other_helpers_duty
};
enum paintEnum
{
	paintArena,
	paintTimer,
	paintStatus,
	paintMode,
	paintPlayers,
	paintWeaponSet,
	paintVoteMap[ 4 ],
	paintVoteWeapon[ 3 ],
	paintString[ 128 ]
};
enum raceEnum
{
	raceTimer,
	raceTimerPreparate,
	raceStatus,
	raceVoting,
	noonevoted1,
	noonevoted2,
	noonevoted3,
	racePlayers,
	Text3D:raceText[MAX_PLAYERS],
	raceString[ 128 ],
	raceStarted,

	raceTrack,
	raceVehicle,
	raceVehicleID[4],
	raceVehicleIDE,
	raceType,

	PositionRaceFinish,

	raceVoteTrack[4],
	raceVoteType[2],
	raceVoteVehicle[6]
};
enum actionEnum
{
	actionType,
	actionValue,
	actionPlayerKey,
	actionPlayer[ 64 ],
	actionComplaint,
	actionTicket,
	actionAdmin[ 32 ],
	actionAdminKey,
	actionReason[ 64 ]
}
enum personalvehicle
{
	Vehicle,
	VehicleID,
	VehicleModelID,
	VehicleSlot,
	VehicleStatus,
	VehicleVIP,
	VehicleOwner,
	VehicleOwnerID,
	VehicleLocked,
	VehiclePaintJobs,
	VehicleInsurance,
	VehicleInsurancePoints,
	VehicleTimer,
	VehicleAge,
	VehicleVIPWheel,
	VehicleVIPNeon,
	Money,
	PP,
	bool:Sold,
	Float:VehicleHealth,
	Float:VehicleFuel,
	Float:Position[ 3 ],
	Float:Rotation,
	Float:VehicleOdometter,
	VehicleDamage[ 128 ],
	VehicleVIPText[ 21 ],
	vehicleVIPColor[ 12 ],
	VehicleDamageStatus[ 4 ],
	VehicleMods[ 13 ],
	VehicleColor[ 2 ],
	VehiclePlate[ 16 ]
};

enum e_pickups
{
	house_pickups,
	bizz_pickups,
	faction_pickups,
	tele_pickups,
	tele_pickupss,
	jobs_pickups,
	apartments_pickups
};
new pickupInfo[MAX_PICKUPS][e_pickups];

// < Variables )
new returnString[1024];
new g_Handle,
	#if defined VERSION_HOST
	Socket:g_Socket, // BlueG Socket Plugin
	panelActions[ actionEnum ],
	#endif
	playerVariables[ MAX_PLAYERS+1 ][ playerEnum ],
	AntiFlood_Data[ MAX_PLAYERS ][ LIST_ANTIFLOOD ],
	raceSystem[ MAX_RACES ][ raceSystemEnum ],
	//vehicleVariables[ MAX_VEHICLES ][ vehicleEnum ],
	vehicleVariables[ MAX_SLOTS ][ MAX_PLAYERS ][ personalvehicle ],
	paintballVariables[ MAX_PAINT ][ paintEnum ],
	raceVariables[ raceEnum ],
	FNCCount[MAX_PLAYERS],
	FNCBY[MAX_PLAYERS],
	raceCar[MAX_PLAYERS],
	serverVariables[ serverEnum ];

new gsString[ 1536 ],
	radioString[ 1024 ],
	gpString[ 2048 ],
	svString[ 2048 ],
	svQuery[ 2048 ],
	saveQuery[ 4150 ],
	gsBigString[ 2048 ],
	gsQuery[ 2048 ],
	status_string[ 56 ];
/*
stock SetPlayerPosEx( playerid, Float:x, Float:y, Float:z )
{
	playerVariables[ playerid ][ pTeleport ] = true;
	SetPlayerPos( playerid, x, y, z );
	return true;
}
*/
#if defined ANTI_CHEAT
	#include "nex-ac"
#endif
stock SetPlayerPosEx( playerid, Float:x, Float:y, Float:z )
{
	playerVariables[ playerid ][ pTeleport ] = true;
	SetPlayerPos( playerid, x, y, z );
	return true;
}

stock username(playerid)
{
	new name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, name, sizeof name);
	return name;
}

#if defined _ALS_SetPlayerPos
	#undef SetPlayerPos
#else
	#define _ALS_SetPlayerPos
#endif
#define SetPlayerPos SetPlayerPosEx

stock PutPlayerInVehicleEx(playerid, vehicleid, seatid)
{
	PutPlayerInVehicle(playerid, vehicleid, seatid);
	return true;
}

#if defined _ALS_PutPlayerInVehicle
	#undef PutPlayerInVehicle
#else
	#define _ALS_PutPlayerInVehicle
#endif
#define PutPlayerInVehicle PutPlayerInVehicleEx

static Float:gRandomRentCar[ 12 ][ 4 ] =
{
	{888.0634, -1668.4983, 13.3545, 0.0000},
	{878.9406, -1668.4990, 13.3545, 0.0000},
	{870.3414, -1668.4983, 13.3545, 0.0000},
	{879.1100, -1658.8600, 13.3545, 180.0000},
	{888.2397, -1658.8600, 13.3545, 180.0000},
	{892.7370, -1658.8600, 13.3545, 180.0000},
	{874.6118, -1658.8600, 13.3545, 180.0000},
	{883.6443, -1668.4990, 13.3545, 0.0000},
	{874.7943, -1668.4983, 13.3545, 0.0000},
	{883.9087, -1658.8615, 13.3545, 180.0000},
	{892.5234, -1668.4979, 13.3545, 0.0000},
	{870.1570, -1658.8600, 13.3545, 180.0000}
};
static Float:gRandomSweeper[ 24 ][ 3 ] = 
{
	{2177.9102,-1131.8602,24.6947},
	{2098.8372,-1098.9995,24.7185},
	{1977.0708,-1067.6428,24.2978},
	{1966.6593,-1200.1396,25.3525},
	{1866.3763,-1258.5533,13.1125},
	{1778.9758,-1280.2712,13.1974},
	{1615.5997,-1298.0112,17.0079},
	{1602.1567,-1429.7156,13.1313},
	{1500.4156,-1437.5938,13.1099},
	{1417.5509,-1398.9668,13.1092},
	{1359.6519,-1375.7865,13.1963},
	{1358.5001,-1175.1145,22.9899},
	{1368.7463,-1044.5802,26.0916},
	{1497.5140,-1037.1525,23.3514},
	{1577.4915,-1157.1763,23.6372},
	{1712.1711,-1162.9882,23.3879},
	{1867.5719,-1178.6752,23.3833},
	{1874.3185,-1052.5750,23.4106},
	{1993.0950,-1059.6119,24.1425},
	{2136.9004,-1116.4368,24.9689},
	{2268.0183,-1149.2379,26.5127},
	{2268.7656,-1214.8099,23.5318},
	{2189.5029,-1217.9132,23.5381},
	{2149.6929,-1203.0001,23.5861}
};
static Float:gRandomTransporter[ 5 ][ 3 ] = 
{
	{681.5718,-444.3177,16.3359},
	{2356.4775,-658.9518,128.0547},
	{815.4612,-1094.0416,25.7899},
	{-416.9921,-1761.4899,5.6761},
	{1027.4053,-2179.1055,40.4760}
};
static Float:gRandomRob[ 11 ][ 3 ] = 
{
	{2308.8533,-1715.0500,14.6496},
	{1921.6538,-1115.0759,27.0883},
	{351.7325,-1197.2733,76.5156},
	{1182.0050,-1068.1383,29.1936},
	{2435.2007,-1289.3853,25.3479},
	{2248.9714,961.5317,10.8130},
	{2787.9294,2222.7788,14.6615},
	{1597.7314,2093.5139,11.3125},
	{1029.9531,2028.0458,11.4683},
	{1609.4539,2789.3052,10.8203},
	{2594.5935,748.7582,11.0234}
};
static Float:gRandomRob2[ 10 ][ 3 ] = 
{
	{1695.5579,-2125.8223,13.8101},
	{2522.6125,-2018.8566,14.0744},
	{2751.7439,-1962.8811,13.5469},
	{2553.0874,-958.2475,82.6460},
	{166.8161,-1758.7646,6.7969},
	{2042.4943,732.5795,11.4609},
	{2581.5403,1060.6929,11.7309},
	{1435.2942,2548.9001,10.8203},
	{1029.7107,1847.9226,11.4683},
	{1706.7246,950.2996,10.8203}
};
static Float:gRandomMeat[ 5 ][ 3 ] =
{
	{950.1836,2145.3252,1011.0216},
	{933.6287,2163.9873,1011.0303},
	{934.9768,2109.0732,1011.0234},
	{963.9673,2129.3411,1011.0234},
	{948.1543,2105.3013,1011.0234}
};
static Float:gRandomTenis[ 5 ][ 3 ] =
{
	{-2715.7915,-234.0012,7.1952},
	{-2726.0789,-262.0538,7.1875},
	{-2751.3713,-240.3011,7.1875},
	{-2773.8574,-256.3466,7.1875},
	{-2788.9065,-253.3901,7.1875}
};
static Float:gRandomRCArena[ 7 ][ 3 ] =
{
	{-974.8936,1089.5918,1344.9745},
	{-968.9737,1045.3478,1345.0596},
	{-1032.9205,1036.5154,1341.3516},
	{-1062.5868,1043.2329,1347.7155},
	{-1082.6720,1048.1719,1343.8159},
	{-1125.4727,1024.5345,1345.6824},
	{-1131.6720,1086.3531,1349.4716}
};
static Float:gRandomSharman[ 5 ][ 3 ] =
{
	{-946.7587,1857.1022,9.0061},
	{-947.1253,1900.4082,9.0061},
	{-961.1921,1946.5681,9.0000},
	{-942.5649,1910.1489,5.0000},
	{-942.9462,1951.8634,5.0000}
};

static Float:gRandomDMVLV[ 24 ][ 3 ] =
{
	{1912.9580,2337.2263,10.8203},  
	{1940.5293,2282.0132,10.6719},  
	{2093.1802,2281.0427,10.6797},  
	{2125.9805,2087.4604,10.6719}, 
	{2070.0928,1751.1003,10.8099},  
	{1889.8202,1714.9141,10.7858},  
	{1823.1379,1606.9695,6.8871},  
	{1786.8745,1503.7195,7.2086},  
	{1791.1913,1271.6611,6.8585},  
	{1792.9347,956.6323,7.8760},  
	{1860.3171,836.6114,9.3780},  
	{2071.0808,884.0419,8.2272},  
	{2071.2483,1180.1221,10.8276},  
	{2071.2432,1462.7014,10.6920},  
	{2071.4331,1678.1681,10.7665},  
	{2136.9385,1837.1338,10.8365}, 
	{2150.7554,2085.6309,10.8931},  
	{2178.2932,2304.7366,10.7544},  
	{2230.2122,2441.2200,10.7474},  
	{2190.7300,2456.1362,10.7148},  
	{2026.3778,2422.9863,11.3668},  
	{1949.2368,2395.9756,11.0052},  
	{1925.7861,2345.2769,10.8011},  
	{1885.5482,2339.7058,10.8203}
};

static Float:gRandomDMV[ 24 ][ 3 ] =
{
	{1134.4835,-1849.6875,13.0351}, // Starts the DMV of LS
	{1044.6792,-1807.7927,13.2872},
	{849.6284,-1768.5259,13.0353},
	{636.7948,-1712.6556,13.8731},
	{604.9526,-1672.4805,15.5794},
	{482.9392,-1657.2828,22.3580},
	{324.7285,-1640.4543,32.7608},
	{246.6660,-1562.1980,32.7003},
	{275.5641,-1479.1023,30.1755},
	{195.1721,-1507.8561,12.2691},
	{324.6292,-1401.6516,13.7543},
	{508.9550,-1281.8276,15.4750},
	{599.4700,-1229.3276,17.5509},
	{623.7864,-1239.5088,17.5283},
	{627.9816,-1316.4094,13.3209},
	{715.9008,-1321.8572,13.0495},
	{862.5155,-1326.6741,13.2112},
	{1044.4060,-1327.4346,13.0469},
	{1054.9896,-1381.6141,13.1401},
	{1054.6652,-1465.7845,13.0249},
	{1035.5000,-1554.2891,13.0071},
	{1085.2313,-1574.9958,13.0364},
	{1295.3196,-1584.5615,13.0314},
	{1295.9015,-1829.6328,13.3828}
};
static Float:gRandomTowcar[ 16 ][ 3 ] =
{
	{2003.3517,-1730.5336,13.1080},
	{2243.8682,-1895.1603,13.1057},
	{2872.5264,-1507.8936,10.5887},
	{2733.4851,-1079.1128,69.0215},
	{2491.6882,-1096.9484,48.1798},
	{1973.2815,-1173.0474,25.6866},
	{1441.3285,-1038.8422,23.4461},
	{1041.5815,-776.1030,104.3925},
	{958.6799,-1034.2134,29.8119},
	{995.9623,-1351.8215,13.0737},
	{793.3896,-1583.4993,13.1155},
	{368.1902,-1977.2362,7.3970},
	{834.1572,-1794.8837,13.5680},
	{1243.4885,-1853.9174,13.1080},
	{1527.9438,-1663.3240,13.1080},
	{2083.6062,-1843.3563,13.1080}
};
/*static Float:gRandomRaceArena[ 10 ][ 4 ] =
{
	{-2371.3552, -2193.8318, 33.7621, -63.7800},
	{-2380.0920, -2198.1445, 33.7621, -63.7800},
	{-2388.5559, -2198.0911, 33.7621, -63.7800},
	{-2384.9783, -2205.2507, 33.7621, -63.7800},
	{-2389.8813, -2212.6509, 33.7621, -63.7800},
	{-2396.9460, -2197.8247, 33.7621, -63.7800},
	{-2395.1509, -2201.5916, 33.7621, -63.7800},
	{-2391.7764, -2208.5864, 33.7621, -63.7800},
	{-2398.2241, -2211.8374, 33.7621, -63.7800},
	{-2401.5833, -2205.0471, 33.7621, -63.7800}
};
static Float:gRandomRaceArenaCP[ 19 ][ 3 ] =
{
	{-2340.7043,-2180.5793,35.0360},
	{-2148.4209,-2017.2250,94.6467},
	{-2141.1487,-1949.4878,118.1267},
	{-2313.3298,-2095.3071,115.9891},
	{-2466.1563,-2081.9236,125.2556},
	{-2636.0449,-1985.6580,126.5657},
	{-2768.5977,-1813.0242,142.1588},
	{-2759.7205,-1511.3096,140.2108},
	{-2649.1367,-1181.6824,166.1771},
	{-2616.2136,-1203.9368,202.4349},
	{-2678.7329,-1413.0289,260.1200},
	{-2714.5979,-1497.7007,296.3707},
	{-2612.1812,-1612.1404,336.4976},
	{-2582.7327,-1734.4961,350.0424},
	{-2562.5715,-1722.8341,388.9910},
	{-2437.2190,-1791.8025,412.9774},
	{-2346.9866,-1818.1121,433.9008},
	{-2281.0166,-1741.0417,464.7490},
	{-2322.2805,-1628.2882,484.0555}
};*/
static Float:gRandomDSGaraj[ 8 ][ 4 ] =
{
	{282.1262, -1531.5768, 24.2990, 234.5114},
	{287.8595, -1522.1763, 24.2988, 234.9142},
	{294.3733, -1513.1908, 24.2990, 235.8320},
	{300.9109, -1504.4020, 24.3020, 234.6914},
	{2375.0583, 1675.7560, 11.0306, 180.0000},
	{2384.4536, 1675.5250, 11.0306, 180.0000},
	{2394.0527, 1675.7815, 11.0306, 180.0000},
	{2403.8894, 1676.0864, 11.0306, 180.0000}
};
static Float:JailSpawns[ 3 ][ 3 ] =
{
	{264.6276,77.6158,1001.0391},
	{264.4810,82.0297,1001.0391},
	{264.4915,86.6355,1001.0391}
};
static Float:gRandomGarbage[ 11 ][ 3 ] =
{
	{2533.11377, -2009.43115, 13.29860},
	{2461.24609, -1901.96106, 13.32750},
	{2307.08276, -1997.81750, 13.31750},
	{2288.70264, -2210.89697, 13.33990},
	{1868.44250, -1871.45984, 13.23070},
	{1794.31201, -2020.50208, 13.30250},
	{2452.13208, -1759.06531, 13.33540},
	{2660.66553, -2040.49048, 13.32230},
	{2443.63794, -1962.54602, 13.36000},
	{2260.15308, -2343.80298, 13.32100},
	{2197.50244, -2527.79468, 13.28050}
};
static HouseSize[ 4 ][] 			= { "None", "Small", "Medium", "Big" };
static JobPlanes[ 5 ] 				= { 593, 511, 513, 519, 553 };
static serverWeather[ 21 ]      	= { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20};
static VehicleNeon[ 6 ]				= { 18648, 18652, 18647, 18649, 18651, 18650 };
static Player_Status[ 3 ][]   		= { "Offline", "Online", "AFK" };
static Player_Zones[ 3 ][]     		= { "LS", "LV", "SF" };
static Paintball_Arena[ 4 ][]  		= { "meat_factory", "tenis_arena", "rc_arena", "sharman_dam" };
static Paintball_Weapons[ 3 ][] 	= { "Deagle, M4, Grenade & Spray", "Baseball Bat", "Chainsaw" };
static Paintball_Status[ 3 ][] 		= { ""COL_G"[W]"COL_W"", ""COL_LYE"[P]"COL_W"", ""COL_S"[S]"COL_W"" };
static Paintball_Mode[ 4 ][]   		= { "Classic / Free for all", "Gun Game", "Deagle Only", "Headshot Only" };
static Helper_Colors[ 3 ][]   		= { "228B22", "00ff00", "006400" };
static Admin_Colors[ 3 ][]   		= { "FF0000", "8B0000", "00008B" };
static Premium_Colors[ 11 ][]		= { "CECECE", "4169E1", "662BBE", "FFE600", "FF00FF", "3FFF3F", "83D553", "187700", "FF9A00", "222222", "FF2C9D" };

static VehicleNames[ 212 ][] =
{
	"Landstalker","Bravura","Buffalo","Linerunner","Perennial","Sentinel","Dumper","Firetruck","Trashmaster","Stretch",
	"Manana","Infernus","Voodoo","Pony","Mule","Cheetah","Ambulance","Leviathan","Moonbeam","Esperanto","Taxi",
	"Washington","Bobcat","Mr Whoopee","BF Injection","Hunter","Premier","Enforcer","Securicar","Banshee","Predator",
	"Bus","Rhino","Barracks","Hotknife","Trailer","Previon","Coach","Cabbie","Stallion","Rumpo","RC Bandit", "Romero",
	"Packer","Monster","Admiral","Squalo","Seasparrow","Pizzaboy","Tram","Trailer","Turismo","Speeder","Reefer","Tropic","Flatbed",
	"Yankee","Caddy","Solair","Berkley's RC Van","Skimmer","PCJ-600","Faggio","Freeway","RC Baron","RC Raider",
	"Glendale","Oceanic","Sanchez","Sparrow","Patriot","Quad","Coastguard","Dinghy","Hermes","Sabre","Rustler",
	"ZR-350","Walton","Regina","Comet","BMX","Burrito","Camper","Marquis","Baggage","Dozer","Maverick","News Chopper",
	"Rancher","FBI Rancher","Virgo","Greenwood","Jetmax","Hotring Racer","Sandking","Blista Compact","Police Maverick",
	"Boxville","Benson","Mesa","RC Goblin","Hotring Racer A","Hotring Racer B","Bloodring Banger","Rancher","Super GT",
	"Elegant","Journey","Bike","Mountain Bike","Beagle","Cropduster","Stuntplane","Tanker","Road Train","Nebula","Majestic",
	"Buccaneer","Shamal","Hydra","FCR-900","NRG-500","HPV-1000","Cement Truck","Tow Truck","Fortune","Cadrona","FBI Truck",
	"Willard","Forklift","Tractor","Combine","Feltzer","Remington","Slamvan","Blade","Freight","Streak","Vortex","Vincent",
	"Bullet","Clover","Sadler","Firetruck","Hustler","Intruder","Primo","Cargobob","Tampa","Sunrise","Merit","Utility",
	"Nevada","Yosemite","Windsor","Monster A","Monster B","Uranus","Jester","Sultan","Stratum","Elegy","Raindance","RC Tiger",
	"Flash","Tahoma","Savanna","Bandito","Freight","Trailer","Kart","Mower","Duneride","Sweeper","Broadway",
	"Tornado","AT-400","DFT-30","Huntley","Stafford","BF-400","Newsvan","Tug","Trailer","Emperor","Wayfarer",
	"Euros","Hotdog","Club","Trailer","Trailer","Andromada","Dodo","RCCam","Launch","Police Car (LSPD)","Police Car (SFPD)",
	"Police Car (LVPD)","Police Ranger","Picador","S.W.A.T. Van","Alpha","Phoenix","Glendale","Sadler","Luggage Trailer A",
	"Luggage Trailer B","Stair Trailer","Boxville","Farm Plow","Utility Trailer"
};
new Float:SKIN_GLASSES[ 312 ][ 7 ] = 
{
	{0.098771, 0.030772, -0.000335, 85.342658, 84.122947, 4.236968 }, // - 0
	{0.100766, 0.028630, -0.003521, 87.936676, 82.110870, 4.236968 }, // - 1
	{0.083712, 0.033132, -0.003521, 87.936676, 82.110870, 4.236968 }, // - 2
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 3
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 4
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 5
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 6
	{0.090066, 0.043458, -0.006523, 87.936676, 82.110870, 4.236968 }, // - 7
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 8
	{0.070977, 0.028663, 0.000147, 81.164970, 92.128402, 4.236968 },  // - 9
	{0.072317, 0.032179, -0.002934, 86.843269, 84.196006, 4.236968 }, // - 10
	{0.072317, 0.035465, -0.002201, 86.843269, 84.196006, 4.236968 }, // - 11
	{0.072317, 0.028100, -0.002201, 86.843269, 84.196006, 4.236968 }, // - 12
	{0.076569, 0.028100, -0.002201, 86.843269, 84.196006, 4.236968 }, // - 13
	{0.091310, 0.049169, -0.002201, 86.843269, 84.196006, 4.236968 }, // - 14
	{0.073734, 0.006292, -0.002755, 86.843269, 84.196006, 4.236968 }, // - 15
	{0.092845, 0.040331, 0.000183, 86.843269, 82.864280, 4.236968 },  // - 16
	{0.088241, 0.030184, -0.000157, 86.843269, 82.864280, 4.236968 }, // - 17
	{0.061677, 0.029596, -0.007398, 86.843269, 82.864280, 4.236968 }, // - 18
	{0.079911, 0.029596, -0.002934, 86.843269, 82.864280, 4.236968 }, // - 19
	{0.095079, 0.029596, -0.001718, 85.261871, 86.296562, 4.236968 }, // - 20
	{0.093728, 0.042083, -0.005781, 85.261871, 81.636192, 4.236968 }, // - 21
	{0.079585, 0.042083, -0.005781, 85.261871, 81.636192, 4.236968 }, // - 22
	{0.090786, 0.041737, -0.005263, 85.261871, 81.636192, 4.236968 }, // - 23
	{0.085247, 0.026941, -0.000317, 85.261871, 81.636192, 4.236968 }, // - 24
	{0.081646, 0.031448, -0.001113, 89.393653, 81.665985, 4.236968 }, // - 25
	{0.083700, 0.033814, -0.001960, 86.436462, 81.665985, 4.236968 }, // - 26
	{0.092498, 0.037321, -0.001960, 86.436462, 85.568023, 4.236968 }, // - 27
	{0.097068, 0.041360, -0.007881, 86.771400, 85.568023, 4.236968 }, // - 28
	{0.083456, 0.050595, 0.001011, 86.771400, 77.201461, 4.236968 },  // - 29
	{0.076983, 0.047168, -0.006161, 86.771400, 74.329719, 4.236968 }, // - 30
	{0.083798, 0.042184, -0.001869, 86.771400, 83.181861, 4.236968 }, // - 31
	{0.053021, -0.000587, -0.001869, 86.771400, 66.859710, 4.236968 },// - 32
	{0.034386, 0.013324, -0.001869, 86.771400, 80.314460, 4.236968 }, // - 33
	{0.104669, 0.037365, -0.001403, 86.771400, 87.178382, 4.236968 }, // - 34
	{0.102659, 0.037465, -0.000829, 86.771400, 93.020492, 4.236968 }, // - 35
	{0.107638, 0.037465, -0.000829, 86.771400, 93.020492, 4.236968 }, // - 36
	{0.107638, 0.035879, -0.000829, 86.771400, 93.020492, 4.236968 }, // - 37
	{0.107638, 0.041106, -0.000829, 86.771400, 93.020492, 4.236968 }, // - 38
	{0.080326, 0.035634, -0.000829, 86.771400, 93.020492, 4.236968 }, // - 39
	{0.080326, 0.027371, -0.000829, 86.771400, 93.020492, 4.236968 }, // - 40
	{0.084617, 0.039613, -0.001620, 86.771400, 93.020492, 4.236968 }, // - 41
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 42
	{0.040075, 0.025445, -0.000974, 86.771400, 92.964149, 4.236968 }, // - 43
	{0.077369, 0.028469, -0.000974, 86.771400, 78.435791, 4.236968 }, // - 44
	{0.064145, 0.028684, -0.000974, 86.771400, 84.762802, 4.236968 }, // - 45
	{0.091993, 0.056559, -0.000974, 86.771400, 84.762802, 4.236968 }, // - 46
	{0.084582, 0.051277, -0.005034, 86.771400, 84.762802, 4.236968 }, // - 47
	{0.092182, 0.042095, -0.003533, 86.771400, 84.762802, 4.236968 }, // - 48
	{0.086866, 0.032203, -0.001021, 86.771400, 84.762802, 4.236968 }, // - 49
	{0.099350, 0.009422, -0.005899, 86.771400, 84.762802, 4.236968 }, // - 50
	{0.099350, 0.030598, -0.005899, 86.771400, 84.762802, 4.236968 }, // - 51
	{0.099350, 0.030598, -0.003575, 86.771400, 84.762802, 4.236968 }, // - 52
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 53
	{0.079123, 0.030598, -0.003575, 86.771400, 84.762802, 4.236968 }, // - 54
	{0.063159, 0.029641, -0.003575, 86.771400, 84.762802, 4.236968 }, // - 55
	{0.070293, 0.029641, -0.000570, 86.771400, 84.762802, 4.236968 }, // - 56
	{0.111305, 0.045368, -0.000570, 86.771400, 84.458084, 4.236968 }, // - 57
	{0.084901, 0.020965, -0.000570, 86.771400, 79.542411, 4.236968 }, // - 58
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 59
	{0.090164, 0.044163, -0.004754, 86.771400, 79.542411, 4.236968 }, // - 60
	{0.087151, 0.041447, -0.000885, 90.928329, 89.598678, 0.000000 }, // - 61
	{0.094350, 0.041447, 0.005717, 90.928329, 89.598678, 0.000000 },  // - 62
	{0.075534, 0.041447, -0.001751, 90.928329, 89.598678, 0.000000 }, // - 63
	{0.075534, 0.041447, -0.001751, 90.928329, 89.598678, 0.000000 }, // - 64
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 65
	{0.104148, 0.034787, 0.001341, 90.928329, 89.598678, 0.000000 },  // - 66
	{0.104148, 0.034787, 0.001341, 90.928329, 89.598678, 0.000000 },  // - 67
	{0.087317, 0.039646, -0.004032, 90.928329, 89.598678, 0.000000 }, // - 68
	{0.074873, 0.039646, -0.003072, 90.928329, 89.598678, 0.000000 }, // - 69
	{0.090391, 0.042364, 0.005494, 90.928329, 89.598678, 0.000000 },  // - 70
	{0.090391, 0.022298, -0.001170, 90.928329, 89.598678, 0.000000 }, // - 71
	{0.090391, 0.039580, -0.001170, 90.928329, 89.598678, 0.000000 }, // - 72
	{0.090391, 0.038224, -0.001170, 90.928329, 89.598678, 0.000000 }, // - 73
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 74
	{0.083113, 0.038224, -0.001170, 90.928329, 89.598678, 0.000000 }, // - 75
	{0.072957, 0.028956, -0.001170, 90.928329, 89.598678, 0.000000 }, // - 76
	{0.069398, 0.039981, -0.001170, 90.928329, 89.598678, 0.000000 }, // - 77
	{0.105738, 0.010001, 0.004508, 90.928329, 79.030494, 0.000000 },  // - 78
	{0.078264, 0.019668, 0.004508, 90.928329, 79.030494, 0.000000 },  // - 79
	{0.087377, 0.022096, -0.001993, 90.928329, 79.030494, 0.000000 }, // - 80
	{0.087377, 0.022096, -0.001635, 90.928329, 79.030494, 0.000000 }, // - 81
	{0.100623, 0.043063, -0.001635, 90.928329, 87.672645, 0.000000 }, // - 82
	{0.092528, 0.027493, -0.001635, 90.928329, 87.672645, 0.000000 }, // - 83
	{0.102086, 0.027493, -0.001635, 90.928329, 87.672645, 0.000000 }, // - 84
	{0.081954, 0.041672, -0.001635, 90.928329, 87.672645, 0.000000 }, // - 85
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 86
	{0.077010, 0.046925, -0.003438, 90.928329, 91.590301, 0.000000 }, // - 87
	{0.069952, 0.042635, -0.003438, 90.928329, 86.722587, 0.000000 }, // - 88
	{0.093827, 0.019258, -0.003438, 90.928329, 86.722587, 0.000000 }, // - 89
	{0.066464, 0.035685, -0.000843, 90.928329, 86.722587, 0.000000 }, // - 90
	{0.066464, 0.035685, -0.000843, 90.928329, 86.722587, 0.000000 }, // - 91
	{0.066464, 0.038135, -0.000843, 90.928329, 86.722587, 0.000000 }, // - 92
	{0.066464, 0.038135, -0.001690, 90.928329, 86.722587, 0.000000 }, // - 93
	{0.048124, 0.010598, -0.001690, 90.928329, 86.722587, 0.000000 }, // - 94
	{0.084997, 0.006773, -0.001690, 90.928329, 86.722587, 0.000000 }, // - 95
	{0.100076, 0.026633, -0.001690, 90.928329, 80.020179, 0.000000 }, // - 96
	{0.061686, 0.027537, -0.001690, 90.928329, 80.020179, 0.000000 }, // - 97
	{0.098318, 0.053993, -0.001690, 90.928329, 89.237678, 0.000000 }, // - 98
	{0.098318, 0.033702, -0.001690, 90.928329, 89.237678, 0.000000 }, // - 99
	{0.086149, 0.042526, -0.001690, 90.928329, 77.587478, 0.000000 }, // - 100
	{0.081864, 0.030555, -0.001690, 90.928329, 78.145759, 0.000000 }, // - 101
	{0.081864, 0.047914, -0.005079, 90.928329, 78.145759, 0.000000 }, // - 102
	{0.089607, 0.036717, -0.005079, 90.928329, 78.145759, 0.000000 }, // - 103
	{0.079655, 0.042021, -0.005079, 90.928329, 78.145759, 0.000000 }, // - 104
	{0.091779, 0.037620, -0.005079, 90.928329, 78.145759, 0.000000 }, // - 105
	{0.084179, 0.035251, -0.005079, 90.928329, 78.145759, 0.000000 }, // - 106
	{0.089387, 0.040297, -0.006006, 90.928329, 78.145759, 0.000000 }, // - 107
	{0.081930, 0.030756, 0.001523, 90.928329, 78.145759, 0.000000 },  // - 108
	{0.092857, 0.043070, -0.006084, 90.928329, 85.326652, 0.000000 }, // - 109
	{0.092857, 0.043070, -0.006084, 90.928329, 85.326652, 0.000000 }, // - 110
	{0.106601, 0.028021, -0.003537, 90.928329, 90.217376, 0.000000 }, // - 111
	{0.096335, 0.015873, -0.003537, 90.928329, 90.217376, 0.000000 }, // - 112
	{0.105827, 0.046620, -0.001395, 90.928329, 90.217376, 0.000000 }, // - 113
	{0.097520, 0.044296, -0.007286, 90.928329, 90.217376, 0.000000 }, // - 114
	{0.097408, 0.043470, -0.007286, 90.928329, 90.217376, 0.000000 }, // - 115
	{0.092588, 0.049832, -0.007286, 90.928329, 90.217376, 0.000000 }, // - 116
	{0.081444, 0.037602, -0.003125, 90.928329, 90.217376, 0.000000 }, // - 117
	{0.078678, 0.037602, -0.001816, 90.928329, 90.217376, 0.000000 }, // - 118
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 119
	{0.089214, 0.029291, -0.000784, 90.928329, 84.624763, 0.000000 }, // - 120
	{0.086825, 0.033424, -0.000784, 90.928329, 77.233818, 0.000000 }, // - 121
	{0.082869, 0.030783, -0.000950, 90.928329, 77.233818, 0.000000 }, // - 122
	{0.096117, 0.048957, -0.006245, 90.928329, 87.579650, 0.000000 }, // - 123
	{0.103663, 0.040022, 0.000449, 90.928329, 87.579650, 0.000000 },  // - 124
	{0.099326, 0.031202, -0.001180, 90.928329, 87.579650, 0.000000 }, // - 125
	{0.099326, 0.031132, -0.001180, 90.928329, 87.579650, 0.000000 }, // - 126
	{0.099326, 0.039279, -0.001180, 90.928329, 87.579650, 0.000000 }, // - 127
	{0.099326, 0.047422, -0.001180, 90.928329, 87.579650, 0.000000 }, // - 128
	{0.088817, 0.021210, 0.000730, 90.928329, 87.579650, 0.000000 },  // - 129
	{0.025784, 0.028323, 0.000730, 90.928329, 59.394767, 0.000000 },  // - 130
	{0.068455, 0.031841, -0.004470, 90.928329, 79.979003, 0.000000 }, // - 131
	{0.012930, 0.008392, -0.004470, 90.928329, 72.129173, 0.000000 }, // - 132
	{0.102457, 0.032260, -0.003338, 90.928329, 84.534217, 0.000000 }, // - 133
	{0.085976, 0.014956, -0.003338, 90.928329, 80.308830, 0.000000 }, // - 134
	{0.071574, 0.028186, -0.001588, 90.928329, 80.308830, 0.000000 }, // - 135
	{0.085219, 0.016666, -0.000738, 90.928329, 80.308830, 0.000000 }, // - 136
	{0.065114, 0.009318, -0.000738, 90.928329, 80.308830, 0.000000 }, // - 137
	{0.066890, 0.040024, -0.000738, 90.928329, 87.341934, 0.000000 }, // - 138
	{0.072037, 0.036141, -0.000702, 90.928329, 87.341934, 0.000000 }, // - 139
	{0.069108, 0.042194, -0.000436, 90.928329, 87.341934, 0.000000 }, // - 140
	{0.058717, 0.043547, -0.000436, 90.928329, 87.209770, 0.000000 }, // - 141
	{0.104196, 0.039601, -0.005481, 90.928329, 87.209770, 0.000000 }, // - 142
	{0.090929, 0.045881, -0.012780, 90.928329, 87.209770, 0.000000 }, // - 143
	{0.098291, 0.042464, -0.006952, 90.928329, 83.081665, 0.000000 }, // - 144
	{0.080087, 0.030122, 0.000606, 90.928329, 83.081665, 0.000000 },  // - 145
	{0.093500, 0.030690, -0.001545, 90.928329, 83.081665, 0.000000 }, // - 146
	{0.079566, 0.020138, 0.004838, 90.928329, 73.715591, 0.000000 },  // - 147
	{0.073564, 0.028430, -0.000527, 90.928329, 88.295433, 0.000000 }, // - 148
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 149
	{0.073564, 0.028430, -0.000527, 90.928329, 88.295433, 0.000000 }, // - 150
	{0.083426, 0.032359, -0.005717, 90.928329, 88.295433, 0.000000 }, // - 151
	{0.072349, 0.019623, -0.000747, 90.928329, 82.624351, 0.000000 }, // - 152
	{0.075065, 0.015351, 0.006545, 90.928329, 71.041442, 0.000000 },  // - 153
	{0.062227, 0.029731, -0.004938, 90.928329, 84.602760, 0.000000 }, // - 154
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 155
	{0.079936, 0.049000, -0.000304, 90.928329, 82.926010, 0.000000 }, // - 156
	{0.067550, 0.035686, -0.000017, 90.928329, 82.926010, 0.000000 }, // - 157
	{0.090676, 0.039383, -0.001726, 90.928329, 88.667900, 0.000000 }, // - 158
	{0.090676, 0.039383, -0.003532, 90.928329, 88.667900, 0.000000 }, // - 159
	{0.098662, 0.017441, -0.001589, 90.928329, 88.667900, 0.000000 }, // - 160
	{0.105388, 0.038409, 0.003155, 90.928329, 88.667900, 0.000000 },  // - 161
	{0.097415, 0.036904, -0.000525, 90.928329, 88.667900, 0.000000 }, // - 162
	{0.088934, 0.023302, -0.004153, 90.928329, 80.393875, 0.000000 }, // - 163
	{0.088934, 0.023302, -0.004153, 90.928329, 80.393875, 0.000000 }, // - 164
	{0.087018, 0.051364, 0.000484, 90.928329, 94.584838, 0.000000 },  // - 165
	{0.087018, 0.051364, 0.000484, 90.928329, 94.584838, 0.000000 },  // - 166
	{0.095996, 0.038787, 0.000484, 90.928329, 84.315711, 0.000000 },  // - 167
	{0.089094, 0.034001, -0.006451, 90.928329, 84.315711, 0.000000 }, // - 168
	{0.075700, 0.028082, -0.006451, 90.928329, 84.315711, 0.000000 }, // - 169
	{0.093751, 0.041968, -0.005545, 90.928329, 84.315711, 0.000000 }, // - 170
	{0.090124, 0.031055, -0.000505, 90.928329, 84.315711, 0.000000 }, // - 171
	{0.066033, 0.032915, -0.002713, 90.928329, 84.315711, 0.000000 }, // - 172
	{0.088287, 0.045350, -0.005384, 90.928329, 84.315711, 0.000000 }, // - 173
	{0.087750, 0.042129, -0.005384, 90.928329, 84.315711, 0.000000 }, // - 174
	{0.092384, 0.039294, -0.005384, 90.928329, 84.315711, 0.000000 }, // - 175
	{0.097661, 0.039065, -0.006344, 90.928329, 80.736480, 0.000000 }, // - 176
	{0.097114, 0.039641, -0.006692, 90.928329, 80.736480, 0.000000 }, // - 177
	{0.069354, 0.039641, -0.000474, 90.928329, 80.736480, 0.000000 }, // - 178
	{0.091414, 0.039641, -0.005617, 90.928329, 80.736480, 0.000000 }, // - 179
	{0.094914, 0.039641, -0.005617, 90.928329, 80.736480, 0.000000 }, // - 180
	{0.117232, 0.033217, -0.001099, 90.928329, 82.396362, 0.000000 }, // - 181
	{0.082569, 0.032748, -0.003248, 90.928329, 87.394371, 0.000000 }, // - 182
	{0.095527, 0.027237, -0.001960, 90.928329, 86.443649, 0.000000 }, // - 183
	{0.095527, 0.040994, -0.006878, 90.928329, 86.443649, 0.000000 }, // - 184
	{0.085663, 0.030601, -0.002345, 90.928329, 81.496513, 0.000000 }, // - 185
	{0.085663, 0.030601, -0.001015, 90.928329, 81.496513, 0.000000 }, // - 186
	{0.076527, 0.027211, 0.008500, 90.928329, 74.401092, 0.000000 },  // - 187
	{0.096669, 0.032578, 0.001662, 90.928329, 83.502502, 0.000000 },  // - 188
	{0.098753, 0.032129, -0.001659, 90.928329, 90.153724, 0.000000 }, // - 189
	{0.092821, 0.035572, -0.001659, 90.928329, 90.153724, 0.000000 }, // - 190
	{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000 }, // - 191
	{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000 }, // - 192
	{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000 }, // - 193
	{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000 }, // - 194
	{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000 }, // - 195
	{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000 }, // - 196
	{0.100630, 0.020568, -0.001132, 90.928329, 90.153724, 0.000000 }, // - 197
	{0.077905, 0.028523, 0.000000, 89.675476, 89.270309, 0.000000 },  // - 198
	{0.099095, 0.022463, 0.000000, 89.675476, 89.270309, 0.000000 },  // - 199
	{0.103182, 0.031106, 0.000000, 89.675476, 89.270309, 0.000000 },  // - 200
	{0.078426, 0.038546, 0.000000, 89.675476, 89.270309, 0.000000 },  // - 201
	{0.101092, 0.035797, -0.002997, 89.675476, 82.081153, 0.000000 }, // - 202
	{0.092009, 0.042780, -0.005841, 89.675476, 84.463294, 0.000000 }, // - 203
	{0.092009, 0.042780, -0.005841, 89.675476, 84.463294, 0.000000 }, // - 204
	{0.092969, 0.027782, -0.002959, 89.675476, 84.463294, 0.000000 }, // - 205
	{0.105109, 0.036128, -0.000471, 89.675476, 84.463294, 0.000000 }, // - 206
	{0.066892, 0.024410, -0.002792, 89.675476, 84.463294, 0.000000 }, // - 207
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 208
	{0.084046, 0.013608, -0.002792, 89.675476, 81.667831, 0.000000 }, // - 209
	{0.084046, 0.013608, -0.001034, 89.675476, 81.667831, 0.000000 }, // - 210
	{0.067610, 0.033777, -0.001034, 89.675476, 85.214485, 0.000000 }, // - 211
	{0.094159, 0.020717, 0.000715, 89.675476, 85.214485, 0.000000 },  // - 212
	{0.098744, 0.036786, -0.001770, 89.675476, 85.214485, 0.000000 }, // - 213
	{0.068755, 0.036786, -0.001770, 89.675476, 85.214485, 0.000000 }, // - 214
	{0.068755, 0.026863, -0.001770, 89.675476, 85.214485, 0.000000 }, // - 215
	{0.068755, 0.026863, -0.001770, 89.675476, 85.214485, 0.000000 }, // - 216
	{0.095765, 0.030034, -0.001770, 89.675476, 85.214485, 0.000000 }, // - 217
	{0.085486, 0.039427, -0.003311, 89.675476, 85.214485, 0.000000 }, // - 218
	{0.068874, 0.027850, -0.001021, 89.675476, 85.214485, 0.000000 }, // - 219
	{0.052931, 0.050390, -0.002062, 89.675476, 88.113647, 0.000000 }, // - 220
	{0.094479, 0.034432, 0.000875, 89.675476, 83.572830, 0.000000 },  // - 221
	{0.094479, 0.034432, -0.000596, 89.675476, 83.572830, 0.000000 }, // - 222
	{0.094479, 0.062073, -0.003098, 89.675476, 83.572830, 0.000000 }, // - 223
	{0.064458, 0.029760, -0.001460, 89.675476, 83.572830, 0.000000 }, // - 224
	{0.064458, 0.029760, -0.001460, 89.675476, 83.572830, 0.000000 }, // - 225
	{0.072095, 0.029760, -0.001460, 89.675476, 83.572830, 0.000000 }, // - 226
	{0.110619, 0.043037, -0.001466, 89.675476, 86.927627, 0.000000 }, // - 227
	{0.099446, 0.050772, -0.001466, 89.675476, 85.103805, 0.000000 }, // - 228
	{0.078635, 0.023680, -0.000275, 89.675476, 73.445220, 0.000000 }, // - 229
	{0.043357, 0.028726, -0.000275, 89.675476, 73.445220, 0.000000 }, // - 230
	{0.092488, 0.049972, -0.000275, 89.675476, 88.981941, 0.000000 }, // - 231
	{0.092488, 0.016739, -0.000275, 89.675476, 88.981941, 0.000000 }, // - 232
	{0.071677, 0.037055, -0.002878, 89.675476, 88.981941, 0.000000 }, // - 233
	{0.082745, 0.004209, -0.002878, 89.675476, 88.981941, 0.000000 }, // - 234
	{0.057909, 0.021331, -0.002878, 89.675476, 88.981941, 0.000000 }, // - 235
	{0.079016, 0.021331, -0.000419, 89.675476, 77.678733, 0.000000 }, // - 236
	{0.074572, 0.021331, -0.000419, 89.675476, 84.527442, 0.000000 }, // - 237
	{0.074572, 0.038346, -0.001500, 89.675476, 84.527442, 0.000000 }, // - 238
	{0.111645, 0.011549, 0.006237, 89.675476, 84.527442, 0.000000 },  // - 239
	{0.090766, 0.044221, -0.000423, 89.675476, 89.461883, 0.000000 }, // - 240
	{0.069491, 0.049021, -0.000423, 89.675476, 89.461883, 0.000000 }, // - 241
	{0.059706, 0.031911, -0.000423, 89.675476, 89.461883, 0.000000 }, // - 242
	{0.065242, 0.031911, -0.000423, 89.675476, 89.461883, 0.000000 }, // - 243
	{0.065242, 0.051077, -0.001103, 89.675476, 89.461883, 0.000000 }, // - 244
	{0.082393, 0.038233, 0.000410, 89.675476, 89.461883, 0.000000 },  // - 245
	{0.079338, 0.044859, -0.002535, 89.675476, 89.461883, 0.000000 }, // - 246
	{0.101566, 0.037019, 0.000750, 89.675476, 83.514060, 0.000000 },  // - 247
	{0.091887, 0.047776, -0.000040, 89.675476, 83.514060, 0.000000 }, // - 248
	{0.089745, 0.044044, 0.004071, 89.675476, 83.514060, 0.000000 },  // - 249
	{0.094214, 0.044044, -0.007274, 89.675476, 83.514060, 0.000000 }, // - 250
	{0.072282, 0.044044, -0.001468, 89.675476, 90.444763, 0.000000 }, // - 251
	{0.095764, 0.034224, -0.000264, 89.675476, 82.959915, 0.000000 }, // - 252
	{0.087454, 0.026208, -0.000264, 89.675476, 82.959915, 0.000000 }, // - 253
	{0.099198, 0.037362, -0.000264, 89.675476, 82.959915, 0.000000 }, // - 254
	{0.070845, 0.019943, 0.003505, 89.675476, 73.529716, 0.000000 },  // - 255
	{0.065373, 0.033656, -0.001141, 89.675476, 83.002151, 0.000000 }, // - 256
	{0.070077, 0.033656, -0.001141, 89.675476, 83.002151, 0.000000 }, // - 257
	{0.089536, 0.041904, 0.000715, 89.675476, 83.002151, 0.000000 },  // - 258
	{0.084822, 0.041904, 0.000715, 89.675476, 83.002151, 0.000000 },  // - 259
	{0.093009, 0.031491, -0.001568, 89.675476, 83.002151, 0.000000 }, // - 260
	{0.093009, 0.015023, -0.001477, 89.675476, 83.002151, 0.000000 }, // - 261
	{0.076580, 0.039782, -0.001477, 89.675476, 88.620780, 0.000000 }, // - 262
	{0.076580, 0.028967, -0.001477, 89.675476, 88.620780, 0.000000 }, // - 263
	{0.075424, 0.043059, -0.001477, 89.675476, 88.620780, 0.000000 }, // - 264
	{0.089655, 0.021726, -0.001477, 89.675476, 88.620780, 0.000000 }, // - 265
	{0.096792, 0.014114, -0.003062, 89.675476, 85.166038, 0.000000 }, // - 266
	{0.094886, 0.024989, -0.003184, 89.675476, 85.166038, 0.000000 }, // - 267
	{0.094886, 0.024989, -0.003184, 89.675476, 85.166038, 0.000000 }, // - 268
	{0.102252, 0.024989, -0.003184, 89.675476, 85.166038, 0.000000 }, // - 269
	{0.102252, 0.024989, 0.000529, 89.675476, 85.166038, 0.000000 },  // - 270
	{0.096134, 0.025462, 0.000529, 89.675476, 79.225112, 0.000000 },  // - 271
	{0.099226, 0.032663, 0.000529, 89.675476, 79.225112, 0.000000 },  // - 272
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 273
	{0.089833, 0.022466, -0.001590, 89.675476, 88.636062, 0.000000 }, // - 274
	{0.089833, 0.022466, -0.001590, 89.675476, 88.636062, 0.000000 }, // - 275
	{0.089833, 0.022466, -0.001590, 89.675476, 88.636062, 0.000000 }, // - 276
	{0.082718, 0.062596, -0.000201, 89.675476, 88.636062, 0.000000 }, // - 277
	{0.082718, 0.062596, -0.000201, 89.675476, 88.636062, 0.000000 }, // - 278
	{0.087652, 0.059379, -0.000201, 89.675476, 88.636062, 0.000000 }, // - 279
	{0.087652, 0.023702, -0.003091, 89.675476, 88.636062, 0.000000 }, // - 280
	{0.087652, 0.023702, -0.003091, 89.675476, 88.636062, 0.000000 }, // - 281
	{0.090877, 0.026643, -0.003091, 89.675476, 88.636062, 0.000000 }, // - 282
	{0.090877, 0.026643, -0.003091, 89.675476, 88.636062, 0.000000 }, // - 283
	{0.090877, 0.053674, 0.009879, 89.675476, 88.636062, 0.000000 },  // - 284
	{0.104320, 0.041487, 0.008021, 89.675476, 88.636062, 0.000000 },  // - 285
	{0.087062, 0.021779, -0.003307, 89.675476, 88.636062, 0.000000 }, // - 286
	{0.073173, 0.048856, 0.005337, 89.675476, 92.561180, 0.000000 },  // - 287
	{0.090294, 0.027592, -0.003497, 89.675476, 92.561180, 0.000000 }, // - 288
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 289
	{0.086562, 0.042698, -0.000612, 89.675476, 92.561180, 0.000000 }, // - 290
	{0.096768, 0.039233, -0.000612, 89.675476, 83.550270, 0.000000 }, // - 291
	{0.079939, 0.020731, -0.005162, 89.675476, 83.550270, 0.000000 }, // - 292
	{0.097107, 0.027826, -0.005162, 89.675476, 88.505996, 0.000000 }, // - 293
	{0.097107, 0.037636, 0.000618, 89.675476, 88.505996, 0.000000 },  // - 294
	{0.079985, 0.035006, -0.000826, 89.675476, 87.533462, 0.000000 }, // - 295
	{0.088445, 0.024209, -0.002076, 89.675476, 73.285072, 0.000000 }, // - 296
	{0.094039, 0.035411, 0.000490, 89.675476, 84.277572, 0.000000 },  // - 297
	{0.099553, 0.024683, -0.002919, 89.675476, 84.277572, 0.000000 }, // - 298
	{0.099553, 0.044356, -0.000285, 89.675476, 84.277572, 0.000000 },  // - 299
	{0.087652, 0.023702, -0.003091, 89.675476, 88.636062, 0.000000 }, // - 300
	{0.087652, 0.023702, -0.003091, 89.675476, 88.636062, 0.000000 }, // - 301
	{0.087652, 0.023702, -0.003091, 89.675476, 88.636062, 0.000000 }, // - 302
	{0.087652, 0.023702, -0.003091, 89.675476, 88.636062, 0.000000 }, // - 303
	{0.087652, 0.023702, -0.003091, 89.675476, 88.636062, 0.000000 }, // - 304
	{0.087652, 0.023702, -0.003091, 89.675476, 88.636062, 0.000000 }, // - 305
	{0.071677, 0.037055, -0.002878, 89.675476, 88.981941, 0.000000 }, // - 306
	{0.071677, 0.037055, -0.002878, 89.675476, 88.981941, 0.000000 }, // - 307
	{0.071677, 0.037055, -0.002878, 89.675476, 88.981941, 0.000000 }, // - 308
	{0.071677, 0.037055, -0.002878, 89.675476, 88.981941, 0.000000 }, // - 309
	{0.090877, 0.026643, -0.003091, 89.675476, 88.636062, 0.000000 }, // - 310
	{0.090877, 0.026643, -0.003091, 89.675476, 88.636062, 0.000000 } // - 311
};
// HATS
new Float:SKIN_HATS[ 311 ][ 6 ] = 
{
	{0.135928, 0.002891, -0.008518, 0.000000, 0.000000, 347.188201},//Skin - 0
	{0.136207, 0.006102, -0.013858, 0.612963, 0.000000, 0.000000}, //Skin - 1
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                 //Skin - 2
	{0.167425, -0.006185, -0.004779, 0.612963, 0.000000, 0.000000}, //Skin - 3
	{0.188546, -0.006185, -0.011507, 0.612963, 0.000000, 0.000000}, //Skin - 4
	{0.188546, -0.006185, -0.011507, 0.612963, 0.000000, 0.000000}, //Skin - 5
	{0.155785, 0.005998, -0.014326, 0.000000, 0.000000, 347.188201},//Skin - 6
	{0.157787, 0.012994, -0.014590, 0.612963, 0.000000, 0.000000},  //Skin - 7
	{0.131067, -0.013737, -0.008518, 0.000000, 0.000000, 347.188201},//Skin - 8
	{0.118922, -0.015322, -0.008518, 0.000000, 0.000000, 347.188201},//Skin - 9
	{0.125779, -0.001459, -0.008518, 0.000000, 0.000000, 347.188201},//Skin - 10
	{0.129249, -0.014101, -0.008518, 0.000000, 0.000000, 347.188201},//Skin - 11
	{0.139572, -0.003642, -0.002145, 0.612963, 0.000000, 10.335063}, //Skin - 12
	{0.161076, -0.015624, -0.006768, 0.000000, 0.000000, 347.188201},//Skin - 13
	{0.112204, -0.023196, -0.006768, 0.000000, 0.000000, 347.188201},//Skin - 14
	{0.104552, -0.015122, -0.005275, 0.612963, 2.307199, 357.920410}, //Skin - 15
	{0.150166, -0.008718, -0.006768, 0.000000, 0.000000, 347.188201},//Skin - 16
	{0.149627, 0.002943, -0.005275, 0.612963, 2.307199, 357.920410}, //Skin - 17
	{0.105319, 0.003517, -0.005275, 0.612963, 2.307199, 357.920410}, //Skin - 18
	{0.153609, -0.003207, -0.007717, 0.000000, 0.000000, 357.608825},//Skin - 19
	{0.143831, 0.001813, -0.010588, 0.000000, 0.000000, 357.608825}, //Skin - 20
	{0.154598, -0.003549, -0.013304, 0.000000, 0.000000, 0.000000},  //Skin - 21
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 22
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   //Skin - 23
	{0.127352, 0.009877, -0.006845, 0.726156, 359.666778, 348.825012},//Skin - 24
	{0.124666, -0.029373, -0.006845, 0.726156, 359.666778, 329.940704},//Skin - 25
	{0.152029, -0.018331, -0.003139, 0.000000, 358.344604, 348.467559}, //Skin - 26
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                    //Skin - 27
	{0.128768, 0.041474, -0.007667, 0.726156, 359.666778, 355.429199}, //Skin - 28
	{0.166457, -0.006228, -0.012669, 0.726156, 359.666778, 354.612152},//Skin - 29
	{0.155160, -0.022985, -0.011249, 0.000000, 358.344604, 348.467559}, //Skin - 30
	{0.096077, -0.023233, -0.009101, 0.726156, 359.666778, 343.094055},//Skin - 31
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                    //Skin - 32
	{0.094003, -0.022985, -0.011249, 0.000000, 358.344604, 348.467559}, //Skin - 33
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                    //Skin - 34
	{0.155565, 0.014400, -0.009101, 0.726156, 359.666778, 6.131487},   //Skin - 35
	{0.156485, 0.013641, -0.009101, 0.726156, 359.666778, 6.131487},   //Skin - 36
	{0.144815, 0.013641, -0.009374, 0.726156, 359.666778, 350.562103}, //Skin - 37
	{0.113347, -0.006682, -0.009374, 0.726156, 359.666778, 350.562103},//Skin - 38
	{0.147231, -0.014448, -0.004786, 0.726156, 359.666778, 357.303253},//Skin - 39
	{0.133873, -0.019703, -0.000058, 0.000000, 358.344604, 348.467559},//Skin - 40
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                    //Skin - 41
	{0.082446, 0.004202, -0.004786, 0.726156, 359.666778, 357.303253}, //Skin - 42
	{0.104901, 0.004013, -0.004786, 0.726156, 359.666778, 342.983184}, //Skin - 43
	{0.116172, -0.001954, -0.004786, 0.726156, 359.666778, 357.100677},//Skin - 44
	{0.153321, 0.025744, -0.008666, 0.726156, 359.666778, 10.704365},  //Skin - 45
	{0.160556, 0.007781, -0.010438, 0.726156, 359.666778, 0.991972},   //Skin - 46
	{0.179010, -0.035613, -0.010438, 0.726156, 359.666778, 347.956573},//Skin - 47
	{0.123363, 0.008694, -0.010438, 0.726156, 359.666778, 347.956573}, //Skin - 48
	{0.167061, -0.037899, -0.010438, 0.726156, 359.666778, 347.775817},//Skin - 49
	{0.164100, -0.040816, -0.011624, 357.030151, 358.344604, 342.811187},//Skin - 50
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                    //Skin - 51
	{0.129040, 0.016069, -0.010438, 0.726156, 359.666778, 347.775817}, //Skin - 52
	{0.129040, 0.016069, -0.006084, 0.726156, 359.666778, 347.775817}, //Skin - 53
	{0.137743, -0.016369, -0.011731, 0.726156, 359.666778, 355.812011},//Skin - 54
	{0.137743, -0.016369, -0.011731, 0.726156, 359.666778, 355.812011},//Skin - 55
	{0.174539, -0.000662, -0.007289, 0.726156, 359.666778, 352.847045},//Skin - 56
	{0.109382, -0.002955, -0.007289, 0.726156, 359.666778, 352.847045},//Skin - 57
	{0.152276, -0.029331, -0.008357, 0.726156, 359.666778, 332.070648},//Skin - 58
	{0.129599, -0.019172, -0.012204, 0.726156, 359.666778, 332.070648},//Skin - 59
	{0.138485, -0.012405, -0.011567, 357.030151, 358.344604, 342.811187},//Skin - 60
	{0.130350, 0.000897, -0.000747, 0.726156, 359.666778, 332.070648}, //Skin - 61
	{0.150659, -0.035485, -0.006299, 0.726156, 359.666778, 341.617431},//Skin - 62
	{0.119340, -0.006483, -0.006299, 0.726156, 359.666778, 341.617431},//Skin - 63
	{0.110634, 0.009623, -0.011624, 357.030151, 358.344604, 342.811187},//Skin - 64
	{0.133055, -0.000092, -0.006299, 0.726156, 359.666778, 341.617431},//Skin - 65
	{0.129061, -0.006499, -0.006299, 0.726156, 359.666778, 341.617431},//Skin - 66
	{0.127292, 0.010318, -0.006299, 0.726156, 359.666778, 341.617431}, //Skin - 67
	{0.138791, -0.025311, -0.006299, 0.726156, 359.666778, 341.617431},//Skin - 68
	{0.148132, 0.003970, -0.002304, 0.726156, 359.666778, 340.120025}, //Skin - 69
	{0.129753, 0.006469, -0.006376, 0.726156, 359.666778, 354.029815}, //Skin - 70
	{0.125663, 0.015428, -0.006376, 0.726156, 359.666778, 354.029815}, //Skin - 71
	{0.125663, 0.015428, -0.009030, 0.726156, 359.666778, 354.029815}, //Skin - 72
	{0.117674, 0.014567, -0.011567, 357.030151, 358.344604, 342.811187}, //Skin - 73
	{0.135729, -0.018656, -0.013554, 0.000000, 0.000000, 337.893737},  //Skin - 74
	{0.141888, -0.042810, -0.006206, 0.000000, 0.000000, 337.893737},  //Skin - 75
	{0.134968, -0.020112, -0.003604, 357.030151, 358.344604, 342.811187},//Skin - 76
	{0.124348, -0.017813, -0.006206, 0.000000, 0.000000, 346.786865},  //Skin - 77
	{0.124348, 0.000583, -0.006206, 0.000000, 0.000000, 346.786865},   //Skin - 78
	{0.102654, -0.010906, -0.006206, 0.000000, 0.000000, 346.786865},  //Skin - 79
	{0.102654, -0.010906, -0.006206, 0.000000, 0.000000, 346.786865},  //Skin - 81
	{0.167928, 0.031601, -0.006206, 0.000000, 0.000000, 17.955888},    //Skin - 82
	{0.159998, 0.023540, -0.006206, 0.000000, 0.000000, 17.955888},    //Skin - 83
	{0.169630, 0.019315, -0.006206, 0.000000, 0.000000, 17.955888},    //Skin - 84
	{0.163052, -0.039735, -0.006206, 0.000000, 0.000000, 341.169891},  //Skin - 85
	{0.122285, -0.020112, -0.003604, 357.030151, 358.344604, 342.811187},//Skin - 86
	{0.144811, -0.007521, -0.014207, 0.000000, 0.000000, 341.169891},  //Skin - 87
	{0.129932, -0.007521, -0.007289, 0.000000, 0.000000, 341.169891},  //Skin - 88
	{0.151147, -0.038608, -0.009597, 0.000000, 0.000000, 343.694549},  //Skin - 89
	{0.147416, -0.031632, -0.009597, 0.000000, 0.000000, 343.694549},  //Skin - 90
	{0.157728, -0.009677, -0.009597, 0.000000, 0.000000, 0.934848},    //Skin - 91
	{0.136577, -0.015592, -0.009597, 0.000000, 0.000000, 341.013824},  //Skin - 92
	{0.143821, 0.000631, -0.008385, 0.000000, 0.000000, 358.808868},   //Skin - 93
	{0.100521, 0.003151, -0.007624, 0.000000, 0.000000, 358.808868},   //Skin - 94
	{0.122833, -0.006031, -0.007624, 0.000000, 0.000000, 358.808868},  //Skin - 95
	{0.145296, 0.003959, -0.007624, 0.000000, 0.000000, 358.808868},   //Skin - 96
	{0.141658, 0.016474, -0.007624, 0.000000, 0.000000, 9.683902},     //Skin - 97
	{0.145276, -0.002846, -0.007624, 0.000000, 0.000000, 340.239593},  //Skin - 98
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                    //Skin - 99
	{0.161745, -0.010244, -0.007624, 0.000000, 0.000000, 351.499267}, //Skin - 100
	{0.151006, -0.030994, -0.005366, 0.000000, 0.000000, 340.428894}, //Skin - 101
	{0.147111, 0.003794, -0.012433, 0.000000, 0.000000, 358.069244},  //Skin - 102
	{0.154213, -0.052348, -0.003511, 356.299316, 0.000000, 336.751647},//Skin - 103
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                    //Skin - 104
	{0.153814, -0.039614, -0.006756, 356.299316, 0.000000, 336.930084},//Skin - 105
	{0.153638, -0.039614, -0.013630, 356.299316, 0.000000, 336.930084},//Skin - 106
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                    //Skin - 107
	{0.140473, -0.026201, -0.000469, 0.390689, 355.405181, 335.554260},//Skin - 108
	{0.140904, -0.007227, -0.008114, 0.390689, 355.405181, 335.554260},//Skin - 109
	{0.140904, -0.007227, -0.008114, 0.390689, 355.405181, 335.554260},//Skin - 110
	{0.134860, 0.001485, -0.010145, 0.390689, 358.632415, 347.730010},//Skin - 111
	{0.124823, 0.001485, -0.009402, 0.390689, 358.632415, 347.730010},//Skin - 112
	{0.157999, -0.012039, -0.006082, 0.390689, 358.632415, 347.730010},//Skin - 113
	{0.144906, -0.005139, -0.009654, 0.390689, 358.632415, 336.830108},//Skin - 114
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                    //Skin - 116
	{0.152829, -0.009735, -0.009654, 0.390689, 358.632415, 336.830108},//Skin - 117
	{0.113804, 0.009252, -0.009654, 0.390689, 358.632415, 345.244384},//Skin - 118
	{0.113804, 0.009252, -0.009654, 0.390689, 358.632415, 345.244384},//Skin - 119
	{0.144202, -0.021273, -0.005915, 357.030151, 358.344604, 342.811187},//Skin - 120
	{0.154275, -0.037484, -0.009654, 0.390689, 358.632415, 337.676666},//Skin - 121
	{0.155674, -0.015613, -0.004339, 0.390689, 358.632415, 350.571228},//Skin - 122
	{0.136433, -0.019181, -0.004339, 0.390689, 358.632415, 340.261840},//Skin - 123
	{0.163258, -0.032386, -0.013128, 0.390689, 358.632415, 340.261840},//Skin - 124
	{0.153242, -0.029651, -0.002434, 0.390689, 358.632415, 333.367614},//Skin - 125
	{0.127978, -0.001961, -0.008867, 0.390689, 358.632415, 347.279052},//Skin - 126
	{0.160856, -0.025356, -0.004428, 0.390689, 358.632415, 347.279052},//Skin - 127
	{0.150266, -0.009032, -0.006781, 0.390689, 358.632415, 347.223754},//Skin - 128
	{0.158060, 0.022907, -0.006781, 0.390689, 358.632415, 349.378875},//Skin - 129
	{0.111739, 0.012673, -0.006781, 0.390689, 358.632415, 349.378875},//Skin - 130
	{0.091638, -0.011600, -0.008686, 0.390689, 358.632415, 336.674468},//Skin - 131
	{0.125788, 0.000635, -0.005915, 0.390689, 358.632415, 343.007751},//Skin - 132
	{0.031324, -0.014154, -0.005915, 0.390689, 358.632415, 343.007751},//Skin - 133
	{0.142321, 0.015417, -0.005915, 0.243191, 358.632415, 350.329559},//Skin - 133
	{0.128780, -0.030750, 0.006687, 173.184967, 358.632415, 27.422966},//Skin - 134
	{0.115882, -0.004931, -0.003807, 358.837646, 358.632415, 346.206237},//Skin - 135
	{0.127531, -0.008916, -0.003807, 358.837646, 358.632415, 346.206237},//Skin - 136
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 137
	{0.148992, -0.017748, -0.006509, 358.837646, 358.632415, 350.742156},//Skin - 138
	{0.148992, -0.017748, -0.006509, 358.837646, 358.632415, 350.742156},//Skin - 139
	{0.147315, 0.001708, -0.006509, 358.837646, 358.632415, 354.390045},//Skin - 140
	{0.144315, -0.013571, -0.006509, 358.837646, 358.632415, 354.390045},//Skin - 141
	{0.144315, -0.002729, -0.010357, 358.837646, 358.632415, 354.390045},//Skin - 142
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 143
	{0.177516, -0.070868, -0.009114, 358.837646, 358.632415, 331.679321},//Skin - 144
	{0.139578, -0.008750, -0.004405, 358.837646, 358.632415, 343.319335},//Skin - 145
	{0.139578, -0.014406, -0.004405, 358.837646, 358.632415, 343.319335},//Skin - 146
	{0.115592, -0.010754, -0.004405, 358.837646, 358.632415, 343.319335},//Skin - 147
	{0.150735, -0.000459, -0.004405, 358.837646, 358.632415, 9.362450},//Skin - 148
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 149
	{0.149485, -0.008709, -0.006168, 358.837646, 358.632415, 2.276566},//Skin - 150
	{0.168162, -0.009708, -0.012160, 359.504821, 4.442328, 355.348114},//Skin - 151
	{0.156369, -0.024521, -0.012160, 359.504821, 0.415596, 355.348114},//Skin - 152
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 153
	{0.119297, -0.016080, -0.010776, 359.504821, 0.415596, 341.522827},//Skin - 154
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 155
	{0.172295, -0.065549, -0.007187, 359.504821, 0.415596, 336.175567},//Skin - 156
	{0.126340, -0.030764, -0.007187, 359.504821, 0.415596, 336.175567},//Skin - 157
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 158
	{0.154280, 0.002166, -0.010436, 359.504821, 0.415596, 357.792144},//Skin - 159
	{0.121469, -0.007383, -0.010436, 359.504821, 0.415596, 341.538574},//Skin - 160
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 161
	{0.139495, -0.007383, -0.010436, 359.504821, 0.415596, 341.538574},//Skin - 162
	{0.113212, -0.005302, -0.010436, 359.504821, 0.415596, 341.538574},//Skin - 163
	{0.120208, 0.003533, -0.010436, 359.504821, 0.415596, 341.538574},//Skin - 164
	{0.135111, 0.005091, -0.006407, 359.504821, 0.415596, 352.954559},//Skin - 165
	{0.122118, 0.005091, -0.006407, 359.504821, 0.415596, 352.954559},//Skin - 166
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 167
	{0.125229, 0.005091, -0.013084, 359.504821, 0.415596, 352.954559},//Skin - 168
	{0.153451, -0.018119, -0.013276, 359.504821, 0.415596, 358.219451},//Skin - 169
	{0.141395, -0.009131, -0.013276, 359.504821, 0.415596, 347.866027},//Skin - 170
	{0.157631, -0.028753, -0.006450, 359.504821, 0.415596, 339.935516},//Skin - 171
	{0.152687, -0.027057, -0.007731, 359.504821, 0.415596, 344.054809},//Skin - 172
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 173
	{0.165146, 0.015393, -0.007731, 359.504821, 0.415596, 344.001678},//Skin - 174
	{0.162788, -0.019696, -0.007731, 359.504821, 0.415596, 344.001678},//Skin - 175
	{0.157728, -0.027188, -0.012891, 359.504821, 0.415596, 345.804748},//Skin - 176
	{0.187507, 0.010472, -0.012891, 359.504821, 0.415596, 12.315887},//Skin - 177
	{0.153901, -0.027720, -0.007884, 359.504821, 0.415596, 344.553527},//Skin - 178
	{0.137445, -0.009757, -0.012987, 359.504821, 0.415596, 344.553527},//Skin - 179
	{0.173041, -0.006323, -0.012987, 359.504821, 0.415596, 3.267552},//Skin - 180
	{0.143467, 0.016897, -0.007831, 359.504821, 0.415596, 349.504974},//Skin - 181
	{0.114480, 0.006202, -0.007831, 359.504821, 0.415596, 349.504974},//Skin - 182
	{0.114480, 0.008813, -0.007831, 359.504821, 0.415596, 349.504974},//Skin - 183
	{0.128122, -0.012152, -0.013144, 359.504821, 0.415596, 336.326538},//Skin - 184
	{0.156171, 0.007268, -0.013144, 359.504821, 0.415596, 10.805211},//Skin - 185
	{0.156409, -0.034861, -0.007927, 359.504821, 0.415596, 336.978668},//Skin - 186
	{0.118034, -0.024105, -0.002947, 359.504821, 0.415596, 336.978668},//Skin - 187
	{0.128686, -0.029632, -0.002947, 358.201873, 0.415596, 329.325042},//Skin - 188
	{0.172639, -0.026749, -0.012705, 358.201873, 0.415596, 349.092590},//Skin - 189
	{0.180897, -0.026749, -0.007224, 358.201873, 0.415596, 349.092590},//Skin - 190
	{0.180897, -0.026749, -0.007224, 358.201873, 0.415596, 349.092590},//Skin - 191
	{0.178725, -0.010278, -0.007224, 358.201873, 0.415596, 354.053405},//Skin - 192
	{0.172020, -0.010278, -0.010734, 358.201873, 0.415596, 354.053405},//Skin - 193
	{0.172020, -0.010278, -0.010734, 358.201873, 0.415596, 354.053405},//Skin - 194
	{0.176089, -0.032526, -0.005110, 358.201873, 0.415596, 341.814422},//Skin - 195
	{0.118042, 0.007002, -0.005110, 358.201873, 0.415596, 341.814422},//Skin - 196
	{0.143840, -0.042712, -0.007556, 358.201873, 0.415596, 341.814422},//Skin - 197
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 198
	{0.148060, -0.032384, -0.009754, 358.201873, 0.415596, 333.484924},//Skin - 199
	{0.148060, -0.032384, -0.009754, 358.201873, 0.415596, 333.484924},//Skin - 200
	{0.140799, 0.025145, -0.009754, 358.201873, 0.415596, 5.040688},//Skin - 201
	{0.140799, 0.015851, -0.009754, 358.201873, 0.415596, 349.796478},//Skin - 202
	{0.140799, -0.004372, -0.013685, 358.201873, 0.415596, 349.796478},//Skin - 203
	{0.154274, 0.006245, -0.013685, 358.201873, 0.415596, 2.035465},//Skin - 204
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 205
	{0.154274, 0.016669, -0.013685, 358.201873, 0.415596, 2.035465},//Skin - 206
	{0.106604, 0.004805, -0.011840, 358.201873, 0.415596, 2.035465},//Skin - 207
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 208
	{0.148378, -0.003807, -0.011840, 358.201873, 0.415596, 2.035465},//Skin - 209
	{0.113854, 0.001969, -0.011840, 358.201873, 0.415596, 343.826263},//Skin - 210
	{0.149539, -0.028623, -0.009621, 358.201873, 0.415596, 331.587280},//Skin - 211
	{0.104024, -0.014549, -0.009621, 358.201873, 0.415596, 331.587280},//Skin - 212
	{0.145820, -0.029160, -0.009621, 358.201873, 0.415596, 331.587280},//Skin - 213
	{0.148646, -0.008515, -0.009621, 358.201873, 0.415596, 1.360260},//Skin - 214
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 215
	{0.148646, -0.005935, -0.004058, 358.201873, 0.415596, 1.360260},//Skin - 216
	{0.148646, -0.015611, -0.004058, 358.201873, 0.415596, 340.374938},//Skin - 217
	{0.133952, -0.030138, -0.009880, 358.201873, 0.415596, 340.374938},//Skin - 218
	{0.140503, -0.033425, -0.005693, 358.201873, 0.415596, 340.374938},//Skin - 219
	{0.114608, 0.009020, -0.009135, 358.201873, 0.415596, 352.932006},//Skin - 220
	{0.186516, -0.044762, -0.009135, 358.201873, 0.415596, 344.217132},//Skin - 221
	{0.186516, -0.044762, -0.009135, 358.201873, 0.415596, 344.217132},//Skin - 222
	{0.179908, -0.010779, -0.009135, 358.201873, 0.415596, 344.217132},//Skin - 223
	{0.156689, -0.015437, -0.009135, 358.201873, 0.415596, 352.741638},//Skin - 224
	{0.156689, -0.015437, -0.009135, 358.201873, 0.415596, 352.741638},//Skin - 225
	{0.134990, -0.034685, -0.009135, 358.201873, 0.415596, 340.812927},//Skin - 226
	{0.151760, 0.002680, -0.009135, 358.201873, 0.415596, 340.812927},//Skin - 227
	{0.167410, -0.028664, -0.009135, 358.201873, 0.415596, 340.250427},//Skin - 228
	{0.127699, -0.015571, -0.006103, 358.201873, 0.415596, 347.232238},//Skin - 229
	{0.100555, -0.007753, -0.006103, 358.201873, 0.415596, 347.232238},//Skin - 230
	{0.126940, 0.016886, -0.006103, 358.201873, 0.415596, 347.232238},//Skin - 231
	{0.132949, -0.017515, -0.008594, 358.201873, 0.415596, 347.232238},//Skin - 232
	{0.146124, -0.008425, -0.008594, 358.201873, 0.415596, 347.232238},//Skin - 233
	{0.125714, -0.021018, -0.008594, 358.201873, 0.415596, 347.232238},//Skin - 234
	{0.084982, -0.009809, -0.008594, 358.201873, 0.415596, 347.232238},//Skin - 235
	{0.114669, -0.005190, -0.008594, 358.201873, 0.415596, 351.301177},//Skin - 236
	{0.123264, -0.014946, -0.008594, 358.201873, 0.415596, 351.301177},//Skin - 237
	{0.146656, -0.023925, -0.006749, 358.201873, 0.415596, 334.356781},//Skin - 238
	{0.133769, -0.007373, -0.006749, 358.201873, 0.415596, 343.105895},//Skin - 239
	{0.165378, -0.020173, -0.005869, 358.201873, 0.415596, 348.352233},//Skin - 240
	{0.143331, -0.133577, -0.011472, 358.201873, 0.415596, 312.328857},//Skin - 241
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 242
	{0.098602, 0.002084, -0.011472, 358.201873, 0.415596, 348.195495},//Skin - 243
	{0.124240, -0.011682, -0.006423, 358.201873, 0.415596, 341.555999},//Skin - 244
	{0.158155, -0.044311, -0.005439, 358.201873, 0.415596, 336.024902},//Skin - 245
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 246
	{0.164307, -0.040974, -0.006797, 358.201873, 0.415596, 337.067047},//Skin - 247
	{0.191578, -0.040435, -0.010605, 358.201873, 0.415596, 340.908203},//Skin - 248
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 249
	{0.135208, -0.015243, -0.011916, 358.201873, 0.415596, 340.908203},//Skin - 250
	{0.134272, -0.027377, -0.006035, 358.201873, 0.415596, 333.416168},//Skin - 251
	{0.158813, -0.038977, -0.006035, 358.201873, 0.415596, 336.013519},//Skin - 252
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 253
	{0.165106, -0.048880, -0.009719, 358.201873, 0.415596, 331.050933},//Skin - 254
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 255
	{0.142586, 0.020829, -0.008549, 358.201873, 0.415596, 2.765411},//Skin - 256
	{0.134018, -0.024462, -0.008549, 358.201873, 0.415596, 339.642486},//Skin - 257
	{0.147750, -0.042854, -0.008114, 0.951334, 0.415596, 330.441131},//Skin - 258
	{0.147750, -0.042854, -0.008114, 0.951334, 0.415596, 330.441131},//Skin - 259
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 260
	{0.134710, 0.006798, -0.008114, 358.188964, 0.415596, 352.703582},//Skin - 261
	{0.111691, 0.006798, -0.008114, 358.188964, 0.415596, 352.703582},//Skin - 262
	{0.146077, -0.005195, -0.008114, 358.188964, 0.415596, 3.866970},//Skin - 263
	{0.135858, -0.157842, -0.008114, 358.188964, 0.415596, 314.852203},//Skin - 264
	{0.127964, 0.000132, -0.008114, 358.188964, 0.415596, 352.699432},//Skin - 265
	{0.127964, -0.002646, -0.008114, 358.188964, 0.415596, 352.699432},//Skin - 266
	{0.132329, -0.014261, -0.007384, 1.504234, 0.415596, 352.699432},//Skin - 267
	{0.145951, -0.043442, -0.010053, 1.504234, 0.415596, 320.469390},//Skin - 268
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 269
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 270
	{0.141851, -0.034538, -0.010580, 1.504234, 0.415596, 340.349456},//Skin - 271
	{0.136473, -0.057088, -0.008204, 1.504234, 0.415596, 318.134399},//Skin - 272
	{0.140332, -0.013011, -0.004432, 354.106964, 357.498840, 352.802062}, //Skin - 273
	{0.124270, 0.003252, -0.008204, 1.504234, 0.415596, 346.744995},//Skin - 274
	{0.131583, 0.007682, -0.008204, 1.504234, 0.415596, 346.744995},//Skin - 275
	{0.131583, 0.007682, -0.008204, 1.504234, 0.415596, 346.744995},//Skin - 276
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 277
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 278
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 279
	{0.131583, 0.007682, -0.008204, 1.504234, 0.415596, 346.744995},//Skin - 280
	{0.131583, 0.007682, -0.008204, 1.504234, 0.415596, 346.744995},//Skin - 281
	{0.140515, 0.009018, -0.008204, 1.504234, 0.415596, 346.744995},//Skin - 282
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 283
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 284
	{0.189940, -0.004297, 0.001481, 354.106964, 357.498840, 352.802062},//Skin - 285
	{0.140515, 0.001933, -0.008204, 1.504234, 0.415596, 346.744995}, //Skin - 286
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 287
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 288
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 289
	{0.128789, -0.014062, -0.007850, 1.504234, 0.415596, 340.341094},//Skin - 290
	{0.158929, -0.027358, -0.010655, 1.504234, 0.415596, 337.298858},//Skin - 291
	{0.113309, -0.012434, -0.010655, 1.504234, 0.415596, 337.298858},//Skin - 292
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                  //Skin - 293
	{0.158438, -0.023891, -0.007217, 1.504234, 0.415596, 337.298858},//Skin - 294
	{0.145000, -0.032054, -0.007217, 1.504234, 0.415596, 336.385589},//Skin - 295
	{0.139293, -0.069554, -0.010619, 1.504234, 0.415596, 320.746429},//Skin - 296
	{0.148252, -0.066463, -0.010619, 1.504234, 0.415596, 320.729705},//Skin - 297
	{0.126423, -0.066463, -0.010619, 1.504234, 0.415596, 320.729705},//Skin - 298
	{0.144949, -0.040691, -0.008599, 1.504234, 0.415596, 320.729705},//Skin - 299
	{0.131583, 0.007682, -0.008204, 1.504234, 0.415596, 346.744995},//Skin - 300
	{0.131583, 0.007682, -0.008204, 1.504234, 0.415596, 346.744995},//Skin - 301
	{0.131583, 0.007682, -0.008204, 1.504234, 0.415596, 346.744995},//Skin - 302
	{0.131583, 0.007682, -0.008204, 1.504234, 0.415596, 346.744995},//Skin - 303
	{0.131583, 0.007682, -0.008204, 1.504234, 0.415596, 346.744995},//Skin - 304
	{0.131583, 0.007682, -0.008204, 1.504234, 0.415596, 346.744995},//Skin - 305
	{0.146124, -0.008425, -0.008594, 358.201873, 0.415596, 347.232238},//Skin - 306
	{0.146124, -0.008425, -0.008594, 358.201873, 0.415596, 347.232238},//Skin - 307
	{0.146124, -0.008425, -0.008594, 358.201873, 0.415596, 347.232238},//Skin - 308
	{0.146124, -0.008425, -0.008594, 358.201873, 0.415596, 347.232238},//Skin - 309
	{0.140515, 0.009018, -0.008204, 1.504234, 0.415596, 346.744995},//Skin - 310
	{0.140515, 0.009018, -0.008204, 1.504234, 0.415596, 346.744995} //Skin - 311
};
static WeaponNames[ 47 ][] =
{
	"punch","brass knuckles","golf club","nitestick","knife","baseball bat","shovel","pool cue","katana","chainsaw","purple dildo","small white vibrator","large white vibrator","silver vibrator",
	"bouquet of flowers","cane","grenade","tear gas grenade","molotov cocktail","jetpack","N/A","N/A","Colt .45","silenced Colt .45","Desert Eagle","12-gauge shotgun","sawn-off shotgun","SPAS-12",
	"Micro Uzi","MP5","AK-47","M4A1","TEC-9","rifle","sniper rifle","rocket launcher","heatseeker","flamethrower","minigun","satchel charge","detonator","spray can","fire extinguisher", "camera","nightvision goggles", "thermal goggles","parachute"
};
enum r_Functions
{
	Radio_Name[ 128 ],
	Radio_Adress[ 128 ]
};
enum su_Functions
{
	su_Level,
	su_Surrender[ 16 ],
	su_Crime[ 128 ]
};
enum s_Functions
{
	weapon_Name[ 128 ],
	weapon_ID,
	weapon_Price,
	weapon_Bullets
};
enum shop_Functions
{
	shop_Item[ 32 ],
	shop_Price
}
static SERVER_RADIO[ 16 ][ r_Functions ] =
{
	{ "Pro FM", 						"http://stream.profm.ro:8012/profm.mp3" },
	{ "Radio Bandit", 					"http://live.radiobandit.ro:8000/bandit.mp3" },
	{ "Radio Taraf", 					"http://radiotaraf.com/live.m3u" },
	{ "Radio Hot", 						"http://live.radiohot.ro:8000" },
	{ "Radio Gangsta Dance", 			"http://dance.radiogangsta.ro:8800" },
	{ "Radio Gangsta Manele", 			"http://live.radiogangsta.ro:8800" },
	{ "Radio Popular", 					"http://livemp3.radiopopular.ro:7777" },
	{ "Radio Tequilla", 				"http://www.radiotequila.ro/hiphop.m3u" },
	{ "Dubstep FM", 					"http://dubstep.fm/128.pls" },
	{ "Trap FM", 						"http://radio.trap.fm/listen128.pls" },
	{ "Radio Mynele", 				    "http://live.radiomynele.ro:8000/" },
	{ "Radio Amor Lautareasca",         "http://live.radio-amor.ro:8082/;"},
	{ "Radio Coxet",                    "http://37.59.207.68:8000/;stream.mp3"},
	{ "Virgin Radio",                   "http://astreaming.virginradio.ro:8000/virgin_mp3_64k"},
	{ ".977 Hitz",                      "http://7619.live.streamtheworld.com:80/977_HITS_SC"},
	{ ".977 Alternative",               "http://7579.live.streamtheworld.com:80/977_ALTERN_SC"}
};
static SHOP_WEAPONS[ 7 ][ s_Functions ] =
{
	{ "Deagle", 			24, 150, 100 },
	{ "Silenced 9mm",		23, 170, 50  },
	{ "AK-47",				30, 250, 200 },
	{ "M4A1",				31, 270, 250 },
	{ "Country Rifle",		33, 300, 100 },
	{ "Shotgun",			25, 350, 50  },
	{ "MP5",				29, 400, 350 }
};
static SHOP_ACTIONS[ 16 ][ shop_Functions ] =
{
	{ "VIP Account", 200 },
	{ "iPhone", 10 },
	{ "Change Name", 15 },
	{ "Premium Account", 60 },
	{ "Clear Warns", 20 },
	{ "Clear 20 FP", 10 },
	{ "Clear 40 FP", 20 },
	{ "Clear 60 FP", 30 },
	{ "Job Boost - 1 hour", 10 },
	{ "Job Boost - 3 hours", 25 },
	{ "Job Boost - 6 hours", 50 },
	{ "Hidden Color", 20 },
	{ "Pet", 90},
	{ "Crate", 40},
	{ "Create Clan", 100 },
	{ "5x Fireworks", 1 }
};
/*static SHOP_ACTIONS[ 18 ][ shop_Functions ] =
{
	{ "Iphone", 30 },
	{ "VIP account", 250 },
	{ "Change nickname", 50 },
	{ "Create Clan", 100 },
	{ "Clear Warns", 20 },
	{ "Clear Faction Punish", 50 },
	{ "Clear vehicle KM's", 30 },
	{ "Vehicle hidden color", 25 },
	{ "Adauga slot pentru masina", 40 },
	{ "Achizitioneaza 25,000$", 20 },
	{ "Achizitioneaza 50,000$", 30 },
	{ "Achizitioneaza 100,000$", 50 },
	{ "Premium account 7 days", 30 },
	{ "Premium account 14 days", 40 },
	{ "Premium account 30 days", 50 },
	{ "Premium account 3 months", 70 },
	{ "Premium account 6 months", 90 },
	{ "Premium account 1 years", 120 }
};*/
static SU_ACTIONS[ 24 ][ su_Functions ] =
{
	{ 1, ""COL_G"YES", "Furt" },
	{ 1, ""COL_G"YES", "Prostitutie" },
	{ 1, ""COL_G"YES", "Gesturi vulgare / limbaj vulgar" },
	{ 1, ""COL_G"YES", "Call 112 aiurea" },
	{ 2, ""COL_G"YES", "Neoprire somatie politist" },
	{ 2, ""COL_G"YES", "Patrundere pe teren guvernamental" },
	{ 2, ""COL_G"YES", "Neplata amenda" },
	{ 2, ""COL_G"YES", "Neprezentare acte" },
	{ 2, ""COL_G"YES", "Neconformare ordin" },
	{ 3, ""COL_G"YES", "Detinere sau folosire droguri" },
	{ 3, ""COL_G"YES", "Materiale" },
	{ 3, ""COL_G"YES", "Arma ilegala / fara licenta" },
	{ 3, ""COL_G"YES", "Amenintari" },
	{ 4, ""COL_G"YES", "Santaj" },
	{ 4, ""COL_G"YES", "Drive-By shoot / calcat" },
	{ 4, ""COL_G"YES", "Dare de mita" },
	{ 5, ""COL_LR"NO", "Cop attack" },
	{ 5, ""COL_LR"NO", "Civil attack" },
	{ 5, ""COL_LR"NO", "Rapire cop/civil" },
	{ 6, ""COL_LR"NO", "Runner" },
	{ 6, ""COL_LR"NO", "Omorarea unui politist" },
	{ 6, ""COL_LR"NO", "Omorarea unui civil" },
	{ 6, ""COL_LR"NO", "Acte de terorism" },
	{ 6, ""COL_LR"NO", "Complice" }
};
// < DIALOGS )
enum
{
	DIALOG_NULL,
	DIALOG_CLAN,
	DIALOG_CLAN_TAG,
	DIALOG_ROULETTE_BET,
	DIALOG_CLAN_CHANGETAG,
	DIALOG_CLAN_SETTINGS,
	DIALOG_CLAN_MEMBERS,
	DIALOG_CLAN_MEMBER_VIEW,
	DIALOG_CLAN_MEMBER_SETTINGS,
	DIALOG_EDITAPP,
	DIALOG_EDITAPP1,
	DIALOG_EDITAPP2,
	DIALOG_EDITAPP3,
	DIALOG_EDITAPP4,
	DIALOG_AP_ENTER,
	DIALOG_CLAN_MEMBER_RANK,
	DIALOG_CLAN_MEMBER_WARNS,
	DIALOG_CLAN_CHANGERANK,
	DIALOG_CLAN_CHANGERANK_DONE,
	DIALOG_CLAN_CHANGECOLOR,
	DIALOG_COP_SUSPECT,
	DIALOG_REFERRAL,
	DIALOG_REFERRAL_DONE,
	DIALOG_REPORT_LIST,
	DIALOG_REPORT_DM,
	DIALOG_REPORT_DM_1,
	DIALOG_REPORT_DM_2,
	DIALOG_REPORT_CH,
	DIALOG_REPORT_CH_1,
	DIALOG_REPORT_TEXT,
	DIALOG_FRIENDS,
	DIALOG_FRIENDS_VIEW,
	DIALOG_FRIENDS_ADD,
	DIALOG_PAINTBALL,
	DIALOG_PAINT_VOTE_WEAPON,
	DIALOG_PAINT_VOTE_MAP,
	DIALOG_CHANGE_SPAWN,
	DIALOG_HUD,
	DIALOG_TOG,
	DIALOG_ANTICHEAT,
	DIALOG_RADIO,
	DIALOG_HELPERSHOP,
	DIALOG_HELPERCOLOR,
	DIALOG_ADMINCOLOR,
	DIALOG_HELP,
	DIALOG_KILLCP,
	DIALOG_LOCATIONS,
	DIALOG_EMAIL,
	DIALOG_EMAIL_LIST,
	DIALOG_EMAIL_SHOW,
	DIALOG_SEX,
	DIALOG_HELP_BACK,
	DIALOG_REGISTER,
	DIALOG_REGISTER_DONE,
	DIALOG_LOGIN,
	DIALOG_QUIT_FACTION,
	DIALOG_WANTED_PLAYERS,
	DIALOG_DEALER_BUY,
	DIALOG_DEALER_SELLCAR,
	DIALOG_TOW_VEHICLE,
	DIALOG_SHOW_VEHICLE_INFO,
	DIALOG_VEHICLE_OPTIONS,
	DIALOG_VEHICLE_PLATE,
	DIALOG_VEHICLE_VIP_COLOR,
	DIALOG_VEHICLE_DETAILS,
	DIALOG_VEHICLE_VIP_WHEELS,
	DIALOG_VEHICLE_VIP_NEON,
	DIALOG_DEALER_CONFIRM_SELL,
	DIALOG_BUY_GUN,
	DIALOG_BUY_SHOP,
	DIALOG_BUY_DRINK,
	DIALOG_BUY_IPHONE,
	DIALOG_BUY_INSURANCE,
	DIALOG_SHOW_DEALER_LIST,
	DIALOG_ATM_MENU,
	DIALOG_ATM_WITHDRAWAL,
	DIALOG_FACTIONS,
	DIALOG_JOBS,
	DIALOG_BUSINESS,
	DIALOG_PREMIUM_SHOP,
	DIALOG_PREMIUM_COLORS,
	DIALOG_PREMIUM_CLAN,
	DIALOG_PREMIUM_CHANGENAME,
	DIALOG_MANAGE_GANG,
	DIALOG_MANAGE_GANG_MOTD,
	DIALOG_MEMBERS,
	DIALOG_MEMBERS_ACTION,
	DIALOG_MEMBERS_FACTIONWARNS,
	DIALOG_MEMBERS_FACTIONRANK,
	DIALOG_MEMBERS_UNINVITE,
	DIALOG_UNINVITE_NOFP,
	DIALOG_UNINVITE_FP,
	DIALOG_TRUCKER_SELECT,
	DIALOG_SELECT_TRUCKER_LOCATION,
	DIALOG_HOUSE_ENTER,
	DIALOG_HEIST,
	DIALOG_HEISTS,
	DIALOG_HEIST_INVITE,
	DIALOG_SELECT_RACE_MAP,
	DIALOG_SELECT_RACE_TYPE,
	DIALOG_SELECT_RACE_VEHICLE,
	DIALOG_SELECT_RACE_VEHICLEE,
	DIALOG_FNC,
	DIALOG_INTERIORS,
	DIALOG_GOTOJOBS,
	DIALOG_GOTOFACTIONS,
	#if defined CRATES
	DIALOG_OPENCRATE,
	#endif
	#if defined PET
	DIALOG_PET,
	DIALOG_PETNAME,
	DIALOG_BUYPET,
	DIALOG_PETTYPE,
	#endif
	DIALOG_INSERT_EVENT,
	DIALOG_MANAGE_GANG_RANKS,
	DIALOG_MANAGE_GANG_RANKS2,
	DIALOG_SHOWPLAYERSKILL
};
enum
{
	INDEX_HAT,
	INDEX_GLASSES,
	INDEX_PHONE,
	INDEX_ROB,
	INDEX_CUFFS,
	INDEX_PARROT,
	INDEX_PIZZABOX
};
enum SAZONE_MAIN {
	SAZONE_NAME[28],
	Float:SAZONE_AREA[6]
};

static Iter_gPlayerVehicleId[MAX_PLAYERS] = {INVALID_VEHICLE_ID, ...};    

static const gSAZones[][SAZONE_MAIN] =
{
	{"The Big Ear",                 {-410.00,1403.30,-3.00,-137.90,1681.20,200.00}},
	{"Aldea Malvada",               {-1372.10,2498.50,0.00,-1277.50,2615.30,200.00}},
	{"Angel Pine",                  {-2324.90,-2584.20,-6.10,-1964.20,-2212.10,200.00}},
	{"Arco del Oeste",              {-901.10,2221.80,0.00,-592.00,2571.90,200.00}},
	{"Avispa Country Club",         {-2646.40,-355.40,0.00,-2270.00,-222.50,200.00}},
	{"Avispa Country Club",         {-2831.80,-430.20,-6.10,-2646.40,-222.50,200.00}},
	{"Avispa Country Club",         {-2361.50,-417.10,0.00,-2270.00,-355.40,200.00}},
	{"Avispa Country Club",         {-2667.80,-302.10,-28.80,-2646.40,-262.30,71.10}},
	{"Avispa Country Club",         {-2470.00,-355.40,0.00,-2270.00,-318.40,46.10}},
	{"Avispa Country Club",         {-2550.00,-355.40,0.00,-2470.00,-318.40,39.70}},
	{"Back o Beyond",               {-1166.90,-2641.10,0.00,-321.70,-1856.00,200.00}},
	{"Battery Point",               {-2741.00,1268.40,-4.50,-2533.00,1490.40,200.00}},
	{"Bayside",                     {-2741.00,2175.10,0.00,-2353.10,2722.70,200.00}},
	{"Bayside Marina",              {-2353.10,2275.70,0.00,-2153.10,2475.70,200.00}},
	{"Beacon Hill",                 {-399.60,-1075.50,-1.40,-319.00,-977.50,198.50}},
	{"Blackfield",                  {964.30,1203.20,-89.00,1197.30,1403.20,110.90}},
	{"Blackfield",                  {964.30,1403.20,-89.00,1197.30,1726.20,110.90}},
	{"Blackfield Chapel",           {1375.60,596.30,-89.00,1558.00,823.20,110.90}},
	{"Blackfield Chapel",           {1325.60,596.30,-89.00,1375.60,795.00,110.90}},
	{"Blackfield Intersection",     {1197.30,1044.60,-89.00,1277.00,1163.30,110.90}},
	{"Blackfield Intersection",     {1166.50,795.00,-89.00,1375.60,1044.60,110.90}},
	{"Blackfield Intersection",     {1277.00,1044.60,-89.00,1315.30,1087.60,110.90}},
	{"Blackfield Intersection",     {1375.60,823.20,-89.00,1457.30,919.40,110.90}},
	{"Blueberry",                   {104.50,-220.10,2.30,349.60,152.20,200.00}},
	{"Blueberry",                   {19.60,-404.10,3.80,349.60,-220.10,200.00}},
	{"Blueberry Acres",             {-319.60,-220.10,0.00,104.50,293.30,200.00}},
	{"Caligula's Palace",           {2087.30,1543.20,-89.00,2437.30,1703.20,110.90}},
	{"Caligula's Palace",           {2137.40,1703.20,-89.00,2437.30,1783.20,110.90}},
	{"Calton Heights",              {-2274.10,744.10,-6.10,-1982.30,1358.90,200.00}},
	{"Chinatown",                   {-2274.10,578.30,-7.60,-2078.60,744.10,200.00}},
	{"City Hall",                   {-2867.80,277.40,-9.10,-2593.40,458.40,200.00}},
	{"Come-A-Lot",                  {2087.30,943.20,-89.00,2623.10,1203.20,110.90}},
	{"Commerce",                    {1323.90,-1842.20,-89.00,1701.90,-1722.20,110.90}},
	{"Commerce",                    {1323.90,-1722.20,-89.00,1440.90,-1577.50,110.90}},
	{"Commerce",                    {1370.80,-1577.50,-89.00,1463.90,-1384.90,110.90}},
	{"Commerce",                    {1463.90,-1577.50,-89.00,1667.90,-1430.80,110.90}},
	{"Commerce",                    {1583.50,-1722.20,-89.00,1758.90,-1577.50,110.90}},
	{"Commerce",                    {1667.90,-1577.50,-89.00,1812.60,-1430.80,110.90}},
	{"Conference Center",           {1046.10,-1804.20,-89.00,1323.90,-1722.20,110.90}},
	{"Conference Center",           {1073.20,-1842.20,-89.00,1323.90,-1804.20,110.90}},
	{"Cranberry Station",           {-2007.80,56.30,0.00,-1922.00,224.70,100.00}},
	{"Creek",                       {2749.90,1937.20,-89.00,2921.60,2669.70,110.90}},
	{"Dillimore",                   {580.70,-674.80,-9.50,861.00,-404.70,200.00}},
	{"Doherty",                     {-2270.00,-324.10,-0.00,-1794.90,-222.50,200.00}},
	{"Doherty",                     {-2173.00,-222.50,-0.00,-1794.90,265.20,200.00}},
	{"Downtown",                    {-1982.30,744.10,-6.10,-1871.70,1274.20,200.00}},
	{"Downtown",                    {-1871.70,1176.40,-4.50,-1620.30,1274.20,200.00}},
	{"Downtown",                    {-1700.00,744.20,-6.10,-1580.00,1176.50,200.00}},
	{"Downtown",                    {-1580.00,744.20,-6.10,-1499.80,1025.90,200.00}},
	{"Downtown",                    {-2078.60,578.30,-7.60,-1499.80,744.20,200.00}},
	{"Downtown",                    {-1993.20,265.20,-9.10,-1794.90,578.30,200.00}},
	{"Downtown Los Santos",         {1463.90,-1430.80,-89.00,1724.70,-1290.80,110.90}},
	{"Downtown Los Santos",         {1724.70,-1430.80,-89.00,1812.60,-1250.90,110.90}},
	{"Downtown Los Santos",         {1463.90,-1290.80,-89.00,1724.70,-1150.80,110.90}},
	{"Downtown Los Santos",         {1370.80,-1384.90,-89.00,1463.90,-1170.80,110.90}},
	{"Downtown Los Santos",         {1724.70,-1250.90,-89.00,1812.60,-1150.80,110.90}},
	{"Downtown Los Santos",         {1370.80,-1170.80,-89.00,1463.90,-1130.80,110.90}},
	{"Downtown Los Santos",         {1378.30,-1130.80,-89.00,1463.90,-1026.30,110.90}},
	{"Downtown Los Santos",         {1391.00,-1026.30,-89.00,1463.90,-926.90,110.90}},
	{"Downtown Los Santos",         {1507.50,-1385.20,110.90,1582.50,-1325.30,335.90}},
	{"East Beach",                  {2632.80,-1852.80,-89.00,2959.30,-1668.10,110.90}},
	{"East Beach",                  {2632.80,-1668.10,-89.00,2747.70,-1393.40,110.90}},
	{"East Beach",                  {2747.70,-1668.10,-89.00,2959.30,-1498.60,110.90}},
	{"East Beach",                  {2747.70,-1498.60,-89.00,2959.30,-1120.00,110.90}},
	{"East Los Santos",             {2421.00,-1628.50,-89.00,2632.80,-1454.30,110.90}},
	{"East Los Santos",             {2222.50,-1628.50,-89.00,2421.00,-1494.00,110.90}},
	{"East Los Santos",             {2266.20,-1494.00,-89.00,2381.60,-1372.00,110.90}},
	{"East Los Santos",             {2381.60,-1494.00,-89.00,2421.00,-1454.30,110.90}},
	{"East Los Santos",             {2281.40,-1372.00,-89.00,2381.60,-1135.00,110.90}},
	{"East Los Santos",             {2381.60,-1454.30,-89.00,2462.10,-1135.00,110.90}},
	{"East Los Santos",             {2462.10,-1454.30,-89.00,2581.70,-1135.00,110.90}},
	{"Easter Basin",                {-1794.90,249.90,-9.10,-1242.90,578.30,200.00}},
	{"Easter Basin",                {-1794.90,-50.00,-0.00,-1499.80,249.90,200.00}},
	{"Easter Bay Airport",          {-1499.80,-50.00,-0.00,-1242.90,249.90,200.00}},
	{"Easter Bay Airport",          {-1794.90,-730.10,-3.00,-1213.90,-50.00,200.00}},
	{"Easter Bay Airport",          {-1213.90,-730.10,0.00,-1132.80,-50.00,200.00}},
	{"Easter Bay Airport",          {-1242.90,-50.00,0.00,-1213.90,578.30,200.00}},
	{"Easter Bay Airport",          {-1213.90,-50.00,-4.50,-947.90,578.30,200.00}},
	{"Easter Bay Airport",          {-1315.40,-405.30,15.40,-1264.40,-209.50,25.40}},
	{"Easter Bay Airport",          {-1354.30,-287.30,15.40,-1315.40,-209.50,25.40}},
	{"Easter Bay Airport",          {-1490.30,-209.50,15.40,-1264.40,-148.30,25.40}},
	{"Easter Bay Chemicals",        {-1132.80,-768.00,0.00,-956.40,-578.10,200.00}},
	{"Easter Bay Chemicals",        {-1132.80,-787.30,0.00,-956.40,-768.00,200.00}},
	{"El Castillo del Diablo",      {-464.50,2217.60,0.00,-208.50,2580.30,200.00}},
	{"El Castillo del Diablo",      {-208.50,2123.00,-7.60,114.00,2337.10,200.00}},
	{"El Castillo del Diablo",      {-208.50,2337.10,0.00,8.40,2487.10,200.00}},
	{"El Corona",                   {1812.60,-2179.20,-89.00,1970.60,-1852.80,110.90}},
	{"El Corona",                   {1692.60,-2179.20,-89.00,1812.60,-1842.20,110.90}},
	{"El Quebrados",                {-1645.20,2498.50,0.00,-1372.10,2777.80,200.00}},
	{"Esplanade East",              {-1620.30,1176.50,-4.50,-1580.00,1274.20,200.00}},
	{"Esplanade East",              {-1580.00,1025.90,-6.10,-1499.80,1274.20,200.00}},
	{"Esplanade East",              {-1499.80,578.30,-79.60,-1339.80,1274.20,20.30}},
	{"Esplanade North",             {-2533.00,1358.90,-4.50,-1996.60,1501.20,200.00}},
	{"Esplanade North",             {-1996.60,1358.90,-4.50,-1524.20,1592.50,200.00}},
	{"Esplanade North",             {-1982.30,1274.20,-4.50,-1524.20,1358.90,200.00}},
	{"Fallen Tree",                 {-792.20,-698.50,-5.30,-452.40,-380.00,200.00}},
	{"Fallow Bridge",               {434.30,366.50,0.00,603.00,555.60,200.00}},
	{"Fern Ridge",                  {508.10,-139.20,0.00,1306.60,119.50,200.00}},
	{"Financial",                   {-1871.70,744.10,-6.10,-1701.30,1176.40,300.00}},
	{"Fisher's Lagoon",             {1916.90,-233.30,-100.00,2131.70,13.80,200.00}},
	{"Flint Intersection",          {-187.70,-1596.70,-89.00,17.00,-1276.60,110.90}},
	{"Flint Range",                 {-594.10,-1648.50,0.00,-187.70,-1276.60,200.00}},
	{"Fort Carson",                 {-376.20,826.30,-3.00,123.70,1220.40,200.00}},
	{"Foster Valley",               {-2270.00,-430.20,-0.00,-2178.60,-324.10,200.00}},
	{"Foster Valley",               {-2178.60,-599.80,-0.00,-1794.90,-324.10,200.00}},
	{"Foster Valley",               {-2178.60,-1115.50,0.00,-1794.90,-599.80,200.00}},
	{"Foster Valley",               {-2178.60,-1250.90,0.00,-1794.90,-1115.50,200.00}},
	{"Frederick Bridge",            {2759.20,296.50,0.00,2774.20,594.70,200.00}},
	{"Gant Bridge",                 {-2741.40,1659.60,-6.10,-2616.40,2175.10,200.00}},
	{"Gant Bridge",                 {-2741.00,1490.40,-6.10,-2616.40,1659.60,200.00}},
	{"Ganton",                      {2222.50,-1852.80,-89.00,2632.80,-1722.30,110.90}},
	{"Ganton",                      {2222.50,-1722.30,-89.00,2632.80,-1628.50,110.90}},
	{"Garcia",                      {-2411.20,-222.50,-0.00,-2173.00,265.20,200.00}},
	{"Garcia",                      {-2395.10,-222.50,-5.30,-2354.00,-204.70,200.00}},
	{"Garver Bridge",               {-1339.80,828.10,-89.00,-1213.90,1057.00,110.90}},
	{"Garver Bridge",               {-1213.90,950.00,-89.00,-1087.90,1178.90,110.90}},
	{"Garver Bridge",               {-1499.80,696.40,-179.60,-1339.80,925.30,20.30}},
	{"Glen Park",                   {1812.60,-1449.60,-89.00,1996.90,-1350.70,110.90}},
	{"Glen Park",                   {1812.60,-1100.80,-89.00,1994.30,-973.30,110.90}},
	{"Glen Park",                   {1812.60,-1350.70,-89.00,2056.80,-1100.80,110.90}},
	{"Green Palms",                 {176.50,1305.40,-3.00,338.60,1520.70,200.00}},
	{"Greenglass College",          {964.30,1044.60,-89.00,1197.30,1203.20,110.90}},
	{"Greenglass College",          {964.30,930.80,-89.00,1166.50,1044.60,110.90}},
	{"Hampton Barns",               {603.00,264.30,0.00,761.90,366.50,200.00}},
	{"Hankypanky Point",            {2576.90,62.10,0.00,2759.20,385.50,200.00}},
	{"Harry Gold Parkway",          {1777.30,863.20,-89.00,1817.30,2342.80,110.90}},
	{"Hashbury",                    {-2593.40,-222.50,-0.00,-2411.20,54.70,200.00}},
	{"Hilltop Farm",                {967.30,-450.30,-3.00,1176.70,-217.90,200.00}},
	{"Hunter Quarry",               {337.20,710.80,-115.20,860.50,1031.70,203.70}},
	{"Idlewood",                    {1812.60,-1852.80,-89.00,1971.60,-1742.30,110.90}},
	{"Idlewood",                    {1812.60,-1742.30,-89.00,1951.60,-1602.30,110.90}},
	{"Idlewood",                    {1951.60,-1742.30,-89.00,2124.60,-1602.30,110.90}},
	{"Idlewood",                    {1812.60,-1602.30,-89.00,2124.60,-1449.60,110.90}},
	{"Idlewood",                    {2124.60,-1742.30,-89.00,2222.50,-1494.00,110.90}},
	{"Idlewood",                    {1971.60,-1852.80,-89.00,2222.50,-1742.30,110.90}},
	{"Jefferson",                   {1996.90,-1449.60,-89.00,2056.80,-1350.70,110.90}},
	{"Jefferson",                   {2124.60,-1494.00,-89.00,2266.20,-1449.60,110.90}},
	{"Jefferson",                   {2056.80,-1372.00,-89.00,2281.40,-1210.70,110.90}},
	{"Jefferson",                   {2056.80,-1210.70,-89.00,2185.30,-1126.30,110.90}},
	{"Jefferson",                   {2185.30,-1210.70,-89.00,2281.40,-1154.50,110.90}},
	{"Jefferson",                   {2056.80,-1449.60,-89.00,2266.20,-1372.00,110.90}},
	{"Julius Thruway East",         {2623.10,943.20,-89.00,2749.90,1055.90,110.90}},
	{"Julius Thruway East",         {2685.10,1055.90,-89.00,2749.90,2626.50,110.90}},
	{"Julius Thruway East",         {2536.40,2442.50,-89.00,2685.10,2542.50,110.90}},
	{"Julius Thruway East",         {2625.10,2202.70,-89.00,2685.10,2442.50,110.90}},
	{"Julius Thruway North",        {2498.20,2542.50,-89.00,2685.10,2626.50,110.90}},
	{"Julius Thruway North",        {2237.40,2542.50,-89.00,2498.20,2663.10,110.90}},
	{"Julius Thruway North",        {2121.40,2508.20,-89.00,2237.40,2663.10,110.90}},
	{"Julius Thruway North",        {1938.80,2508.20,-89.00,2121.40,2624.20,110.90}},
	{"Julius Thruway North",        {1534.50,2433.20,-89.00,1848.40,2583.20,110.90}},
	{"Julius Thruway North",        {1848.40,2478.40,-89.00,1938.80,2553.40,110.90}},
	{"Julius Thruway North",        {1704.50,2342.80,-89.00,1848.40,2433.20,110.90}},
	{"Julius Thruway North",        {1377.30,2433.20,-89.00,1534.50,2507.20,110.90}},
	{"Julius Thruway South",        {1457.30,823.20,-89.00,2377.30,863.20,110.90}},
	{"Julius Thruway South",        {2377.30,788.80,-89.00,2537.30,897.90,110.90}},
	{"Julius Thruway West",         {1197.30,1163.30,-89.00,1236.60,2243.20,110.90}},
	{"Julius Thruway West",         {1236.60,2142.80,-89.00,1297.40,2243.20,110.90}},
	{"Juniper Hill",                {-2533.00,578.30,-7.60,-2274.10,968.30,200.00}},
	{"Juniper Hollow",              {-2533.00,968.30,-6.10,-2274.10,1358.90,200.00}},
	{"K.A.C.C. Military Fuels",     {2498.20,2626.50,-89.00,2749.90,2861.50,110.90}},
	{"Kincaid Bridge",              {-1339.80,599.20,-89.00,-1213.90,828.10,110.90}},
	{"Kincaid Bridge",              {-1213.90,721.10,-89.00,-1087.90,950.00,110.90}},
	{"Kincaid Bridge",              {-1087.90,855.30,-89.00,-961.90,986.20,110.90}},
	{"King's",                      {-2329.30,458.40,-7.60,-1993.20,578.30,200.00}},
	{"King's",                      {-2411.20,265.20,-9.10,-1993.20,373.50,200.00}},
	{"King's",                      {-2253.50,373.50,-9.10,-1993.20,458.40,200.00}},
	{"LVA Freight Depot",           {1457.30,863.20,-89.00,1777.40,1143.20,110.90}},
	{"LVA Freight Depot",           {1375.60,919.40,-89.00,1457.30,1203.20,110.90}},
	{"LVA Freight Depot",           {1277.00,1087.60,-89.00,1375.60,1203.20,110.90}},
	{"LVA Freight Depot",           {1315.30,1044.60,-89.00,1375.60,1087.60,110.90}},
	{"LVA Freight Depot",           {1236.60,1163.40,-89.00,1277.00,1203.20,110.90}},
	{"Las Barrancas",               {-926.10,1398.70,-3.00,-719.20,1634.60,200.00}},
	{"Las Brujas",                  {-365.10,2123.00,-3.00,-208.50,2217.60,200.00}},
	{"Las Colinas",                 {1994.30,-1100.80,-89.00,2056.80,-920.80,110.90}},
	{"Las Colinas",                 {2056.80,-1126.30,-89.00,2126.80,-920.80,110.90}},
	{"Las Colinas",                 {2185.30,-1154.50,-89.00,2281.40,-934.40,110.90}},
	{"Las Colinas",                 {2126.80,-1126.30,-89.00,2185.30,-934.40,110.90}},
	{"Las Colinas",                 {2747.70,-1120.00,-89.00,2959.30,-945.00,110.90}},
	{"Las Colinas",                 {2632.70,-1135.00,-89.00,2747.70,-945.00,110.90}},
	{"Las Colinas",                 {2281.40,-1135.00,-89.00,2632.70,-945.00,110.90}},
	{"Las Payasadas",               {-354.30,2580.30,2.00,-133.60,2816.80,200.00}},
	{"Las Venturas Airport",        {1236.60,1203.20,-89.00,1457.30,1883.10,110.90}},
	{"Las Venturas Airport",        {1457.30,1203.20,-89.00,1777.30,1883.10,110.90}},
	{"Las Venturas Airport",        {1457.30,1143.20,-89.00,1777.40,1203.20,110.90}},
	{"Las Venturas Airport",        {1515.80,1586.40,-12.50,1729.90,1714.50,87.50}},
	{"Last Dime Motel",             {1823.00,596.30,-89.00,1997.20,823.20,110.90}},
	{"Leafy Hollow",                {-1166.90,-1856.00,0.00,-815.60,-1602.00,200.00}},
	{"Liberty City",                {-1000.00,400.00,1300.00,-700.00,600.00,1400.00}},
	{"Lil' Probe Inn",              {-90.20,1286.80,-3.00,153.80,1554.10,200.00}},
	{"Linden Side",                 {2749.90,943.20,-89.00,2923.30,1198.90,110.90}},
	{"Linden Station",              {2749.90,1198.90,-89.00,2923.30,1548.90,110.90}},
	{"Linden Station",              {2811.20,1229.50,-39.50,2861.20,1407.50,60.40}},
	{"Little Mexico",               {1701.90,-1842.20,-89.00,1812.60,-1722.20,110.90}},
	{"Little Mexico",               {1758.90,-1722.20,-89.00,1812.60,-1577.50,110.90}},
	{"Los Flores",                  {2581.70,-1454.30,-89.00,2632.80,-1393.40,110.90}},
	{"Los Flores",                  {2581.70,-1393.40,-89.00,2747.70,-1135.00,110.90}},
	{"Los Santos International",    {1249.60,-2394.30,-89.00,1852.00,-2179.20,110.90}},
	{"Los Santos International",    {1852.00,-2394.30,-89.00,2089.00,-2179.20,110.90}},
	{"Los Santos International",    {1382.70,-2730.80,-89.00,2201.80,-2394.30,110.90}},
	{"Los Santos International",    {1974.60,-2394.30,-39.00,2089.00,-2256.50,60.90}},
	{"Los Santos International",    {1400.90,-2669.20,-39.00,2189.80,-2597.20,60.90}},
	{"Los Santos International",    {2051.60,-2597.20,-39.00,2152.40,-2394.30,60.90}},
	{"Marina",                      {647.70,-1804.20,-89.00,851.40,-1577.50,110.90}},
	{"Marina",                      {647.70,-1577.50,-89.00,807.90,-1416.20,110.90}},
	{"Marina",                      {807.90,-1577.50,-89.00,926.90,-1416.20,110.90}},
	{"Market",                      {787.40,-1416.20,-89.00,1072.60,-1310.20,110.90}},
	{"Market",                      {952.60,-1310.20,-89.00,1072.60,-1130.80,110.90}},
	{"Market",                      {1072.60,-1416.20,-89.00,1370.80,-1130.80,110.90}},
	{"Market",                      {926.90,-1577.50,-89.00,1370.80,-1416.20,110.90}},
	{"Market Station",              {787.40,-1410.90,-34.10,866.00,-1310.20,65.80}},
	{"Martin Bridge",               {-222.10,293.30,0.00,-122.10,476.40,200.00}},
	{"Missionary Hill",             {-2994.40,-811.20,0.00,-2178.60,-430.20,200.00}},
	{"Montgomery",                  {1119.50,119.50,-3.00,1451.40,493.30,200.00}},
	{"Montgomery",                  {1451.40,347.40,-6.10,1582.40,420.80,200.00}},
	{"Montgomery Intersection",     {1546.60,208.10,0.00,1745.80,347.40,200.00}},
	{"Montgomery Intersection",     {1582.40,347.40,0.00,1664.60,401.70,200.00}},
	{"Mulholland",                  {1414.00,-768.00,-89.00,1667.60,-452.40,110.90}},
	{"Mulholland",                  {1281.10,-452.40,-89.00,1641.10,-290.90,110.90}},
	{"Mulholland",                  {1269.10,-768.00,-89.00,1414.00,-452.40,110.90}},
	{"Mulholland",                  {1357.00,-926.90,-89.00,1463.90,-768.00,110.90}},
	{"Mulholland",                  {1318.10,-910.10,-89.00,1357.00,-768.00,110.90}},
	{"Mulholland",                  {1169.10,-910.10,-89.00,1318.10,-768.00,110.90}},
	{"Mulholland",                  {768.60,-954.60,-89.00,952.60,-860.60,110.90}},
	{"Mulholland",                  {687.80,-860.60,-89.00,911.80,-768.00,110.90}},
	{"Mulholland",                  {737.50,-768.00,-89.00,1142.20,-674.80,110.90}},
	{"Mulholland",                  {1096.40,-910.10,-89.00,1169.10,-768.00,110.90}},
	{"Mulholland",                  {952.60,-937.10,-89.00,1096.40,-860.60,110.90}},
	{"Mulholland",                  {911.80,-860.60,-89.00,1096.40,-768.00,110.90}},
	{"Mulholland",                  {861.00,-674.80,-89.00,1156.50,-600.80,110.90}},
	{"Mulholland Intersection",     {1463.90,-1150.80,-89.00,1812.60,-768.00,110.90}},
	{"North Rock",                  {2285.30,-768.00,0.00,2770.50,-269.70,200.00}},
	{"Ocean Docks",                 {2373.70,-2697.00,-89.00,2809.20,-2330.40,110.90}},
	{"Ocean Docks",                 {2201.80,-2418.30,-89.00,2324.00,-2095.00,110.90}},
	{"Ocean Docks",                 {2324.00,-2302.30,-89.00,2703.50,-2145.10,110.90}},
	{"Ocean Docks",                 {2089.00,-2394.30,-89.00,2201.80,-2235.80,110.90}},
	{"Ocean Docks",                 {2201.80,-2730.80,-89.00,2324.00,-2418.30,110.90}},
	{"Ocean Docks",                 {2703.50,-2302.30,-89.00,2959.30,-2126.90,110.90}},
	{"Ocean Docks",                 {2324.00,-2145.10,-89.00,2703.50,-2059.20,110.90}},
	{"Ocean Flats",                 {-2994.40,277.40,-9.10,-2867.80,458.40,200.00}},
	{"Ocean Flats",                 {-2994.40,-222.50,-0.00,-2593.40,277.40,200.00}},
	{"Ocean Flats",                 {-2994.40,-430.20,-0.00,-2831.80,-222.50,200.00}},
	{"Octane Springs",              {338.60,1228.50,0.00,664.30,1655.00,200.00}},
	{"Old Venturas Strip",          {2162.30,2012.10,-89.00,2685.10,2202.70,110.90}},
	{"Palisades",                   {-2994.40,458.40,-6.10,-2741.00,1339.60,200.00}},
	{"Palomino Creek",              {2160.20,-149.00,0.00,2576.90,228.30,200.00}},
	{"Paradiso",                    {-2741.00,793.40,-6.10,-2533.00,1268.40,200.00}},
	{"Pershing Square",             {1440.90,-1722.20,-89.00,1583.50,-1577.50,110.90}},
	{"Pilgrim",                     {2437.30,1383.20,-89.00,2624.40,1783.20,110.90}},
	{"Pilgrim",                     {2624.40,1383.20,-89.00,2685.10,1783.20,110.90}},
	{"Pilson Intersection",         {1098.30,2243.20,-89.00,1377.30,2507.20,110.90}},
	{"Pirates in Men's Pants",      {1817.30,1469.20,-89.00,2027.40,1703.20,110.90}},
	{"Playa del Seville",           {2703.50,-2126.90,-89.00,2959.30,-1852.80,110.90}},
	{"Prickle Pine",                {1534.50,2583.20,-89.00,1848.40,2863.20,110.90}},
	{"Prickle Pine",                {1117.40,2507.20,-89.00,1534.50,2723.20,110.90}},
	{"Prickle Pine",                {1848.40,2553.40,-89.00,1938.80,2863.20,110.90}},
	{"Prickle Pine",                {1938.80,2624.20,-89.00,2121.40,2861.50,110.90}},
	{"Queens",                      {-2533.00,458.40,0.00,-2329.30,578.30,200.00}},
	{"Queens",                      {-2593.40,54.70,0.00,-2411.20,458.40,200.00}},
	{"Queens",                      {-2411.20,373.50,0.00,-2253.50,458.40,200.00}},
	{"Randolph Industrial Estate",  {1558.00,596.30,-89.00,1823.00,823.20,110.90}},
	{"Redsands East",               {1817.30,2011.80,-89.00,2106.70,2202.70,110.90}},
	{"Redsands East",               {1817.30,2202.70,-89.00,2011.90,2342.80,110.90}},
	{"Redsands East",               {1848.40,2342.80,-89.00,2011.90,2478.40,110.90}},
	{"Redsands West",               {1236.60,1883.10,-89.00,1777.30,2142.80,110.90}},
	{"Redsands West",               {1297.40,2142.80,-89.00,1777.30,2243.20,110.90}},
	{"Redsands West",               {1377.30,2243.20,-89.00,1704.50,2433.20,110.90}},
	{"Redsands West",               {1704.50,2243.20,-89.00,1777.30,2342.80,110.90}},
	{"Regular Tom",                 {-405.70,1712.80,-3.00,-276.70,1892.70,200.00}},
	{"Richman",                     {647.50,-1118.20,-89.00,787.40,-954.60,110.90}},
	{"Richman",                     {647.50,-954.60,-89.00,768.60,-860.60,110.90}},
	{"Richman",                     {225.10,-1369.60,-89.00,334.50,-1292.00,110.90}},
	{"Richman",                     {225.10,-1292.00,-89.00,466.20,-1235.00,110.90}},
	{"Richman",                     {72.60,-1404.90,-89.00,225.10,-1235.00,110.90}},
	{"Richman",                     {72.60,-1235.00,-89.00,321.30,-1008.10,110.90}},
	{"Richman",                     {321.30,-1235.00,-89.00,647.50,-1044.00,110.90}},
	{"Richman",                     {321.30,-1044.00,-89.00,647.50,-860.60,110.90}},
	{"Richman",                     {321.30,-860.60,-89.00,687.80,-768.00,110.90}},
	{"Richman",                     {321.30,-768.00,-89.00,700.70,-674.80,110.90}},
	{"Robada Intersection",         {-1119.00,1178.90,-89.00,-862.00,1351.40,110.90}},
	{"Roca Escalante",              {2237.40,2202.70,-89.00,2536.40,2542.50,110.90}},
	{"Roca Escalante",              {2536.40,2202.70,-89.00,2625.10,2442.50,110.90}},
	{"Rockshore East",              {2537.30,676.50,-89.00,2902.30,943.20,110.90}},
	{"Rockshore West",              {1997.20,596.30,-89.00,2377.30,823.20,110.90}},
	{"Rockshore West",              {2377.30,596.30,-89.00,2537.30,788.80,110.90}},
	{"Rodeo",                       {72.60,-1684.60,-89.00,225.10,-1544.10,110.90}},
	{"Rodeo",                       {72.60,-1544.10,-89.00,225.10,-1404.90,110.90}},
	{"Rodeo",                       {225.10,-1684.60,-89.00,312.80,-1501.90,110.90}},
	{"Rodeo",                       {225.10,-1501.90,-89.00,334.50,-1369.60,110.90}},
	{"Rodeo",                       {334.50,-1501.90,-89.00,422.60,-1406.00,110.90}},
	{"Rodeo",                       {312.80,-1684.60,-89.00,422.60,-1501.90,110.90}},
	{"Rodeo",                       {422.60,-1684.60,-89.00,558.00,-1570.20,110.90}},
	{"Rodeo",                       {558.00,-1684.60,-89.00,647.50,-1384.90,110.90}},
	{"Rodeo",                       {466.20,-1570.20,-89.00,558.00,-1385.00,110.90}},
	{"Rodeo",                       {422.60,-1570.20,-89.00,466.20,-1406.00,110.90}},
	{"Rodeo",                       {466.20,-1385.00,-89.00,647.50,-1235.00,110.90}},
	{"Rodeo",                       {334.50,-1406.00,-89.00,466.20,-1292.00,110.90}},
	{"Royal Casino",                {2087.30,1383.20,-89.00,2437.30,1543.20,110.90}},
	{"San Andreas Sound",           {2450.30,385.50,-100.00,2759.20,562.30,200.00}},
	{"Santa Flora",                 {-2741.00,458.40,-7.60,-2533.00,793.40,200.00}},
	{"Santa Maria Beach",           {342.60,-2173.20,-89.00,647.70,-1684.60,110.90}},
	{"Santa Maria Beach",           {72.60,-2173.20,-89.00,342.60,-1684.60,110.90}},
	{"Shady Cabin",                 {-1632.80,-2263.40,-3.00,-1601.30,-2231.70,200.00}},
	{"Shady Creeks",                {-1820.60,-2643.60,-8.00,-1226.70,-1771.60,200.00}},
	{"Shady Creeks",                {-2030.10,-2174.80,-6.10,-1820.60,-1771.60,200.00}},
	{"Sobell Rail Yards",           {2749.90,1548.90,-89.00,2923.30,1937.20,110.90}},
	{"Spinybed",                    {2121.40,2663.10,-89.00,2498.20,2861.50,110.90}},
	{"Starfish Casino",             {2437.30,1783.20,-89.00,2685.10,2012.10,110.90}},
	{"Starfish Casino",             {2437.30,1858.10,-39.00,2495.00,1970.80,60.90}},
	{"Starfish Casino",             {2162.30,1883.20,-89.00,2437.30,2012.10,110.90}},
	{"Temple",                      {1252.30,-1130.80,-89.00,1378.30,-1026.30,110.90}},
	{"Temple",                      {1252.30,-1026.30,-89.00,1391.00,-926.90,110.90}},
	{"Temple",                      {1252.30,-926.90,-89.00,1357.00,-910.10,110.90}},
	{"Temple",                      {952.60,-1130.80,-89.00,1096.40,-937.10,110.90}},
	{"Temple",                      {1096.40,-1130.80,-89.00,1252.30,-1026.30,110.90}},
	{"Temple",                      {1096.40,-1026.30,-89.00,1252.30,-910.10,110.90}},
	{"The Camel's Toe",             {2087.30,1203.20,-89.00,2640.40,1383.20,110.90}},
	{"The Clown's Pocket",          {2162.30,1783.20,-89.00,2437.30,1883.20,110.90}},
	{"The Emerald Isle",            {2011.90,2202.70,-89.00,2237.40,2508.20,110.90}},
	{"The Farm",                    {-1209.60,-1317.10,114.90,-908.10,-787.30,251.90}},
	{"The Four Dragons Casino",     {1817.30,863.20,-89.00,2027.30,1083.20,110.90}},
	{"The High Roller",             {1817.30,1283.20,-89.00,2027.30,1469.20,110.90}},
	{"The Mako Span",               {1664.60,401.70,0.00,1785.10,567.20,200.00}},
	{"The Panopticon",              {-947.90,-304.30,-1.10,-319.60,327.00,200.00}},
	{"The Pink Swan",               {1817.30,1083.20,-89.00,2027.30,1283.20,110.90}},
	{"The Sherman Dam",             {-968.70,1929.40,-3.00,-481.10,2155.20,200.00}},
	{"The Strip",                   {2027.40,863.20,-89.00,2087.30,1703.20,110.90}},
	{"The Strip",                   {2106.70,1863.20,-89.00,2162.30,2202.70,110.90}},
	{"The Strip",                   {2027.40,1783.20,-89.00,2162.30,1863.20,110.90}},
	{"The Strip",                   {2027.40,1703.20,-89.00,2137.40,1783.20,110.90}},
	{"The Visage",                  {1817.30,1863.20,-89.00,2106.70,2011.80,110.90}},
	{"The Visage",                  {1817.30,1703.20,-89.00,2027.40,1863.20,110.90}},
	{"Unity Station",               {1692.60,-1971.80,-20.40,1812.60,-1932.80,79.50}},
	{"Valle Ocultado",              {-936.60,2611.40,2.00,-715.90,2847.90,200.00}},
	{"Verdant Bluffs",              {930.20,-2488.40,-89.00,1249.60,-2006.70,110.90}},
	{"Verdant Bluffs",              {1073.20,-2006.70,-89.00,1249.60,-1842.20,110.90}},
	{"Verdant Bluffs",              {1249.60,-2179.20,-89.00,1692.60,-1842.20,110.90}},
	{"Verdant Meadows",             {37.00,2337.10,-3.00,435.90,2677.90,200.00}},
	{"Verona Beach",                {647.70,-2173.20,-89.00,930.20,-1804.20,110.90}},
	{"Verona Beach",                {930.20,-2006.70,-89.00,1073.20,-1804.20,110.90}},
	{"Verona Beach",                {851.40,-1804.20,-89.00,1046.10,-1577.50,110.90}},
	{"Verona Beach",                {1161.50,-1722.20,-89.00,1323.90,-1577.50,110.90}},
	{"Verona Beach",                {1046.10,-1722.20,-89.00,1161.50,-1577.50,110.90}},
	{"Vinewood",                    {787.40,-1310.20,-89.00,952.60,-1130.80,110.90}},
	{"Vinewood",                    {787.40,-1130.80,-89.00,952.60,-954.60,110.90}},
	{"Vinewood",                    {647.50,-1227.20,-89.00,787.40,-1118.20,110.90}},
	{"Vinewood",                    {647.70,-1416.20,-89.00,787.40,-1227.20,110.90}},
	{"Whitewood Estates",           {883.30,1726.20,-89.00,1098.30,2507.20,110.90}},
	{"Whitewood Estates",           {1098.30,1726.20,-89.00,1197.30,2243.20,110.90}},
	{"Willowfield",                 {1970.60,-2179.20,-89.00,2089.00,-1852.80,110.90}},
	{"Willowfield",                 {2089.00,-2235.80,-89.00,2201.80,-1989.90,110.90}},
	{"Willowfield",                 {2089.00,-1989.90,-89.00,2324.00,-1852.80,110.90}},
	{"Willowfield",                 {2201.80,-2095.00,-89.00,2324.00,-1989.90,110.90}},
	{"Willowfield",                 {2541.70,-1941.40,-89.00,2703.50,-1852.80,110.90}},
	{"Willowfield",                 {2324.00,-2059.20,-89.00,2541.70,-1852.80,110.90}},
	{"Willowfield",                 {2541.70,-2059.20,-89.00,2703.50,-1941.40,110.90}},
	{"Yellow Bell Station",         {1377.40,2600.40,-21.90,1492.40,2687.30,78.00}},
	// Main Zones
	{"Los Santos",                  {44.60,-2892.90,-242.90,2997.00,-768.00,900.00}},
	{"Las Venturas",                {869.40,596.30,-242.90,2997.00,2993.80,900.00}},
	{"Bone County",                 {-480.50,596.30,-242.90,869.40,2993.80,900.00}},
	{"Tierra Robada",               {-2997.40,1659.60,-242.90,-480.50,2993.80,900.00}},
	{"Tierra Robada",               {-1213.90,596.30,-242.90,-480.50,1659.60,900.00}},
	{"San Fierro",                  {-2997.40,-1115.50,-242.90,-1213.90,1659.60,900.00}},
	{"Red County",                  {-1213.90,-768.00,-242.90,2997.00,596.30,900.00}},
	{"Flint County",                {-1213.90,-2892.90,-242.90,44.60,-768.00,900.00}},
	{"Whetstone",                   {-2997.40,-2892.90,-242.90,-1213.90,-1115.50,900.00}}
};
// < Helmet offsets, rotations and scales )
static Float:HelmetPos[ 312 ][ 9 ] =
{
	{0.07, 0.0, 0.0, 88.0, 75.0, 0.0}, //skin 0
	{0.07, 0.0, 0.0, 88.0, 77.0, 0.0}, //skin 1
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, //skin 2
	{0.082272, 0.012175, 0.000000, 88.573463, 83.217987, 0.571479, 1.037069}, //skin 3
	{0.106029, 0.020526, 0.000000, 88.573463, 83.217987, 0.571479, 1.011797}, //skin 4
	{0.065514, 0.029894, 0.000000, 88.573463, 83.217987, 0.571479, 1.067914}, //skin 5
	{0.081949, 0.035309, 0.000000, 88.573463, 83.217987, 0.571479, 1.037069}, //skin 6
	{0.09, 0.019999, 0.0, 88.0, 90.0, 0.0}, //skin 7
	{0.07, 0.0, 0.0, 88.0, 77.0, 0.0}, //skin 8
	{0.059999, 0.019999, 0.0, 88.0, 90.0, 0.0}, //skin 9
	{0.090000, 0.019999, 0.0, 88.0, 90.0, 0.0}, //skin 10
	{0.07, 0.019999, 0.0, 88.0, 90.0, 0.0}, //skin 11
	{0.07, 0.019999, 0.0, 88.0, 90.0, 0.0}, //skin 12
	{0.07, 0.019999, 0.0, 88.0, 90.0, 0.0}, //skin 13
	{0.071141, 0.033483, 0.000000, 89.899635, 82.456283, 0.000000}, //skin 14
	{0.059999, 0.0, 0.0, 88.0, 82.0, 0.0}, //skin 15
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, //skin 16
	{0.059999, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 17
	{0.059999, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 18
	{0.071141, 0.033483, 0.000000, 89.899635, 82.456283, 0.000000}, //skin 19
	{0.071141, 0.012607, 0.000000, 89.899635, 82.456283, 0.000000}, //skin 20
	{0.059999, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 21
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, //skin 22
	{0.079999, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 23
	{0.079999, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 24
	{0.079999, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 25
	{0.079999, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 26
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, //skin 27
	{0.079999, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 28
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, //skin 29
	{0.079999, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 30
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, //skin 31
	{0.079999, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 32
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, //skin 33
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, //skin 34
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, //skin 35
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, //skin 36
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, //skin 37
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, //skin 38
	{0.079999, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 39
	{0.050000, 0.009999, 0.0, 88.0, 82.0, 0.0}, //skin 40
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, //skin 41
	{0.065985, 0.011633, 0.000000, 88.573463, 83.217987, 0.571479, 1.002084}, //skin 42
	{0.07, 0.0, 0.0, 88.0, 77.0, 0.0}, //skin 43
	{0.07, 0.0, 0.0, 88.0, 77.0, 0.0}, //skin 44
	{0.07, 0.0, 0.0, 88.0, 77.0, 0.0}, //skin 45
	{0.071141, 0.026406, 0.000000, 89.899635, 82.456283, 0.000000}, //skin 46
	{0.071141, 0.026406, 0.000000, 89.899635, 82.456283, 0.000000}, //skin 47
	{0.071141, 0.026406, 0.000000, 89.899635, 82.456283, 0.000000}, //skin 48
	{0.07, 0.0, 0.0, 88.0, 77.0, 0.0}, //skin 49
	{0.07, 0.009999, 0.0, 88.0, 82.0, 0.0}, //skin 50
	{0.100000, 0.009999, 0.0, 88.0, 82.0, 0.0}, //skin 51
	{0.100000, 0.009999, 0.0, 88.0, 82.0, 0.0}, //skin 52
	{0.071141, 0.048094, 0.000000, 89.899635, 82.456283, 0.000000}, //skin 53
	{0.100000, 0.009999, 0.0, 88.0, 82.0, 0.0}, //skin 54
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 55
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 56
	{0.079999, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 57
	{0.079999, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 58
	{0.079999, 0.029999, 0.0, 88.0, 82.0, 0.0}, //skin 59
	{0.079999, 0.029999, 0.0, 88.0, 82.0, 0.0}, //skin 60
	{0.079999, 0.029999, 0.0, 88.0, 82.0, 0.0}, //skin 61
	{0.079999, 0.029999, 0.0, 88.0, 82.0, 0.0}, //skin 62
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 63
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 64
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, //skin 65
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 66
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 67
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 68
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 69
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 70
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 71
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 72
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 73
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, //skin 74
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 75
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 76
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, //skin 77
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 78
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 79
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 80
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 81
	{0.097840, 0.029344, 0.000000, 89.899635, 82.456283, 0.000000, 1.134920, 1.002417, 1.045661}, //skin 82
	{0.097840, 0.029344, 0.000000, 89.899635, 82.456283, 0.000000, 1.134920, 1.002417, 1.045661}, //skin 83
	{0.097840, 0.029344, 0.000000, 89.899635, 82.456283, 0.000000, 1.134920, 1.002417, 1.045661}, //skin 84
	{0.075789, 0.029344, 0.000000, 89.899635, 82.456283, 0.000000, 1.134920, 1.005379, 0.995997}, //skin 85
	{0.060571, 0.013831, 0.000000, 88.573463, 83.217987, 0.571479, 1.002084}, //skin 86
	{0.086140, 0.033741, 0.000000, 89.899635, 82.456283, 0.000000, 1.134920, 1.002417, 1.045661}, //skin 87
	{0.07, 0.039999, 0.0, 88.0, 82.0, 0.0}, //skin 88
	{0.086140, 0.004411, 0.000000, 89.899635, 82.456283, 0.000000, 1.012524, 1.000668, 0.999287}, //skin 89
	{0.054694, 0.021682, 0.007682, 90.191528, 75.430236, 0.296153}, //skin 90
	{0.054694, 0.021682, 0.007682, 90.191528, 75.430236, 0.296153}, //skin 91
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, //skin 92
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, //skin 93
	{0.050000, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 94
	{0.050000, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 95
	{0.050000, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 96
	{0.050000, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 97
	{0.079999, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 98
	{0.079999, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 99
	{0.07, 0.009999, 0.0, 88.0, 82.0, 0.0}, //skin 100
	{0.07, 0.009999, 0.0, 88.0, 82.0, 0.0}, //skin 101
	{0.07, 0.009999, 0.0, 88.0, 82.0, 0.0}, //skin 102
	{0.07, 0.009999, 0.0, 88.0, 82.0, 0.0}, //skin 103
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, //skin 104
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, //skin 105
	{0.079999, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 106
	{0.079999, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 107
	{0.079999, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 108
	{0.079999, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 109
	{0.079999, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 110
	{0.079999, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 111
	{0.079999, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 112
	{0.079999, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 113
	{0.079999, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 114
	{0.079999, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 115
	{0.079999, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 116
	{0.079999, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 117
	{0.079999, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 118
	{0.065985, 0.011633, 0.000000, 88.573463, 83.217987, 0.571479, 1.002084}, //skin 119
	{0.079999, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 120
	{0.079999, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 121
	{0.079999, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 122
	{0.079999, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 123
	{0.079999, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 124
	{0.079999, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 125
	{0.079999, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 126
	{0.079999, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 127
	{0.079999, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 128
	{0.079999, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 129
	{0.079999, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 130
	{0.079999, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 131
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, //skin 132
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 133
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 134
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 135
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 136
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, //skin 137
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 138
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 139
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 140
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 141
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 142
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, //skin 143
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, //skin 144
	{0.090000, 0.0, 0.0, 88.0, 82.0, 0.0}, //skin 145
	{0.090000, 0.0, 0.0, 88.0, 82.0, 0.0}, //skin 146
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 147
	{0.07, 0.009999, 0.0, 88.0, 82.0, 0.0}, //skin 148
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, //skin 149
	{0.07, 0.009999, 0.0, 88.0, 82.0, 0.0}, //skin 150
	{0.07, 0.009999, 0.0, 88.0, 82.0, 0.0}, //skin 151
	{0.07, 0.009999, 0.0, 88.0, 82.0, 0.0}, //skin 152
	{0.07, 0.009999, 0.0, 88.0, 82.0, 0.0}, //skin 153
	{0.07, 0.009999, 0.0, 88.0, 82.0, 0.0}, //skin 154
	{0.07, 0.009999, 0.0, 88.0, 82.0, 0.0}, //skin 155
	{0.07, 0.009999, 0.0, 88.0, 82.0, 0.0}, //skin 156
	{0.07, 0.009999, 0.0, 88.0, 82.0, 0.0}, //skin 157
	{0.07, 0.009999, 0.0, 88.0, 82.0, 0.0}, //skin 158
	{0.07, 0.009999, 0.0, 88.0, 82.0, 0.0}, //skin 159
	{0.07, 0.009999, 0.0, 88.0, 82.0, 0.0}, //skin 160
	{0.07, 0.009999, 0.0, 88.0, 82.0, 0.0}, //skin 161
	{0.07, 0.009999, 0.0, 88.0, 82.0, 0.0}, //skin 162
	{0.07, 0.009999, 0.0, 88.0, 82.0, 0.0}, //skin 163
	{0.07, 0.009999, 0.0, 88.0, 82.0, 0.0}, //skin 164
	{0.07, 0.009999, 0.0, 88.0, 82.0, 0.0}, //skin 165
	{0.07, 0.009999, 0.0, 88.0, 82.0, 0.0}, //skin 166
	{0.07, 0.009999, 0.0, 88.0, 82.0, 0.0}, //skin 167
	{0.07, 0.009999, 0.0, 88.0, 82.0, 0.0}, //skin 168
	{0.07, 0.009999, 0.0, 88.0, 82.0, 0.0}, //skin 169
	{0.07, 0.009999, 0.0, 88.0, 82.0, 0.0}, //skin 170
	{0.07, 0.009999, 0.0, 88.0, 82.0, 0.0}, //skin 171
	{0.07, 0.009999, 0.0, 88.0, 82.0, 0.0}, //skin 172
	{0.07, 0.009999, 0.0, 88.0, 82.0, 0.0}, //skin 173
	{0.07, 0.009999, 0.0, 88.0, 82.0, 0.0}, //skin 174
	{0.07, 0.009999, 0.0, 88.0, 82.0, 0.0}, //skin 175
	{0.07, 0.009999, 0.0, 88.0, 82.0, 0.0}, //skin 176
	{0.07, 0.009999, 0.0, 88.0, 82.0, 0.0}, //skin 177
	{0.07, 0.009999, 0.0, 88.0, 82.0, 0.0}, //skin 178
	{0.07, 0.009999, 0.0, 88.0, 82.0, 0.0}, //skin 179
	{0.07, 0.009999, 0.0, 88.0, 82.0, 0.0}, //skin 180
	{0.07, 0.009999, 0.0, 88.0, 82.0, 0.0}, //skin 181
	{0.07, 0.009999, 0.0, 88.0, 82.0, 0.0}, //skin 182
	{0.07, 0.009999, 0.0, 88.0, 82.0, 0.0}, //skin 183
	{0.07, 0.009999, 0.0, 88.0, 82.0, 0.0}, //skin 184
	{0.07, 0.009999, 0.0, 88.0, 82.0, 0.0}, //skin 185
	{0.07, 0.009999, 0.0, 88.0, 82.0, 0.0}, //skin 186
	{0.07, 0.009999, 0.0, 88.0, 82.0, 0.0}, //skin 187
	{0.07, 0.009999, 0.0, 88.0, 82.0, 0.0}, //skin 188
	{0.07, 0.009999, 0.0, 88.0, 82.0, 0.0}, //skin 189
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 190
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 191
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 192
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 193
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 194
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 195
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 196
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 197
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 198
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 199
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 200
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 201
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 202
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 203
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 204
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 205
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 206
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 207
	{0.060571, 0.013831, 0.000000, 88.573463, 83.217987, 0.571479, 1.002084}, //skin 208
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 209
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 210
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 211
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 212
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 213
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 214
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 215
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 216
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 217
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 218
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 219
	{0.029999, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 220
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 221
	{0.07, 0.009999, 0.0, 88.0, 82.0, 0.0}, //skin 222
	{0.07, 0.050000, 0.0, 88.0, 82.0, 0.0}, //skin 223
	{0.07, 0.029999, 0.0, 88.0, 82.0, 0.0}, //skin 224
	{0.07, 0.029999, 0.0, 88.0, 82.0, 0.0}, //skin 225
	{0.07, 0.029999, 0.0, 88.0, 82.0, 0.0}, //skin 226
	{0.07, 0.029999, 0.0, 88.0, 82.0, 0.0}, //skin 227
	{0.07, 0.029999, 0.0, 88.0, 82.0, 0.0}, //skin 228
	{0.07, 0.029999, 0.0, 88.0, 82.0, 0.0}, //skin 229
	{0.07, 0.029999, 0.0, 88.0, 82.0, 0.0}, //skin 230
	{0.07, 0.029999, 0.0, 88.0, 82.0, 0.0}, //skin 231
	{0.07, 0.029999, 0.0, 88.0, 82.0, 0.0}, //skin 232
	{0.07, 0.029999, 0.0, 88.0, 82.0, 0.0}, //skin 233
	{0.07, 0.029999, 0.0, 88.0, 82.0, 0.0}, //skin 234
	{0.07, 0.029999, 0.0, 88.0, 82.0, 0.0}, //skin 235
	{0.07, 0.029999, 0.0, 88.0, 82.0, 0.0}, //skin 236
	{0.07, 0.029999, 0.0, 88.0, 82.0, 0.0}, //skin 237
	{0.07, 0.029999, 0.0, 88.0, 82.0, 0.0}, //skin 238
	{0.07, 0.029999, 0.0, 88.0, 82.0, 0.0}, //skin 239
	{0.07, 0.029999, 0.0, 88.0, 82.0, 0.0}, //skin 240
	{0.07, 0.029999, 0.0, 88.0, 82.0, 0.0}, //skin 241
	{0.07, 0.029999, 0.0, 88.0, 82.0, 0.0}, //skin 242
	{0.07, 0.029999, 0.0, 88.0, 82.0, 0.0}, //skin 243
	{0.07, 0.029999, 0.0, 88.0, 82.0, 0.0}, //skin 244
	{0.07, 0.029999, 0.0, 88.0, 82.0, 0.0}, //skin 245
	{0.07, 0.050000, 0.0, 88.0, 82.0, 0.0}, //skin 246
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 247
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 248
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 249
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 250
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 251
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 252
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 253
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 254
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 255
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 256
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 257
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 258
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 259
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 260
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 261
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 262
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 263
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 264
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 265
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 266
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 267
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 268
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 269
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 270
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 271
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 272
	{0.060571, 0.013831, 0.000000, 88.573463, 83.217987, 0.571479, 1.002084}, //skin 273
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 274
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 275
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 276
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 277
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 278
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 279
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 280
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 281
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 282
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 283
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 284
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 285
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 286
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 287
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 288
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, //skin 289
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 290
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 291
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 292
	{0.07, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 293
	{0.07, 0.019999, 0.0, 91.0, 84.0, 0.0}, //skin 294
	{0.050000, 0.019998, 0.0, 86.0, 82.0, 0.0}, //skin 295
	{0.064999, 0.009999, 0.0, 88.0, 82.0, 0.0}, //skin 296
	{0.064999, 0.009999, 0.0, 88.0, 82.0, 0.0}, //skin 297
	{0.064999, 0.009999, 0.0, 88.0, 82.0, 0.0}, //skin 298
	{0.064998, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 299
	{0.064998, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 300
	{0.064998, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 301
	{0.064998, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 302
	{0.064998, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 303
	{0.064998, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 304
	{0.064998, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 305
	{0.064998, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 306
	{0.064998, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 307
	{0.064998, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 308
	{0.064998, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 309
	{0.064998, 0.019999, 0.0, 88.0, 82.0, 0.0}, //skin 310
	{0.064998, 0.019999, 0.0, 88.0, 82.0, 0.0} //skin 311
};
#if defined PET
stock Float:GetScalePet(playerid, coords)
{
	switch(coords)
	{
		case 0:
		{
			switch( playerVariables[ playerid ][ pPetID ] )
			{
				case 19078: return 1.0;//parrot
				case 1608: return 0.07;//shark
				case 19833: return 0.16;//cow
				case 19630: return 1.0;//fish
				case 1607: return 0.09;//dolphin
			}
		}
		case 1:
		{
			switch( playerVariables[ playerid ][ pPetID ] )
			{
				case 19078: return 1.0;
				case 1608: return 0.04;
				case 19833: return 0.16;
				case 19630: return 1.3;
				case 1607: return 0.04;
			}
		}
		case 2:
		{
			switch( playerVariables[ playerid ][ pPetID ] )
			{
				case 19078: return  1.0;
				case 1608: return 0.07;
				case 19833: return 0.13;
				case 19630: return 1.0;
				case 1607: return 0.09;
			}
		}
	}
	return 1.0;
}
stock Float:GetRotatePet(playerid, coords)
{
	switch(coords)
	{
		case 0:
		{
			switch( playerVariables[ playerid ][ pPetID ] )
			{
				case 19078: return 1.0;//parrot
				case 1608: return 55.0;//shark
				case 19833: return -125.0;//cow
				case 19630: return -50.0;//fish
				case 1607: return 55.0;//dolphin
			}
		}
		case 1:
		{
			switch( playerVariables[ playerid ][ pPetID ] )
			{
				case 19078: return 1.0;
				case 1608: return 80.0;
				case 19833: return 90.0;
				case 19630: return 90.0;
				case 1607: return 80.0;
			}
		}
		case 2:
		{
			switch( playerVariables[ playerid ][ pPetID ] )
			{
				case 19078: return  1.0;
				case 1608: return -55.0;
				case 19833: return -50.0;
				case 19630: return -55.0;
				case 1607: return -55.0;
			}
		}
	}
	return 1.0;
}
stock Float:GetOffsetPet(playerid, coords)
{
	switch(coords)
	{
		case 0:
		{
			switch( playerVariables[ playerid ][ pPetID ] )
			{
				case 19078: return 0.320722;//parrot
				case 1608: return 0.386722;//shark
				case 19833: return 0.250722;//cow
				case 19630: return 0.360722;//fish
				case 1607: return 0.370722;//dolphin
			}
		}
		case 1:
		{
			switch( playerVariables[ playerid ][ pPetID ] )
			{
				case 19078: return -0.067912;
				case 1608: return -0.067912;
				case 19833: return 0.027912;
				case 19630: return -0.057912;
				case 1607: return -0.057912;
			}
		}
		case 2:
		{
			switch( playerVariables[ playerid ][ pPetID ] )
			{
				case 19078: return  -0.165151;
				case 1608: return -0.165151;
				case 19833: return -0.165151;
				case 19630: return -0.153151;
				case 1607: return -0.153151;
			}
		}
	}
	return 1.0;
}

#endif
// < Load main() function )
main()
{
	print("-------------------------------------------------" );
	print(" "SERVER_NAME" Script - "SERVER_VERSION"" );
	print(" All rights reserved.");
	print("-------------------------------------------------" );
}

public OnGameModeInit()
{
	AntiDeAMX();
	ConnectMySQL();

    new GetTime[ 6 ];
	getdate( GetTime[ 0 ], GetTime[ 1 ], GetTime[ 2 ] );
	gettime( GetTime[ 3 ], GetTime[ 4 ], GetTime[ 5 ] );

	svString[ 0 ] = EOS;
	format( svString, sizeof svString, ""SERVER_VERSION", %s %s %i, %02d:%02d:%02d", AddZeroToTime(GetTime[2]), MONTH_NAMES[GetTime[1] - 1], GetTime[ 0 ], GetTime[ 3 ], GetTime[ 4 ], GetTime[ 5 ] );
	SetGameModeText( svString );

	SendRconCommand("mapname LS / LV");

	VECTOR_resize(phone_numbers, 100000);

	mysql_pquery(g_Handle, "SELECT `playerPhoneNumber`, `id` FROM `server_accounts` WHERE `playerPhone` > 0", "LoadPhoneNumbers", "");

	// < Load mSelection >
	selection_skinlist = LoadModelSelectionMenu("server_skins");
	selection_hatslist = LoadModelSelectionMenu( "server_hats" );
	selection_glasseslist = LoadModelSelectionMenu( "server_glasses" );
	selection_rentcars = LoadModelSelectionMenu( "server_rentcars" );

	#if defined CRATES
		CratesObjectLoad();
	#endif

	// < Create player classes >
	//AddPlayerClass( 60, 2020.8572, 1917.3174, 12.3405, 267.6944, 0, 0, 0, 0, 0, 0 );
	AddPlayerClass( 60, 514.0901, -1510.9774, 14.5668, 272.0347, 0, 0, 0, 0, 0, 0 );

    // apartamente
	CreateDynamicObject(1504, 295.460693, -1622.989990, 63.994999, 0.000000, 0.000000, -100.000000);
	CreateDynamicObject(1505, 275.864990, -1619.536011, 59.494999, 0.000000, 0.000000, 260.000000);
	CreateDynamicObject(1506, 275.864990, -1619.536011, 63.994999, 0.000000, 0.000000, 260.000000);
	CreateDynamicObject(1507, 295.460693, -1622.989990, 59.494999, 0.000000, 0.000000, -100.000000);
	CreateDynamicObject(1504, 275.864990, -1619.536011, 68.494995, 0.000000, 0.000000, 260.000000);
	CreateDynamicObject(1505, 295.460693, -1622.989990, 68.494995, 0.000000, 0.000000, -100.000000);
	CreateDynamicObject(1506, 295.4607, -1622.9900, 72.9950, 0.0000, 0.0000, -100.0000);
	CreateDynamicObject(1507, 295.460693, -1622.989990, 77.494995, 0.000000, 0.000000, -100.000000);
	CreateDynamicObject(1504, 275.864990, -1619.536011, 72.994995, 0.000000, 0.000000, 260.000000);
	CreateDynamicObject(1505, 295.460693, -1622.989990, 81.994995, 0.000000, 0.000000, -100.000000);
	CreateDynamicObject(1506, 275.864990, -1619.536011, 77.494995, 0.000000, 0.000000, 260.000000);
	CreateDynamicObject(1507, 275.864990, -1619.536011, 81.994995, 0.000000, 0.000000, 260.000000);
	CreateDynamicObject(1504, 295.460693, -1622.989990, 86.494995, 0.000000, 0.000000, -100.000000);
	CreateDynamicObject(1505, 275.864990, -1619.536011, 86.494995, 0.000000, 0.000000, 260.000000);
	CreateDynamicObject(1506, 275.864990, -1619.536011, 90.994995, 0.000000, 0.000000, 260.000000);
	CreateDynamicObject(1507, 295.460693, -1622.989990, 90.994995, 0.000000, 0.000000, -100.000000);
	CreateDynamicObject(1504, 295.460693, -1622.989990, 95.494995, 0.000000, 0.000000, -100.000000);
	CreateDynamicObject(1505, 275.864990, -1619.536011, 95.494995, 0.000000, 0.000000, 260.000000);
	CreateDynamicObject(1506, 275.864990, -1619.536011, 54.994999, 0.000000, 0.000000, 260.000000);
	CreateDynamicObject(1507, 295.460693, -1622.989990, 54.994999, 0.000000, 0.000000, -100.000000);
	CreateDynamicObject(1504, 295.460693, -1622.989990, 50.494999, 0.000000, 0.000000, -100.000000);
	CreateDynamicObject(1505, 295.460693, -1622.989990, 45.994999, 0.000000, 0.000000, -100.000000);
	CreateDynamicObject(1506, 275.864990, -1619.536011, 50.494999, 0.000000, 0.000000, 260.000000);
	CreateDynamicObject(1507, 275.864990, -1619.536011, 45.994999, 0.000000, 0.000000, 260.000000);

	// < Reconfig the connection time >
	OnWeaponDropInit();
	ShowPlayerMarkers( PLAYER_MARKERS_MODE_STREAMED );
	DisableInteriorEnterExits();
	UsePlayerPedAnims();
	EnableStuntBonusForAll( 0 );
	LimitPlayerMarkerRadius( 5.0 );
	LimitGlobalChatRadius( 0 );
	SendRconCommand( "rcon 0" );
	ManualVehicleEngineAndLights();
	SetWeather( serverWeather[ random( sizeof serverWeather ) ] );

	// < Configure SSCNAF )
	//SSCANF_Option(MATCH_NAME_PARTIAL, 1);

	// < Configure Streamer >
	Streamer_VisibleItems( STREAMER_TYPE_3D_TEXT_LABEL, 3000 );
	Streamer_VisibleItems( STREAMER_TYPE_PICKUP, 3000 );

	Streamer_MaxItems( STREAMER_TYPE_3D_TEXT_LABEL, 3000 );
	Streamer_MaxItems( STREAMER_TYPE_PICKUP, 3000 );

	//SendRconCommand("ackslimit 100000");
	//SendRconCommand("messageholelimit 100000");

	//AddServerRule("LURK anticheat", "Nov 1 2022");
	Iter_Init(Player);

	serverVariables[other_count_ads] = 0;
	serverVariables[other_helpers_duty] = 0;
	serverVariables[workers_fisher] = 0;
	serverVariables[workers_pilot] = 0;
	serverVariables[workers_pizza] = 0;
	serverVariables[workers_farmer] = 0;
	serverVariables[workers_trucker] = 0;
	serverVariables[workers_mechanic] = 0;
	serverVariables[workers_sweeper] = 0;
	serverVariables[workers_garbage] = 0;
	serverVariables[workers_transporter] = 0;
	serverVariables[rob_players] = 0;
	server_reports = 0;
	server_admins = 0;
	server_admins = 0;
	server_managers = 0;
	server_leaders = 0;
	server_reporters = 0;
	server_instructors = 0;
	server_players = 0;
	server_vehicles = 0;
	server_houses = 0;
	server_bussines = 0;
	server_wanteds = 0;
	server_newbies = 0;
	server_contracts = 0;
	mechanics = 0;

	new tmpobjid_3;
	tmpobjid_3 = CreateDynamicObject(19362, 1844.225585, -1856.381225, 16.131553, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid_3, 0, "LOS SANTOS", 60, "Calibri", 20, 1, 0xFF000000, 0x00000000, 0);
	tmpobjid_3 = CreateDynamicObject(19362, 1844.235595, -1854.840820, 17.201570, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid_3, 0, "PAY", 30, "Ariel", 20, 1, 0xFF000000, 0x00000000, 0);
	tmpobjid_3 = CreateDynamicObject(19362, 1844.225585, -1857.461791, 17.201570, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid_3, 0, "SPRAY", 30, "Ariel", 20, 1, 0xFF000000, 0x00000000, 0);
	tmpobjid_3 = CreateDynamicObject(19362, 1844.245605, -1856.572021, 17.171569, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	SetDynamicObjectMaterialText(tmpobjid_3, 0, "N", 30, "Ariel", 20, 1, 0xFF000000, 0x00000000, 0);
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	tmpobjid_3 = CreateDynamicObject(19362, 1844.275634, -1854.720458, 17.901596, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid_3 = CreateDynamicObject(19362, 1844.275634, -1857.261840, 17.901596, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid_3 = CreateDynamicObject(19362, 1844.425781, -1857.261840, 17.901596, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
	tmpobjid_3 = CreateDynamicObject(19362, 1844.425781, -1854.720703, 17.901596, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid_3 = CreateDynamicObject(971, 1843.304931, -1855.416870, 12.451536, 0.000000, 0.000000, -90.300071, -1, -1, -1, 300.00, 300.00); 

	// < Load Paintball Variables >
	paintballVariables[ 0 ][ paintArena ] = randomEx( 0, 3 );
	paintballVariables[ 1 ][ paintArena ] = randomEx( 0, 3 );
	paintballVariables[ 2 ][ paintArena ] = randomEx( 0, 3 );
	paintballVariables[ 3 ][ paintArena ] = randomEx( 0, 3 );

	paintballVariables[ 0 ][ paintWeaponSet ] = 0;
	paintballVariables[ 1 ][ paintWeaponSet ] = 0;
	paintballVariables[ 2 ][ paintWeaponSet ] = 0;
	paintballVariables[ 3 ][ paintWeaponSet ] = 0;

	// < Load vehicle respawn vehicles >
	serverVariables[ calendarStatus ] = 0;
	serverVariables[ respawnVehicles ] = RESPAWN_TIME;
	serverVariables[ maxConnections ] = 3;
	serverVariables[ currentBID ] = -1;
	serverVariables[ BonusStatus ] = false;

	// < SMTP Google Mail >
	//mail_init( SMTP_HOST, SMTP_USER, SMTP_PASS, SMTP_MAIL, SMTP_NAME );

	#if defined VERSION_HOST
	// < Socket Init >
	g_Socket = socket_create( TCP );
	if( is_socket_valid( g_Socket ) )
	{
		socket_set_max_connections( g_Socket, 100000 );
		socket_listen( g_Socket, 8329 );
		print("socket started on port 8329"); // < we are going to listen on port 8329 >
	}
	#endif

	// < Load Static Pickups >
	SetGVarInt( "pickup_HealME", CreateDynamicPickup( 1240, 1, 298.9561, -126.3070, 1004.0625 ) );

	// < Load map markers >
	CreateDynamicMapIcon( 327.0816, -1516.5175, 36.0391, 55, 10, -1, 0, INVALID_PLAYER_ID, 1000.0, MAPICON_LOCAL_CHECKPOINT ); // Dealership

	// < Usa acoperis LSPD >
	CreateDynamicObject(19859, 1564.09143, -1667.35413, 28.62480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19859, 1569.99255, -1637.14893, 13.79440,   0.00000, 0.00000, 0.00000);

	// < Pompe de la benzinarie >
	CreateDynamicObject(3465, 1009.04327, -936.06763, 42.63540,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3465, 1005.87561, -936.58527, 42.63540,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3465, 1002.34003, -937.18011, 42.63540,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3465, 999.04895, -937.57159, 42.63540,   0.00000, 0.00000, 90.00000);

	// < Insula pentru Hacks >
	CreateDynamicObject(18751, 5218.35547, -1557.25537, -1.02239,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1439, 5221.03467, -1571.67163, 4.31614,   0.00000, 0.00000, 0.10000);
	CreateDynamicObject(3502, 5220.98291, -1555.60913, 9.65971,   90.00000, 0.00000, 0.90000);
	CreateDynamicObject(13649, 5217.74658, -1555.65527, 5.21698,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(13649, 5224.48975, -1555.52637, 5.21698,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19761, 5221.04980, -1556.20850, 11.34603,   0.00000, 0.00000, 92.82000);
	CreateDynamicObject(19086, 5220.73779, -1571.79517, 5.58939,   0.00000, 0.00000, -33.95999);
	CreateDynamicObject(19425, 5221.03223, -1557.14441, 12.76870,   90.08000, 0.00000, 2.06000);
	CreateDynamicObject(19086, 5221.05273, -1557.22522, 12.03571,   0.00000, 0.00000, -58.43994);

	// < Interior Ballas >
	CreateDynamicObject(19452, 968.55750, -55.01370, 1001.85699,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1504, 968.48523, -53.97210, 1000.06982,   0.00000, 0.00000, 90.59990);

	// < Airport fuel pumps >
	CreateDynamicObject(10814, 1952.14258, -2633.32324, 16.51600,   0.00000, 0.00000, 0.60000);
	CreateDynamicObject(10814, -1125.56177, -179.20993, 16.97006,   0.00000, 0.00000, 118.86000);
	CreateDynamicObject(10814, 1283.42139, 1449.55554, 13.77449,   0.00000, 0.00000, -89.82001);
	CreateDynamicObject(10814, 368.01776, 2546.50952, 18.32572,   0.00000, 0.00000, -180.95998);

	// < Usa acoperis Paramedic >
	CreateDynamicObject(1496, 2049.15430, -1406.26660, 47.32030,   0.00000, 0.00000, 88.92000);

	// < News Reporters >
	CreateDynamicObject(19176, 731.99060, -1348.34497, 13.97420,   0.00000, 0.00000, 269.85001);

	// < Load Celule >
	CreateDynamicObject(19302, 266.221221, 87.470947, 1001.309387, 0.000000, 0.000000, -89.699935, -1, -1, -1, 300.00, 300.00); 
	CreateDynamicObject(19302, 266.230346, 85.710975, 1001.309387, 0.000000, 0.000000, -89.699935, -1, -1, -1, 300.00, 300.00); 
	CreateDynamicObject(19302, 266.244934, 82.970947, 1001.309387, 0.000000, 0.000000, -89.699935, -1, -1, -1, 300.00, 300.00); 
	CreateDynamicObject(19302, 266.254119, 81.220962, 1001.309387, 0.000000, 0.000000, -89.699935, -1, -1, -1, 300.00, 300.00); 
	CreateDynamicObject(19302, 266.268707, 78.450973, 1001.309387, 0.000000, 0.000000, -89.699935, -1, -1, -1, 300.00, 300.00); 
	CreateDynamicObject(19302, 266.277832, 76.691009, 1001.309387, 0.000000, 0.000000, -89.699935, -1, -1, -1, 300.00, 300.00); 


	// < Interior Garaj >
	new interiorgaraj;
	interiorgaraj = CreateObject(19464, 1387.549316, -41.314189, 1002.591857, 0.000000, 0.000000, 0.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 14581, "ab_mafiasuitea", "barbersmir1", 0xFF8B0000);
	interiorgaraj = CreateObject(8661, 1367.635620, -34.326713, 1000.051147, 0.000000, 0.000000, 0.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 3922, "bistro", "Marble2", 0x90FFFFFF);
	interiorgaraj = CreateObject(19464, 1387.549316, -35.394157, 1002.591857, 0.000000, 0.000000, 0.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 14581, "ab_mafiasuitea", "barbersmir1", 0xFF8B0000);
	interiorgaraj = CreateObject(19464, 1387.549316, -29.494163, 1002.591857, 0.000000, 0.000000, 0.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 14581, "ab_mafiasuitea", "barbersmir1", 0xFF8B0000);
	interiorgaraj = CreateObject(19464, 1384.469726, -26.394151, 1002.591857, 0.000000, 0.000000, 90.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 14581, "ab_mafiasuitea", "barbersmir1", 0xFF8B0000);
	interiorgaraj = CreateObject(19464, 1378.539062, -26.394151, 1002.591857, 0.000000, 0.000000, 90.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 14581, "ab_mafiasuitea", "barbersmir1", 0xFF8B0000);
	interiorgaraj = CreateObject(19464, 1372.648925, -26.394151, 1002.591857, 0.000000, 0.000000, 90.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 14581, "ab_mafiasuitea", "barbersmir1", 0xFF8B0000);
	interiorgaraj = CreateObject(19464, 1384.469726, -44.354171, 1002.591857, 0.000007, 0.000000, 89.999977, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 14581, "ab_mafiasuitea", "barbersmir1", 0xFF8B0000);
	interiorgaraj = CreateObject(19464, 1378.539062, -44.354171, 1002.591857, 0.000007, 0.000000, 89.999977, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 14581, "ab_mafiasuitea", "barbersmir1", 0xFF8B0000);
	interiorgaraj = CreateObject(19464, 1372.648925, -44.354171, 1002.591857, 0.000007, 0.000000, 89.999977, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 14581, "ab_mafiasuitea", "barbersmir1", 0xFF8B0000);
	interiorgaraj = CreateObject(19464, 1369.736450, -41.314189, 1002.591857, 0.000000, 0.000007, 0.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 14581, "ab_mafiasuitea", "barbersmir1", 0xFF8B0000);
	interiorgaraj = CreateObject(19464, 1369.736450, -35.394157, 1002.591857, 0.000000, 0.000007, 0.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 14581, "ab_mafiasuitea", "barbersmir1", 0xFF8B0000);
	interiorgaraj = CreateObject(19464, 1369.736450, -29.494163, 1002.591857, 0.000000, 0.000007, 0.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 14581, "ab_mafiasuitea", "barbersmir1", 0xFF8B0000);
	interiorgaraj = CreateObject(2951, 1369.761718, -29.323909, 1000.051147, -0.000007, 0.000000, -89.999977, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 19297, "matlights", "invisible", 0x00000000);
	SetObjectMaterial(interiorgaraj, 1, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetObjectMaterial(interiorgaraj, 2, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetObjectMaterial(interiorgaraj, 3, 19297, "matlights", "invisible", 0x00000000);
	SetObjectMaterial(interiorgaraj, 4, 10765, "airportgnd_sfse", "black64", 0x00000000);
	interiorgaraj = CreateObject(2951, 1369.761718, -34.923912, 1000.051147, -0.000007, 0.000000, -89.999977, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 19297, "matlights", "invisible", 0x00000000);
	SetObjectMaterial(interiorgaraj, 1, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetObjectMaterial(interiorgaraj, 2, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetObjectMaterial(interiorgaraj, 3, 19297, "matlights", "invisible", 0x00000000);
	SetObjectMaterial(interiorgaraj, 4, 10765, "airportgnd_sfse", "black64", 0x00000000);
	interiorgaraj = CreateObject(2951, 1369.761718, -40.553928, 1000.051147, -0.000007, 0.000000, -89.999977, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 19297, "matlights", "invisible", 0x00000000);
	SetObjectMaterial(interiorgaraj, 1, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetObjectMaterial(interiorgaraj, 2, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetObjectMaterial(interiorgaraj, 3, 19297, "matlights", "invisible", 0x00000000);
	SetObjectMaterial(interiorgaraj, 4, 10765, "airportgnd_sfse", "black64", 0x00000000);
	interiorgaraj = CreateObject(2951, 1369.781738, -46.143928, 1000.051147, 0.000007, 0.000000, 89.999977, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 19297, "matlights", "invisible", 0x00000000);
	SetObjectMaterial(interiorgaraj, 1, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetObjectMaterial(interiorgaraj, 2, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetObjectMaterial(interiorgaraj, 3, 19297, "matlights", "invisible", 0x00000000);
	SetObjectMaterial(interiorgaraj, 4, 10765, "airportgnd_sfse", "black64", 0x00000000);
	interiorgaraj = CreateObject(2951, 1387.516479, -29.323909, 1000.051147, -0.000014, 0.000000, -89.999954, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 19297, "matlights", "invisible", 0x00000000);
	SetObjectMaterial(interiorgaraj, 1, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetObjectMaterial(interiorgaraj, 2, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetObjectMaterial(interiorgaraj, 3, 19297, "matlights", "invisible", 0x00000000);
	SetObjectMaterial(interiorgaraj, 4, 10765, "airportgnd_sfse", "black64", 0x00000000);
	interiorgaraj = CreateObject(2951, 1387.516479, -34.923912, 1000.051147, -0.000014, 0.000000, -89.999954, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 19297, "matlights", "invisible", 0x00000000);
	SetObjectMaterial(interiorgaraj, 1, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetObjectMaterial(interiorgaraj, 2, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetObjectMaterial(interiorgaraj, 3, 19297, "matlights", "invisible", 0x00000000);
	SetObjectMaterial(interiorgaraj, 4, 10765, "airportgnd_sfse", "black64", 0x00000000);
	interiorgaraj = CreateObject(2951, 1387.516479, -40.553928, 1000.051147, -0.000014, 0.000000, -89.999954, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 19297, "matlights", "invisible", 0x00000000);
	SetObjectMaterial(interiorgaraj, 1, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetObjectMaterial(interiorgaraj, 2, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetObjectMaterial(interiorgaraj, 3, 19297, "matlights", "invisible", 0x00000000);
	SetObjectMaterial(interiorgaraj, 4, 10765, "airportgnd_sfse", "black64", 0x00000000);
	interiorgaraj = CreateObject(2951, 1387.516479, -46.143928, 1000.051147, -0.000014, 0.000000, -89.999954, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 19297, "matlights", "invisible", 0x00000000);
	SetObjectMaterial(interiorgaraj, 1, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetObjectMaterial(interiorgaraj, 2, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetObjectMaterial(interiorgaraj, 3, 19297, "matlights", "invisible", 0x00000000);
	SetObjectMaterial(interiorgaraj, 4, 10765, "airportgnd_sfse", "black64", 0x00000000);
	interiorgaraj = CreateObject(2951, 1372.333251, -26.433864, 1000.051147, -0.000022, 0.000007, 0.000037, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 19297, "matlights", "invisible", 0x00000000);
	SetObjectMaterial(interiorgaraj, 1, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetObjectMaterial(interiorgaraj, 2, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetObjectMaterial(interiorgaraj, 3, 19297, "matlights", "invisible", 0x00000000);
	SetObjectMaterial(interiorgaraj, 4, 10765, "airportgnd_sfse", "black64", 0x00000000);
	interiorgaraj = CreateObject(2951, 1377.933227, -26.433864, 1000.051147, -0.000022, 0.000007, 0.000037, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 19297, "matlights", "invisible", 0x00000000);
	SetObjectMaterial(interiorgaraj, 1, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetObjectMaterial(interiorgaraj, 2, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetObjectMaterial(interiorgaraj, 3, 19297, "matlights", "invisible", 0x00000000);
	SetObjectMaterial(interiorgaraj, 4, 10765, "airportgnd_sfse", "black64", 0x00000000);
	interiorgaraj = CreateObject(2951, 1383.563354, -26.433864, 1000.051147, -0.000022, 0.000007, 0.000037, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 19297, "matlights", "invisible", 0x00000000);
	SetObjectMaterial(interiorgaraj, 1, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetObjectMaterial(interiorgaraj, 2, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetObjectMaterial(interiorgaraj, 3, 19297, "matlights", "invisible", 0x00000000);
	SetObjectMaterial(interiorgaraj, 4, 10765, "airportgnd_sfse", "black64", 0x00000000);
	interiorgaraj = CreateObject(2951, 1389.153320, -26.433864, 1000.051147, -0.000022, 0.000007, 0.000037, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 19297, "matlights", "invisible", 0x00000000);
	SetObjectMaterial(interiorgaraj, 1, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetObjectMaterial(interiorgaraj, 2, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetObjectMaterial(interiorgaraj, 3, 19297, "matlights", "invisible", 0x00000000);
	SetObjectMaterial(interiorgaraj, 4, 10765, "airportgnd_sfse", "black64", 0x00000000);
	interiorgaraj = CreateObject(13028, 1381.643676, -44.307281, 1001.921875, 0.000000, 0.000000, 270.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 0, -1, "none", "none", 0xFF4C4C4C);
	interiorgaraj = CreateObject(13028, 1375.502929, -44.307273, 1001.921875, 0.000000, 0.000000, 270.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 0, -1, "none", "none", 0xFF4C4C4C);
	interiorgaraj = CreateObject(2951, 1386.712280, -44.333854, 1000.051147, -0.000022, 0.000014, 0.000037, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 19297, "matlights", "invisible", 0x00000000);
	SetObjectMaterial(interiorgaraj, 1, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetObjectMaterial(interiorgaraj, 2, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetObjectMaterial(interiorgaraj, 3, 19297, "matlights", "invisible", 0x00000000);
	SetObjectMaterial(interiorgaraj, 4, 10765, "airportgnd_sfse", "black64", 0x00000000);
	interiorgaraj = CreateObject(2951, 1369.791748, -29.323909, 1004.683593, -0.000007, 0.000000, -89.999977, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 19297, "matlights", "invisible", 0x00000000);
	SetObjectMaterial(interiorgaraj, 1, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetObjectMaterial(interiorgaraj, 2, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetObjectMaterial(interiorgaraj, 3, 19297, "matlights", "invisible", 0x00000000);
	SetObjectMaterial(interiorgaraj, 4, 10765, "airportgnd_sfse", "black64", 0x00000000);
	interiorgaraj = CreateObject(2951, 1369.791748, -34.923912, 1004.683593, -0.000007, 0.000000, -89.999977, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 19297, "matlights", "invisible", 0x00000000);
	SetObjectMaterial(interiorgaraj, 1, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetObjectMaterial(interiorgaraj, 2, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetObjectMaterial(interiorgaraj, 3, 19297, "matlights", "invisible", 0x00000000);
	SetObjectMaterial(interiorgaraj, 4, 10765, "airportgnd_sfse", "black64", 0x00000000);
	interiorgaraj = CreateObject(2951, 1369.791748, -40.553928, 1004.683593, -0.000007, 0.000000, -89.999977, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 19297, "matlights", "invisible", 0x00000000);
	SetObjectMaterial(interiorgaraj, 1, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetObjectMaterial(interiorgaraj, 2, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetObjectMaterial(interiorgaraj, 3, 19297, "matlights", "invisible", 0x00000000);
	SetObjectMaterial(interiorgaraj, 4, 10765, "airportgnd_sfse", "black64", 0x00000000);
	interiorgaraj = CreateObject(2951, 1387.516479, -29.323909, 1004.683593, -0.000022, 0.000000, -89.999931, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 19297, "matlights", "invisible", 0x00000000);
	SetObjectMaterial(interiorgaraj, 1, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetObjectMaterial(interiorgaraj, 2, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetObjectMaterial(interiorgaraj, 3, 19297, "matlights", "invisible", 0x00000000);
	SetObjectMaterial(interiorgaraj, 4, 10765, "airportgnd_sfse", "black64", 0x00000000);
	interiorgaraj = CreateObject(2951, 1387.516479, -34.923912, 1004.683593, -0.000022, 0.000000, -89.999931, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 19297, "matlights", "invisible", 0x00000000);
	SetObjectMaterial(interiorgaraj, 1, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetObjectMaterial(interiorgaraj, 2, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetObjectMaterial(interiorgaraj, 3, 19297, "matlights", "invisible", 0x00000000);
	SetObjectMaterial(interiorgaraj, 4, 10765, "airportgnd_sfse", "black64", 0x00000000);
	interiorgaraj = CreateObject(2951, 1387.516479, -40.553928, 1004.683593, -0.000022, 0.000000, -89.999931, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 19297, "matlights", "invisible", 0x00000000);
	SetObjectMaterial(interiorgaraj, 1, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetObjectMaterial(interiorgaraj, 2, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetObjectMaterial(interiorgaraj, 3, 19297, "matlights", "invisible", 0x00000000);
	SetObjectMaterial(interiorgaraj, 4, 10765, "airportgnd_sfse", "black64", 0x00000000);
	interiorgaraj = CreateObject(2951, 1372.333251, -26.433864, 1004.683593, -0.000022, 0.000014, 0.000037, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 19297, "matlights", "invisible", 0x00000000);
	SetObjectMaterial(interiorgaraj, 1, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetObjectMaterial(interiorgaraj, 2, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetObjectMaterial(interiorgaraj, 3, 19297, "matlights", "invisible", 0x00000000);
	SetObjectMaterial(interiorgaraj, 4, 10765, "airportgnd_sfse", "black64", 0x00000000);
	interiorgaraj = CreateObject(2951, 1377.933227, -26.433864, 1004.683593, -0.000022, 0.000014, 0.000037, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 19297, "matlights", "invisible", 0x00000000);
	SetObjectMaterial(interiorgaraj, 1, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetObjectMaterial(interiorgaraj, 2, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetObjectMaterial(interiorgaraj, 3, 19297, "matlights", "invisible", 0x00000000);
	SetObjectMaterial(interiorgaraj, 4, 10765, "airportgnd_sfse", "black64", 0x00000000);
	interiorgaraj = CreateObject(2951, 1383.563354, -26.433864, 1004.683593, -0.000022, 0.000014, 0.000037, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 19297, "matlights", "invisible", 0x00000000);
	SetObjectMaterial(interiorgaraj, 1, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetObjectMaterial(interiorgaraj, 2, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetObjectMaterial(interiorgaraj, 3, 19297, "matlights", "invisible", 0x00000000);
	SetObjectMaterial(interiorgaraj, 4, 10765, "airportgnd_sfse", "black64", 0x00000000);
	interiorgaraj = CreateObject(2951, 1372.723510, -44.333854, 1004.683593, -0.000022, 0.000022, 0.000037, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 19297, "matlights", "invisible", 0x00000000);
	SetObjectMaterial(interiorgaraj, 1, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetObjectMaterial(interiorgaraj, 2, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetObjectMaterial(interiorgaraj, 3, 19297, "matlights", "invisible", 0x00000000);
	SetObjectMaterial(interiorgaraj, 4, 10765, "airportgnd_sfse", "black64", 0x00000000);
	interiorgaraj = CreateObject(2951, 1383.980957, -44.333854, 1004.683593, -0.000022, 0.000022, 0.000037, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 19297, "matlights", "invisible", 0x00000000);
	SetObjectMaterial(interiorgaraj, 1, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetObjectMaterial(interiorgaraj, 2, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetObjectMaterial(interiorgaraj, 3, 19297, "matlights", "invisible", 0x00000000);
	SetObjectMaterial(interiorgaraj, 4, 10765, "airportgnd_sfse", "black64", 0x00000000);
	interiorgaraj = CreateObject(2951, 1369.791748, -46.173938, 1004.683593, -0.000007, 0.000000, -89.999977, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 19297, "matlights", "invisible", 0x00000000);
	SetObjectMaterial(interiorgaraj, 1, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetObjectMaterial(interiorgaraj, 2, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetObjectMaterial(interiorgaraj, 3, 19297, "matlights", "invisible", 0x00000000);
	SetObjectMaterial(interiorgaraj, 4, 10765, "airportgnd_sfse", "black64", 0x00000000);
	interiorgaraj = CreateObject(2951, 1378.363281, -44.333854, 1004.683593, -0.000022, 0.000022, 0.000037, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 19297, "matlights", "invisible", 0x00000000);
	SetObjectMaterial(interiorgaraj, 1, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetObjectMaterial(interiorgaraj, 2, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetObjectMaterial(interiorgaraj, 3, 19297, "matlights", "invisible", 0x00000000);
	SetObjectMaterial(interiorgaraj, 4, 10765, "airportgnd_sfse", "black64", 0x00000000);
	interiorgaraj = CreateObject(2951, 1389.570922, -44.333854, 1004.683593, -0.000022, 0.000022, 0.000037, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 19297, "matlights", "invisible", 0x00000000);
	SetObjectMaterial(interiorgaraj, 1, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetObjectMaterial(interiorgaraj, 2, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetObjectMaterial(interiorgaraj, 3, 19297, "matlights", "invisible", 0x00000000);
	SetObjectMaterial(interiorgaraj, 4, 10765, "airportgnd_sfse", "black64", 0x00000000);
	interiorgaraj = CreateObject(2951, 1389.193359, -26.433864, 1004.683593, -0.000022, 0.000014, 0.000037, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 19297, "matlights", "invisible", 0x00000000);
	SetObjectMaterial(interiorgaraj, 1, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetObjectMaterial(interiorgaraj, 2, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetObjectMaterial(interiorgaraj, 3, 19297, "matlights", "invisible", 0x00000000);
	SetObjectMaterial(interiorgaraj, 4, 10765, "airportgnd_sfse", "black64", 0x00000000);
	interiorgaraj = CreateObject(2951, 1387.516479, -46.143951, 1004.683593, -0.000022, 0.000000, -89.999931, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 19297, "matlights", "invisible", 0x00000000);
	SetObjectMaterial(interiorgaraj, 1, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetObjectMaterial(interiorgaraj, 2, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetObjectMaterial(interiorgaraj, 3, 19297, "matlights", "invisible", 0x00000000);
	SetObjectMaterial(interiorgaraj, 4, 10765, "airportgnd_sfse", "black64", 0x00000000);
	interiorgaraj = CreateObject(11714, 1369.855712, -35.462726, 1002.591430, 0.000000, 0.000000, 0.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 15041, "bigsfsave", "windo_blinds", 0xFF808080);
	interiorgaraj = CreateObject(6959, 1385.733154, -39.951889, 1005.289001, 0.000000, 0.000000, 0.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 14888, "gf6", "mp_vicgrill", 0xFF4C4C4C);
	interiorgaraj = CreateObject(11714, 1369.855712, -41.252708, 1002.591430, 0.000000, 0.000000, 0.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 15041, "bigsfsave", "windo_blinds", 0xFF808080);
	interiorgaraj = CreateObject(19387, 1371.467651, -31.778917, 1001.800964, 0.000000, 0.000000, 90.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 3980, "cityhall_lan", "LAcityhwal1", 0xFFFFFFFF);
	interiorgaraj = CreateObject(1499, 1370.718017, -31.832269, 1000.051147, 0.000000, 0.000000, 0.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetObjectMaterial(interiorgaraj, 1, 14581, "ab_mafiasuitea", "walp45S", 0x00000000);
	interiorgaraj = CreateObject(19982, 1375.460205, -31.763416, 1001.251892, 90.000000, 0.000000, 270.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 19297, "matlights", "invisible", 0x00000000);
	SetObjectMaterial(interiorgaraj, 1, 18646, "matcolours", "grey-90-percent", 0x00000000);
	SetObjectMaterial(interiorgaraj, 2, 19297, "matlights", "invisible", 0x00000000);
	interiorgaraj = CreateObject(19403, 1374.513061, -31.777719, 1001.801025, 0.000000, 0.000000, 90.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 3980, "cityhall_lan", "LAcityhwal1", 0xFFFFFFFF);
	interiorgaraj = CreateObject(19982, 1375.460205, -31.763416, 1002.642578, 90.000000, 0.000000, 270.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 19297, "matlights", "invisible", 0x00000000);
	SetObjectMaterial(interiorgaraj, 1, 18646, "matcolours", "grey-90-percent", 0x00000000);
	SetObjectMaterial(interiorgaraj, 2, 19297, "matlights", "invisible", 0x00000000);
	interiorgaraj = CreateObject(19982, 1373.648559, -31.763416, 1002.732666, 180.000000, 0.000000, 270.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 19297, "matlights", "invisible", 0x00000000);
	SetObjectMaterial(interiorgaraj, 1, 18646, "matcolours", "grey-90-percent", 0x00000000);
	SetObjectMaterial(interiorgaraj, 2, 19297, "matlights", "invisible", 0x00000000);
	interiorgaraj = CreateObject(19982, 1375.389526, -31.763416, 1002.732666, 180.000000, 0.000000, 270.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 19297, "matlights", "invisible", 0x00000000);
	SetObjectMaterial(interiorgaraj, 1, 18646, "matcolours", "grey-90-percent", 0x00000000);
	SetObjectMaterial(interiorgaraj, 2, 19297, "matlights", "invisible", 0x00000000);
	interiorgaraj = CreateObject(19982, 1374.479370, -31.763416, 1004.613342, 180.000000, 0.000000, 270.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 19297, "matlights", "invisible", 0x00000000);
	SetObjectMaterial(interiorgaraj, 1, 18646, "matcolours", "grey-90-percent", 0x00000000);
	SetObjectMaterial(interiorgaraj, 2, 19297, "matlights", "invisible", 0x00000000);
	interiorgaraj = CreateObject(19982, 1375.460205, -31.763416, 1002.542602, 90.000000, 0.000000, 270.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 19297, "matlights", "invisible", 0x00000000);
	SetObjectMaterial(interiorgaraj, 1, 18646, "matcolours", "grey-90-percent", 0x00000000);
	SetObjectMaterial(interiorgaraj, 2, 19297, "matlights", "invisible", 0x00000000);
	interiorgaraj = CreateObject(19982, 1375.460205, -31.763416, 1002.442626, 90.000000, 0.000000, 270.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 19297, "matlights", "invisible", 0x00000000);
	SetObjectMaterial(interiorgaraj, 1, 18646, "matcolours", "grey-90-percent", 0x00000000);
	SetObjectMaterial(interiorgaraj, 2, 19297, "matlights", "invisible", 0x00000000);
	interiorgaraj = CreateObject(19982, 1375.460205, -31.763416, 1002.342651, 90.000000, 0.000000, 270.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 19297, "matlights", "invisible", 0x00000000);
	SetObjectMaterial(interiorgaraj, 1, 18646, "matcolours", "grey-90-percent", 0x00000000);
	SetObjectMaterial(interiorgaraj, 2, 19297, "matlights", "invisible", 0x00000000);
	interiorgaraj = CreateObject(19982, 1375.460205, -31.763416, 1002.242675, 90.000000, 0.000000, 270.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 19297, "matlights", "invisible", 0x00000000);
	SetObjectMaterial(interiorgaraj, 1, 18646, "matcolours", "grey-90-percent", 0x00000000);
	SetObjectMaterial(interiorgaraj, 2, 19297, "matlights", "invisible", 0x00000000);
	interiorgaraj = CreateObject(19982, 1375.460205, -31.763416, 1002.142700, 90.000000, 0.000000, 270.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 19297, "matlights", "invisible", 0x00000000);
	SetObjectMaterial(interiorgaraj, 1, 18646, "matcolours", "grey-90-percent", 0x00000000);
	SetObjectMaterial(interiorgaraj, 2, 19297, "matlights", "invisible", 0x00000000);
	interiorgaraj = CreateObject(19982, 1375.460205, -31.763416, 1002.042724, 90.000000, 0.000000, 270.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 19297, "matlights", "invisible", 0x00000000);
	SetObjectMaterial(interiorgaraj, 1, 18646, "matcolours", "grey-90-percent", 0x00000000);
	SetObjectMaterial(interiorgaraj, 2, 19297, "matlights", "invisible", 0x00000000);
	interiorgaraj = CreateObject(19982, 1375.460205, -31.763416, 1001.942749, 90.000000, 0.000000, 270.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 19297, "matlights", "invisible", 0x00000000);
	SetObjectMaterial(interiorgaraj, 1, 18646, "matcolours", "grey-90-percent", 0x00000000);
	SetObjectMaterial(interiorgaraj, 2, 19297, "matlights", "invisible", 0x00000000);
	interiorgaraj = CreateObject(19357, 1376.037597, -30.247919, 1001.796997, 0.000000, 0.000000, 0.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 14660, "inttattoobits", "tat_tissue3", 0xFFFFFFFF);
	SetObjectMaterial(interiorgaraj, 3, -1, "none", "none", 0xFFFF0000);
	interiorgaraj = CreateObject(19357, 1376.037597, -27.117919, 1001.796997, 0.000000, 0.000000, 0.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 3980, "cityhall_lan", "LAcityhwal1", 0xFFFFFFFF);
	SetObjectMaterial(interiorgaraj, 3, -1, "none", "none", 0xFFFF0000);
	interiorgaraj = CreateObject(18766, 1373.654663, -26.871410, 1004.021911, 90.000000, 0.000000, 90.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	interiorgaraj = CreateObject(18766, 1368.664916, -26.871410, 1004.021911, 90.000000, 0.000000, 90.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	interiorgaraj = CreateObject(2206, 1375.594604, -28.079221, 1000.051147, 0.000000, 0.000000, 180.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	interiorgaraj = CreateObject(19999, 1374.982055, -27.145631, 1000.051147, 0.000000, 0.000000, -18.999998, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 1730, "cj_furniture", "CJ-COUCHL2", 0x00000000);
	interiorgaraj = CreateObject(19309, 1374.835205, -28.171384, 1000.871459, 0.000000, 0.000000, 90.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 18646, "matcolours", "grey-90-percent", 0x00000000);
	interiorgaraj = CreateObject(19610, 1374.856689, -28.184455, 1001.031311, 280.000000, 0.000000, 0.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 3980, "cityhall_lan", "LAcityhwal1", 0x00000000);
	interiorgaraj = CreateObject(2263, 1374.819702, -28.638843, 1000.986328, 10.000000, 0.000000, 0.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetObjectMaterial(interiorgaraj, 1, 10765, "airportgnd_sfse", "black64", 0x00000000);
	interiorgaraj = CreateObject(2263, 1374.859741, -27.671480, 1001.156677, -10.000000, 0.000000, 180.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 19894, "laptopsamp1", "laptopscreen2", 0x00000000);
	SetObjectMaterial(interiorgaraj, 1, 10765, "airportgnd_sfse", "black64", 0x00000000);
	interiorgaraj = CreateObject(948, 1375.675170, -31.469383, 1000.051147, 0.000000, 0.000000, 0.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 0, -1, "none", "none", 0xFF808080);
	SetObjectMaterial(interiorgaraj, 1, 3980, "cityhall_lan", "LAcityhwal1", 0xFFFF0000);
	SetObjectMaterial(interiorgaraj, 3, 18646, "matcolours", "grey-90-percent", 0x00000000);
	interiorgaraj = CreateObject(11685, 1374.574829, -31.252109, 1000.051147, 0.000000, 0.000000, 180.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 10101, "2notherbuildsfe", "ferry_build14", 0x00000000);
	SetObjectMaterial(interiorgaraj, 1, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0x00000000);
	interiorgaraj = CreateObject(18766, 1373.654663, -26.871410, 1004.182067, 90.000000, 0.000000, 90.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	interiorgaraj = CreateObject(18766, 1368.774414, -26.871410, 1004.182067, 90.000000, 0.000000, 90.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	interiorgaraj = CreateObject(19466, 1374.525756, -31.760274, 1001.941162, 0.000000, 0.000000, 90.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 17588, "lae2coast_alpha", "plainglass", 0x00000000);
	interiorgaraj = CreateObject(19893, 1376.758911, -30.640981, 1001.291442, 0.000000, 0.000000, 90.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 1, 19894, "laptopsamp1", "laptopscreen2", 0x00000000);
	interiorgaraj = CreateObject(2156, 1376.330078, -27.449312, 1000.051147, 0.000000, 0.000000, 90.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetObjectMaterial(interiorgaraj, 1, 3922, "bistro", "Marble2", 0x00000000);
	SetObjectMaterial(interiorgaraj, 2, 10101, "2notherbuildsfe", "ferry_build14", 0xFFFFFFFF);
	SetObjectMaterial(interiorgaraj, 3, -1, "none", "none", 0xFFFF0000);
	interiorgaraj = CreateObject(2160, 1376.342041, -28.808607, 1000.051147, 0.000000, 0.000000, 90.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 0, -1, "none", "none", 0xFF808080);
	SetObjectMaterial(interiorgaraj, 1, 18646, "matcolours", "grey-90-percent", 0x00000000);
	SetObjectMaterial(interiorgaraj, 2, 3922, "bistro", "Marble2", 0x00000000);
	SetObjectMaterial(interiorgaraj, 3, 10101, "2notherbuildsfe", "ferry_build14", 0xFFFFFFFF);
	SetObjectMaterial(interiorgaraj, 4, 3980, "cityhall_lan", "LAcityhwal1", 0x00000000);
	interiorgaraj = CreateObject(19926, 1379.540405, -29.135402, 1000.051147, 0.000000, 0.000000, 0.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 7555, "bballcpark1", "ws_carparknew2", 0x00000000);
	SetObjectMaterial(interiorgaraj, 1, 19800, "lsacarpark1", "dt_officewall2", 0xFF4C4C4C);
	interiorgaraj = CreateObject(19926, 1380.331054, -29.135402, 1000.051147, 0.000000, 0.000000, 0.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 7555, "bballcpark1", "ws_carparknew2", 0x00000000);
	SetObjectMaterial(interiorgaraj, 1, 19800, "lsacarpark1", "dt_officewall2", 0xFF4C4C4C);
	interiorgaraj = CreateObject(19903, 1380.256713, -27.763132, 1000.051147, 0.000000, 0.000000, 360.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 1, 14581, "ab_mafiasuitea", "walp45S", 0xFF808080);
	interiorgaraj = CreateObject(19631, 1380.040771, -28.589166, 1001.531311, 0.000000, 0.000000, 90.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	interiorgaraj = CreateObject(19631, 1379.800537, -28.589166, 1001.531311, 0.000000, 0.000000, 270.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	interiorgaraj = CreateObject(19926, 1380.331054, -31.025423, 1000.051147, 0.000000, 0.000000, 0.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 7555, "bballcpark1", "ws_carparknew2", 0x00000000);
	SetObjectMaterial(interiorgaraj, 1, 19800, "lsacarpark1", "dt_officewall2", 0xFF4C4C4C);
	interiorgaraj = CreateObject(19926, 1379.540405, -31.025432, 1000.051147, 0.000000, 0.000000, 0.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 7555, "bballcpark1", "ws_carparknew2", 0x00000000);
	SetObjectMaterial(interiorgaraj, 1, 19800, "lsacarpark1", "dt_officewall2", 0xFF4C4C4C);
	interiorgaraj = CreateObject(1789, 1381.029541, -32.361770, 1000.401489, 0.000000, 0.000000, 166.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 14581, "ab_mafiasuitea", "walp45S", 0xFF808080);
	SetObjectMaterial(interiorgaraj, 1, 18646, "matcolours", "grey-90-percent", 0x00000000);
	SetObjectMaterial(interiorgaraj, 2, 14581, "ab_mafiasuitea", "walp45S", 0x00000000);
	SetObjectMaterial(interiorgaraj, 3, -1, "none", "none", 0xFFFF0000);
	interiorgaraj = CreateObject(1006, 1379.492431, -30.452543, 1000.991699, 0.000000, 0.000000, 0.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 10101, "2notherbuildsfe", "ferry_build14", 0x00000000);
	SetObjectMaterial(interiorgaraj, 1, 10101, "2notherbuildsfe", "ferry_build14", 0x00000000);
	interiorgaraj = CreateObject(1006, 1380.002929, -30.452543, 1000.991699, 0.000000, 0.000000, 0.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 10101, "2notherbuildsfe", "ferry_build14", 0x00000000);
	SetObjectMaterial(interiorgaraj, 1, 10101, "2notherbuildsfe", "ferry_build14", 0x00000000);
	interiorgaraj = CreateObject(1006, 1380.523437, -30.452543, 1000.971679, 0.000000, 0.000000, 0.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 10101, "2notherbuildsfe", "ferry_build14", 0x00000000);
	SetObjectMaterial(interiorgaraj, 1, 10101, "2notherbuildsfe", "ferry_build14", 0x00000000);
	interiorgaraj = CreateObject(2475, 1382.088745, -26.579553, 1000.510314, 0.000000, 0.000000, 0.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 14581, "ab_mafiasuitea", "walp45S", 0xFF808080);
	SetObjectMaterial(interiorgaraj, 1, 3980, "cityhall_lan", "LAcityhwal1", 0x00000000);
	interiorgaraj = CreateObject(2475, 1383.579223, -26.579553, 1000.510314, 0.000000, 0.000000, 0.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 14581, "ab_mafiasuitea", "walp45S", 0xFF808080);
	SetObjectMaterial(interiorgaraj, 1, 3980, "cityhall_lan", "LAcityhwal1", 0x00000000);
	interiorgaraj = CreateObject(2475, 1385.059082, -26.579553, 1000.510314, 0.000000, 0.000000, 0.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 14581, "ab_mafiasuitea", "walp45S", 0xFF808080);
	SetObjectMaterial(interiorgaraj, 1, 3980, "cityhall_lan", "LAcityhwal1", 0x00000000);
	interiorgaraj = CreateObject(2475, 1386.499633, -26.579553, 1000.510314, 0.000000, 0.000000, 0.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 14581, "ab_mafiasuitea", "walp45S", 0xFF808080);
	SetObjectMaterial(interiorgaraj, 1, 3980, "cityhall_lan", "LAcityhwal1", 0x00000000);
	interiorgaraj = CreateObject(1139, 1382.580078, -26.694360, 1000.641296, 0.000000, 0.000000, 180.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 10101, "2notherbuildsfe", "ferry_build14", 0x00000000);
	SetObjectMaterial(interiorgaraj, 1, 10101, "2notherbuildsfe", "ferry_build14", 0x00000000);
	SetObjectMaterial(interiorgaraj, 2, 10101, "2notherbuildsfe", "ferry_build14", 0x00000000);
	interiorgaraj = CreateObject(1075, 1382.226562, -26.789676, 1003.181701, 0.000000, 0.000000, 270.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 0, -1, "none", "none", 0xFFFFFF00);
	interiorgaraj = CreateObject(1082, 1383.318481, -26.797914, 1003.191711, 0.000000, 0.000000, 270.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 0, -1, "none", "none", 0xFFFFFFFF);
	interiorgaraj = CreateObject(2269, 1375.462036, -29.054590, 1002.341674, 0.000000, 0.000000, 270.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 14530, "estate2", "Auto_hustler", 0x00000000);
	SetObjectMaterial(interiorgaraj, 1, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	interiorgaraj = CreateObject(2269, 1375.462036, -29.474599, 1001.711303, 0.000000, 0.000000, 270.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 14530, "estate2", "Auto_feltzer", 0x00000000);
	SetObjectMaterial(interiorgaraj, 1, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	interiorgaraj = CreateObject(2269, 1375.462036, -28.674591, 1001.711303, 0.000000, 0.000000, 270.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 14530, "estate2", "Auto_windsor", 0x00000000);
	SetObjectMaterial(interiorgaraj, 1, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	interiorgaraj = CreateObject(1744, 1376.136474, -26.868701, 1001.632263, 0.000000, 0.000000, 270.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0xFF808080);
	interiorgaraj = CreateObject(19819, 1375.803222, -27.593179, 1002.051696, 0.000000, 0.000000, 0.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 14581, "ab_mafiasuitea", "goldPillar", 0x00000000);
	interiorgaraj = CreateObject(19819, 1375.803222, -27.863185, 1002.051696, 0.000000, 0.000000, 0.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 14581, "ab_mafiasuitea", "goldPillar", 0x00000000);
	interiorgaraj = CreateObject(19819, 1375.803222, -27.333179, 1002.051696, 0.000000, 0.000000, 0.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 14581, "ab_mafiasuitea", "goldPillar", 0x00000000);
	interiorgaraj = CreateObject(19819, 1375.803222, -27.103174, 1002.051696, 0.000000, 0.000000, 0.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 14581, "ab_mafiasuitea", "goldPillar", 0x00000000);
	interiorgaraj = CreateObject(1549, 1373.042968, -27.953325, 1000.051147, 0.000000, 0.000000, 0.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 0, -1, "none", "none", 0xFF808080);
	SetObjectMaterial(interiorgaraj, 1, 10101, "2notherbuildsfe", "ferry_build14", 0xFFFF0000);
	interiorgaraj = CreateObject(948, 1370.264770, -31.469383, 1000.051147, 0.000000, 0.000000, 0.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 0, -1, "none", "none", 0xFF808080);
	SetObjectMaterial(interiorgaraj, 1, 3980, "cityhall_lan", "LAcityhwal1", 0xFFFF0000);
	SetObjectMaterial(interiorgaraj, 3, 18646, "matcolours", "grey-90-percent", 0x00000000);
	interiorgaraj = CreateObject(19786, 1369.732543, -28.825426, 1002.281555, 0.000000, 0.000000, 90.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetObjectMaterial(interiorgaraj, 1, 18646, "matcolours", "grey-90-percent", 0x00000000);
	interiorgaraj = CreateObject(11714, 1387.419067, -35.462726, 1002.591430, 0.000000, 0.000014, 0.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 15041, "bigsfsave", "windo_blinds", 0xFF808080);
	interiorgaraj = CreateObject(11714, 1387.419067, -41.252708, 1002.591430, 0.000000, 0.000014, 0.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 15041, "bigsfsave", "windo_blinds", 0xFF808080);
	interiorgaraj = CreateObject(11714, 1387.419067, -29.832710, 1002.591430, 0.000000, 0.000014, 0.000000, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 15041, "bigsfsave", "windo_blinds", 0xFF808080);
	interiorgaraj = CreateObject(2951, 1370.393432, -44.363880, 1000.051147, -0.000007, 0.000000, 0.000022, 300.00);
	SetObjectMaterial(interiorgaraj, 0, 19297, "matlights", "invisible", 0x00000000);
	SetObjectMaterial(interiorgaraj, 1, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetObjectMaterial(interiorgaraj, 2, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetObjectMaterial(interiorgaraj, 3, 19297, "matlights", "invisible", 0x00000000);
	SetObjectMaterial(interiorgaraj, 4, 10765, "airportgnd_sfse", "black64", 0x00000000);
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	interiorgaraj = CreateObject(1893, 1374.782836, -42.219219, 1005.752075, 0.000000, 0.000000, 0.000000, 300.00);
	interiorgaraj = CreateObject(1808, 1373.034423, -31.519186, 1000.051147, 0.000000, 0.000000, 180.000000, 300.00);
	interiorgaraj = CreateObject(19815, 1376.115112, -27.807899, 1002.040954, 0.000000, 0.000000, 450.000000, 300.00);
	interiorgaraj = CreateObject(19899, 1376.579467, -30.582967, 1000.051147, 0.000000, 0.000000, 0.000000, 300.00);
	interiorgaraj = CreateObject(11743, 1376.773437, -29.543796, 1001.311523, 0.000000, 0.000000, 0.000000, 300.00);
	interiorgaraj = CreateObject(2057, 1376.763427, -30.425836, 1002.281555, 0.000000, 0.000000, -66.300003, 300.00);
	interiorgaraj = CreateObject(2690, 1378.640380, -44.216522, 1001.901611, 0.000000, 0.000000, 0.000000, 300.00);
	interiorgaraj = CreateObject(2629, 1379.908813, -29.182996, 1000.501525, 0.000000, 0.000000, 0.000000, 300.00);
	interiorgaraj = CreateObject(1077, 1379.937866, -28.564428, 1001.521545, 0.000000, 0.000000, 0.000000, 300.00);
	interiorgaraj = CreateObject(2125, 1381.245361, -31.424766, 1000.381103, 0.000000, 0.000000, 0.000000, 300.00);
	interiorgaraj = CreateObject(19627, 1380.475708, -31.848764, 1000.981811, 0.000000, 0.000000, 0.000000, 300.00);
	interiorgaraj = CreateObject(18633, 1380.367919, -31.538183, 1001.001281, 0.000000, 90.000000, 107.699981, 300.00);
	interiorgaraj = CreateObject(19621, 1376.974487, -31.000883, 1001.411865, 0.000000, 0.000000, 0.000000, 300.00);
	interiorgaraj = CreateObject(19621, 1376.684204, -31.000883, 1001.411865, 0.000000, 0.000000, 0.000000, 300.00);
	interiorgaraj = CreateObject(19921, 1379.743164, -31.787038, 1001.071411, 0.000000, 0.000000, 45.499992, 300.00);
	interiorgaraj = CreateObject(1650, 1381.127685, -32.424247, 1001.151794, 0.000000, 0.000000, -102.100021, 300.00);
	interiorgaraj = CreateObject(1650, 1380.717529, -32.336181, 1001.151794, 0.000000, 0.000000, -102.100021, 300.00);
	interiorgaraj = CreateObject(365, 1380.813720, -32.251045, 1000.731750, 0.000000, 0.000000, 0.000000, 300.00);
	interiorgaraj = CreateObject(365, 1381.043945, -32.251045, 1000.731750, 0.000000, 0.000000, 0.000000, 300.00);
	interiorgaraj = CreateObject(365, 1381.314208, -32.251045, 1000.731750, 0.000000, 0.000000, 0.000000, 300.00);
	interiorgaraj = CreateObject(1116, 1379.907470, -29.631212, 1001.001647, 90.000000, 0.000000, 270.000000, 300.00);
	interiorgaraj = CreateObject(1116, 1380.698120, -29.631212, 1001.001647, 90.000000, 0.000000, 270.000000, 300.00);
	interiorgaraj = CreateObject(1010, 1379.565429, -31.024993, 1000.971374, 0.000000, 0.000000, 0.000000, 300.00);
	interiorgaraj = CreateObject(1010, 1380.336059, -31.024993, 1000.971374, 0.000000, 0.000000, 0.000000, 300.00);
	interiorgaraj = CreateObject(1049, 1384.519287, -26.875429, 1000.671569, 0.000000, 0.000000, 180.000000, 300.00);
	interiorgaraj = CreateObject(1016, 1386.387084, -26.828411, 1000.631591, 0.000000, 0.000000, 180.000000, 300.00);
	interiorgaraj = CreateObject(1140, 1381.696655, -26.091112, 1001.741882, 0.000000, 0.000000, 360.000000, 300.00);
	interiorgaraj = CreateObject(1141, 1384.213623, -26.115764, 1001.761657, 0.000000, 0.000000, 0.000000, 300.00);
	interiorgaraj = CreateObject(1155, 1383.855224, -25.938240, 1002.571960, 0.000000, 0.000000, 180.000000, 300.00);
	interiorgaraj = CreateObject(1170, 1384.760131, -26.174596, 1002.492004, 0.000000, 0.000000, 180.000000, 300.00);
	interiorgaraj = CreateObject(1085, 1384.437377, -26.802516, 1003.171691, 0.000000, 0.000000, 270.000000, 300.00);
	interiorgaraj = CreateObject(1073, 1385.531372, -26.858575, 1003.211730, 0.000000, 0.000000, 270.000000, 300.00);
	interiorgaraj = CreateObject(1076, 1386.628173, -26.888635, 1003.191162, 0.000000, 0.000000, 270.000000, 300.00);
	interiorgaraj = CreateObject(19807, 1374.003662, -28.085681, 1001.031555, 0.000000, 0.000000, 155.899993, 300.00);
	interiorgaraj = CreateObject(16779, 1374.373046, -29.615648, 1003.644653, 0.000000, 0.000000, 0.000000, 300.00);
	interiorgaraj = CreateObject(19920, 1375.588012, -27.784711, 1001.001586, 0.000000, 0.000000, 150.399963, 300.00);
	interiorgaraj = CreateObject(2233, 1369.905883, -29.577526, 1000.051147, 0.000000, 0.000000, 90.000000, 300.00);
	interiorgaraj = CreateObject(2233, 1369.905883, -27.467519, 1000.051147, 0.000000, 0.000000, 90.000000, 300.00);
	interiorgaraj = CreateObject(2690, 1375.738403, -31.926593, 1001.881591, 0.000000, 0.000000, 0.000000, 300.00);
	interiorgaraj = CreateObject(1893, 1380.303466, -42.219219, 1005.752075, 0.000000, 0.000000, 0.000000, 300.00);
	interiorgaraj = CreateObject(1893, 1380.303466, -32.459232, 1005.752075, 0.000000, 0.000000, 0.000000, 300.00);
	interiorgaraj = CreateObject(1893, 1374.782836, -32.529232, 1005.752075, 0.000000, 0.000000, 0.000000, 300.00);

	CreateObject(673, 2527.39478, -1550.37439, 18.97460,   356.85840, 0.00000, -2.27770);
	CreateObject(8674, 2536.15210, -1591.94434, 23.36890,   0.00000, 0.00000, -6.00000);
	CreateObject(8674, 2515.57446, -1591.47021, 23.36890,   0.00000, 0.00000, 1.00000);
	CreateObject(8674, 2505.30127, -1591.63525, 23.36890,   0.00000, 0.00000, 1.00000);
	CreateObject(8674, 2484.75342, -1591.56238, 20.50278,   0.00000, 0.00000, 0.00000);
	CreateObject(669, 2496.97656, -1794.35156, 12.88281,   3.05488, -0.00987, -1.68381);
	CreateObject(8674, 2495.03931, -1591.64844, 23.36890,   0.00000, 0.00000, -1.00000);
	CreateObject(8674, 2477.05151, -1591.56909, 23.37090,   0.00000, 0.00000, -1.00000);
	CreateObject(8674, 2466.88794, -1590.06140, 20.57080,   0.00000, 0.00000, -16.00000);
	CreateObject(8674, 2484.75342, -1591.56238, 23.36990,   0.00000, 0.00000, 0.00000);
	CreateObject(8674, 2477.00586, -1591.55896, 20.58370,   0.00000, 0.00000, -1.00000);
	CreateObject(8674, 2447.15479, -1584.42322, 23.34990,   0.00000, 0.00000, -16.00000);
	CreateObject(8674, 2466.97461, -1590.09888, 23.34990,   0.00000, 0.00000, -16.00000);
	CreateObject(8674, 2456.98828, -1587.22339, 20.57080,   0.00000, 0.00000, -16.00000);
	CreateObject(8674, 2447.07983, -1584.37756, 20.57080,   0.00000, -0.00210, -16.00000);
	CreateObject(8674, 2457.07495, -1587.25854, 23.34990,   0.00000, 0.00000, -16.00000);
	CreateObject(6356, 2528.70142, -1547.73669, 25.34147,   0.00000, 0.00000, 0.00000);
	CreateObject(8674, 2525.89355, -1591.38062, 23.36890,   0.00000, 0.00000, 0.00000);
	CreateObject(8674, 2544.47778, -1583.95874, 23.26790,   0.00210, 0.00000, 85.30400);
	CreateObject(8674, 2545.00854, -1578.79138, 23.23440,   -0.00210, 0.00000, 85.10000);
	CreateObject(8674, 2544.49365, -1583.96631, 20.40260,   0.00210, 0.00000, 85.10000);
	CreateObject(8674, 2544.98853, -1578.79138, 20.40260,   -0.00490, 0.00000, 85.10000);
	CreateObject(8674, 2548.01489, -1569.22559, 20.37076,   -0.00210, 0.00000, 60.10000);
	CreateObject(8674, 2563.04004, -1542.19214, 23.65440,   -0.00210, 0.00000, 65.10000);
	CreateObject(8674, 2548.05005, -1569.16687, 23.23440,   -0.00210, 0.00000, 60.10000);
	CreateObject(8674, 2553.18408, -1560.21851, 23.23440,   -0.00210, 0.00000, 60.10000);
	CreateObject(8674, 2558.31470, -1551.31836, 23.25440,   -0.00210, 0.00000, 60.10000);
	CreateObject(8674, 2567.77344, -1533.05750, 23.91440,   -0.00210, 0.00000, 60.10000);
	CreateObject(8674, 2572.52344, -1523.93994, 23.91440,   -0.00210, 0.00000, 65.10000);
	CreateObject(8674, 2575.56738, -1514.23303, 24.15440,   -0.00210, 0.00000, 80.10000);
	CreateObject(8674, 2580.41602, -1494.24963, 24.43440,   -0.00210, 0.00000, 75.10000);
	CreateObject(8674, 2577.77075, -1504.20068, 24.43440,   -0.00210, 0.00000, 75.10000);
	CreateObject(8674, 2577.51343, -1486.35510, 24.43440,   -0.00210, 0.00000, -35.10000);
	CreateObject(970, 2577.75049, -1494.60461, 23.60600,   0.00000, 0.00000, 0.00000);
	CreateObject(970, 2569.50635, -1494.47144, 23.60600,   0.00000, 0.00000, 0.00000);
	CreateObject(970, 2565.32715, -1494.44080, 23.60600,   0.00000, 0.00000, 0.00000);
	CreateObject(970, 2563.25146, -1492.35388, 23.60600,   0.00000, 0.00000, 90.00000);
	CreateObject(970, 2563.36572, -1486.66980, 23.60600,   0.00000, 0.00000, 90.00000);
	CreateObject(970, 2563.31421, -1494.44104, 23.60600,   0.00000, 0.00000, 0.00000);
	CreateObject(970, 2560.71021, -1496.43787, 23.60600,   0.00000, 0.00000, 75.00000);
	CreateObject(970, 2559.62793, -1500.42224, 23.60600,   0.00000, 0.00000, 75.00000);
	CreateObject(970, 2557.98364, -1504.17664, 23.60600,   0.00000, 0.00000, 56.80000);
	CreateObject(970, 2555.74243, -1507.60620, 23.60600,   0.00000, 0.00000, 56.80000);
	CreateObject(970, 2552.85400, -1510.37646, 23.60600,   0.00000, 0.00000, 30.80000);
	CreateObject(970, 2549.30469, -1512.52197, 23.60600,   0.00000, 0.00000, 30.80000);
	CreateObject(970, 2545.48730, -1513.97937, 23.60600,   0.00000, 0.00000, 10.80000);
	CreateObject(970, 2541.40479, -1514.75122, 23.60600,   0.00000, 0.00000, 10.80000);
	CreateObject(970, 2537.27051, -1515.19910, 23.60600,   0.00000, 0.00000, 0.80000);
	CreateObject(970, 2533.14917, -1515.27454, 23.60600,   0.00000, 0.00000, 0.80000);
	CreateObject(970, 2529.01343, -1515.35254, 23.60600,   0.00000, 0.00000, 0.80000);
	CreateObject(970, 2524.91138, -1515.39917, 23.60600,   0.00000, 0.00000, 0.80000);
	CreateObject(970, 2520.81567, -1515.46143, 23.60600,   0.00000, 0.00000, 0.80000);
	CreateObject(970, 2516.68555, -1515.54907, 23.60600,   0.00000, 0.00000, 0.80000);
	CreateObject(970, 2512.57178, -1515.61279, 23.60600,   0.00000, 0.00000, 0.80000);
	CreateObject(970, 2508.45605, -1515.68250, 23.60600,   0.00000, 0.00000, 0.80000);
	CreateObject(970, 2504.33081, -1515.75708, 23.60600,   0.00000, 0.00000, 0.80000);
	CreateObject(970, 2498.79590, -1515.75427, 23.60600,   0.00000, 0.00000, 0.80000);
	CreateObject(2475, 2578.49634, -1487.16626, 22.93590,   0.00000, 0.00000, -35.00000);
	CreateObject(19638, 2578.28003, -1487.33264, 23.09270,   0.00000, 0.00000, 56.07300);
	CreateObject(19574, 2577.55200, -1487.32935, 23.03850,   0.00000, 0.00000, 0.00000);
	CreateObject(19574, 2577.76782, -1487.15027, 23.03850,   0.00000, 0.00000, 0.00000);
	CreateObject(19574, 2578.04175, -1487.55225, 23.03850,   0.00000, 0.00000, 0.00000);
	CreateObject(19574, 2578.59790, -1487.74487, 23.23950,   0.00000, 0.00000, 0.00000);
	CreateObject(19638, 2578.84351, -1487.69092, 24.44760,   0.00000, 0.00000, 54.82290);
	CreateObject(19638, 2578.58008, -1487.47266, 25.11670,   0.00000, 0.00000, 54.82290);
	CreateObject(19638, 2578.28003, -1487.29260, 23.74260,   0.00000, 0.00000, 54.82290);
	CreateObject(2475, 2581.38428, -1490.25989, 22.93590,   0.00000, 0.00000, -105.00000);
	CreateObject(19636, 2581.17944, -1490.14673, 24.42710,   0.00000, 0.00000, -15.00000);
	CreateObject(19636, 2581.11011, -1490.31726, 23.74710,   0.00000, 0.00000, -15.00000);
	CreateObject(19636, 2580.97705, -1490.83337, 23.03600,   0.00000, 0.00000, -15.00000);
	CreateObject(19575, 2580.76587, -1490.27820, 23.02430,   0.00000, 0.00000, 0.00000);
	CreateObject(19575, 2580.53467, -1490.71594, 23.02430,   0.00000, 0.00000, 0.00000);
	CreateObject(19575, 2580.89673, -1489.70190, 23.02430,   0.00000, 0.00000, 0.00000);
	CreateObject(19575, 2581.16431, -1489.91797, 23.08930,   0.00000, 0.00000, 0.00000);
	CreateObject(970, 2474.33423, -1514.51538, 23.47363,   0.00000, 0.00000, 0.00000);
	CreateObject(970, 2480.68726, -1514.59180, 23.47363,   0.00000, 0.00000, 0.00000);
	CreateObject(970, 2441.01855, -1572.29993, 23.44320,   0.00000, 0.00000, 90.00000);
	CreateObject(970, 2441.03613, -1566.49194, 23.44320,   0.00000, 0.00000, 90.00000);
	CreateObject(970, 2441.50879, -1546.97827, 23.44320,   0.00000, 0.00000, 90.00000);
	CreateObject(970, 2441.50879, -1552.33875, 23.44320,   0.00000, 0.00000, 90.00000);

	// < Garbage job >
	CreateDynamicObject(1440, 475.29474, -11.22693, 1003.21442,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1332, 2200.85254, -1972.91016, 13.62037,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1558, 2191.35864, -1968.49976, 13.13394,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2670, 2193.37866, -1985.05823, 12.65012,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2676, 2164.94458, -1989.42688, 12.65512,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3593, 2164.27344, -1994.79163, 13.26486,   0.00000, 0.00000, -122.99996);
	CreateDynamicObject(1428, 2175.35669, -1974.75293, 14.12254,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2673, 2173.66919, -1982.16016, 12.63932,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1329, 2190.16284, -2003.19641, 12.99951,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1224, 2166.15747, -2001.50488, 13.16484,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1449, 2198.94629, -1972.29553, 13.07979,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1449, 2198.93726, -1972.56555, 13.07980,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1448, 2197.18945, -1972.86047, 12.62595,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2097, 2173.21313, -2006.15588, 12.85055,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1358, 2184.56543, -1975.61743, 13.75663,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1440, 2187.31250, -1975.03259, 13.07235,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1441, 2188.95703, -1975.63757, 13.20473,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1440, 2190.06567, -1974.90503, 13.07238,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1441, 2187.12012, -1976.28931, 13.20457,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2756, 2170.50171, -1974.76648, 13.76453,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1349, 2183.26489, -2014.89734, 13.11726,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2672, 2184.74854, -1987.62720, 12.83037,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2677, 2162.84277, -1974.82153, 12.82426,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18248, 2163.67334, -1997.63965, 20.42120,   0.00000, 0.00000, 82.08206);
	CreateDynamicObject(3399, 2198.28784, -2007.90576, 15.14092,   0.00000, 0.00000, 91.08472);
	CreateDynamicObject(2933, 2203.93066, -1967.49133, 14.26249,   0.00000, 0.00000, 91.08472);
	CreateDynamicObject(2933, 2204.03223, -1986.63586, 14.26249,   0.00000, 0.00000, 90.70349);
	CreateDynamicObject(1637, 822.10669, -2059.75391, 13.15346,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18246, 2180.29834, -2013.58777, 14.47090,   0.00000, 0.00000, 128.03998);
	CreateDynamicObject(18245, 2160.84692, -2018.57935, 23.91171,   0.00000, 0.00000, 134.51996);
	CreateDynamicObject(1349, 2190.73755, -1997.26074, 13.11726,   0.00000, 0.00000, 0.00000);

	// < Trash bins over LS >
	CreateDynamicObject(1344, 2533.11377, -2009.43115, 13.29860,   0.00000, 0.00000, -89.75999);
	CreateDynamicObject(1344, 2461.24609, -1901.96106, 13.32750,   0.00000, 0.00000, -178.41100);
	CreateDynamicObject(1344, 2307.08276, -1997.81750, 13.31750,   0.00000, 0.00000, 90.24000);
	CreateDynamicObject(1344, 2288.70264, -2210.89697, 13.33990,   0.00000, 0.00000, -44.52000);
	CreateDynamicObject(1344, 1868.44250, -1871.45984, 13.23070,   0.00000, 0.00000, 90.60000);
	CreateDynamicObject(1344, 1794.31201, -2020.50208, 13.30250,   0.00000, 0.00000, 0.12000);
	CreateDynamicObject(1344, 2452.13208, -1759.06531, 13.33540,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1344, 2660.66553, -2040.49048, 13.32230,   0.00000, 0.00000, -88.68000);
	CreateDynamicObject(1344, 2443.63794, -1962.54602, 13.36000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1344, 2260.15308, -2343.80298, 13.32100,   0.00000, 0.00000, 134.64000);
	CreateDynamicObject(1344, 2197.50244, -2527.79468, 13.28050,   0.00000, 0.00000, 93.00000);

	// < Load Mall Fences >
	CreateDynamicObject(970, 1143.16956, -1415.92346, 13.14784,   0.00000, 0.00000, -0.36000);
	CreateDynamicObject(970, 1137.69177, -1415.88257, 13.14784,   0.00000, 0.00000, -0.36000);
	CreateDynamicObject(970, 1133.52881, -1415.85791, 13.14784,   0.00000, 0.00000, -0.36000);
	CreateDynamicObject(970, 1113.87451, -1415.88892, 13.14784,   0.00000, 0.00000, 1.32000);
	CreateDynamicObject(970, 1119.45496, -1415.79651, 13.14784,   0.00000, 0.00000, -0.24000);
	CreateDynamicObject(970, 1123.61145, -1415.81079, 13.14784,   0.00000, 0.00000, -0.24000);
	CreateDynamicObject(970, 1128.51099, -1415.88391, 13.14784,   0.00000, 0.00000, -0.24000);
	CreateDynamicObject(970, 1125.65027, -1562.17529, 12.93900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1131.02454, -1562.19666, 12.93900,   0.00000, 0.00000, -0.36000);

	// < Load bus stations >
	CreateDynamicObject(1257,1923.8454600,-2060.8410600,13.6570200,0.0000000,0.0000000,270.3635300); //
	CreateDynamicObject(1257,1967.7418200,-1867.6983600,13.6578500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1257,1827.7354700,-1711.1472200,13.8600900,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1257,1754.0684800,-1436.5152600,13.6592300,0.0000000,0.0000000,79.2562100); //
	CreateDynamicObject(1257,1501.1632100,-1434.7305900,13.6524800,0.0000000,0.0000000,90.9780400); //
	CreateDynamicObject(1257,1433.9747300,-1154.1278100,23.9977400,0.0000000,0.0000000,87.4944600); //
	CreateDynamicObject(1257,1003.6173700,-1134.5313700,23.9356500,0.0000000,0.0000000,90.5506100); //
	CreateDynamicObject(1257,791.3889800,-1281.9228500,13.6614900,0.0000000,0.0000000,179.6697500); //
	CreateDynamicObject(1257,589.2659900,-1316.9024700,13.6210800,0.0000000,0.0000000,97.2319000); //
	CreateDynamicObject(1257,479.9510200,-1499.0057400,20.5095200,0.0000000,0.0000000,175.5289800); //
	CreateDynamicObject(1257,623.3591300,-1657.1572300,16.1312400,0.0000000,0.0000000,181.4746900); //
	CreateDynamicObject(1257,489.7246700,-1704.0919200,12.0025000,0.0000000,0.0000000,84.7612000); //
	CreateDynamicObject(1257,395.9191000,-1766.1514900,5.6315700,0.0000000,0.0000000,90.2052200); //
	CreateDynamicObject(1257,180.2596300,-1729.2596400,4.4541100,0.0000000,0.0000000,93.6939800); //
	CreateDynamicObject(1257,282.8542200,-1425.7773400,14.0738700,0.0000000,0.0000000,296.4251400); //
	CreateDynamicObject(1257,587.0049400,-1237.7545200,17.9213800,0.0000000,0.0000000,291.5896000); //
	CreateDynamicObject(1257,934.1554000,-983.8352700,38.5970000,0.0000000,0.0000000,281.3132000); //
	CreateDynamicObject(1257,1133.6755400,-961.5156900,42.8177600,0.0000000,0.0000000,272.6698900); //
	CreateDynamicObject(1257,1350.4372600,-987.1137100,29.4745000,-7.5000000,0.0000000,171.7473300); //
	CreateDynamicObject(1257,1336.7235100,-1338.4981700,13.7603600,0.0000000,0.0000000,178.7978200); //
	CreateDynamicObject(1257,1291.2141100,-1797.4404300,13.6668600,0.0000000,0.0000000,180.3877600); //
	CreateDynamicObject(1257,1008.3931300,-1785.8763400,14.1615100,0.0000000,0.0000000,69.3599300); //
	CreateDynamicObject(1257,788.1580200,-1762.5742200,13.3162900,0.0000000,0.0000000,87.5136300); //
	CreateDynamicObject(1257,642.7050200,-1703.6627200,14.7444000,1.0000000,0.0000000,349.8042000); //
	CreateDynamicObject(1257,484.2262600,-1654.5941200,22.8069100,10.5000000,0.0000000,76.0527900); //
	CreateDynamicObject(1257,363.8887900,-1676.7059300,32.4486000,-5.0000000,0.0000000,180.0702100); //
	CreateDynamicObject(1257,364.0437900,-2013.9234600,7.9621900,0.0000000,0.0000000,180.1172300); //

	// < Gas station FIX >
	CreateDynamicObject(19876, 666.70551, -565.13202, 17.32450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19877, 666.49542, -571.12158, 17.30100,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1495, 663.00031, -552.84058, 15.24020,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1496, 661.80957, -571.99170, 14.98830,   0.00000, 0.00000, -88.20000);
	CreateDynamicObject(1496, 661.83942, -573.46991, 14.98830,   0.00000, 0.00000, -88.20000);
	//CreateDynamicObject(19833, 668.14661, -563.13611, 15.22040,   0.00000, 0.00000, -10.32000);
	//CreateDynamicObject(19833, 668.40991, -562.58112, 15.80040,   -45.58000, -0.02000, -10.32000);
	//CreateDynamicObject(19528, 668.48022, -562.14832, 17.24840,   -5.18000, -90.18000, 40.14000);
	//CreateDynamicObject(19086, 668.77179, -561.43121, 16.03930,   0.00000, 0.00000, -118.44000);

	// < Spawn LS >
	/*CreateDynamicObject(983, 520.01642, -1498.85327, 14.19725,   0.00000, 0.00000, -90.11993);
	CreateDynamicObject(983, 513.61700, -1498.83716, 14.19730,   0.00000, 0.00000, -90.11990);
	CreateDynamicObject(983, 520.06158, -1525.67322, 14.19270,   0.00000, 0.00000, -80.34000);
	CreateDynamicObject(983, 513.76495, -1526.73145, 14.19270,   0.00000, 0.00000, -80.34000);
	CreateDynamicObject(19124, 523.35553, -1498.86865, 14.03480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19124, 523.33899, -1525.15173, 14.19480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1233, 1783.67639, -1817.61633, 14.48283,   0.00000, 0.00000, -12.36000);
	CreateDynamicObject(984, 1811.75586, -1815.66333, 13.18470,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(984, 1811.77588, -1802.81311, 13.18470,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(984, 1811.74976, -1789.96680, 13.18470,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(984, 1811.73254, -1777.10413, 13.18470,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(984, 1811.73914, -1764.23914, 13.18470,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(984, 1811.71606, -1751.24988, 13.18470,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(984, 1805.18274, -1742.28809, 13.18470,   0.00000, 0.00000, 89.88000);
	CreateDynamicObject(984, 1792.32654, -1742.27808, 13.18470,   0.00000, 0.00000, 89.88000);
	CreateDynamicObject(984, 1779.49878, -1742.24683, 13.18470,   0.00000, 0.00000, 89.88000);
	CreateDynamicObject(984, 1766.67786, -1742.22241, 13.18470,   0.00000, 0.00000, 89.88000);
	CreateDynamicObject(984, 1753.82739, -1742.18164, 13.18470,   0.00000, 0.00000, 89.88000);
	CreateDynamicObject(984, 1745.59412, -1748.69250, 13.18470,   0.00000, 0.00000, 0.36000);
	CreateDynamicObject(984, 1745.68994, -1761.52747, 13.18470,   0.00000, 0.00000, 0.36000);
	CreateDynamicObject(984, 1745.76880, -1774.35962, 13.18470,   0.00000, 0.00000, 0.36000);
	CreateDynamicObject(984, 1745.84900, -1787.18494, 13.18470,   0.00000, 0.00000, 0.36000);
	CreateDynamicObject(984, 1745.93457, -1799.99365, 13.18470,   0.00000, 0.00000, 0.36000);
	CreateDynamicObject(618, 1811.76709, -1745.40356, 12.54361,   0.00000, 0.00000, -5.16002);
	CreateDynamicObject(618, 1811.81677, -1742.65234, 12.54361,   0.00000, 0.00000, 2.51999);
	CreateDynamicObject(1233, 1811.91418, -1744.90698, 13.44750,   0.00000, 0.00000, 91.08000);
	CreateDynamicObject(618, 1747.65601, -1742.81555, 12.54361,   0.00000, 0.00000, -3.24001);
	CreateDynamicObject(618, 1745.17639, -1742.93579, 12.54361,   0.00000, 0.00000, -40.20000);
	CreateDynamicObject(1233, 1745.43201, -1742.06665, 13.91550,   0.00000, 0.00000, 179.27991);
	*/

	// < Load ROB Safe >
	CreateDynamicObject( 19474, 2144.18799, 1637.89160, 993.02258,   0.00000, 0.00000, 90.06000 ); // MASA
	CreateDynamicObject( 19450, 2144.43091, 1606.68811, 994.24811, 0.00000, 0.00000, -90.00010 ); // Perete Camera
	ROB_SAFE[ 0 ] = CreateObject( 19799, 2143.20752, 1627.03186, 994.25061, 0.00000, 0.00000, -179.10001 );

	LoadSafeGoldBars();
	ROB_SAFE_3D = Create3DTextLabel( "Safe Health: 100%", 0xFFFF66FF, 2143.20752, 1627.03186, 994.25061, 30.0, 2004, 0 );
	Create3DTextLabel( "LV Bank's Safe\n"COL_LR"/robsafe", 0xFFFF66FF, 2144.1548, 1635.8928, 993.5761, 30.0, 2004, 0 );

	// < Create LSPD Gates >
	LSPD_GATE[ 0 ] = CreateObject(971, 1588.6552, -1637.9025, 15.0358, 0.0000, 0.0000, 0.0000);
	LSPD_GATE[ 1 ] = CreateObject(968, 1544.7007, -1630.7527, 13.2983, 0.0000, 90.0200, 90.0000);

	NR_GATE[ 0 ] = CreateObject(971, 778.35889, -1330.21143, 12.95970,   0.00000, 0.00000, 359.17670);
	NR_GATE[ 1 ] = CreateObject(971, 777.90912, -1384.72534, 13.10640,   0.00000, 0.00000, 359.68680);

	CreateObject( 1500, 1582.6122, -1637.9562, 12.3776, 0.000000, 0.000000, 0.000000 );
	CreateObject( 983, 1545.0706787109, -1635.6511230469, 13.237774848938, 0, 0, 0 );
	CreateObject( 983, 1544.4979248047, -1620.7434082031, 13.238116264343, 0, 0, 0 );

	// < Load Server Actors >
	Actor_Rob[ 0 ] = CreateActor( 194, 2306.7686, -7.6242, 26.7422, 270.0028 ); // Bank LV 1
	Actor_Rob[ 1 ] = CreateActor( 187, 2312.0100, -10.7410, 26.7422, 273.0679 ); // Bank LV 2
	Actor_Rob[ 2 ] = CreateActor( 11, 2306.6587, -1.6284, 26.7422, 271.5482 ); // Bank LV 3

	#if defined HEIST_SYSTEM
	Mike = CreateActor(295, 1448.0242, -1848.9087, 13.9688, 289.1940);
	Mike3 = CreateActor(295, 373.1677,163.2907,1008.3893,85.0009);
	SetTimer("AnimationToMike", 500, 0);
	Mike2 = CreateActor(295, 360.5665, 156.2108, 1025.7964, 274.4797);
	Leader = CreateActor(125, 363.4014, 156.6926, 1025.7964, 98.9853);
	Player1 = CreateActor(101, 362.7901, 154.8215, 1025.7964, 45.8460);
	Player2 = CreateActor(101, 363.6388, 155.6550, 1025.7964, 68.4271);
	Player3 = CreateActor(101, 362.9723, 157.6401, 1025.7964, 107.2077);
	#endif

	// < Load other Actors >
	CreateActor( 50, 664.9590, -566.5312, 16.3249, 178.1391 ); // Gas Station

	for( new act=0; act < sizeof( Actor_Rob ); act++ )
	{
		SetActorVirtualWorld( Actor_Rob[ act ], 2004 );
		SetActorInvulnerable( Actor_Rob[ act ], false );
		SetActorHealth( Actor_Rob[ act ], 100 );
	}

	// < Load Timers >
	serverVariables[ ServerTimers ][ 0 ] = SetTimer( "GeneralTimer", 1000, true );
	//serverVariables[ ServerTimers ][ 1 ] = SetTimer( "ActionTimer", 5000, true );
	serverVariables[ ServerTimers ][ 2 ] = SetTimer( "HealthTimer", 30000, true );
	serverVariables[ ServerTimers ][ 3 ] = SetTimer( "WeatherTimer", 1800000, true );
	serverVariables[ ServerTimers ][ 4 ] = SetTimer( "ServerSaveTimer", 300000, true ); // 5 Minute 300000
	serverVariables[ ServerTimers ][ 6 ] = SetTimer( "PaintBallTimer", 1000, true );
	serverVariables[ ServerTimers ][ 7 ] = SetTimer( "RaceArenaTimer", 1000, true );

	mysql_pquery( g_Handle, "SELECT * FROM `server_atms`", "LoadServerATMS", "" );
	mysql_pquery( g_Handle, "SELECT * FROM `server_teles`", "LoadServerTeles", "" );
	mysql_pquery( g_Handle, "SELECT * FROM `server_factions`", "LoadServerFactions", "" );
	mysql_pquery( g_Handle, "SELECT * FROM `server_clans`", "LoadServerClans", "" );
	#if defined HEIST_SYSTEM
		mysql_pquery( g_Handle, "SELECT * FROM `server_heists`", "LoadServerHeists", "" );
	#endif

	#if defined APARTMENT_SYS
		mysql_pquery( g_Handle, "SELECT * FROM `server_apartments`", "LoadServerApartments", "" );

		#include "ap_map"

	#endif

	mysql_pquery( g_Handle, "SELECT * FROM `server_turfs`", "LoadServerTurfs", "" );
	mysql_pquery( g_Handle, "SELECT * FROM `server_jobs`", "LoadServerJobs", "" );
	mysql_pquery( g_Handle, "SELECT * FROM `server_vehicles`", "LoadServerVehicles", "" );
	mysql_pquery( g_Handle, "SELECT * FROM `server_houses`", "LoadServerHouses", "" );
	mysql_pquery( g_Handle, "SELECT * FROM `server_business`", "LoadServerBusiness", "" );
	mysql_pquery( g_Handle, "SELECT * FROM `server_words`", "LoadForbidenWords", "" );

	#if defined OBJECT_QUEST
		mysql_pquery( g_Handle, "SELECT * FROM `server_objectquest`", "LoadServerObjectQuest", "" );
	#endif
	
	mysql_pquery( g_Handle, "SELECT * FROM `server_stats`", "LoadServerStats", "" );
	mysql_pquery( g_Handle, "SELECT * FROM `server_races`", "LoadRaces", "" );

	#if defined STATUS
		mysql_pquery( g_Handle, "UPDATE `server_accounts` SET `playerStatus` = 0", "" );
		mysql_pquery( g_Handle, "UPDATE `server_accounts` SET `playerConnected` = 0", "" );
	#endif

	// < Load Global Textdraws >
	REPORT_TD = TextDrawCreate(552.666809, 94.162933, "_");
	TextDrawLetterSize(REPORT_TD, 0.285000, 1.309629);
	TextDrawAlignment(REPORT_TD, 2);
	TextDrawColor(REPORT_TD, -1);
	TextDrawSetShadow(REPORT_TD, 0);
	TextDrawSetOutline(REPORT_TD, 1);
	TextDrawBackgroundColor(REPORT_TD, 51);
	TextDrawFont(REPORT_TD, 2);
	TextDrawSetProportional(REPORT_TD, 1);

	CeasTD = TextDrawCreate(629.000000, 412.000000, "ld_grav:timer");
	TextDrawLetterSize(CeasTD, 0.000000, 0.000000);
	TextDrawTextSize(CeasTD, 11.000000, 11.000000);
	TextDrawAlignment(CeasTD, 1);
	TextDrawColor(CeasTD, -1);
	TextDrawSetShadow(CeasTD, 0);
	TextDrawSetOutline(CeasTD, 0);
	TextDrawBackgroundColor(CeasTD, 255);
	TextDrawFont(CeasTD, 4);
	TextDrawSetProportional(CeasTD, 0);
	TextDrawSetShadow(CeasTD, 0);

	// < Load Dynamic Pickups >
	CreateDynamicPickup( 1277, 23, 327.0816, -1516.5175, 36.0391 ); // Dealership
	CreateDynamic3DTextLabel( "Dealership\n Type /buycar for buy a vehicle or /sellcar to sell a car", 0xFFFFffFF, 327.0816, -1516.5175, 36.0391, 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1 );

	CreateDynamicPickup( 1581, 23, 1219.2964, -1813.3220, 16.5938 ); // DMV - LS / 1239 Vechi
	CreateDynamic3DTextLabel( "Scoala de soferi (DMV)\nTasteaza /exam pentru a da testul de soferi.", 0xFFFFffFF, 1219.2964, -1813.3220, 16.5938, 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1 );

	CreateDynamicPickup( 1239, 23, 1524.7207, -1677.8617, 5.8906 ); // ARREST LS
	CreateDynamic3DTextLabel( "Arrest Point\nType /arrest <playerID>", 0xFFFFffFF, 1524.7207, -1677.8617, 5.8906, 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1 );

	CreateDynamicPickup( 1313, 1, 1310.1031, -1367.7607, 13.5401 ); // Paintball
	CreateDynamic3DTextLabel( "Paintball !\n\nType /paint\nto enter the paintball arena!", 0xFFFF00CC, 1310.1031, -1367.7607, 13.5401, 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1 );

	CreateDynamicPickup( 19130, 1, 2695.5996, -1704.7468, 11.8438 ); // Race Arena
	CreateDynamic3DTextLabel( "Race Arena !\n\nType /race\nto enter the race arena!", 0xFFFF00CC, 2695.5996, -1704.7468, 11.8438, 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1 );

	CreateDynamicPickup( 1580, 23, 316.5966, 1123.2393, 1083.8828 ); // Crack House /getdrugs
	CreateDynamic3DTextLabel( "Get Drugs\nType /getdrugs to get drugs", 0xFFFFFFFF, 316.5966, 1123.2393, 1083.8828, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1 );

	CreateDynamicPickup( 1239, 23, 1752.0392, -1862.0558, 13.5768 ); // SPAWN GARA
	CreateDynamic3DTextLabel( String_Spawn(), 0xFFFFFFFF, 1752.0392, -1862.0558, 13.5768, 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1 );

	CreateDynamicPickup( 1239, 23, 813.5888, 1673.7957, 5.2813 ); // Arms Dealer /getmats
	CreateDynamic3DTextLabel( "Materials Pickup!\n\nType /getmats as an Arms Dealer \nto collect materials!", 0xFFFFffFF, 813.5888, 1673.7957, 5.2813, 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1 );
	//CreateDynamic3DTextLabel( "Vrei sa ajungi la DMV?\nScrie /takefaggio", 0xFFFFffFF, 1780.9833, -1862.9436, 13.0811, 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1 ); // LS
	#if defined XMAS_MODE
		CreateDynamic3DTextLabel( ""COL_LYE"> |DJ Control Panel| <\n"COL_LR"/playmusic <songURL.mp3>\n"COL_W"Doar adminii "COL_LR"level 5+ "COL_W"pot folosi aceasta comanda!", 0x33CCFFFF, 194.5381, -1819.0226, 11.0031, 80.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1 ); // </2017)
	#endif

	#if defined CITY_LV
		CreateDynamicPickup( 1239, 23, 2295.8447, 2468.7539, 10.8203 ); // ARREST LV
		CreateDynamic3DTextLabel( "Arrest Point\nType /arrest <playerID>", 0xFFFFffFF, 2295.8447, 2468.7539, 10.8203, 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1 );

		CreateDynamicPickup( 1239, 23, 1684.0723, 1439.2391, 10.7709 ); // SPAWN AERO
		CreateDynamic3DTextLabel( String_Spawn(), 0xFFFFFFFF, 1684.0723, 1439.2391, 10.7709, 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1 );

		CreateDynamicPickup( 1581, 23, 1909.3464, 2350.3469, 10.9799 ); // DMV - LV
		CreateDynamic3DTextLabel( "Scoala de soferi (DMV)\nTasteaza /exam pentru a da testul de soferi.", 0xFFFFffFF, 1909.3464, 2350.3469, 10.9799, 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1 );

		CreateDynamicPickup( 1277, 23, 2435.2942, 1654.4897, 10.8203 ); // Dealership
		CreateDynamic3DTextLabel( "Dealership\n Type /buycar for buy a vehicle or /sellcar for sell a car", 0xFFFFffFF, 2435.2942, 1654.4897, 10.8203, 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1 );

		//CreateDynamic3DTextLabel( "Vrei sa ajungi la DMV?\nScrie /takefaggio", 0xFFFFffFF, 2044.8219, 1919.8163, 11.7481, 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1 ); // LV
	#endif

	// < Load Dynamic Areas >
	Server_Zone[ 0 ] = CreateDynamicRectangle( 2169.0000, -2270.0000, 2249.0000, -2195.0000, -1, -1, -1 ); // Truck
	Server_Zone[ 1 ] = CreateDynamicRectangle( -414.28454, -1460.4133, -352.2845, -1397.4133, -1, -1, -1 ); // Farm
	//Server_Zone[ 2 ] = CreateDynamicRectangle( 1186.5234375, -1848.6328125, 1291.9921875, -1725.5859375, -1, -1, -1 ); // DMV - LS
	Server_Zone[ 2 ] = CreateDynamicRectangle( 1250.9765625, 1215.8203125, 1558.59375, 1675.78125, -1, -1, -1 ); // Pilot
	Server_Zone[ 3 ] = CreateDynamicRectangle( 2039.0625, -157.03125, 2128.125, -58.59375, -1, -1, -1 ); // Fisher
	Server_Zone[ 4 ] = CreateDynamicRectangle( 814.7015, -1273.4063, 922.7015, -1167.4063, -1, -1, -1 ); // Mechanic
	Server_Zone[ 5 ] = CreateDynamicRectangle( 2108.6842, -1209.3786, 2169.6842, -1127.3786, -1, -1, -1 ); // Sweeper
	//Server_Zone[ 6 ] = CreateDynamicRectangle( 1712.6459, -2080.3580, 1813.6459, -2018.3580, -1, -1, -1 ); // Bus Driver
	Server_Zone[ 7 ] = CreateDynamicRectangle( 2067.6008, -2078.3129, 2212.6008, -1949.3129, -1, -1, -1 ); // Garbage
	Server_Zone[ 8 ] = CreateDynamicRectangle( 1466.0000, -1735.0000, 1526.0000, -1710.0000, -1, -1, -1 ); // Transporter
	Server_Zone[ 9 ] = CreateDynamicRectangle( 1836.1735, -1857.8591, 13.3828, 110.3606, -1, -1, -1 ); // pns spawn ls

	Spawn_Zone[ 0 ] = CreateDynamicRectangle( 1673.8964, -1881.8517,1832.9150, -1799.5625, -1, -1, -1 ); // Spawn LS
	Spawn_Zone[ 2 ] = CreateDynamicRectangle( 749.2681, -56.1072, 781.8995, -6.4034, -1, 6, -1 ); // Race Arena Lobby
	#if defined CITY_LV
		Spawn_Zone[ 1 ] = CreateDynamicRectangle( 1968.75, 1853.90625, 2118.75, 1989.84375, -1, -1, -1 ); // Spawn LV
	#endif

	// < Spawn Zone by Mari00 >
	CreateDynamicObject(983,907.4280390,-1649.7030020,13.2168880,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(983,907.4280390,-1656.1330560,13.2168880,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3660,897.6231680,-1683.8515620,15.1568910,0.0000000,0.0000000,-179.7001030); //
	CreateDynamicObject(3660,878.0753170,-1645.0070800,14.9768880,0.0000000,0.0000000,178.5998680); //
	CreateDynamicObject(3660,897.6787710,-1645.4858390,14.9768880,0.0000000,0.0000000,178.5998680); //
	CreateDynamicObject(983,907.4280390,-1679.3150630,13.2168880,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(983,907.4280390,-1672.8553460,13.2168880,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3660,878.0623160,-1683.9528800,15.1568910,0.0000000,0.0000000,-179.7001030); //
	CreateDynamicObject(3660,858.4721060,-1684.0561520,15.1568910,0.0000000,0.0000000,-179.7001030); //
	CreateDynamicObject(19124,907.4354240,-1669.4892570,12.9168760,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3526,894.3307490,-1673.8887930,13.3368850,0.0000000,0.0000000,178.5999750); //
	CreateDynamicObject(2942,938.9885250,-1748.3233640,13.1968740,0.0000000,0.0000000,-148.7999870); //
	/*CreateDynamicObject(994,872.2404780,-1654.8240960,12.5468750,0.0000000,0.0000000,-89.8999710); //
	CreateDynamicObject(994,876.8837280,-1654.8250730,12.5468750,0.0000000,0.0000000,-89.8999710); //
	CreateDynamicObject(994,881.2438960,-1654.8177490,12.5468750,0.0000000,0.0000000,-89.8999710); //
	CreateDynamicObject(994,885.8649900,-1654.8112790,12.5468750,0.0000000,0.0000000,-89.8999710); //
	CreateDynamicObject(994,890.2560420,-1654.8051750,12.5468750,0.0000000,0.0000000,-89.8999710); //
	CreateDynamicObject(994,894.8761590,-1654.7976070,12.5468750,0.0000000,0.0000000,-89.8999710); //
	CreateDynamicObject(994,867.8657220,-1654.8438720,12.5468750,0.0000000,0.0000000,-89.8999710); //
	CreateDynamicObject(994,867.8853140,-1666.2340080,12.5468750,0.0000000,0.0000000,-89.8999710); //
	CreateDynamicObject(994,872.2357170,-1666.2270500,12.5468750,0.0000000,0.0000000,-89.8999710); //
	CreateDynamicObject(994,876.8763420,-1666.2200920,12.5468750,0.0000000,0.0000000,-89.8999710); //
	CreateDynamicObject(994,881.2570800,-1666.2136230,12.5468750,0.0000000,0.0000000,-89.8999710); //
	CreateDynamicObject(994,885.8876950,-1666.2062980,12.5468750,0.0000000,0.0000000,-89.8999710); //
	CreateDynamicObject(994,890.2674560,-1666.1987300,12.5468750,0.0000000,0.0000000,-89.8999710); //
	CreateDynamicObject(994,894.8973380,-1666.1896970,12.5468750,0.0000000,0.0000000,-89.8999710); */
	CreateDynamicObject(19124,907.4354240,-1659.5283200,12.9168760,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3526,894.4310300,-1653.3853750,13.3368850,0.0000000,0.0000000,178.5999750); //
	CreateDynamicObject(11489,930.4096060,-1680.7703850,12.5546560,0.0000000,0.0000000,-90.5999900); //
	CreateDynamicObject(14467,893.6087640,-1673.9484860,15.2568890,0.0000000,0.0000000,50.3000030); //
	CreateDynamicObject(14467,893.6986080,-1653.3996580,15.2568890,0.0000000,0.0000000,50.3000030); //
	CreateDynamicObject(1569,938.4206540,-1738.3756100,12.4768700,0.0000000,0.0000000,-90.6000820); //
	CreateDynamicObject(1364,858.9741820,-1640.9536130,13.2468770,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1216,853.4920650,-1645.1932370,13.2261060,0.0000000,0.0000000,88.9999770); //
	CreateDynamicObject(1216,853.5032340,-1644.5628660,13.2261060,0.0000000,0.0000000,88.9999770); //
	CreateDynamicObject(1216,895.6257930,-1673.9737540,13.2261060,0.0000000,0.0000000,88.9999770); //
	return true;
}
#if defined VERSION_HOST
// < Socket callbacks >
public onSocketRemoteConnect(Socket:id, remote_client[], remote_clientid)
{
	#if defined DEBUG_SERVER
	printf("Incoming connection from [%d:%s]", remote_clientid, remote_client); // [id:ip]
	socket_send(id, "Welcome :)", 32);
	#endif
	return 1;
}

public onSocketRemoteDisconnect(Socket:id, remote_clientid)
{
	#if defined DEBUG_SERVER
	printf("Remote client [%d] has disconnected.", remote_clientid); // [id:ip]
	#endif
	return true;
}

public onSocketReceiveData(Socket:id, remote_clientid, data[], data_len)
{
	// < read the received data >
	sscanf( data, "p<:>dds[64]ddds[32]ds[64]", panelActions[ actionType ],
									panelActions[ actionValue ],
									panelActions[ actionPlayer ],
									panelActions[ actionPlayerKey ],
									panelActions[ actionComplaint ],
									panelActions[ actionTicket ],
									panelActions[ actionAdmin ],
									panelActions[ actionAdminKey ],
									panelActions[ actionReason ] );

	// < generate player in-game ID >
	new TargetID = GetPlayerIDFromKey( panelActions[ actionPlayerKey ] );

	// < create punish logs >
	InsertPlayerPunishPanel( panelActions[ actionPlayerKey ], panelActions[ actionAdminKey ], panelActions[ actionPlayer ], panelActions[ actionAdmin ],
		panelActions[ actionValue ], panelActions[ actionType ], panelActions[ actionComplaint ], panelActions[ actionReason ] );

	// < check if target online >
	if( IsPlayerConnected( TargetID ) )
	{
		// < apply code >
		switch( panelActions[ actionType ] )
		{
			case 0: // warn
			{
				playerVariables[ TargetID ][ pWarnings ]++;
				switch( panelActions[ actionComplaint ] )
				{
					case 0: SendClientMessageToAllf( COLOR_LIGHTRED, "[Panel Action]: Admin %s has warned player %s(%i), reason: %s", panelActions[ actionAdmin ], username( TargetID ), TargetID, panelActions[ actionReason ] );
					default: SendClientMessageToAllf( COLOR_LIGHTRED, "[Panel Action]: Admin %s has warned player %s(%i), reason: %s[complaint: %d]", panelActions[ actionAdmin ], username( TargetID ), TargetID, panelActions[ actionReason ], panelActions[ actionComplaint ] );
				}
				//KickEx( TargetID );
			}
			case 1: // ban
			{
				switch( panelActions[ actionComplaint ] )
				{
					case 0: SendClientMessageToAllf( COLOR_LIGHTRED, "[Panel Action]: Admin %s has banned player %s(%i) for %d days, reason: %s", panelActions[ actionAdmin ], username( TargetID ), TargetID, panelActions[ actionValue ], panelActions[ actionReason ] );
					default: SendClientMessageToAllf( COLOR_LIGHTRED, "[Panel Action]: Admin %s has banned player %s(%i) for %d days, reason: %s[complaint: %d]", panelActions[ actionAdmin ], username( TargetID ), TargetID, panelActions[ actionValue ], panelActions[ actionReason ], panelActions[ actionComplaint ] );
				}
				gsQuery[ 0 ] = EOS;
				mysql_format( g_Handle, gsQuery, sizeof gsQuery, "INSERT INTO `server_bans` (`banName`, `banAdmin`, `banReason`, `banAddress`, `banDays`, `banUnix`) VALUES('%s', '%s', '%s', '%s', %d, UNIX_TIMESTAMP() + %d * 86400)", playerVariables[ TargetID ][ pNormalName ], panelActions[ actionAdmin ], panelActions[ actionReason ], GetPlayerIPEx( TargetID ), panelActions[ actionValue ], panelActions[ actionValue ] );
				mysql_tquery( g_Handle, gsQuery, "OnPlayerBanCreated", "d", GetPlayerMysqlID(TargetID) );

				SendClientMessage( TargetID, COLOR_LIGHTRED, "-----------------------------------[ Ban System ]-----------------------------------" );
				SendClientMessagef( TargetID, COLOR_LIGHTRED, "Ai fost banat de adminul: %s", panelActions[ actionAdmin ] );
				SendClientMessagef( TargetID, COLOR_LIGHTRED, "Motivul pentru care ai primit ban: %s", panelActions[ actionReason ] );
				SendClientMessage( TargetID, COLOR_LIGHTRED, "If you consider this a mistake, make an un-ban request: "COL_W""SERVER_PANEL"" );
				SendClientMessage( TargetID, COLOR_LIGHTRED, "--------------------------------------------------------------------------------------------------" );
				KickEx( TargetID );
			}
			case 2: // mute
			{
				switch( panelActions[ actionComplaint ] )
				{
					case 0: SendClientMessageToAllf( COLOR_FRED, ""COL_GRI"[Panel Action]: "COL_LYE"Admin %s has muted player %s(%i) for %d minutes, reason: %s", panelActions[ actionAdmin ], username( TargetID ), TargetID, panelActions[ actionValue ], panelActions[ actionReason ] );
					default: SendClientMessageToAllf( COLOR_FRED, ""COL_GRI"[Panel Action]: "COL_LYE"Admin %s has muted player %s(%i) for %d minutes, reason: %s[complaint: %d]", panelActions[ actionAdmin ], username( TargetID ), TargetID, panelActions[ actionValue ], panelActions[ actionReason ], panelActions[ actionComplaint ] );
				}
				printf( "[Debug Reason] A fost trimis reason: %s", panelActions[ actionReason ] );
				playerVariables[ TargetID ][ pMuted ] = panelActions[ actionValue ] * 60;
			}
			case 3: // jail
			{
				switch( panelActions[ actionComplaint ] )
				{
					case 0: SendClientMessageToAllf( COLOR_FRED, ""COL_GRI"[Panel Action]: "COL_LYE"Admin %s has jailed player %s(%i) for %d minutes, reason: %s", panelActions[ actionAdmin ], username( TargetID ), TargetID, panelActions[ actionValue ], panelActions[ actionReason ] );
					default: SendClientMessageToAllf( COLOR_FRED, ""COL_GRI"[Panel Action]: "COL_LYE"Admin %s has jailed player %s(%i) for %d minutes, reason: %s[complaint: %d]", panelActions[ actionAdmin ], username( TargetID ), TargetID, panelActions[ actionValue ], panelActions[ actionReason ], panelActions[ actionComplaint ] );
				}
				ArrestPlayer( TargetID, panelActions[ actionValue ] * 60 );
			}
			case 4: // admin demote
			{
				SendClientMessageToAllf( COLOR_FRED, ""COL_GRI"[Panel Action]: "COL_LYE"Admin %s has removed %s(%i)'s admin level, reason: %s", panelActions[ actionAdmin ], username( TargetID ), TargetID, panelActions[ actionReason ] );
				playerVariables[ TargetID ][ pAdminLevel ] = 0;
				FIXES_SpawnPlayer( TargetID );
			}
			case 5: // helper demote
			{
				SendClientMessageToAllf( COLOR_FRED, ""COL_GRI"[Panel Action]: "COL_LYE"Admin %s has removed %s(%i)'s helper level. Reason: %s", panelActions[ actionAdmin ], username( TargetID ), TargetID, panelActions[ actionReason ] );
				playerVariables[ TargetID ][ pHelper ] = 0;
				FIXES_SpawnPlayer( TargetID );
			}
			case 7: // leader warn
			{
				switch( panelActions[ actionComplaint ] )
				{
					case 0: SendClientMessageToAllf( COLOR_FRED, ""COL_GRI"[Panel Action]: "COL_LYE"Admin %s has leader warned %s(%i), reason: %s", panelActions[ actionAdmin ], username( TargetID ), TargetID, panelActions[ actionReason ] );
					default: SendClientMessageToAllf( COLOR_FRED, ""COL_GRI"[Panel Action]: "COL_LYE"Admin %s has leader warned %s(%i), reason: %s[complaint: %d]", panelActions[ actionAdmin ], username( TargetID ), TargetID, panelActions[ actionReason ], panelActions[ actionComplaint ] );
				}
				if( playerVariables[ TargetID ][ pFactionLW ] <= 3 )
					playerVariables[ TargetID ][ pFactionLW ]++;

				gsQuery[ 0 ] = EOS;
				mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerFactionLW` = %d WHERE `id` = %d", playerVariables[ TargetID ][ pFactionLW ], GetPlayerMysqlID(TargetID) );
				mysql_tquery( g_Handle, gsQuery, "", "" );
			}
			case 8: // faction warn
			{
				switch( panelActions[ actionComplaint ] )
				{
					case 0: SendClientMessageToAllf( COLOR_FRED, ""COL_GRI"[Panel Action]: "COL_LYE"Admin %s has faction warned %s(%i), reason: %s", panelActions[ actionAdmin ], username( TargetID ), TargetID, panelActions[ actionReason ] );
					default: SendClientMessageToAllf( COLOR_FRED, ""COL_GRI"[Panel Action]: "COL_LYE"Admin %s has faction warned %s(%i), reason: %s[complaint: %d]", panelActions[ actionAdmin ], username( TargetID ), TargetID, panelActions[ actionReason ], panelActions[ actionComplaint ] );
				}
				if( playerVariables[ TargetID ][ pFW ] <= 3 )
					playerVariables[ TargetID ][ pFW ]++;

				gsQuery[ 0 ] = EOS;
				mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerFW` = %d WHERE `id` = %d", playerVariables[ TargetID ][ pFW ], GetPlayerMysqlID(TargetID) );
				mysql_tquery( g_Handle, gsQuery, "", "" );
			}
			case 9: // faction report reset
			{

			}
			case 10: // remove weapon license
			{
				switch( panelActions[ actionComplaint ] )
				{
					case 0: SendClientMessageToAllf( COLOR_FRED, ""COL_GRI"[Panel Action]: "COL_LYE"Admin %s has removed %s(%i)'s weapon license, reason: %s", panelActions[ actionAdmin ], username( TargetID ), TargetID, panelActions[ actionReason ] );
					default: SendClientMessageToAllf( COLOR_FRED, ""COL_GRI"[Panel Action]: "COL_LYE"Admin %s has removed %s(%i)'s weapon license, reason: %s[complaint: %d]", panelActions[ actionAdmin ], username( TargetID ), TargetID, panelActions[ actionReason ], panelActions[ actionComplaint ] );
				}
				if( playerVariables[ TargetID ][ pGunLicense ] )
					playerVariables[ TargetID ][ pGunLicense ] = 0;
			}
		}
	}
	else
	{
		// < target player it's not connected >
		printf( "[Socket Debug]: Target key it's not connected to the server!" );

		// < apply code >
		switch( panelActions[ actionType ] )
		{
			case 0: // warn
			{
				gsQuery[ 0 ] = EOS;
				mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerWarnings` = `playerWarnings` + 1 WHERE `id` = %d", panelActions[ actionPlayerKey ] );
				mysql_tquery( g_Handle, gsQuery, "", "" );

				switch( panelActions[ actionComplaint ] )
				{
					case 0: SendClientMessageToAllf( COLOR_LIGHTRED, "[Panel Action]: Admin %s has warned player %s[key:%i], reason: %s", panelActions[ actionAdmin ], panelActions[ actionPlayer ], panelActions[ actionPlayerKey ], panelActions[ actionReason ] );
					default: SendClientMessageToAllf( COLOR_LIGHTRED, "[Panel Action]: Admin %s has warned player %s[key:%i], reason: %s[complaint: %d]", panelActions[ actionAdmin ], panelActions[ actionPlayer ], panelActions[ actionPlayerKey ], panelActions[ actionReason ], panelActions[ actionComplaint ] );
				}
			}
			case 1: // ban
			{
				switch( panelActions[ actionComplaint ] )
				{
					case 0: SendClientMessageToAllf( COLOR_LIGHTRED, "[Panel Action]: Admin %s has banned player %s[key:%i] for %d days, reason: %s", panelActions[ actionAdmin ], panelActions[ actionPlayer ], panelActions[ actionPlayerKey ], panelActions[ actionValue ], panelActions[ actionReason ] );
					default: SendClientMessageToAllf( COLOR_LIGHTRED, "[Panel Action]: Admin %s has banned player %s[key:%i] for %d days, reason: %s[complaint: %d]", panelActions[ actionAdmin ], panelActions[ actionPlayer ], panelActions[ actionPlayerKey ], panelActions[ actionValue ], panelActions[ actionReason ], panelActions[ actionComplaint ] );
				}
				gsQuery[ 0 ] = EOS;
				mysql_format( g_Handle, gsQuery, sizeof gsQuery, "INSERT INTO `server_bans` (`banName`, `banAdmin`, `banReason`, `banAddress`, `banDays`, `banUnix`) VALUES('%s', '%s', '%s', 'Panel Action', %d, UNIX_TIMESTAMP() + %d * 86400)", panelActions[ actionPlayer ], panelActions[ actionAdmin ], panelActions[ actionReason ], panelActions[ actionValue ], panelActions[ actionValue ] );
				mysql_tquery( g_Handle, gsQuery, "OnPlayerBanCreated", "d", panelActions[ actionPlayerKey ] );
			}
			case 2: // mute
			{
				gsQuery[ 0 ] = EOS;
				mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerMute` = %d WHERE `id` = %d", panelActions[ actionValue ] * 60, panelActions[ actionPlayerKey ] );
				mysql_tquery( g_Handle, gsQuery, "", "" );

				switch( panelActions[ actionComplaint ] )
				{
					case 0: SendClientMessageToAllf( COLOR_FRED, ""COL_GRI"[Panel Action]: "COL_LYE"Admin %s has muted player %s[key:%i] for %d minutes, reason: %s", panelActions[ actionAdmin ], panelActions[ actionPlayer ], panelActions[ actionPlayerKey ], panelActions[ actionValue ], panelActions[ actionReason ] );
					default: SendClientMessageToAllf( COLOR_FRED, ""COL_GRI"[Panel Action]: "COL_LYE"Admin %s has muted player %s[key:%i] for %d minutes, reason: %s[complaint: %d]", panelActions[ actionAdmin ], panelActions[ actionPlayer ], panelActions[ actionPlayerKey ], panelActions[ actionValue ], panelActions[ actionReason ], panelActions[ actionComplaint ] );
				}
			}
			case 3: // jail
			{
				gsQuery[ 0 ] = EOS;
				mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerJail` = %d WHERE `id` = %d", panelActions[ actionValue ] * 60, panelActions[ actionPlayerKey ] );
				mysql_tquery( g_Handle, gsQuery, "", "" );

				switch( panelActions[ actionComplaint ] )
				{
					case 0: SendClientMessageToAllf( COLOR_FRED, ""COL_GRI"[Panel Action]: "COL_LYE"Admin %s has jailed player %s[key:%i] for %d minutes, reason: %s", panelActions[ actionAdmin ], panelActions[ actionPlayer ], panelActions[ actionPlayerKey ], panelActions[ actionValue ], panelActions[ actionReason ] );
					default: SendClientMessageToAllf( COLOR_FRED, ""COL_GRI"[Panel Action]: "COL_LYE"Admin %s has jailed player %s[key:%i] for %d minutes, reason: %s[complaint: %d]", panelActions[ actionAdmin ], panelActions[ actionPlayer ], panelActions[ actionPlayerKey ], panelActions[ actionValue ], panelActions[ actionReason ], panelActions[ actionComplaint ] );
				}
			}
			case 4: // admin demote
			{
				gsQuery[ 0 ] = EOS;
				mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerAdminLevel` = %d WHERE `id` = %d", panelActions[ actionValue ], panelActions[ actionPlayerKey ] );
				mysql_tquery( g_Handle, gsQuery, "", "" );

				SendClientMessageToAllf( COLOR_FRED, ""COL_GRI"[Panel Action]: "COL_LYE"Admin %s has removed %s[key:%i]'s admin level, reason: %s", panelActions[ actionAdmin ], panelActions[ actionPlayer ], panelActions[ actionPlayerKey ], panelActions[ actionReason ] );
			}
			case 5: // helper demote
			{
				gsQuery[ 0 ] = EOS;
				mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerHelper` = %d WHERE `id` = %d", panelActions[ actionValue ], panelActions[ actionPlayerKey ] );
				mysql_tquery( g_Handle, gsQuery, "", "" );

				SendClientMessageToAllf( COLOR_FRED, ""COL_GRI"[Panel Action]: "COL_LYE"Admin %s has removed %s[key:%i]'s helper level. Reason: %s", panelActions[ actionAdmin ], panelActions[ actionPlayer ], panelActions[ actionPlayerKey ], panelActions[ actionReason ] );
			}
			case 7: // leader warn
			{
				gsQuery[ 0 ] = EOS;
				mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerFactionLW` = `playerFactionLW` + 1 WHERE `id` = %d", panelActions[ actionPlayerKey ] );
				mysql_tquery( g_Handle, gsQuery, "", "" );

				switch( panelActions[ actionComplaint ] )
				{
					case 0: SendClientMessageToAllf( COLOR_FRED, ""COL_GRI"[Panel Action]: "COL_LYE"Admin %s has leader warned %s[key:%i], reason: %s", panelActions[ actionAdmin ], panelActions[ actionPlayer ], panelActions[ actionPlayerKey ], panelActions[ actionReason ] );
					default: SendClientMessageToAllf( COLOR_FRED, ""COL_GRI"[Panel Action]: "COL_LYE"Admin %s has leader warned %s[key:%i], reason: %s[complaint: %d]", panelActions[ actionAdmin ], panelActions[ actionPlayer ], panelActions[ actionPlayerKey ], panelActions[ actionReason ], panelActions[ actionComplaint ] );
				}
			}
			case 8: // faction warn
			{
				gsQuery[ 0 ] = EOS;
				mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerFW` = `playerFW` + 1 WHERE `id` = %d", panelActions[ actionPlayerKey ] );
				mysql_tquery( g_Handle, gsQuery, "", "" );

				switch( panelActions[ actionComplaint ] )
				{
					case 0: SendClientMessageToAllf( COLOR_FRED, ""COL_GRI"[Panel Action]: "COL_LYE"Admin %s has faction warned %s[key:%i], reason: %s", panelActions[ actionAdmin ], panelActions[ actionPlayer ], panelActions[ actionPlayerKey ], panelActions[ actionReason ] );
					default: SendClientMessageToAllf( COLOR_FRED, ""COL_GRI"[Panel Action]: "COL_LYE"Admin %s has faction warned %s[key:%i], reason: %s[complaint: %d]", panelActions[ actionAdmin ], panelActions[ actionPlayer ], panelActions[ actionPlayerKey ], panelActions[ actionReason ], panelActions[ actionComplaint ] );
				}
			}
			case 9: // faction report reset
			{
			}
			case 10: // remove weapon license
			{
				gsQuery[ 0 ] = EOS;
				mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerGunLicense` = %d WHERE `id` = %d", panelActions[ actionValue ], panelActions[ actionPlayerKey ] );
				mysql_tquery( g_Handle, gsQuery, "", "" );

				switch( panelActions[ actionComplaint ] )
				{
					case 0: SendClientMessageToAllf( COLOR_FRED, ""COL_GRI"[Panel Action]: "COL_LYE"Admin %s has set %s[key:%i]'s weapon license to %d, reason: %s", panelActions[ actionAdmin ], panelActions[ actionPlayer ], panelActions[ actionPlayerKey ], panelActions[ actionValue ], panelActions[ actionReason ] );
					default: SendClientMessageToAllf( COLOR_FRED, ""COL_GRI"[Panel Action]: "COL_LYE"Admin %s has set %s[key:%i]'s weapon license to %d, reason: %s[complaint: %d]", panelActions[ actionAdmin ], panelActions[ actionPlayer ], panelActions[ actionPlayerKey ], panelActions[ actionValue ], panelActions[ actionReason ], panelActions[ actionComplaint ] );
				}
			}
		}
	}

	// < Print the Debug >
	printf("[Socket Debug]: Remote client [%d] has sent: %s", remote_clientid, data); // id & data
	return true;
}
#endif

#if defined ANTI_CHEAT

stock GetCheatName( code ) 
{
	new string[64];
	switch( code ) 
	{
		case 0: string = "possible airbreak #1";
		case 1: string = "possible airbreak #2";
		case 2: string = "possible vehicle-teleport #1";
		case 3: string = "possible vehicle-teleport #2";
		case 4: string = "possible vehicle-teleport #3";
		case 5: string = "possible vehicle-teleport #4";
		case 6: string = "possible vehicle-teleport #5";
		case 7: string = "possible fly-hack #1";
		case 8: string = "possible fly-hack #2";
		case 9: string = "possible speed-hack #1";
		case 10: string = "possible speed-hack #2";
		case 11: string = "possible health-hack #1";
		case 12: string = "possible health-hack #2";
		case 13: string = "possible armour-hack";
		case 14: string = "possible money-hack";
		case 15: string = "possible weapon-hack";
		case 16: string = "possible ammo-hack #1";
		case 17: string = "possible ammo-hack #2";
		case 18: string = "possible special-actions";
		case 19: string = "possible godmode #1";
		case 20: string = "possible godmode #2";
		case 21: string = "possible invisible-hack";
		case 22: string = "possible lagcomp-spoof";
		case 23: string = "possible tuning-hack";
		case 24: string = "possible parkour-mod";
		case 25: string = "possible quick-turn(vehicle)";
		case 26: string = "possible rapid-fire";
		case 27: string = "possible fakespawn";
		case 28: string = "possible fakekill";
		case 29: string = "possible pro-aim";
		case 30: string = "possible cj-run";
		case 31: string = "possible carshot";
		case 32: string = "possible carjack";
		case 33: string = "possible unfreeze";
		case 34: string = "possible afk-ghost";
		case 35: string = "possible full-aim";
		case 36: string = "possible fake-npc";
		case 37: string = "possible reconnect";
		case 38: string = "possible high-ping";
		case 39: string = "possible dialog-hack";
		case 40: string = "possible VPN";
		case 41: string = "possible invalid-sa:mp-version";
		case 42: string = "possible rcon-hack";
		case 43: string = "possible tunning-crasher";
		case 44: string = "possible seat-crasher";
		case 45: string = "possible dialog-crasher";
		case 46: string = "possible a-object-crasher";
		case 47: string = "possible weapon-crasher";
		case 48: string = "possible flood #1";
		case 49: string = "possible flood #2";
		case 50: string = "possible flood #3";
		case 51: string = "possible ddos";
		case 52: string = "possible mop";
	}
	return string;
}

forward OnCheatWarning(playerid, ip_address[], type, code, code2, count);
public OnCheatWarning(playerid, ip_address[], type, code, code2, count)
{
	if( playerVariables[ playerid ][ pAdminLevel ] < 1 )
	{
		AdminBroadCast( 1, COLOR_YELLOW, "[AC] %s(%d) mby using %s!", username( playerid ), playerid, GetCheatName( code ));
		switch( code )
		{
			case 0:
			{
				if( count == 2 )
				{
					AdminBotKickPlayer(playerid, GetCheatName( code ), false);
				}
			}
			case 1:
			{
				if( count == 2 )
				{
					AdminBotKickPlayer(playerid, GetCheatName( code ), false);
				}		
			}
			case 2:
			{
				if( count == 2 )
				{
					AdminBotKickPlayer(playerid, GetCheatName( code ), false);
				}
			}
			case 3:
			{
				if( count == 2 )
				{
					AdminBotKickPlayer(playerid, GetCheatName( code ), false);
				}
			}
			case 4:
			{
				if( count == 2 )
				{
					AdminBotKickPlayer(playerid, GetCheatName( code ), false);
				}
			}
			case 5:
			{
				//
				if( count == 2 )
				{
					AdminBotKickPlayer(playerid, GetCheatName( code ), false);
				}
			}
			case 6:
			{
				//
				if( count == 2 )
				{
					if( playerVariables[ playerid ][ pFactionWar ] != 0 )
					{

					}
					else AdminBotKickPlayer(playerid, GetCheatName( code ), false);
				}
			}
			case 7:
			{
				//
				if( count == 2 )
				{
					AdminBotKickPlayer(playerid, GetCheatName( code ), false);
				}
			}
			case 8:
			{
				//
				if( count == 2 )
				{
					AdminBotKickPlayer(playerid, GetCheatName( code ), false);
				}
			}
			case 9:
			{
				//
				if( count == 2 )
				{
					AdminBotKickPlayer(playerid, GetCheatName( code ), false);
				}
			}
			case 10:
			{
				//
				if( count == 2 )
				{
					AdminBotKickPlayer(playerid, GetCheatName( code ), false);
				}
			}
			case 11:
			{
				//
				if( count == 2 )
				{
					AdminBotKickPlayer(playerid, GetCheatName( code ), false);
				}
			}
			case 12:
			{
				//
				if( count == 2 )
				{
					AdminBotKickPlayer(playerid, GetCheatName( code ), false);
				}
			}
			case 13:
			{
				//
				if( count == 2 )
				{
					AdminBotKickPlayer(playerid, GetCheatName( code ), false);
				}
			}
			case 14:
			{
				//
				if( count == 2 )
				{
					AdminBotKickPlayer(playerid, GetCheatName( code ), false);
				}
			}
			case 15:
			{
				//
				if( count == 2 )
				{
					AdminBotKickPlayer(playerid, GetCheatName( code ), false);
				}
			}
			case 16:
			{
				//
				if( count == 2 )
				{
					AdminBotKickPlayer(playerid, GetCheatName( code ), false);
				}
			}
			case 17:
			{
				//
				if( count == 2 )
				{
					AdminBotKickPlayer(playerid, GetCheatName( code ), false);
				}
			}
			case 18:
			{
				//
				if( count == 2 )
				{
					AdminBotKickPlayer(playerid, GetCheatName( code ), false);
				}
			}
			case 19:
			{
				//
				if( count == 2 )
				{
					AdminBotKickPlayer(playerid, GetCheatName( code ), false);
				}
			}
			case 20:
			{
				//
				if( count == 2 )
				{
					AdminBotKickPlayer(playerid, GetCheatName( code ), false);
				}
			}
			case 21:
			{
				//
				if( count == 2 )
				{
					AdminBotKickPlayer(playerid, GetCheatName( code ), false);
				}
			}
			case 22:
			{
				//
				if( count == 2 )
				{
					AdminBotKickPlayer(playerid, GetCheatName( code ), false);
				}
			}
			case 23:
			{
				if( playerVariables[ playerid ][ pPlayerInMod ] == 0 )
				{
					//
					if( count == 2 )
					{
						AdminBotKickPlayer(playerid, GetCheatName( code ), false);
					}
				}
			}
			case 24:
			{
				//
				if( count == 2 )
				{
					AdminBotKickPlayer(playerid, GetCheatName( code ), false);
				}
			}
			case 25:
			{
				//
				if( count == 2 )
				{
					AdminBotKickPlayer(playerid, GetCheatName( code ), false);
				}
			}
			case 26:
			{
				//
				if( count == 2 )
				{
					AdminBotKickPlayer(playerid, GetCheatName( code ), false);
				}
			}
			case 27:
			{
				//
				if( count == 2 )
				{
					AdminBotKickPlayer(playerid, GetCheatName( code ), false);
				}
			}
			case 28:
			{
				//
				if( count == 2 )
				{
					AdminBotKickPlayer(playerid, GetCheatName( code ), false);
				}
			}
			case 29:
			{
				//
				if( count == 2 )
				{
					AdminBotKickPlayer(playerid, GetCheatName( code ), false);
				}
			}
			case 30:
			{
				//
				if( count == 2 )
				{
					AdminBotKickPlayer(playerid, GetCheatName( code ), false);
				}
			}
			case 31:
			{
				//
				if( count == 2 )
				{
					AdminBotKickPlayer(playerid, GetCheatName( code ), false);
				}
			}
			case 32:
			{
				//
				if( count == 2 )
				{
					AdminBotKickPlayer(playerid, GetCheatName( code ), false);
				}
			}
			case 33:
			{
				//
				if( count == 2 )
				{
					AdminBotKickPlayer(playerid, GetCheatName( code ), false);
				}
			}
			case 34:
			{
				//
				if( count == 2 )
				{
					AdminBotKickPlayer(playerid, GetCheatName( code ), false);
				}
			}
			case 35:
			{
				//
				if( count == 2 )
				{
					AdminBotKickPlayer(playerid, GetCheatName( code ), false);
				}
			}
			case 36:
			{
				//
				if( count == 2 )
				{
					AdminBotKickPlayer(playerid, GetCheatName( code ), false);
				}
			}
			case 37:
			{
				//
				if( count == 2 )
				{
					AdminBotKickPlayer(playerid, GetCheatName( code ), false);
				}
			}
			case 38: {}
			case 39:
			{
				//
				if( count == 2 )
				{
					AdminBotKickPlayer(playerid, GetCheatName( code ), false);
				}
			}
			case 40:
			{
				//
				if( count == 2 )
				{
					AdminBotKickPlayer(playerid, GetCheatName( code ), false);
				}
			}
			case 41: {}
			case 42:
			{
				//
				if( count == 2 )
				{
					AdminBotKickPlayer(playerid, GetCheatName( code ), false);
				}
			}
			case 43:
			{
				//
				if( count == 2 )
				{
					AdminBotKickPlayer(playerid, GetCheatName( code ), false);
				}
			}
			case 44:
			{
				//
				if( count == 2 )
				{
					AdminBotKickPlayer(playerid, GetCheatName( code ), false);
				}
			}
			case 45:
			{
				//
				if( count == 2 )
				{
					AdminBotKickPlayer(playerid, GetCheatName( code ), false);
				}
			}
			case 46:
			{
				//
				if( count == 2 )
				{
					AdminBotKickPlayer(playerid, GetCheatName( code ), false);
				}
			}
			case 47:
			{
				//
				if( count == 2 )
				{
					AdminBotKickPlayer(playerid, GetCheatName( code ), false);
				}
			}
			case 48:
			{
				//
				if( count == 2 )
				{
					AdminBotKickPlayer(playerid, GetCheatName( code ), false);
				}
			}
			case 49:
			{
				//
				if( count == 2 )
				{
					AdminBotKickPlayer(playerid, GetCheatName( code ), false);
				}
			}
			case 50:
			{
				//
				if( count == 2 )
				{
					AdminBotKickPlayer(playerid, GetCheatName( code ), false);
				}
			}
			case 51:
			{
				//
				if( count == 2 )
				{
					AdminBotKickPlayer(playerid, GetCheatName( code ), false);
				}
			}
			case 52:
			{
				//
				if( count == 2 )
				{
					AdminBotKickPlayer(playerid, GetCheatName( code ), false);
				}
			}
		}
	}
}

forward OnCheatDetected(playerid, ip_address[], type, code);
public OnCheatDetected(playerid, ip_address[], type, code)
{
	if(code != 2 && code != 3 && code != 4 && code != 5 && 12 && code != 27 && code != 32 && code != 38 && code != 39 && code != 41)
	{
		AdminBotKickPlayer(playerid, GetCheatName( code ), false);
	}
}
#endif

/*
// < MySQL Query print errors >
public OnQueryError( errorid, const error[], const callback[], const query[], MySQL:handle )
{
	switch( errorid )
	{
		case ER_SYNTAX_ERROR:
		{
			printf( "Something is wrong in your syntax, query: %s", query );
		}
	}
	return true;
}
*/
public OnGameModeExit()
{
	// < close mysql connection >
	mysql_close( g_Handle );
	server_players = 0;
	#if defined VERSION_HOST
	if( is_socket_valid( g_Socket ) )
		socket_destroy( g_Socket );
	#endif
	#if defined HEIST_SYSTEM
	DestroyActor(Mike);
	DestroyActor(Mike);
	DestroyActor(Leader);
	DestroyActor(Player1);
	DestroyActor(Player2);
	DestroyActor(Player3);
	#endif
	return true;
}
public OnPlayerRequestClass(playerid, classid)
{
	playerVariables[ playerid ][ pJobVehicle ][ 0 ] = INVALID_VEHICLE_ID;
	playerVariables[ playerid ][ pJobVehicle ][ 1 ] = INVALID_VEHICLE_ID;
	return true;
}
public OnPlayerSuspectedForAimbot( playerid, hitid, weaponid, warnings )
{
	if( warnings & WARNING_OUT_OF_RANGE_SHOT )
	{
		gsString[ 0 ] = EOS;
		format( gsString, sizeof gsString, "AdmWarn: %s(%d) fired shots from a distance greater than the %s's fire range(Normal Range:%d)", username( playerid ), playerid, GetWeaponNameEx( weaponid ), BustAim::GetNormalWeaponRange( weaponid ) );
		submitToAdmins(gsString, COLOR_LIGHTRED);
	}
	else if( warnings & WARNING_PROAIM_TELEPORT )
	{
		gsString[ 0 ] = EOS;
		format( gsString, sizeof gsString, "AdmWarn: %s(%d) is using proaim (Teleport Detected)", username( playerid ), playerid );
		submitToAdmins(gsString, COLOR_LIGHTRED);
	}
	else if( warnings & WARNING_RANDOM_AIM )
	{
		gsString[ 0 ] = EOS;
		format( gsString, sizeof gsString, "AdmWarn: %s(%d) is suspected to be using aimbot(Hit with Random Aim with %s)", username( playerid ), playerid, GetWeaponNameEx( weaponid ) );
		submitToAdmins(gsString, COLOR_LIGHTRED);
	}
	else if( warnings & WARNING_CONTINOUS_SHOTS )
	{
		gsString[ 0 ] = EOS;
		format( gsString, sizeof gsString, "AdmWarn: %s(%d) has fired 10 shots continously with %s(%d)", username( playerid ), playerid, GetWeaponNameEx( weaponid ), weaponid );
		submitToAdmins(gsString, COLOR_LIGHTRED);
	}
	return false;
}
public OnPlayerConnect( playerid )
{
	// < Reset player Variables >
	ResetPlayerVariables( playerid );

	// < Make markers invisible >
	SetPlayerColor( playerid, 0xFFFFFF00 );

	// < Check Advertising >
	if( !Checkusername( playerid, username( playerid ) ) ) return false;

	AntiFlood_InitPlayer( playerid );

	// < Load player configurations >
	LoadPlayerInterpolateCamera( playerid );

	InitFly( playerid );
	LoadPlayerTextDraws( playerid );
	RemovePlayerBuilding( playerid );
	//PlayAudioStreamForPlayer( playerid, "http://rse-samp.com/music/introrpg.mp3" );
	//PlayerTextDrawShow( playerid, PlayerText:PLAYER_TD[ 0 ] );
	PlayerTextDrawShow( playerid, PlayerText:SERVER_TD[ 0 ] );

	// < Show player turfs >
	if(Iter_Contains(playerTurfs, playerid)) Iter_Remove(playerTurfs, playerid);
	playerVariables[ playerid ][ pTurfs ] = 0;
	foreach( new x : ServerTurfs )
		GangZoneHideForPlayerEx( playerid, GetGVarInt( "TurfID", x ) );

    GameTextForPlayer(playerid, "refreshing ban list", 3350, 3);

	// < Check player account >
	SetTimerEx("CheckPlayerBan", 1500, 0, "d", playerid);

	foreach(new i : server_admins)
		SendDeathMessageToPlayer( i, INVALID_PLAYER_ID, playerid, 200 );

	#if defined CRATES
		CratesObjectLoad2(playerid);
	#endif

	return true;
}
function CheckPlayerBan( playerid )
{
	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "SELECT * FROM `server_bans` WHERE `banName` = '%s' OR `banAddress` = '%s' ORDER BY `banKey` DESC LIMIT 1", username( playerid ), GetPlayerIPEx( playerid ) );
	mysql_pquery( g_Handle, gsQuery, "Player_BanlistCheck", "i", playerid );
}
SQL_Function Player_BanlistCheck( playerid )
{
	if( !IsPlayerConnected( playerid ) )
		return true;

	new Rows, Fields;
	cache_get_data( Rows, Fields, g_Handle );

	if( !Rows )
	{
		OnPlayerConnectEx( playerid );
	}
	else
	{
		for( new i = 0; i < Rows; i++ )
		{
			new bField[ 6 ][ 128 ];
			cache_get_field_content( i, "banReason", bField[ 0 ], g_Handle, 128 );
			cache_get_field_content( i, "banAdmin", bField[ 1 ], g_Handle, 128 );
			cache_get_field_content( i, "banDate", bField[ 2 ], g_Handle, 128 );
			cache_get_field_content( i, "banAddress", bField[ 3 ], g_Handle, 128 );
			cache_get_field_content( i, "banSerial", bField[ 4 ], g_Handle, 128 );
			cache_get_field_content( i, "banName", bField[ 5 ], g_Handle, 128 );

			if( cache_get_field_content_int( i, "banType", g_Handle ) )
			{
				if( strcmp( GetPlayerIPEx( playerid ), bField[ 3 ], true ) == 0 )
				{
					SendClientMessage( playerid, COLOR_LIGHTRED, "-----------------------------------[ Ban System ]-----------------------------------" );
					SendClientMessagef( playerid, COLOR_LIGHTRED, "Acest cont este banat permanent pe IP: %s de catre adminul: "COL_W"%s", bField[ 3 ], bField[ 1 ] );
					SendClientMessagef( playerid, COLOR_LIGHTRED, "Motivul pentru care ai primit ban: "COL_W"%s", bField[ 0 ] );
					SendClientMessagef( playerid, COLOR_LIGHTRED, "Data la care ai fost sanctionat: "COL_W"%s", bField[ 2 ] );
					SendClientMessage( playerid, COLOR_LIGHTRED, "Pentru mai multe informatii acceseaza: "COL_W""SERVER_PANEL"" );
					SendClientMessage( playerid, COLOR_LIGHTRED, "--------------------------------------------------------------------------------------------------" );
					KickEx( playerid );
				}
				else if( strcmp( username( playerid ), bField[ 5 ], true ) == 0 )
				{
					SendClientMessage( playerid, COLOR_LIGHTRED, "-----------------------------------[ Ban System ]-----------------------------------" );
					SendClientMessagef( playerid, COLOR_LIGHTRED, "Acest cont este banat permanent pe IP: %s de catre adminul: "COL_W"%s", bField[ 3 ], bField[ 1 ] );
					SendClientMessagef( playerid, COLOR_LIGHTRED, "Motivul pentru care ai primit ban: "COL_W"%s", bField[ 0 ] );
					SendClientMessagef( playerid, COLOR_LIGHTRED, "Data la care ai fost sanctionat: "COL_W"%s", bField[ 2 ] );
					SendClientMessage( playerid, COLOR_LIGHTRED, "Pentru mai multe informatii acceseaza: "COL_W""SERVER_PANEL"" );
					SendClientMessage( playerid, COLOR_LIGHTRED, "--------------------------------------------------------------------------------------------------" );
					KickEx( playerid );
				}
				else
				{
					gsQuery[ 0 ] = EOS;
					mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerBanned` = 0 WHERE `id` = %d", GetPlayerMysqlID(playerid) );
					mysql_tquery( g_Handle, gsQuery, "", "" );
					OnPlayerConnectEx( playerid );
				}
			}
			else
			{
				if( cache_get_field_content_int( i, "banUnix", g_Handle ) < gettime() && cache_get_field_content_int( i, "banDays", g_Handle ) != 0 )
				{
					gsQuery[ 0 ] = EOS;
					mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerBanned` = 0 WHERE `id` = %d", GetPlayerMysqlID(playerid) );
					mysql_tquery( g_Handle, gsQuery, "", "" );
					OnPlayerConnectEx( playerid );
				}
				else
				{
					SendClientMessage( playerid, COLOR_LIGHTRED, "-----------------------------------[ Ban System ]-----------------------------------" );

					if( !cache_get_field_content_int( i, "banDays", g_Handle ) )
						SendClientMessagef( playerid, COLOR_LIGHTRED, "Acest cont este banat permanent de catre adminul: "COL_W"%s", bField[ 1 ] );
					else SendClientMessagef( playerid, COLOR_LIGHTRED, "Acest cont este banat %d zile de catre adminul: "COL_W"%s", cache_get_field_content_int( i, "banDays", g_Handle ), bField[ 1 ] );

					if( isnull( bField[ 4 ] ) )
					{
						gsQuery[ 0 ] = EOS;
						mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_bans` SET `banSerial` = '%s' WHERE `banKey` = %d", GetPlayerSerial( playerid ), cache_get_field_content_int( i, "banKey", g_Handle ) );
						mysql_tquery( g_Handle, gsQuery, "", "" );
					}
					SendClientMessagef( playerid, COLOR_LIGHTRED, "Motivul pentru care ai primit ban: "COL_W"%s", bField[ 0 ] );
					SendClientMessagef( playerid, COLOR_LIGHTRED, "Data la care ai fost sanctionat: "COL_W" %s", bField[ 2 ] );
					SendClientMessage( playerid, COLOR_LIGHTRED, "Pentru mai multe informatii acceseaza: "COL_W""SERVER_PANEL"" );
					SendClientMessage( playerid, COLOR_LIGHTRED, "--------------------------------------------------------------------------------------------------" );
					KickEx( playerid );
				}
			}
		}
	}
	return true;
}
stock OnPlayerConnectEx( playerid )
{
	// < Load camera interpolate >
	LoadPlayerInterpolateCamera( playerid );

	// < Load the player's timer >
	playerVariables[ playerid ][ pPlayerTimer ] = SetTimerEx( "player_Timer", 1000, true, "d", playerid );

	// < show clock textdraws >
	PlayerTextDrawShow( playerid, CLOCK_TD[ 1 ] );
	PlayerTextDrawShow( playerid, CLOCK_TD[ 0 ] );

    // < Add Player In Stream >
    Iter_Add(playersStream[playerid], playerid);

    // < ++ total players >
    server_players++;

	// < Load the wanted text >
	playerVariables[ playerid ][ pWantedText ] = CreateDynamic3DTextLabel( "_", COLOR_WHITE, 0, 0, -20, 20, playerid );
	Streamer_SetFloatData( STREAMER_TYPE_3D_TEXT_LABEL, playerVariables[ playerid ][ pWantedText ], E_STREAMER_ATTACH_OFFSET_Z, 0.48 );

	// < Force player to login >
	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "SELECT * FROM `server_accounts` WHERE `username` = '%s'", username( playerid ) );
	mysql_pquery( g_Handle, gsQuery, "LoginPlayerAccount", "i", playerid );
}
public OnPlayerDisconnect( playerid, reason )
{
	server_players --;
	// < Remove player's timers >
	KillTimer( playerVariables[ playerid ][ pPlayerTimer ] );
	KillTimer( playerVariables[ playerid ][ pBackTimer ] );


	#if defined PET
		UnSummonPet(playerid);
	#endif

	// < Despawn Job's vehicles >
	DestroyPlayerJobVehicles( playerid );

	if(playerVariables[ playerid ][ pPhone ] != 0 && playerVariables[ playerid ][ pPhoneNumber ] != 0 ) 
		VECTOR_set_val( phone_numbers, playerVariables[ playerid ][pPhoneNumber ], 0 );

    // < Remove Player From Stream Vehicle >
    if (Iter_gPlayerVehicleId[playerid] != INVALID_VEHICLE_ID) 
    {
		Iter_Remove(vehiclePlayerStream[Iter_gPlayerVehicleId[playerid]], playerid);
		Iter_gPlayerVehicleId[playerid] = INVALID_VEHICLE_ID;
	}

    if(playerVariables[ playerid ][ pAdTime ] != 0) serverVariables[other_count_ads]--;

    // < Check Player Radar >
    CheckPlayerRadar(playerid);

	// < Despawn Player's vehicles >
	for( new slot=0; slot < MAX_SLOTS; slot++ )
		DeSpawnPlayerVehicle( slot, playerid );
	#if defined HEIST_SYSTEM
	// < check if heist fail >
	CheckHeistFail( playerid, "Jucatorul s-a deconectat de pe server!" );
	#endif

	// < Destroy the text >
	DestroyDynamic3DTextLabel( playerVariables[ playerid ][ pWantedText ] );
	if( IsValidDynamicArea( playerVariables[ playerid ][ pRadarZone ] ) )
		DestroyDynamicArea( playerVariables[ playerid ][ pRadarZone ] ), playerVariables[ playerid ][ pRadarZone ] = INVALID_STREAMER_ID;

	// < Rented Car >
	if( playerVariables[ playerid ][ pCarRent ] != INVALID_VEHICLE_ID )
		DestroyVehicle_( playerVariables[ playerid ][ pCarRent ] ), playerVariables[ playerid ][ pCarRent ] = INVALID_VEHICLE_ID;

	// < Bid Sistem >
	#if defined SYSTEM_BID
	if(GetServerData(currentBIDPlayer) == playerid)
		playerVariables[ serverVariables[ currentBIDPlayer ] ][ pMoney ] += GetGVarInt( "bid_Money", serverVariables[ currentBID ] );
	#endif

	// < Save Player Data >
	if( playerVariables[ playerid ][ pLogged ] )
	{
		playerVariables[ playerid ][ pSpawned ] = 0;
		savePlayerData( playerid );
		playerVariables[ playerid ][ pLogged ] = false;
	}
	// < Update PaintBall Players >
	if( playerVariables[ playerid ][ pPaintBall ] != -1 )
	{
		playerVariables[ playerid ][ pPaintBallKills ] = 0;
		playerVariables[ playerid ][ pPaintBallDeaths ] = 0;
		playerVariables[ playerid ][ pPaintBallLevel ] = 0;
		paintballVariables[ playerVariables[ playerid ][ pPaintBall ] ][ paintPlayers ]--;
	}
	// < Kill Find Timer >
	KillTimer( playerVariables[ playerid ][ pFindPlayerTimer ] );
	Iter_Remove( playerFinds[ playerVariables[ playerid ][ pFindPlayerTimer ] ], playerid );
	playerVariables[ playerid ][ pFindPlayer ] = INVALID_PLAYER_ID;
	RemovePickups( playerid );

	if(Iter_Contains(server_admins, playerid)) Iter_Remove(server_admins, playerid), server_admins--;
	if(Iter_Contains(Staff, playerid)) Iter_Remove(Staff, playerid);
	if(Iter_Contains(server_helpers, playerid)) Iter_Remove(server_helpers, playerid), server_helpers--;
	if(Iter_Contains(server_leaders, playerid)) Iter_Remove(server_leaders, playerid), server_leaders--;
	if(Iter_Contains(server_instructors, playerid)) Iter_Remove(server_instructors, playerid), server_instructors--;
	if(Iter_Contains(server_reporters, playerid)) Iter_Remove(server_reporters, playerid), server_reporters--;
	if(Iter_Contains(server_wanteds, playerid)) Iter_Remove(server_wanteds, playerid), server_wanteds--;
	if(Iter_Contains(server_managers, playerid)) Iter_Remove(server_managers, playerid), server_managers--;
	if(Iter_Contains(Departments, playerid)) Iter_Remove(Departments, playerid);
	if(Iter_Contains(normalPlayers, playerid)) Iter_Remove(normalPlayers, playerid);
    if(Iter_Contains(server_newbies, playerid)) Iter_Remove(server_newbies, playerid), server_newbies--;
    if(Iter_Contains(server_contracts, playerid)) Iter_Remove(server_contracts, playerid), server_contracts--;
    if(Iter_Contains(playerTurfs, playerid)) Iter_Remove(playerTurfs, playerid);
    if(Iter_Contains(server_reports, playerid)) Iter_Remove(server_reports, playerid), server_reports--;
    if(Iter_Contains(desyncPlayers, playerid)) Iter_Remove(desyncPlayers, playerid);
    if(Iter_Contains(playerWithHud, playerid)) Iter_Remove(playerWithHud, playerid);
    if(Iter_Contains(premiumPlayers[ playerVariables[ playerid ][ pPremium ] ], playerid)) Iter_Remove(premiumPlayers[ playerVariables[ playerid ][ pPremium ] ], playerid);
	playerVariables[ playerid ][ pReported ] = 0;

	if(Iter_Count( playerSpec[ playerid ] ) != 0) Iter_Clear( playerSpec[ playerid ] );

	if( playerVariables[ playerid ][ pRobStatus ] != 0 ) serverVariables[ rob_players ] --;
 
	new faction_spec = playerVariables[ playerid ][ pSpectatingFaction ];
	if(Iter_Contains(playerFaction[faction_spec], playerid)) Iter_Remove(playerFaction[faction_spec], playerid);

	new FactionID = playerVariables[ playerid ][ pFaction ];
	if(Iter_Contains(playerFaction[FactionID], playerid)) Iter_Remove(playerFaction[FactionID], playerid);

	new jobID = playerVariables[playerid][pJob];
	if(jobID == 10) mechanics--;
	if(Iter_Contains(playerJobs[jobID], playerid)) Iter_Remove(playerJobs[jobID], playerid);

    new clanID = playerVariables[playerid][pClan];
	if(Iter_Contains(playerClans[clanID], playerid)) Iter_Remove(playerClans[clanID], playerid);

	new paintID = playerVariables[playerid][pPaintball];
	if(Iter_Contains(playerPaint[paintID], playerid)) Iter_Remove(playerPaint[paintID], playerid);

	if(playerVariables[ playerid ][ pWTalkieFRQ ] != 0) Iter_Remove(playerFreq[playerVariables[ playerid ][ pWTalkieFRQ] ], playerid);

	if(playerVariables[ playerid ][ pFactionRank ] < 7 && playerVariables[ playerid ][ pAdminLevel] != 0 ) Iter_Remove(server_leaders, playerid);

	if( playerVariables[ playerid ][ pKey ] != -1 ) playerKeys[ playerVariables[ playerid ][ pKey ] ] = INVALID_PLAYER_ID;
	if( playerVariables[ playerid ][ pPhoneLast ] != INVALID_PLAYER_ID ) playerVariables[ playerid ][ pPhoneLast ] = INVALID_PLAYER_ID;

	foreach(new i : server_admins)
		SendDeathMessageToPlayer( i, INVALID_PLAYER_ID, playerid, 201 );

	if(playerVariables[playerid][pRentRoom] != 0)
	{
		new houseID = playerVariables[playerid][pRentRoom];
		Iter_Remove(playerRenters[houseID], playerid);
	}

	if( playerVariables[ playerid ][ pPhoneCall ] != INVALID_PLAYER_ID)
	{
		SendClientMessage(playerid, -1, "> The person you were talking to on the phone has disconnected!");
		SetPlayerSpecialAction( playerid, SPECIAL_ACTION_STOPUSECELLPHONE );
		RemovePlayerAttachedObject( playerid, INDEX_PHONE );
		playerVariables[ playerid ][ pPhoneCall ] = INVALID_PLAYER_ID;
		SetPVarInt(playerid, "player_called", INVALID_PLAYER_ID);
	}

	if( playerVariables[ playerid ][ pFaction ] == 2 || playerVariables[ playerid ][ pFaction ] == 3 || playerVariables[ playerid ][ pJob ] == 10 )
	{
		if(playerVariables[ playerid ][ pFindPlayer ] != INVALID_PLAYER_ID)
			Iter_Remove( playerFinds[ playerVariables[ playerid ][ pFindPlayer ] ], playerid ), playerVariables[ playerid ][ pFindPlayer ] = INVALID_PLAYER_ID;

		if(playerVariables[ playerid ][ pTaxiClient ] != INVALID_PLAYER_ID)
		{
			playerVariables[ playerVariables[ playerid ][ pTaxiClient ] ][ pTaxiAccept ] = 0, playerVariables[ playerVariables[ playerid ][ pTaxiClient ] ][ pTaxiCall ] = 0;
			SendClientMessagef( playerVariables[ playerid ][ pTaxiClient ], COLOR_YELLOW, "> Your Taxi Driver has disconnected from the server!" );
			SetPVarInt( playerVariables[ playerid ][ pTaxiClient ], "player_taxi" , INVALID_PLAYER_ID );
			playerVariables[ playerid ][ pTaxiClient ] = INVALID_PLAYER_ID;
		}

		#if defined UBERSYS
		if(playerVariables[ playerid ][ pUberOnClient ] != INVALID_PLAYER_ID)
		{
			playerVariables[ playerVariables[ playerid ][ pUberOnClient ] ][ pUberAccepted ] = 0, playerVariables[ playerVariables[ playerid ][ pUberOnClient ] ][ pUberCalled ] = 0;
			SendClientMessagef( playerVariables[ playerid ][ pUberOnClient ], COLOR_YELLOW, "> Your Uber Driver has disconnected from the server!" );
			SetPVarInt( playerVariables[ playerid ][ pUberOnClient ], "player_uber", INVALID_PLAYER_ID );
			playerVariables[ playerid ][ pUberOnClient ] = INVALID_PLAYER_ID;
		}
		#endif

		if(playerVariables[ playerid ][ pMedicClient ] != INVALID_PLAYER_ID)
		{
			playerVariables[ playerVariables[ playerid ][ pMedicClient ] ][ pMedicAccept ] = 0, playerVariables[ playerVariables[ playerid ][ pMedicClient ] ][ pMedicCall ] = 0;
			SendClientMessagef( playerVariables[ playerid ][ pMedicClient ], COLOR_LIGHTRED, "> Your Medic has disconnected from the server!" );
			SetPVarInt( playerVariables[ playerid ][ pMedicClient ], "player_medic" , INVALID_PLAYER_ID );
			playerVariables[ playerid ][ pMedicClient ] = INVALID_PLAYER_ID;
		}

		if( playerVariables[ playerid ][ pMechanicClient ] != INVALID_PLAYER_ID )
		{
			playerVariables[ playerVariables[ playerid ][ pMechanicClient ] ][ pMechanicAccept ] = 0, playerVariables[ playerVariables[ playerid ][ pMechanicClient ] ][ pMechanicCall ] = 0;
			SendClientMessagef( playerVariables[ playerid ][ pMechanicClient ], COLOR_COOLBLUE, "> Your Mechanic has disconnected from the server!" );
			SetPVarInt( playerVariables[ playerid ][ pMechanicClient ], "player_mechanic", INVALID_PLAYER_ID );
			playerVariables[ playerid ][ pMechanicClient ] = INVALID_PLAYER_ID;
		}
	}

	if( playerVariables[ playerid ][ pKillerID2 ] != INVALID_PLAYER_ID )
			playerVariables[ playerVariables[ playerid ][ pKillerID2 ] ][ pKillerID ] = INVALID_PLAYER_ID, playerVariables[ playerid ][ pKillerID2 ] = INVALID_PLAYER_ID;

	if( GetPVarInt( playerid, "invitePlayer2" ) != INVALID_PLAYER_ID )
		DeletePVar( GetPVarInt( playerid, "invitePlayer2" ), "invitePlayer" ), DeletePVar( GetPVarInt( playerid, "invitePlayer2" ), "inviteID" );

	if( playerVariables[ playerid ][ pDiceOffer2 ] != INVALID_PLAYER_ID )
	{
		playerVariables[ playerVariables[ playerid ][ pDiceOffer2 ] ][ pDiceOffer ] = INVALID_PLAYER_ID;
		playerVariables[ playerVariables[ playerid ][ pDiceOffer2 ] ][ pDicePrice ] = 0;
		SendClientMessagef( playerVariables[ playerid ][ pDiceOffer2 ], COLOR_DARKPINK, "> Cererea de barbut curenta a fost anulata, motiv: Jucatorul %s s-a deconectat!", playerVariables[ playerid ][ pNormalName ] );
		playerVariables[ playerid ][ pDiceOffer2 ] = INVALID_PLAYER_ID;
	}

	// < Race Arena >
	if( playerVariables[ playerid ][ pRaceArena ] )
		RemovePlayerFromRaceArena( playerid );

	// < Info Hello Bot >
	if( playerVariables[ playerid ][ pAdminLevel ] != 0 || playerVariables[ playerid ][ pHelper ] != 0 )
	{
		gsString[ 0 ] = EOS;
		format( gsString, 256, "Quitbot: %s[%d] has left the game (%s).", playerVariables[ playerid ][ pNormalName ], playerid, GetDisconnectReason( reason ) );
		submitToHelpersAndAdmins( gsString, COLOR_ADMCHAT );
	}
	if( playerVariables[ playerid][ pFaction ] != 0)
	{
		gsString[ 0 ] = EOS;
		format( gsString, 256, "%s(%d) from your group has disconnected (%s).", playerVariables[ playerid ][ pNormalName ], playerid, GetDisconnectReason( reason ) );
		SendToFaction(playerVariables[ playerid ][ pFaction ], COLOR_ADMCHAT, gsString );
	}
	nearByMessage( playerid, COLOR_GENANNOUNCE, 20.0, "%s(%d) disconnected from this server (%s).", playerVariables[ playerid ][ pNormalName ], playerid, GetDisconnectReason( reason) );
	if( playerVariables[ playerid ][ pTakingLive ] != INVALID_PLAYER_ID )
	{
		if( playerVariables[ playerid ][ pFaction ] == 14 )
		{
			foreach(new i : livePlayers[ playerid ] )
			{
				playerVariables[ i ][ pTakingLive ] = INVALID_PLAYER_ID;
				Iter_Remove( livePlayers[ playerid ], i );
				SendClientMessagef( i, COLOR_LIGHTBLUE, "* Reporter %s has disconnected, your live interview has been ended!", playerVariables[ playerid ][ pNormalName ] );
				TogglePlayerControllable( i, 1 );
			}
			Iter_Remove( livePlayers[ playerid ], playerid );
			playerVariables[ playerid ][ pLiveStatus ] = false;
			playerVariables[ playerid ][ pTakingLive ] = INVALID_PLAYER_ID;
		}
		else
		{
			new reporterID = playerVariables[ playerid ][ pTakingLive ];
			SendClientMessagef( reporterID, COLOR_LIGHTBLUE, "* Player %s has disconnected, he left your live interview!", playerVariables[ playerid ][ pNormalName ] );
			playerVariables[ playerid ][ pTakingLive ] = INVALID_PLAYER_ID;

			if( GetTotalLivePlayers( reporterID ) == 1 )
			{
				TogglePlayerControllable( reporterID, 1 );
				playerVariables[ reporterID ][ pLiveStatus ] = false;
				playerVariables[ reporterID ][ pTakingLive ] = INVALID_PLAYER_ID;
				Iter_Remove( livePlayers[ reporterID ], playerid );
				SendClientMessage( reporterID, COLOR_LIGHTBLUE, "* Your live interview has been stopped, reason: Player Disconnected!" );
			}
		}
	}
	return true;
}
function GivePlayerSpawnHealth( playerid )
{
	SetPlayerHealth( playerid, 100 );
	SetPlayerArmour( playerid, 0.0 );
	//PreloadAllAnimLibs( playerid );
	playerVariables[ playerid ][ pSpawnedTimer ] = false;
}
public OnPlayerSpawn( playerid )
{
	#if defined DEBUG_SERVER
		new countDEBUG = GetTickCount(); 
		print( "[OnPlayerSpawn] Loading..." );
	#endif

	// < Update player health >
	DestroyPlayerJobVehicles( playerid, 1 );
	playerVariables[ playerid ][ pAFKHits ] = 0;
	playerVariables[ playerid ][ pSpawnedTimer ] = true;
	playerVariables[ playerid ][ pHatStatus ] = false;
	playerVariables[ playerid ][ pGlassesStatus ] = false;
	SetTimerEx( "GivePlayerSpawnHealth", 3000, false, "d", playerid );

	#if defined HALLOWEEN_MOD
		SetPlayerAttachedObject( playerid, ATTACH_INDEX, 19528, 2, 0.091, 0.025, 0.0, 0.0, 0.0, -26.1, 1.227, 1.395, 1.4 );
	#endif

	// < Check for radar system >
	if( IsValidDynamicArea( playerVariables[ playerid ][ pRadarZone ] ) )
		DestroyDynamicArea( playerVariables[ playerid ][ pRadarZone ] ), playerVariables[ playerid ][ pRadarZone ] = INVALID_STREAMER_ID, TogglePlayerControllable( playerid, true ), SendClientMessage( playerid, COLOR_DBLUE, "Your radar has been turned off!" );

	// < Security check >
	if( !playerVariables[ playerid ][ pLogged ] )
	{
		gsString[ 0 ] = EOS;
		format( gsString, sizeof gsString, "AdmWarn: %s(%i) a incercat sa se spawneze fara a fi logat! [IP: %s]", username( playerid ), playerid, GetPlayerIPEx( playerid ) );
		submitToHelpersAndAdmins( gsString, COLOR_HOTORANGE );
		SendClientMessage( playerid, COLOR_ULTRARED, "You can't spawn, reason: You have to be logged in!" );
		KickEx( playerid );
	}
	// < Stop player sounds >
	//( playerid, 3402, 0.0, 0.0, 0.0 );

	// < Setup player settiongs >
	SetPlayerFactionColor( playerid );
	SetPlayerFactionSkin( playerid );

	// < Show Player Reports >
	if( playerVariables[ playerid ][ pAdminLevel ] != 0 || playerVariables[ playerid ][ pHelper ] != 0 )
		TextDrawShowForPlayer( playerid, REPORT_TD );

	if( playerVariables[ playerid ][ pTaxiDriver ] )
		playerVariables[ playerid ][ pTaxiDriver ] = 0, playerVariables[ playerid ][ pTaxiValue ] = 0, SendClientMessage( playerid, -1, ""COL_YE"Fare set to off (type again /fare when you are in vehicle!)");

	// < Check cuffs >
	if( playerVariables[ playerid ][ pFreezeType ] == 2 )
		playerVariables[ playerid ][ pFreezeType ] = 0;

	// < Disable player undercover >
	if( playerVariables[ playerid ][ pUndercover ] )
	{
		foreach(new i : Player)
			ShowPlayerNameTagForPlayer( i, playerid, 0 );

		PlayerTextDrawHide( playerid, PLAYER_TD[ 5 ] );
		playerVariables[ playerid ][ pUndercover ] = 0;
	}

	#if defined PET
	if(playerVariables[playerid][pPetStatus] == 1)
	{
		UnSummonPet(playerid);

		SummonPet(playerid);	
	}
	#endif
	// < Disable player Duty )
	if( playerVariables[ playerid ][ pOnDuty ] && playerVariables[ playerid ][ pSpectating ] == INVALID_PLAYER_ID )
		playerVariables[ playerid ][ pOnDuty ] = 0;

	// Load the rest of the code
	if( playerVariables[ playerid ][ pPrisonTime ] > 0 )
	{
		ArrestPlayer( playerid, playerVariables[ playerid ][ pPrisonTime ] );
	}
	else
	{
		// < Stop player spectate )
		if( playerVariables[ playerid ][ pSpectating ] != INVALID_PLAYER_ID )
		{
			// < Put player's position and interior/virtual back )
			SetPlayerPos( playerid, playerVariables[ playerid ][ pSpecPosition ][ 0 ], playerVariables[ playerid ][ pSpecPosition ][ 1 ], playerVariables[ playerid ][ pSpecPosition ][ 2 ] );
			playerVariables[ playerid ][ pSpecInterior ] 	= 	SetPlayerInterior( playerid, playerVariables[ playerid ][ pSpecInterior ] );
			playerVariables[ playerid ][ pSpecVirtual ] 	=  	SetPlayerVirtualWorld( playerid, playerVariables[ playerid ][ pSpecVirtual ] );
			Iter_Remove( playerSpec[ playerVariables[ playerid ][ pSpectating ] ], playerid );
			playerVariables[ playerid ][ pSpectating ] 		= 	INVALID_PLAYER_ID;
			PlayerTextDrawHide( playerid, SPECTATE_TD );
			ResetServerWeapons( playerid );

			// < Setup player settiongs )
			SetPlayerFactionColor( playerid );
			SetPlayerFactionSkin( playerid );
			SetPlayerHealth( playerid, playerVariables[ playerid ][ pSpecHealth ] );
			SetPlayerArmour( playerid, playerVariables[ playerid ][ pSpecArmour ] );

			for( new wID = 0; wID <= 12; wID++ )
				GivePlayerServerWeapon( playerid, WeaponData[ playerid ][ wID ][ 0 ], WeaponData[ playerid ][ wID ][ 1 ] );
			return true;
		}
		if( playerVariables[ playerid ][ pPaintBall ] != -1 )
		{
			// < Check if it's started to give weapons )
			SetPlayerArenaPosition( playerid );

			if( paintballVariables[ playerVariables[ playerid ][ pPaintBall ] ][ paintStatus ] == 2 )
				GivePlayerWeaponPack( playerid, playerVariables[ playerid ][ pPaintBall ] );
			return true;
		}
		else
		{
			// < Check player's variables )
			switch( playerVariables[ playerid ][ pSpawnType ] )
			{
				case 0: // Spawn Civil
				{
					SetPlayerInterior( playerid, 0 );
					SetPlayerVirtualWorld( playerid, 0 );
					SetPlayerFactionColor( playerid );
					SetCameraBehindPlayer( playerid );
					HideTutorial( playerid );

					switch( playerVariables[ playerid ][ pCity ] )
					{
						case 0: SetPlayerPos( playerid, 1743.1216, -1860.9050, 13.5782 ), SetPlayerFacingAngle( playerid, 359.0600 );
						case 1: SetPlayerPos( playerid, 1676.8617, 1447.7217, 10.7832 ), SetPlayerFacingAngle( playerid, 269.0855 );
					}
				}
				case 1: // Spawn HQ
				{
					new factionID = playerVariables[ playerid ][ pFaction ];
					SetPlayerInterior( playerid, GetGVarInt( "faction_Interior", factionID ) );
					SetPlayerVirtualWorld( playerid, GetGVarInt( "faction_Virtual", factionID ) );
					SetPlayerPos( playerid, GetGVarFloat( "faction_ExitX", factionID ), GetGVarFloat( "faction_ExitY", factionID ), GetGVarFloat( "faction_ExitZ", factionID ) );
				    playerVariables[playerid][GET_AREA_FACTION] = factionID;
				}
				case 2: // Spawn House
				{
					if( playerVariables[ playerid ][ pRentRoom ] != 0 )
					{
						new houseID = playerVariables[ playerid ][ pRentRoom ];
						SetPlayerInterior( playerid, GetGVarInt( "house_Interior", houseID ) );
						SetPlayerVirtualWorld( playerid, GetGVarInt( "house_Virtual", houseID ) );
						SetPlayerPos( playerid, GetGVarFloat( "house_ExitX", houseID ), GetGVarFloat( "house_ExitY", houseID ), GetGVarFloat( "house_ExitZ", houseID ) );
					    playerVariables[playerid][GET_AREA_HOUSE] = houseID;
					}
					else if( playerVariables[ playerid ][ pHouse ] != 0 )
					{
						new houseID = playerVariables[ playerid ][ pHouse ];
						SetPlayerInterior( playerid, GetGVarInt( "house_Interior", houseID ) );
						SetPlayerVirtualWorld( playerid, GetGVarInt( "house_Virtual", houseID ) );
						SetPlayerPos( playerid, GetGVarFloat( "house_ExitX", houseID ), GetGVarFloat( "house_ExitY", houseID ), GetGVarFloat( "house_ExitZ", houseID ) );
					    playerVariables[playerid][GET_AREA_HOUSE] = houseID;
					}
					else
					{
						SetPlayerInterior( playerid, 0 );
						SetPlayerVirtualWorld( playerid, 0 );
						SetPlayerFactionColor( playerid );
						SetPlayerPos( playerid, 1799.8986, -1863.5604, 13.5749 + 1 ), SetPlayerFacingAngle( playerid, 1.1922 );
						SetCameraBehindPlayer( playerid );
					}
				}
				case 3: // spawn apartment
				{
					if(playerVariables[playerid][pRentAP] != 0)
					{
						new ap_id = playerVariables[playerid][pRentAP];
                        SetPVarInt( playerid, "is_in_apartament", 1 );
						SetPlayerPos( playerid, GetGVarFloat( "apartment_EXITX", ap_id ), GetGVarFloat( "apartment_EXITY", ap_id ), GetGVarFloat( "apartment_EXITZ", ap_id ) );
					    playerVariables[playerid][GET_AREA_APARTMENT] = ap_id;
					}
				}
			}
		}
		if( playerVariables[ playerid ][ pFaction ] != 0 && playerVariables[ playerid ][ pFactionWar ] == 0 )
		{
			if( GetGVarInt( "faction_WarID", playerVariables[ playerid ][ pFaction ] ) != 0 )
			{
				foreach( new x : ServerTurfs )
					GangZoneShowForPlayerEx( playerid, GetGVarInt( "TurfID", x ), GetTeamZoneColor( GetGVarInt( "turf_Owner", x ) ) );

				new WarTurfID = GetGVarInt( "faction_WarTurf", playerVariables[ playerid ][ pFaction ] );
				new TurfID = GetGVarInt( "TurfID", GetGVarInt( "faction_WarTurf", playerVariables[ playerid ][ pFaction ] ) );
				GangZoneFlashForPlayer( playerid, TurfID, COLOR_BLACK );
				playerVariables[ playerid ][ pFactionWar ] = GetGVarInt( "faction_WarID", playerVariables[ playerid ][ pFaction ] );
				playerVariables[ playerid ][ pFactionWarKills ] = 0;
				playerVariables[ playerid ][ pFactionWarDeaths ] = 0;
				playerVariables[ playerid ][ pFactionWarSeconds ] = 0;
				playerVariables[ playerid ][ pTurfs ] = 1;
				Iter_Add(playerTurfs, playerid);
				SendClientMessagef( playerid, COLOR_ATTACK, "[WAR] Your faction it's in war on the turf: %d", WarTurfID );
			}
		}
		if( playerVariables[ playerid ][ pFirstNormalSpawn ] == false )
		{
			// < Update the player textdraw )
			gsString[ 0 ] = EOS;
			format( gsString, 64, "%s(%d) / "SERVER_LOGO"", username(playerid), playerid );
			PlayerTextDrawSetString( playerid, PlayerText:SERVER_TD[ 0 ] , gsString );
			PlayerTextDrawShow( playerid, PlayerText:SERVER_TD[ 0 ] );

			// < Load player SKill >
			for( new x = 1; x < MAX_JOBS; x++ )
				LoadPlayerSkill( playerid, x );

			// < Show player's quests >
			ShowPlayerQuests( playerid );
			#if defined OBJECT_QUEST
			// < Create player's pickups >
			foreach( new objid : QuestObjects )
				if( !playerVariables[ playerid ][ pQuestObject ][ objid ] )
					playerVariables[ playerid ][ pQuestObjectPickup ][ objid ] = CreateDynamicObject( GetGVarInt( "obj_Model", objid ), GetGVarFloat( "obj_PosX", objid ), GetGVarFloat( "obj_PosY", objid ), GetGVarFloat( "obj_PosZ", objid ) + 0.3, 0.0, 0.0, 0.0, -1, -1, playerid );
			// < Show player his progress >
			SendClientMessagef( playerid, COLOR_YELLOW, "Misiune: Gaseste obiectele speciale ascunse pe harta! | Progres: %d/%d", GetPlayerTotalObjectQuest( playerid ), MAX_QUESTOBJ - 1 );
			SendClientMessage( playerid, COLOR_LIGHTRED, "Pentru mai multe informatii despre Quest system foloseste comanda: /questhelp" );
			#endif
			/*// < Freeze 5 secunde login >
			new Player;
			TogglePlayerControllable( Player, 0 );
			playerVariables[ Player ][ pFreezed ] = 5;
			SendClientMessagef( Player, COLOR_WHITE, "You have been frozen for 5 seconds!");*/

			// < Load player personal Vehicles >
			gsQuery[ 0 ] = EOS;
			mysql_format( g_Handle, gsQuery, sizeof gsQuery, "SELECT * FROM `server_personalvehicles` WHERE `vehicleOwner` = %d", GetPlayerMysqlID(playerid) );
			mysql_pquery( g_Handle, gsQuery, "LoadPlayerPersonalVehicles", "dd", playerid, false );

			if( playerVariables[ playerid ][ pBlocked ] )
			{
				SendClientMessage( playerid, COLOR_WHITE, "SERVER: Contul tau figureaza ca fiind blocat!" );
				SendClientMessagef( playerid, COLOR_YELLOW, "PIN: Foloseste /pin daca ai un cod PIN atasat contului pentru a-l debloca! [/pinhelp]" );
			}
			if( !playerVariables[ playerid ][ pPINStatus ] )
			{
				SendClientMessage( playerid, COLOR_WHITE, "SERVER: Nu ai un cod PIN atasat acestui cont!" );
				SendClientMessage( playerid, COLOR_WHITE, "SERVER: Foloseste comanda /addpin pentru a-l configura!" );
			}
			// < Reset the variable as done >
			playerVariables[ playerid ][ pFirstNormalSpawn ] = true;
		}
	}

	// < Set the Paint position >
	if( playerVariables[ playerid ][ pPaintBallLeaving ] )
	{
		SetPlayerPos( playerid, 1304.0735, -1370.9027, 13.5820 );
		SetPlayerFacingAngle( playerid, 270.3715 );
		SetCameraBehindPlayer( playerid );
		SetPlayerInterior( playerid, 0 );
		SetPlayerVirtualWorld( playerid, 0 );
		playerVariables[ playerid ][ pPaintBallLeaving ] = 0;
	}
	else if( playerVariables[ playerid ][ pRaceArenaLeaving ] )
	{
		SetPlayerPos( playerid, 2684.8306, -1705.3291, 10.2722 );
		SetPlayerFacingAngle( playerid, 316.0718 );
		SetCameraBehindPlayer( playerid );
		SetPlayerInterior( playerid, 0 );
		SetPlayerVirtualWorld( playerid, 0 );
		playerVariables[ playerid ][ pRaceArenaLeaving ] = false;
	}
	playerVariables[ playerid ][ pSpawned ] = 1;
	#if defined DEBUG_SERVER
		printf( "[DEBUG] Time taken to execute OnPlayerSpawn: [%d] miliseconds", GetTickCount() - countDEBUG );
	#endif
	return true;
}
public OnPlayerDeath( playerid, killerid, reason )
{
	#if defined DEBUG_SERVER
		SendClientMessageToAllf( COLOR_WHITE, "[OPD Debug] Player %d, Killer %d, Reason %d", playerid, killerid, reason );
	#endif

	switch(gettime() - playerVariables[playerid][E_FK_DEATHSPAM])
	{
		case 0..3:
		{
			playerVariables[playerid][FK_DEATHSPAM] ++;
			if(playerVariables[playerid][FK_DEATHSPAM] >= 3)
			{
				AdminBotKickPlayer(playerid, "Fake Kill (cheats)", false);
				return 1;
			}
		}
		default: playerVariables[playerid][E_FK_DEATHSPAM] = 0;
	}
	playerVariables[playerid][FK_DEATHSPAM] = gettime();

	assert(AntiFlood_Check(playerid));

	// < Force the player to die >
	//SetPlayerHealth( playerid, 0.0 );
	if( playerVariables[ playerid ][ pPaintBall ] == -1 && playerVariables[ playerid ][ pFactionWar ] == 0 )
		playerVariables[ playerid ][ pMoney ] -= 100;

	#if defined HEIST_SYSTEM
	// < check if heist fail >
	CheckHeistFail( playerid, "Jucatorul a murit in timpul misiunii!" );
	#endif

	if( playerVariables[ playerid ][ pTaxiDriver ] )
		playerVariables[ playerid ][ pTaxiDriver ] = 0, playerVariables[ playerid ][ pTaxiValue ] = 0, SendClientMessage( playerid, -1, ""COL_YE"Fare set to off (type again /fare when you are in vehicle!)");

	if( playerVariables[ playerid ][ pSpectatedBy ] != INVALID_PLAYER_ID) TogglePlayerSpectating( playerVariables[ playerid ][ pSpectatedBy ], false);

	// < Race Arena >
	if( playerVariables[ playerid ][ pRaceArena ] )
		RemovePlayerFromRaceArena( playerid );

	if( playerVariables[ playerid ][ pFactionWar ] != 0 )
		OnWeaponDrop( playerid );

	if( playerVariables[ playerid ][ pLoopingAnim ] )
		playerVariables[ playerid ][ pLoopingAnim ] = 0;

	if( playerVariables[ playerid ][ pRobStatus ] != 0 )
	{
		if( IsPlayerAttachedObjectSlotUsed( playerid, INDEX_ROB ) )
			RemovePlayerAttachedObject( playerid, INDEX_ROB );

		DisablePlayerCheckpoint( playerid );
		DisablePlayerRaceCheckpoint( playerid );
		playerVariables[ playerid ][ pCP ] = 0;
		playerVariables[ playerid ][ pRobStatus ] = 0;
		serverVariables[ rob_players ] --;
		SendClientMessagef( playerid, COLOR_ROB, "You have failed your rob after %d seconds!", playerVariables[ playerid ][ pRobTime ] );
	}
	if( Iter_Count( playerFinds[ playerid ] ) != 0 )
	{
		foreach(new i : playerFinds[ playerid ] )
		{
			DisablePlayerCheckpoint( i );
			playerVariables[ i ][ pCP ] = 0;
			Iter_Remove( playerFinds[ playerid ], i );
			KillTimer( playerVariables[ i ][ pFindPlayerTimer ] );
			playerVariables[ i ][ pFindPlayer ] = INVALID_PLAYER_ID;
			PlayerTextDrawHide( i, PlayerText:FIND_TD );

			if( killerid != i )
				GameTextForPlayer( i, "~r~target has died!", 5000, 1 );
		}
	}	
	if( playerVariables[ playerid ][ pFactionWar ] != 0 )
	{
		foreach( new i : playerFaction[ playerVariables[ playerid ][ pFactionWar ] ] )
		{
			SendDeathMessageToPlayer( i, killerid, playerid, reason );
		}
	}		
	if( IsPlayerConnected( killerid ) )
	{
		PlayerTextDrawHide( playerid, PLAYER_TD[ 1 ] );
		if( playerVariables[ playerid ][ pWanted ] != 0 && IsPlayerCop( killerid ) )
		{
			// < Announce the players )
			CheckSuspectKill( killerid, playerid );
		}
		new paintID = playerVariables[ killerid ][ pPaintBall ];
		if( paintID != -1 && paintballVariables[ paintID ][ paintStatus ] == 2 )
		{
			SendDeathMessageToPlayer( playerid, killerid, playerid, reason );
			SendDeathMessageToPlayer( killerid, killerid, playerid, reason );

			// < Global Paintball >
			playerVariables[ playerid ][ pPaintDeaths ]++;
			playerVariables[ killerid ][ pPaintKills ]++;
			//playerVariables[ playerid ][ pPaintball ] = 0;

			playerVariables[ playerid ][ pPaintBallDeaths ]++;
			playerVariables[ killerid ][ pPaintBallKills ]++;
			new winnerID = CalculatePaintballWinner( paintID );
			if( playerVariables[ winnerID ][ pPaintBallKills ] >= 2 && winnerID == killerid )
			{
				gsString[ 0 ] = EOS;
				format( gsString, sizeof gsString, "%s is in the lead with %d kills.", username( winnerID ), playerVariables[ winnerID ][ pPaintBallKills ] );
				SendMessageToArena( paintID, COLOR_YELLOW, gsString );
			}
			CheckPlayerQuest( killerid, QUEST_PAINTBALL );
			SendClientMessagef( killerid, COLOR_GENANNOUNCE, "You have killed %s[%d]. You now have %d kills.", username( playerid ), playerid, playerVariables[ killerid ][ pPaintBallKills ] );
			SendClientMessagef( playerid, COLOR_GENANNOUNCE, "You have been killed by %s[%d].", username( killerid ), killerid );

			new levelPaint = floatround( playerVariables[ killerid ][ pPaintBallKills ] / 2 );
			if( playerVariables[ killerid ][ pPaintBallLevel ] != levelPaint && paintID == 1 ) // Gungame
			{
				SendClientMessage( killerid, COLOR_YELLOW, "You have gained your next level weapon!" );
				playerVariables[ killerid ][ pPaintBallLevel ] = levelPaint;
				ResetServerWeapons( killerid );
				GivePlayerGunGameWeapon( killerid );
			}
		}
		if( playerVariables[ killerid ][ pFactionWar ] == playerVariables[ playerid ][ pFaction ] )
		{
			new TurfID = GetGVarInt( "faction_WarTurf", playerVariables[ playerid ][ pFaction ] );
			if( IsPlayerInDynamicArea( killerid, GetGVarInt( "TurfREC", TurfID ) ) )
			{
				playerVariables[ killerid ][ pFactionWarKills ]++;
				new FactionID = playerVariables[ killerid ][ pFaction ];
				SetGVarInt( "faction_WarKills", GetGVarInt( "faction_WarKills", FactionID ) + 1, FactionID );
				SendClientMessagef( killerid, COLOR_LIGHTBLUE, "Turf war: You killed %s[%d] with %s from %.2f meters", username( playerid ), playerid, WeaponNames[ reason ], GetDistanceBetweenPlayers( killerid, playerid ) );
				SendClientMessagef( playerid, COLOR_LIGHTBLUE, "Turf war: You were killed by %s[%d] with %s from %.2f meters", username( killerid ), killerid, WeaponNames[ reason ], GetDistanceBetweenPlayers( killerid, playerid ) );
			}
		}
		if( playerVariables[ playerid ][ pFactionWar ] == playerVariables[ killerid ][ pFaction ] )
			playerVariables[ playerid ][ pFactionWarDeaths ]++;

		if( playerVariables[ killerid ][ pFaction ] == 6 )
		{
			if( playerVariables[ killerid ][ pHeadChasing ] == playerid )
			{
				playerVariables[ killerid ][ pHeadChasing ] = INVALID_PLAYER_ID;
				playerVariables[ playerid ][ pHeadChased ] = INVALID_PLAYER_ID;
				playerVariables[ playerid ][ pHeadTaken ] = 0;

				if( !playerVariables[ killerid ][ pUndercover ] )
				{
					gsString[ 0 ] = EOS;
					format( gsString, sizeof gsString, "%s failed to complete the contract on %s for $%s, distance: %.2fm. Fail reason: not undercover.", username( killerid ), username( playerid ), FormatNumber(playerVariables[ playerid ][ pHeadValue ]), GetDistanceBetweenPlayers( killerid, playerid ) );
					return SendToFaction( 6, COLOR_HIT, gsString );
				}
				else if( playerVariables[ killerid ][ pPhoneStatus ] )
				{
					gsString[ 0 ] = EOS;
					format( gsString, sizeof gsString, "%s failed to complete the contract on %s for $%s, distance: %.2fm. Fail reason: phone turned on.", username( killerid ), username( playerid ), FormatNumber(playerVariables[ playerid ][ pHeadValue ]), GetDistanceBetweenPlayers( killerid, playerid ) );
					return SendToFaction( 6, COLOR_HIT, gsString );
				}
				else if( GetDistanceBetweenPlayers( killerid, playerid ) <= 99 )
				{
					gsString[ 0 ] = EOS;
					format( gsString, sizeof gsString, "%s failed to complete the contract on %s for $%s, distance: %.2fm. Fail reason: distance/weapon.", username( killerid ), username( playerid ), FormatNumber(playerVariables[ playerid ][ pHeadValue ]), GetDistanceBetweenPlayers( killerid, playerid ) );
					return SendToFaction( 6, COLOR_HIT, gsString );
				}
				gsString[ 0 ] = EOS;
				format( gsString, sizeof gsString, "%s has succesfully completed the contract on %s for $%s, distance: %.2fm.", username( killerid ), username( playerid ), FormatNumber(playerVariables[ playerid ][ pHeadValue ]), GetDistanceBetweenPlayers( killerid, playerid ) );
				SendToFaction( 6, COLOR_HIT, gsString );

				playerVariables[ killerid ][ pMoney ] += playerVariables[ playerid ][ pHeadValue ];
				playerVariables[ playerid ][ pHeadValue ] = 0;
				Iter_Remove(server_contracts, playerid);
				server_contracts--;
				playerVariables[ killerid ][ pFactionContracts ]++;
			}
		}
		if( !playerVariables[ playerid ][ pFactionWar ] && playerVariables[ playerid ][ pPaintBall ] == -1 && !IsPlayerCop( killerid ) && !IsPlayerCop( playerid ) && playerVariables[ playerid ][ pFaction ] != playerVariables[ killerid ][ pFaction ] )
		{
			// < Announce the cops >
			playerVariables[ playerid ][ pKillerTime ] = 60;
			playerVariables[ playerid ][ pKillerID ] = killerid;
			playerVariables[ killerid ][ pKillerID2 ] = playerid;
			SendClientMessagef( playerid, COLOR_GENANNOUNCE, "You have been attacked by %s. You have 60 seconds to call the police to report this crime. Use /call 112.", playerVariables[ killerid ][ pNormalName ] );
		}
		else if( IsPlayerCop( playerid ) && !IsPlayerCop( killerid ) )
		{
			SendClientMessagef( playerid, COLOR_DBLUE, "[PD Report] %s[%d] has killed you with [%s] from %.2fm", playerVariables[ killerid ][ pNormalName ], killerid, GetWeaponNameEx( GetPlayerWeapon( killerid ) ), GetDistanceBetweenPlayers( killerid, playerid ) );
		}
	}
	else
	{
		if( playerVariables[ playerid ][ pPaintBall ] != -1 )
			SendClientMessage( playerid, COLOR_GENANNOUNCE, "You have killed yourself!" );
	}
	ResetServerWeapons( playerid );
	DestroyPlayerJobVehicles( playerid, 1 );
	return true;
}
public OnPlayerTakeDamage( playerid, issuerid, Float:amount, weaponid, bodypart )
{
	#if defined DEBUG_SERVER
		SendClientMessagef( issuerid, COLOR_WHITE, "You hit: %d[%0.2f] with weapon %d on bodypart: %d", playerid, amount, weaponid, bodypart );
	#endif
	if( IsPlayerConnected( issuerid ) )
	{
		if( playerVariables[ playerid ][ pHud ][ 5 ] == 1 )
		{
			InfoTD_MSG( playerid, 3000, "Took %0.2f damage from ~r~~h~%s", amount, username( issuerid ) );
		}

		if( playerVariables[ issuerid ][ pHud ][ 5 ] == 1 )
		{
			InfoTD_MSG( issuerid, 3000, "Gave %0.2f damage to ~r~~h~%s", amount, username( playerid ) );
		}

		foreach(new i : playerSpec[ issuerid ])
		{
			new Float:lastShot[ 6 ];
			GetPlayerLastShotVectors( issuerid, lastShot[ 0 ], lastShot[ 1 ], lastShot[ 2 ], lastShot[ 3 ], lastShot[ 4 ], lastShot[ 5 ] );
			SendClientMessagef( i, COLOR_IN2, "DMG: %s[%d] did %0.2f damage to %s[%d] using weapon %s. [hit: %f, %f, %f] [bodypart: %d]", playerVariables[ issuerid ][ pNormalName ], issuerid, amount, playerVariables[ playerid ][ pNormalName ], playerid, GetWeaponNameEx( weaponid ), lastShot[ 3 ], lastShot[ 4 ], lastShot[ 5 ], bodypart );
		}
		// < Update player health >
		if( IsPlayerInDynamicArea( playerid, Spawn_Zone[ 0 ] ) || IsPlayerInDynamicArea( playerid, Spawn_Zone[ 1 ] ) || IsPlayerInDynamicArea( playerid, Spawn_Zone[ 2 ] ) )
		{
			if( !IsPlayerCop( issuerid ) || !playerVariables[ playerid ][ pRaceArena ]) // && !playerVariables[ playerid ][ pWanted ]
			{
				SetPlayerArmedWeapon( issuerid, 0 );
				GivePlayerHealth( playerid, amount );
				SendClientMessage( issuerid, COLOR_LIGHTRED, "You're in the SafeZone please stop shooting!" );
			}
		}
		if( playerVariables[ issuerid ][ pFactionWar ] != 0 || playerVariables[ issuerid ][ pPaintBall ] != -1 )
			//( issuerid, 6401, 0.0, 0.0, 0.0 );

		if( playerVariables[ playerid ][ pPaintBall ] == 3 )
		{
			if( bodypart == BODY_PART_HEAD )
				SetPlayerHealth( playerid, 0 ), Announce( playerid, "~r~HEADSHOT!!!", 4000, 4 );
			else
				GivePlayerHealth( playerid, amount );
			return 0;
		}
		switch( weaponid )
		{
			case 23: // Taser
			{
				if( IsPlayerCop( issuerid ) && playerVariables[ issuerid ][ pPaintBall ] == -1 )
				{
					TogglePlayerControllable( playerid, 0 );
					InfoTD_MSG( playerid, 10000, "You have been tased by ~r~~h~%s~n~~w~~h~You are blocked for 10 seconds!", username( issuerid ) );
					InfoTD_MSG( issuerid, 10000, "You have tased ~b~~h~%s~n~~w~~h~He's blocked for 10 seconds!", username( playerid ) );
					SetTimerEx( "TaserAction", 10000, false, "d", playerid );
				}
			}
			case 34: // Hitman
			{
				if( playerVariables[ playerid ][ pHeadValue ] != 0 && playerVariables[ issuerid ][ pFaction ] == 6 && playerVariables[ issuerid ][ pHeadChasing ] == playerid )
					if( bodypart == BODY_PART_HEAD )
						SetPlayerHealth( playerid, 0 );
			}
		}
	}
	return true;
}

public OnPlayerWeaponShot( playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ )
{
	// < Check player bullets >
	WeaponSystem[ playerid ][ weaponid ]--;
	if( WeaponSystem[ playerid ][ weaponid ] <= 0 )
		SetPlayerAmmo( playerid, weaponid, 0 );

	// < AFK Suspect Kill System >
	if( hittype == 1 && IsPlayerConnected( hitid ) )
	{
		if( playerVariables[ hitid ][ pSpawned ] == 2 && playerVariables[ hitid ][ pWanted ] != 0 && IsPlayerCop( playerid ) )
		{
			//( playerid, 6401, 0.0, 0.0, 0.0 );
			if( ++playerVariables[ hitid ][ pAFKHits ] == 5 )
			{
				SetPlayerHealth( hitid, 0.0 );
				CheckSuspectKill( playerid, hitid );
			}
		}
		if( hitid == playerVariables[ playerid ][ pHeadChasing ] && playerVariables[ playerid ][ pFaction ] == 6 )
		{
			//( playerid, 6401, 0.0, 0.0, 0.0 );
			if( ++playerVariables[ hitid ][ pAFKHits ] == 3 )
			{
				SetPlayerHealth( hitid, 0.0 );

				playerVariables[ playerid ][ pHeadChasing ] = INVALID_PLAYER_ID;
				playerVariables[ hitid ][ pHeadChased ] = INVALID_PLAYER_ID;
				playerVariables[ hitid ][ pHeadTaken ] = 0;

				if( !playerVariables[ playerid ][ pUndercover ] )
				{
					gsString[ 0 ] = EOS;
					format( gsString, sizeof gsString, "%s failed to complete the contract on %s for $%s, distance: %.2fm. Fail reason: not undercover.", username( playerid ), username( hitid ), FormatNumber(playerVariables[ hitid ][ pHeadValue ]), GetDistanceBetweenPlayers( playerid, hitid ) );
					return SendToFaction( 6, COLOR_HIT, gsString );
				}
				else if( playerVariables[ playerid ][ pPhoneStatus ] )
				{
					gsString[ 0 ] = EOS;
					format( gsString, sizeof gsString, "%s failed to complete the contract on %s for $%s, distance: %.2fm. Fail reason: phone turned on.", username( playerid ), username( hitid ), FormatNumber(playerVariables[ hitid ][ pHeadValue ]), GetDistanceBetweenPlayers( playerid, hitid ) );
					return SendToFaction( 6, COLOR_HIT, gsString );
				}
				gsString[ 0 ] = EOS;
				format( gsString, sizeof gsString, "%s has succesfully completed the contract on %s for $%s, distance: %.2fm.", username( playerid ), username( hitid ), FormatNumber(playerVariables[ hitid ][ pHeadValue ]), GetDistanceBetweenPlayers( playerid, hitid ) );
				SendToFaction( 6, COLOR_HIT, gsString );

				playerVariables[ playerid ][ pMoney ] += playerVariables[ hitid ][ pHeadValue ];
				playerVariables[ hitid ][ pHeadValue ] = 0;
				Iter_Remove(server_contracts, hitid);
				server_contracts--;
				playerVariables[ playerid ][ pFactionContracts ]++;
			}
		}
	}
	#if defined DEBUG_SERVER
		SendClientMessagef( playerid, COLOR_LIGHTGREEN, "[Debug OnPlayerWeaponShot] WeaponID: %d | HitType: %d[ID:%d] | Ammo: %d", weaponid, hittype, hitid, WeaponSystem[ playerid ][ weaponid ] );
	#endif

	// < SafeZone protection )
	if( IsPlayerInDynamicArea( playerid, Spawn_Zone[ 0 ] ) || IsPlayerInDynamicArea( playerid, Spawn_Zone[ 1 ] ) || IsPlayerInDynamicArea(playerid, Spawn_Zone[2]))
	{
		SetPlayerArmedWeapon( playerid, 0 );
		SendClientMessage( playerid, COLOR_LIGHTRED, "You can't attack players in SafeZone." );
	}
	// < Check Anti-Crash )
	if( hittype != BULLET_HIT_TYPE_NONE ) // Bullet Crashing uses just this hittype
	{
		if( !( -1000.0 <= fX <= 1000.0 ) || !( -1000.0 <= fY <= 1000.0 ) || !( -1000.0 <= fZ <= 1000.0 ) )
		{
			gsString[ 0 ] = EOS;
			format( gsString, 256, "AdmWarn: %s may be bullet-crashing the server, pay atention!", username( playerid ) );
			submitToHelpersAndAdmins( gsString, COLOR_HOTORANGE );
			//ServerBanPlayer( playerid, 300, "Cheats(bullet crashing)" );
			return false;
		}
	}
	// < Rob safe bank )
	switch( hittype )
	{
		case BULLET_HIT_TYPE_OBJECT:
		{
			if( hitid == ROB_SAFE[ 0 ] && playerVariables[ playerid ][ pRobStatus ] != 0 )
			{
				if( ROB_SAFE_HEALTH > 0 )
				{
					if( GetPlayerWeapon( playerid ) != WEAPON_DEAGLE )
						return SendClientMessage( playerid, COLOR_GREY, "Trebuie sa folosesti un Desert Eagle!" );

					ROB_SAFE_HEALTH -= 5;
					//( playerid, 6401, 0.0, 0.0, 0.0 );

					gsString[ 0 ] = EOS;
					format( gsString, sizeof gsString, "Safe Health: %d%%", ROB_SAFE_HEALTH );
					Update3DTextLabelText( ROB_SAFE_3D, 0xFFFF66FF, gsString );

					if( ROB_SAFE_HEALTH <= 0 )
					{
						MoveObject( ROB_SAFE[ 0 ], 2145.42749, 1627.03186, 994.25061, 1.0 );
						if( playerVariables[ playerid ][ pRobStatus ] == 1 )
						{
							InfoTD_MSG( playerid, 30000, "~r~~h~ROB HINT:~n~~w~~h~Intra in seif si foloseste comanda ~y~~h~/robsafe ~w~~h~pentru a fura tot!~n~Ai grija, daca nu ai imobilizat toti angajatii alarma poate porni!" );
							//( playerid, 1058, 0.0, 0.0, 0.0 );
						}
						else if(playerVariables[playerid][pRobStatus] == 2)
						{
							playerVariables[ playerid ][ pCrimes ]++;
							playerVariables[ playerid ][ pWanted ] = 6;
							Iter_Add(server_wanteds, playerid), server_wanteds++;
							SetPlayerWantedLevel( playerid, playerVariables[ playerid ][ pWanted ] );

							playerVariables[ playerid ][ pWantedTime ] = 600;
							playerVariables[ playerid ][ pCrimeReason ] = EOS;
							format( playerVariables[ playerid ][ pCrimeReason ], 128, "armed robbery - reporter: Unknown" );

							gsString[ 0 ] = EOS;
							format( gsString, sizeof gsString, "Dispatch: %s (%d) has comitted a crime: armed robbery. Reporter: LV Bank W: +6 | New Wanted Level: %d", username( playerid ), playerid, playerVariables[ playerid ][ pWanted ] );
							sendDepartmentMessage( COLOR_RADIOCHAT, gsString );
							SendClientMessagef( playerid, COLOR_RED2, "Ai comis o infractiune: armed robbery, raportat de: LV Bank. W: +6. Nivel urmarire nou: %d. ", playerVariables[ playerid ][ pWanted ] );
						}
					}
				}
			}
		}
	}
	return true;
}
public OnVehicleDamageStatusUpdate(vehicleid, playerid)
{
	/*new Float:vehicleHealth;
	GetVehicleHealth( vehicleid, vehicleHealth );
	if( vehicleHealth >= 999.0 )
	{
		gsString[ 0 ] = EOS;
		format( gsString, 256, "AdmWarn: %s may be using vehicle health hack for vehicle %d with %0.2f health!", username( playerid ), vehicleid, vehicleHealth );
		return submitToHelpersAndAdmins( gsString, COLOR_HOTORANGE );
	}*/
	return true;
}
public OnVehicleSpawn( vehicleid )
{
	//SetVehicleHealth(vehicleid, MAX_VEHICLEHEALTH);
	#if defined DEBUG_SERVER
		gsString[ 0 ] = EOS;
		format( gsString, sizeof gsString, "VehicledID: %d has been spawned, FactionID: %d", vehicleid, GetGVarInt( "veh_Faction", vehicleid ) );
		submitToHelpersAndAdmins( gsString, COLOR_HOTORANGE );
	#endif
	// < Reset the vehicle's Radio & unclock )
	UnLockVehicle( vehicleid );
	serverVariables[ VehicleRadio ][ vehicleid ] = 0;
	// < Re-attach the Giro/Taxi sign )
	switch( vehicleid )
	{
		case 9..10: // LVPD
		{
			if( IsValidObject( GetGVarInt( "Faction_Giro", vehicleid ) ) || IsValidObject( GetGVarInt( "Faction_Siren", vehicleid ) ) )
			{
				AttachDynamicObjectToVehicle( GetGVarInt( "Faction_Giro", vehicleid ), GetGVarInt( "Server_Vehicle", vehicleid ), -0.00710, 0.46250, 0.53160, 0.00000, 0.00000, 179.77400 );
				AttachDynamicObjectToVehicle( GetGVarInt( "Faction_Siren", vehicleid ), GetGVarInt( "Server_Vehicle", vehicleid ), -0.03970, 0.14510, 0.68090, 0.00000, 0.00000, 358.88480 );
			}
		}
		case 114..117: // LSPD
		{
			if( IsValidObject( GetGVarInt( "Faction_Giro", vehicleid ) ) || IsValidObject( GetGVarInt( "Faction_Siren", vehicleid ) ) )
			{
				AttachDynamicObjectToVehicle( GetGVarInt( "Faction_Giro", vehicleid ), GetGVarInt( "Server_Vehicle", vehicleid ), -0.00710, 0.46250, 0.53160, 0.00000, 0.00000, 179.77400 );
				AttachDynamicObjectToVehicle( GetGVarInt( "Faction_Siren", vehicleid ), GetGVarInt( "Server_Vehicle", vehicleid ), -0.03970, 0.14510, 0.68090, 0.00000, 0.00000, 358.88480 );
			}
		}
/*	    case 20..23: // Taxi LV
		{
			if( IsValidObject( GetGVarInt( "Faction_Siren", vehicleid ) ) )
				AttachDynamicObjectToVehicle( GetGVarInt( "Faction_Siren", vehicleid ), GetGVarInt( "Server_Vehicle", vehicleid ), -0.01410, -0.21560, 0.92090, 0.00000, 0.00000, 0.00000 );
		}
*/
		case 147..154: // Taxi LS
		{
			if( IsValidObject( GetGVarInt( "Faction_Siren", vehicleid ) ) )
				AttachDynamicObjectToVehicle( GetGVarInt( "Faction_Siren", vehicleid ), GetGVarInt( "Server_Vehicle", vehicleid ), -0.01410, -0.21560, 0.92090, 0.00000, 0.00000, 0.00000 );
		}
	}
    foreach( new x : Player )
	{
		for( new slot=0; slot<MAX_SLOTS; slot++ )
		{
			if( vehicleVariables[ slot ][ x ][ Vehicle ] == vehicleid )
			{
				vehicleVariables[ slot ][ x ][ VehicleInsurance ] += 100;
				vehicleVariables[ slot ][ x ][ VehicleInsurancePoints ] -= 1;

				gsQuery[ 0 ] = EOS;
				mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_personalvehicles` SET `vehicleInsurance` = %d, `vehicleInsurancePoints` = %d WHERE `vehicleID` = %d", vehicleVariables[ slot ][ x ][ VehicleInsurance ], vehicleVariables[ slot ][ x ][ VehicleInsurancePoints ], vehicleVariables[ slot ][ x ][ VehicleID ] );
				mysql_tquery( g_Handle, gsQuery );

				DeSpawnPlayerVehicle( slot, x );
				vehicleVariables[ slot ][ x ][ VehicleHealth ] = 999.0;
				SpawnPlayerVehicle( slot, x );
			}
		}
	}
	return true;
}
public OnVehicleDeath(vehicleid, killerid)
{
	// < Reset the vehicle's Radio )
	serverVariables[ VehicleRadio ][ vehicleid ] = 0;

    if(Iter_Contains( ServerSpawnCars, vehicleid )) Remove_Admin_Car( vehicleid );

	// < Add the insurance points )
	foreach( new x : Player )
	{
		for( new slot=0; slot<MAX_SLOTS; slot++ )
		{
			if( vehicleVariables[ slot ][ x ][ Vehicle ] == vehicleid )
			{
				vehicleVariables[ slot ][ x ][ VehicleInsurance ] += 100;
				vehicleVariables[ slot ][ x ][ VehicleInsurancePoints ] -= 1;

				gsQuery[ 0 ] = EOS;
				mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_personalvehicles` SET `vehicleInsurance` = %d, `vehicleInsurancePoints` = %d WHERE `vehicleID` = %d", vehicleVariables[ slot ][ x ][ VehicleInsurance ], vehicleVariables[ slot ][ x ][ VehicleInsurancePoints ], vehicleVariables[ slot ][ x ][ VehicleID ] );
				mysql_tquery( g_Handle, gsQuery );

				DeSpawnPlayerVehicle( slot, x );
				vehicleVariables[ slot ][ x ][ VehicleHealth ] = 999.0;
				SpawnPlayerVehicle( slot, x );
			}
		}
	}
	return true;
}
public OnPlayerCommandPerformed( playerid, cmd[], params[], result, flags )
{
	if( result == -1 )
	{
		SendClientMessagef( playerid, ~1, "ERROR: This command doesn't exist. Type /help!" );
	} 
	else 
	{
		CheckAccountBlocked( playerid );
		playerVariables[ playerid ][ pSpamCheck2 ] = GetTickCount( );
	}

	return true;
}
public OnPlayerCommandReceived( playerid, cmd[], params[], flags )
{
	if(GetTickCount() - playerVariables[ playerid ][ pSpamCheck2 ] < 700 && playerVariables[ playerid ][ pSpamCheck2 ] != 0)
    {
        return 0;
    }
	#if defined DEBUG_SERVER
		printf("[debug] OnPlayerCommandReceived(%d, %s)", playerid, cmd);
	#endif

	CheckAccountBlocked( playerid );

	if( playerVariables[ playerid ][ pMuted ] != 0 && playerVariables[ playerid ][ pAdminLevel ] == 0 )
		return SendClientMessage( playerid, COLOR_GREY, "You cannot submit any commands or text at the moment, as you have been muted." ), false;

/*	if( IsPlayerFloodingCMD( playerid ) && !playerVariables[ playerid ][ pAdminLevel ] && !playerVariables[ playerid ][ pHelper ] && !playerVariables[ playerid ][ pFaction ] )
		return Announce( playerid, "~w~Poti folosi o~n~~w~ comanda la ~n~~w~fiecare ~r~~h~3 ~w~secunde.", 3000, 4 ), false;
*/
	playerVariables[ playerid ][ pCMDTime ] = GetTickCount();
	return true;
}
public OnPlayerText( playerid, text[] )
{
	if(GetTickCount() - playerVariables[ playerid ][ pSpamCheck ] < 1000 && playerVariables[ playerid ][ pSpamCheck ] != 0)
    {
        return 0;
    }
	playerVariables[ playerid ][ pSpamCheck ]  = GetTickCount();

	if( !strlen( text ) ) 								return false;
	if( !VerificaReclama( playerid, text ) )        	return false;
	if( playerVariables[ playerid ][ pSpawned ] == 0 ) 	return Announce( playerid, "Your have to be spawned to use ~r~~h~Chat", 4000, 4 ), false;

	if( strlen( text ) == strlen( playerVariables[ playerid ][ pChatText ] ) && !strcmp( playerVariables[ playerid ][ pChatText ], text, false ) )
	{
		Announce( playerid, "~w~Te rugam sa nu repeti acelasi cuvant.", 4000, 4 );
		format( playerVariables[ playerid ][ pChatText ], 256, "%s", text );
		return false;
	}
	if( playerVariables[ playerid ][ pMuted ] != 0 )
		return SendClientMessage( playerid, COLOR_GREY, "You cannot submit any commands or text at the moment, as you have been muted." ), false;

	assert(AntiFlood_Check(playerid));

	if( IsPlayerFlooding( playerid ) && !playerVariables[ playerid ][ pAdminLevel ] )
		return Announce( playerid, "~w~Poti trimite un~n~~w~mesaj la ~n~~w~fiecare ~r~~h~3 ~w~secunde.", 3000, 4 ), false;

	new callerID = playerVariables[ playerid ][ pPhoneCall ];
	if( callerID != INVALID_PLAYER_ID && IsPlayerConnected( callerID ) && playerVariables[ callerID ][ pPhoneCall ] == playerid )
	{
		switch( playerVariables[ playerid ][ pPhone ] )
		{
			case 1:
			{
				SendClientMessagef( callerID, COLOR_FADE, "(cellphone) %s: %s", playerVariables[ playerid ][ pNormalName ], text );
				SendClientMessagef( playerid, COLOR_FADE, "(cellphone) %s: %s", playerVariables[ playerid ][ pNormalName ], text );
			}
			case 2:
			{
				SendClientMessagef( callerID, COLOR_FADE, "(iPhone) %s: %s", playerVariables[ playerid ][ pNormalName ], text );
				SendClientMessagef( playerid, COLOR_FADE, "(iPhone) %s: %s", playerVariables[ playerid ][ pNormalName ], text );
			}
		}
		return false;
	}
	else if( playerVariables[ playerid ][ pTakingLive ] != INVALID_PLAYER_ID && playerVariables[ playerVariables[ playerid ][ pTakingLive ] ][ pLiveStatus ] == true )
	{
		if( playerVariables[ playerid ][ pFaction ] == 5 )
		{
			gsString[ 0 ] = EOS;
			format( gsString, sizeof gsString, "NR %s: %s", playerVariables[ playerid ][ pNormalName ], text );

			foreach(new i : Player)
				SendSplitMessage( i, COLOR_LIGHTGREEN, gsString );
		}
		else
		{
			gsString[ 0 ] = EOS;
			format( gsString, sizeof gsString, "LivePlayer %s: %s", playerVariables[ playerid ][ pNormalName ], text );

			foreach(new i : Player)
				SendSplitMessage( i, COLOR_LIGHTGREEN, gsString );
		}
		return false;
	}
	else if( playerVariables[ playerid ][ pPaintBall ] == -1 )
	{
		if( playerVariables[ playerid ][ pUndercover ] )
		{
			nearByMessage( playerid, COLOR_WHITE, 30.0, ""COL_LR"Undercover Hitman: "COL_W"%s", text );
		}
		else
		{
			if( playerVariables[ playerid ][ pAdminLevel ] )
				nearByMessage( playerid, COLOR_WHITE, 30.0, "{%s}%s: "COL_W"%s", Admin_Colors[ playerVariables[ playerid ][ pAdminColor ] ], username( playerid ), text );
			else if( playerVariables[ playerid ][ pHelper ] )
				nearByMessage( playerid, COLOR_WHITE, 30.0, "{%s}%s: "COL_W"%s", Helper_Colors[ playerVariables[ playerid ][ pHelperColor ] ], username( playerid ), text );
			else
				nearByMessage( playerid, COLOR_WHITE, 30.0, "{%s}%s: "COL_W"%s", Premium_Colors[ playerVariables[ playerid ][ pPremiumColor ] ], username( playerid ), text );
		}
	}
	else nearByMessage( playerid, COLOR_GREY, 30.0, "{BA3FC1}%s [%d kills]"COL_W": %s", username( playerid ), playerVariables[ playerid ][ pPaintBallKills ], text );

	SetPlayerChatBubble( playerid, text, COLOR_CHATBUBBLE, 10.0, 10000 );
	playerVariables[ playerid ][ pChatTime ] = GetTickCount();
	format( playerVariables[ playerid ][ pChatText ], 256, "%s", text );
	return false;
}

public OnPlayerEnterVehicle( playerid, vehicleid, ispassenger )
{
	#if defined HEIST_SYSTEM
	// < vehicle heist protection >
	if( playerVariables[ playerid ][ pHeistStatus ] && playerVariables[ playerid ][ pHeistKey ] )
		if( vehicleid != playerVariables[ playerVariables[ playerid ][ pHeistOwner ] ][ pHeistVehicle ] )
			CheckHeistFail( playerid, "Jucatorul s-a urcat in alta masina!" );
	#endif

	if(GetGVarInt("vehAPARTMENT", vehicleid) && GetGVarInt("bus_OwnerKey", HOTEL_DB_ID) != GetPlayerMysqlID(playerid))
	{
		SlapPlayer(playerid, 0.5);

		SendClientMessage(playerid, -1, "Aceasta masina poate fi condusa doar de proprietarul hotelului.");
	}

	// < Vehicle's faction protection >
	if( !ispassenger && playerVariables[ playerid ][ pFaction ] != GetGVarInt( "veh_Faction", vehicleid ) && GetGVarInt( "veh_Faction", vehicleid ) != 0 && !playerVariables[ playerid ][ pTakeExam ] && !playerVariables[ playerid ][ pAdminDuty ] )
	{
		SlapPlayer( playerid, 0.5 );
		SendClientMessagef( playerid, COLOR_GREY, "Acest vehicul poate fi condus doar de membrii %s.", GetGVarStringEx( "faction_Name", GetGVarInt( "veh_Faction", vehicleid ) ) );
	}
	else if( !ispassenger && IsPlayerCop( playerid ) && GetGVarInt( "veh_Faction", vehicleid ) == 1 ) // < police car only LSPD right now >
	{
		if( !playerVariables[ playerid ][ pOnDuty ] )
		{
			SlapPlayer( playerid, 0.5 );
			return SendClientMessage( playerid, COLOR_GREY, "You're not on duty as a cop, use /duty" );
		}
		#if defined RADAR
		else InfoTD_MSG( playerid, 3000, "~b~~h~PD System: ~w~~h~Welcome, you can use the /radar system as a Cop!" );
		#endif
	}
	// < Update Curent Postition >
	GetPlayerPos( playerid, playerVariables[ playerid ][ OldPos ][ 0 ], playerVariables[ playerid ][ OldPos ][ 1 ], playerVariables[ playerid ][ OldPos ][ 2 ] ) ;

	for( new slot=0; slot<MAX_SLOTS; slot++ )
		if( vehicleid == vehicleVariables[ slot ][ playerid ][ Vehicle ] )
			playerVariables[ playerid ][ VehicleSlot ] = slot, vehicleVariables[ slot ][ playerid ][ VehicleTimer ] = 0;

	PlayerTextDrawSetString( playerid, PLAYER_TD[ 1 ], "LOADING..." );
	PlayerTextDrawShow( playerid, PLAYER_TD[ 1 ] );
	/*foreach( new i : ServerVehicles )
	{
		if( GetPlayerState( i ) == 2 )
		{
			if( GetGVarInt( "Server_Vehicle", i ) == vehicleid && playerVariables[ playerid ][ pFaction ] != GetGVarInt( "veh_Faction", i ) && playerVariables[ playerid ][ pTakeExam ] == 0 )
			{
				gsString[ 0 ] = EOS;
				format( gsString, sizeof gsString, "Acest vehicul poate fi condus doar de membrii %s.", GetGVarStringEx( "faction_Name", GetGVarInt( "veh_Faction", i ) ) );
				SendClientMessage( playerid, COLOR_GREY, gsString );

				new Float:S_POS[ 3 ];
				GetPlayerPos( playerid, S_POS[ 0 ], S_POS[ 1 ], S_POS[ 2 ] );
				SetPlayerPos( playerid, S_POS[ 0 ], S_POS[ 1 ], S_POS[ 2 ] + 1 );
			}
		}
	}*/
	#if defined DEBUG_SERVER
		if( playerVariables[ playerid ][ pAdminLevel ] != 0 )
			InfoTD_MSG( playerid, 5000, "Ai intrat in Vehicle ID: ~r~~h~%d~n~~w~~h~Vehicle Faction ID: ~r~~h~%d~n~~w~~h~Rank: ~r~~h~%d", vehicleid, GetGVarInt( "veh_Faction", vehicleid ), GetGVarInt( "veh_FactionRank", vehicleid ) );
	#endif
	return true;
}

public OnPlayerExitVehicle( playerid, vehicleid )
{
	if( playerVariables[ playerid ][ pTakeExam ] == 1 )
	{
			DestroyVehicle_( playerVariables[ playerid ][ pJobVehicle ][ 0 ] ), playerVariables[ playerid ][ pJobVehicle ][ 0 ] = INVALID_VEHICLE_ID;

			// < Stop player's exam )
			SetPlayerVirtualWorld( playerid, 0 );
			DisablePlayerRaceCheckpoint( playerid );

			playerVariables[ playerid ][ pRCP ] = 0;
			playerVariables[ playerid ][ pDMVCP ] = 0;
			playerVariables[ playerid ][ pTakeExam ] = 0;
			playerVariables[ playerid ][ pMoney ] -= playerVariables[ playerid ][ pDamageTax ];

			InfoTD_MSG( playerid, 5000, "~y~~h~Failed!~n~~w~~h~Nu obtinut permisul de conducere auto deoarece ai parasit vehiculul!~n~Total taxe platite pentru pagube: %d~g~~h~$", playerVariables[ playerid ][ pDamageTax ] );
	}
	return true;
}
public OnPlayerStateChange( playerid, newstate, oldstate )
{
	if( newstate == PLAYER_STATE_WASTED )
	{
		// Stop the player's audio stream!
		StopAudioStreamForPlayer( playerid );
	}
	if (newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER) 
	{
		Iter_gPlayerVehicleId[playerid] = GetPlayerVehicleID(playerid);
		Iter_Add(vehiclePlayerStream[Iter_gPlayerVehicleId[playerid]], playerid);
	} 
	else if (oldstate == PLAYER_STATE_DRIVER || oldstate == PLAYER_STATE_PASSENGER) 
	{
		if Iter_gPlayerVehicleId[playerid] != INVALID_VEHICLE_ID *then
		{
			Iter_Remove(vehiclePlayerStream[Iter_gPlayerVehicleId[playerid]], playerid);
			Iter_gPlayerVehicleId[playerid] = INVALID_VEHICLE_ID;
		}
	} 
	if( newstate == PLAYER_STATE_PASSENGER )
	{
		new vehicleID = GetPlayerVehicleID( playerid );
		if( serverVariables[ VehicleRadio ][ vehicleID ] != 0 )
		{
			PlayAudioStreamForPlayer( playerid, SERVER_RADIO[ serverVariables[ VehicleRadio ][ vehicleID ]-1 ][ Radio_Adress ] );
		}
		PlayerTextDrawShow( playerid, PLAYER_TD[ 1 ] );
		Iter_gPlayerVehicleId[playerid] = GetPlayerVehicleID(playerid);
		foreach(new i : vehiclePlayerStream[ Iter_gPlayerVehicleId[playerid] ])
		{
			if( GetPlayerState( i ) == 2 && playerVariables[ i ][ pTaxiDriver ] > 0 && playerVariables[ i ][ pFaction ] != FACTION_TAXI )
			{
				if( playerVariables[ playerid ][ pMoney ] < playerVariables[ i ][ pTaxiValue ] )
				{
					SendClientMessagef( playerid, COLOR_LIGHTBLUE, "* You need $%d to enter.", playerVariables[ i ][ pTaxiValue ] );
					RemovePlayerFromVehicle( playerid );
				}
				else
				{
					if( playerVariables[ i ][ pTaxiDriver ] )
					{
						playerVariables[ playerid ][ pTaxiCost ] = playerVariables[ i ][ pTaxiValue ];
						SetPVarInt( playerid, "TaxiDriverID", i );
						Iter_Add( getDriverEarnings[ playerid ], i );
						SendClientMessagef( i, COLOR_LIGHTBLUE, "* Passenger %s has entered your Taxi.", username( playerid ) );
					}
				}
			}
			#if defined UBERSYS
			else if( GetPlayerState( i ) == 2 && playerVariables[ i ][ pUberOnWork ] == 1 )
			{
				if( playerVariables[ playerid ][ pMoney ] < playerVariables[ i ][ pUberPrice ] )
				{
					SendClientMessagef( playerid, COLOR_LIGHTBLUE, "* You need $%d to enter.", playerVariables[ i ][ pUberPrice ] );
					RemovePlayerFromVehicle( playerid );
				}
				else
				{
					if( playerVariables[ i ][ pUberOnWork ] )
					{
						if( GetPVarInt( playerid, "player_uber" ) == i )
						{
							playerVariables[ playerid ][ pUberPrice ] = playerVariables[ i ][ pUberPrice ];
							SetPVarInt( playerid, "UberDriverID", i );
							Iter_Add( playerUber[ playerid ], i );
							SendClientMessagef( i, COLOR_LIGHTBLUE, "* Passenger %s has entered your car.", username( playerid ) );
						}
						else return SendClientMessagef( i, COLOR_LIGHTBLUE, "* Passenger %s has entered your car. You won't get any money, he need to use /service uber first !", username( playerid ) );
					}
				}
			}
			#endif
		}
		// < Anti DriveBy system )
		new antiDB[ 2 ];
		GetPlayerWeaponData( playerid, 4, antiDB[ 0 ], antiDB[ 1 ] );
		if( antiDB[ 0 ] ) // Detect
			SetPlayerArmedWeapon( playerid, antiDB[ 0 ] );
		else SetPlayerArmedWeapon( playerid, 0 );

		GetPlayerWeaponData( playerid, 5, antiDB[ 0 ], antiDB[ 1 ] );
		if( antiDB[ 0 ] ) // Detect
			SetPlayerArmedWeapon( playerid, antiDB[ 0 ] );
		else SetPlayerArmedWeapon( playerid, 0 );
	}
	if( newstate == PLAYER_STATE_DRIVER )
	{
		// < Anti driver drive by )
		SetPlayerArmedWeapon( playerid, 0 );
	}
	if( newstate == PLAYER_STATE_ONFOOT )
	{
		if( playerVariables[ playerid ][ pTaxiCost ] > 0 )
		{
			if( IsPlayerConnected( GetPVarInt( playerid, "TaxiDriverID" ) ) )
			{
				Announce_Player( GetPVarInt( playerid, "TaxiDriverID" ), 5000, 1, "~w~Passenger left~n~~g~Earned $%d", playerVariables[ playerid ][ pTaxiCost ] );
				nearByMessage( playerid, COLOR_PURPLE, NBM_DIST, "# %s gets off the cab and pays %d$ to %s", username( playerid ), playerVariables[ playerid ][ pTaxiCost ], username( GetPVarInt( playerid, "TaxiDriverID" ) ) );

				playerVariables[ playerid ][ pMoney ] -= playerVariables[ playerid ][ pTaxiCost ];
				playerVariables[ GetPVarInt( playerid, "TaxiDriverID" ) ][ pMoney ] += playerVariables[ playerid ][ pTaxiCost ];
				playerVariables[ GetPVarInt( playerid, "TaxiDriverID" ) ][ pFactionOrders ]++;

				playerVariables[ playerid ][ pTaxiDistance ] = 0.0;
				playerVariables[ playerid ][ pTaxiCost ] = 0;
				Iter_Remove( getDriverEarnings[ GetPVarInt( playerid, "TaxiDriverID" ) ], playerid );
				SetPVarInt( playerid, "TaxiDriverID", INVALID_PLAYER_ID );
			}
		}
		#if defined UBERSYS
		else if( playerVariables[ playerid ][ pUberPrice ] > 0 )
		{
			if( IsPlayerConnected( GetPVarInt( playerid, "UberDriverID" ) ) )
			{
				Announce_Player( GetPVarInt( playerid, "UberDriverID" ), 5000, 1, "~w~Passenger left~n~~g~Earned $%d", playerVariables[ playerid ][ pUberFinalCost ] );
				nearByMessage( playerid, COLOR_PURPLE, NBM_DIST, "# %s gets off the cab and pays %d$ to %s", username( playerid ), playerVariables[ playerid ][ pUberFinalCost ], username( GetPVarInt( playerid, "UberDriverID" ) ) );

				playerVariables[ playerid ][ pMoney ] -= playerVariables[ playerid ][ pUberFinalCost ];
				playerVariables[ GetPVarInt( playerid, "UberDriverID" ) ][ pMoney ] += playerVariables[ playerid ][ pUberFinalCost ];

				playerVariables[ playerid ][ pUberDistance ] = 0.0;
				playerVariables[ playerid ][ pUberPrice ] = 0;
				playerVariables[ playerid ][ pUberFinalCost ] = 0;
				playerVariables[ playerid ][ pUberAccepted ] = 0;
				playerVariables[ playerid ][ pUberCalled ] = 0;
				Iter_Remove( playerUber[ GetPVarInt( playerid, "UberDriverID" ) ], playerid );
				playerVariables[  GetPVarInt( playerid, "UberDriverID" ) ][ pUberOnClient ] = INVALID_PLAYER_ID;
				SetPVarInt( playerid, "UberDriverID", INVALID_PLAYER_ID );
			}
		}
		if(playerVariables[playerid][pUberOnWork] == 1)
		{
			playerVariables[ playerid ][ pUberOnWork ] = 0;
			playerVariables[ playerid ][ pUberPrice ] = 0;
			playerVariables[ playerid ][ pUberFinalCost ] = 0;

			if(playerVariables[playerid][pUberOnClient] != INVALID_PLAYER_ID)
			{
				if(Iter_Contains( playerFinds[ playerVariables[ playerid ][ pFindPlayer ] ], playerid )) Iter_Remove( playerFinds[ playerVariables[ playerid ][ pFindPlayer ] ], playerid );
				playerVariables[ playerid ][ pFindPlayer ] = INVALID_PLAYER_ID;
				playerVariables[ playerid ][ pCP ] = 0;
				DisablePlayerCheckpoint( playerid );
				playerVariables[ playerVariables[ playerid ][ pUberOnClient ] ][ pUberAccepted ] = 0;
				playerVariables[ playerVariables[ playerid ][ pUberOnClient ] ][ pUberCalled ] = 0;

				gsString[ 0 ] = EOS;
				format( gsString, sizeof gsString, "** %s has canceled your Uber call.", username( playerid ));
				SendClientMessage(playerVariables[ playerid ][ pUberOnClient ], COLOR_GREY, gsString);
				SetPVarInt( playerVariables[ playerid ][ pUberOnClient ], "player_uber", INVALID_PLAYER_ID );

				playerVariables[ playerid ][ pUberOnClient ] = INVALID_PLAYER_ID;
			}

			SendClientMessage(playerid, COLOR_COOLBLUE, "You are not off duty.");
		}
		#endif
		PlayerTextDrawHide( playerid, PLAYER_TD[ 1 ] );
	}
	if( newstate == PLAYER_STATE_DRIVER && oldstate == PLAYER_STATE_ONFOOT )
	{
		if( playerVariables[ playerid ][ pSeatBelt ] )
			playerVariables[ playerid ][ pSeatBelt ] = false;

		if( playerVariables[ playerid ][ pHelmet ] )
			playerVariables[ playerid ][ pHelmet ] = false;

		PlayerTextDrawShow( playerid, PLAYER_TD[ 1 ] );
		new vehicleID = GetPlayerVehicleID( playerid );
		if( serverVariables[ VehicleRadio ][ vehicleID ] != 0 )
			PlayAudioStreamForPlayer( playerid, SERVER_RADIO[ serverVariables[ VehicleRadio ][ vehicleID ]-1 ][ Radio_Adress ] );

		if( vehicleID == playerVariables[ playerid ][ pJobVehicle ][ 0 ] )
		{
			InfoTD_Hide( playerid );
			back_Timer( playerid );
			KillTimer( playerVariables[ playerid ][ pBackTimer ] );
		}

		if( playerVariables[ playerid ][ pCP ] == 0 )
		{
			gsString[ 0 ] = EOS;
			format( gsString, sizeof gsString, "~g~~h~%s", VehicleName( GetVehicleModel( vehicleID ) ) );
			GameTextForPlayer( playerid, gsString, 5000, 1 );
		}
		for( new slot=0; slot<MAX_SLOTS; slot++ )
		{
			if( vehicleID == vehicleVariables[ slot ][ playerid ][ Vehicle ] )
			{
				playerVariables[ playerid ][ VehicleSlot ] = slot;
				vehicleVariables[ slot ][ playerid ][ VehicleTimer ] = 0;
			}
		}
		if( IsABike( vehicleID ) )
		{
			GetVehicleParamsEx( GetPlayerVehicleID( playerid ), engine, lights, alarm, doors, bonnet, boot, objective );
			SetVehicleParamsEx( GetPlayerVehicleID( playerid ), VEHICLE_PARAMS_ON, lights, alarm, doors, bonnet, boot, objective );
		}
		foreach( new i : ServerVehicles )
		{
			if( i == vehicleID && playerVariables[ playerid ][ pFaction ] != GetGVarInt( "veh_Faction", i ) && GetGVarInt( "veh_Faction", i ) != 0 && playerVariables[ playerid ][ pTakeExam ] == 0 && !playerVariables[ playerid ][ pAdminDuty ] )
			{
				SendClientMessagef( playerid, COLOR_GREY, "Acest vehicul poate fi condus doar de membrii %s.", GetGVarStringEx( "faction_Name", GetGVarInt( "veh_Faction", i ) ) );
				RemovePlayerFromVehicle( playerid );
			}
			else if( i == vehicleID && playerVariables[ playerid ][ pFaction ] == GetGVarInt( "veh_Faction", i ) && playerVariables[ playerid ][ pFactionRank ] < GetGVarInt( "veh_FactionRank", i ) && !playerVariables[ playerid ][ pAdminDuty ] )
			{
				SendClientMessagef( playerid, COLOR_GREY, "Acest vehicul poate fi condus doar de membrii cu rank: %d", GetGVarInt( "veh_FactionRank", i ) );
				RemovePlayerFromVehicle( playerid );
			}
		}
		if( IsAPlane( vehicleID ) )
		{
			if( playerVariables[ playerid ][ pFlyLicense ] == 0 && playerVariables[ playerid ][ pTakeExam ] == 0 )
			{
				RemovePlayerFromVehicle( playerid );
				return SendClientMessage( playerid, COLOR_WHITE, "You don't have the fly license!" );
			}
		}
		else if( IsABoat( vehicleID ) )
		{
			if( playerVariables[ playerid ][ pBoatLicense ] == 0 && playerVariables[ playerid ][ pTakeExam ] == 0 )
			{
				RemovePlayerFromVehicle( playerid );
				return SendClientMessage( playerid, COLOR_WHITE, "You don't have the boat license!" );
			}
		}
		else if( !IsABike( vehicleID ) && playerVariables[ playerid ][ pCarLicense ] == 0 && playerVariables[ playerid ][ pTakeExam ] == 0 && playerVariables[ playerid ][ pTakeFaggio ] == 0 )
		{
			switch( playerVariables[ playerid ][ pCity ] )
			{
				case 0: // LS
				{
					if( !IsPlayerInRangeOfPoint( playerid, 3.0, 1219.2964, -1813.3220, 16.5938 ) )
						GPS_Location( playerid, "DMV LS", 1219.2964, -1813.3220, 16.5938 );
				}
				case 1: // LV
				{
					if( !IsPlayerInRangeOfPoint( playerid, 3.0, 1909.3464, 2350.3469, 10.9799 ) )
						GPS_Location( playerid, "DMV LV", 1909.3464, 2350.3469, 10.9799 );
				}
			}
			RemovePlayerFromVehicle( playerid );
			SendClientMessage( playerid, COLOR_WHITE, "You don't have the car license!" );
			return InfoTD_MSG( playerid, 7000, "~r~~h~ERROR:~n~~w~~h~Nu ai un permis valid pentru a conduce!~n~Ti-am pus un Checkpoint pe harta pentru a ajunge la DMV" );
		}
		// < Update Curent Postition )
		GetPlayerPos( playerid, playerVariables[ playerid ][ OldPos ][ 0 ], playerVariables[ playerid ][ OldPos ][ 1 ], playerVariables[ playerid ][ OldPos ][ 2 ] ) ;

		if( playerVariables[ playerid ][ pJobVehicle ][ 0 ] != GetPlayerVehicleID( playerid ) )
		{
			foreach( new x : Player )
			{
				for( new slot=0; slot < MAX_SLOTS; slot++ )
				{
					if( vehicleVariables[ slot ][ x ][ Vehicle ] == GetPlayerVehicleID( playerid ) && vehicleVariables[ slot ][ x ][ VehicleStatus ] == 1 )
					{
						if( vehicleVariables[ slot ][ x ][ VehicleOwner ] != playerVariables[ playerid ][ pKey ] )
						{
							#if defined DEBUG_SERVER
								printf( "[DEBUG Enter Vehicle]: Model: %d | vID: %d", vehicleVariables[ slot ][ x ][ VehicleModelID ], playerVariables[ x ][ Vehicle ][ slot ] );
							#endif
							SendClientMessagef( x, COLOR_ATTACK, "Player %s[%d] has entered your %s(ID:%d)", username( playerid ), playerid, VehicleName( vehicleVariables[ slot ][ x ][ VehicleModelID ] ), playerVariables[ x ][ Vehicle ][ slot ] );
						}
						if( vehicleVariables[ slot ][ x ][ VehicleLocked ] == 1 && playerVariables[ x ][ pAdminLevel ] < 1 && vehicleVariables[ slot ][ x ][ VehicleOwner ] != playerVariables[ playerid ][ pKey ] )
						{
							RemovePlayerFromVehicle( playerid );
							SendClientMessage( playerid, COLOR_GREY, "This vehicle is locked!" );
						}
						else if( vehicleVariables[ slot ][ x ][ VehicleLocked ] == 1 && playerVariables[ x ][ pAdminLevel ] > 0 && vehicleVariables[ slot ][ x ][ VehicleOwner ] != playerVariables[ playerid ][ pKey ] )
						{
							new vipString[ 16 ];
							SendClientMessage( playerid, COLOR_GREY, "This vehicle is locked!" );

							gsString[ 0 ] = EOS;
							format( gsString, sizeof gsString, "%c%s"COL_GRI"This %s(ID: %d) is owned by %s. | Odometer: %0.2f km | Insurance: $%s (%d points) | Vehicle Colors: %d, %d", 
								( vehicleVariables[ slot ][ x ][ VehicleVIP ] ) ? format( vipString, sizeof vipString, ""COL_YE"[VIP] " ) : format( vipString, sizeof vipString, "" ), vipString,
								VehicleName( vehicleVariables[ slot ][ x ][ VehicleModelID ] ), playerVariables[ x ][ Vehicle ][ slot ], username( vehicleVariables[ slot ][ x ][ VehicleOwnerID ] ), vehicleVariables[ slot ][ x ][ VehicleOdometter ], 
								FormatNumber( vehicleVariables[ slot ][ x ][ VehicleInsurance ] ), vehicleVariables[ slot ][ x ][ VehicleInsurancePoints ], vehicleVariables[ slot ][ x ][ VehicleColor ][ 0 ], vehicleVariables[ slot ][ x ][ VehicleColor ][ 1 ] );
							SendSplitMessage( playerid, COLOR_GREY, gsString );
						}
						else
						{
							if( vehicleVariables[ slot ][ x ][ VehicleInsurancePoints ] > 0 )
							{
								new vipString[ 16 ];
								gsString[ 0 ] = EOS;
								format( gsString, sizeof gsString, "%c%s"COL_GRI"This %s(ID: %d) is owned by %s. | Odometer: %0.2f km | Insurance: $%s (%d points) | Vehicle Colors: %d, %d", 
									( vehicleVariables[ slot ][ x ][ VehicleVIP ] ) ? format( vipString, sizeof vipString, ""COL_YE"[VIP] " ) : format( vipString, sizeof vipString, "" ), vipString,
									VehicleName( vehicleVariables[ slot ][ x ][ VehicleModelID ] ), playerVariables[ x ][ Vehicle ][ slot ], username( vehicleVariables[ slot ][ x ][ VehicleOwnerID ] ), vehicleVariables[ slot ][ x ][ VehicleOdometter ], 
									FormatNumber( vehicleVariables[ slot ][ x ][ VehicleInsurance ] ), vehicleVariables[ slot ][ x ][ VehicleInsurancePoints ], vehicleVariables[ slot ][ x ][ VehicleColor ][ 0 ], vehicleVariables[ slot ][ x ][ VehicleColor ][ 1 ] );
								SendSplitMessage( playerid, COLOR_GREY, gsString );
							}
							else
							{
								SendClientMessage( playerid, COLOR_LIGHT, "Nu poti folosi masina deoarece proprietarul nu a platit asigurarea." );
								RemovePlayerFromVehicle( playerid );
							}
						}
					}
				}
			}
		}
	}
	if( newstate == PLAYER_STATE_ONFOOT && oldstate == PLAYER_STATE_DRIVER )
	{
		if( playerVariables[ playerid ][ pHelmet ] )
		{
			if( IsPlayerAttachedObjectSlotUsed( playerid, INDEX_HAT ) )
				RemovePlayerAttachedObject( playerid, INDEX_HAT );

			playerVariables[ playerid ][ pHelmet ] = false;
		}

		if( playerVariables[ playerid ][ pRaceArena ] )
			RemovePlayerFromRaceArena( playerid ), SendClientMessagef( playerid, COLOR_LIGHTRED, "Race Arena: "COL_W"Hey %s, you have left the Race Arena!", playerVariables[ playerid ][ pNormalName ] );
		
		if( playerVariables[ playerid ][ pDoingJob ] && !playerVariables[ playerid ][ pTakeExam ] )
		{
			if( playerVariables[ playerid ][ pFishes ] >= 5 )
			{
				DestroyPlayerJobVehicles( playerid );
				playerVariables[ playerid ][ pCP ] = 10050;
				SetPlayerCheckpoint( playerid, 2327.2693, 6.5696, 26.5360, 3.0 );
				return InfoTD_MSG( playerid, 10000, "Mergi la pescarie/checkpoint sa iti vinzi pestii pe bani!" );
			}
			else
			{
				if( playerVariables[ playerid ][ pJob ] == 3 ) // Pizza Boy
				{
					new randomPizza = playerVariables[ playerid ][ pRandomCP ];
					if( IsPlayerInRangeOfPoint( playerid, 20.0, GetGVarFloat( "house_EnterX", randomPizza ), GetGVarFloat( "house_EnterY", randomPizza ), GetGVarFloat( "house_EnterZ", randomPizza ) ) )
					{
						SetPlayerSpecialAction( playerid, SPECIAL_ACTION_CARRY );
						SetPlayerAttachedObject( playerid, INDEX_PIZZABOX, 1582, 1, 0.147555, 0.504874, -0.024467, 3.796583, 268.407592, 183.085052, 0.740320, 0.747990, 1.582544 ); // PIZZA BOX
						new boxString[ 16 ];
						format( boxString, 16, "job_Hold%d", playerVariables[ playerid ][ pPizzaBoxes ] );
						DestroyDynamicObject( GetPVarInt( playerid, boxString ) ), DeletePVar( playerid, boxString );
					}
				}
			}
			KillTimer( playerVariables[ playerid ][ pBackTimer ] );
			playerVariables[ playerid ][ pBackTimer ] = SetTimerEx( "back_Timer", 60000, false, "d", playerid );
			InfoTD_MSG( playerid, 60000, "~y~~h~ATENTIE!~n~~w~~h~Ai ~r~~h~60 de secunde ~w~~h~sa te intorci inapoi in vehicul!" );
		}
		else
		{
			// < Nu stiu de ce am pus asta aici :)) >
			//DestroyPlayerJobVehicles( playerid );
		}
		PlayerTextDrawHide( playerid, PLAYER_TD[ 1 ] );
		StopAudioStreamForPlayer( playerid );

		new PlayerSlot = playerVariables[ playerid ][ VehicleSlot ];
		vehicleVariables[ PlayerSlot ][ playerid ][ VehicleTimer ] = VEHICLE_DESPAWN_TIMER;
	}
	if( newstate == PLAYER_STATE_ONFOOT && oldstate == PLAYER_STATE_PASSENGER )
		StopAudioStreamForPlayer( playerid );

	return true;
}
function back_Timer( playerid )
{
	if( !IsPlayerConnected( playerid ) )
		return false;

	if( GetPlayerVehicleID( playerid ) != playerVariables[ playerid ][ pJobVehicle ][ 0 ] )
	{
		DestroyPlayerJobVehicles( playerid, 1 );
		if( !IsPlayerInAnyVehicle( playerid ) ) // < prevent skin bug >
			SlapPlayer( playerid, 0.5 );
	}
	return true;
}
public OnEnterExitModShop( playerid, enterexit, interiorid )
{
	new PlayerSlot = playerVariables[ playerid ][ VehicleSlot ];
	switch( enterexit )
	{
		case 0: // exit
		{
			playerVariables[ playerid ][ pPlayerInMod ] = 0;
			if( GetPlayerVehicleID( playerid ) == vehicleVariables[ PlayerSlot ][ playerid ][ Vehicle ] )
				for( new i = 0; i < 13; i++ )
					vehicleVariables[ PlayerSlot ][ playerid ][ VehicleMods ][ i ] = GetVehicleComponentInSlot( vehicleVariables[ PlayerSlot ][ playerid ][ Vehicle ], i );
		}
		case 1: // enter
		{
			if( GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
			{
				playerVariables[ playerid ][ pPlayerInMod ] = 1;
				new tuningID = GetBuildingEnterID( playerid, 0, 3, 15.0 );
				if( GetGVarInt( "bus_Type", tuningID ) == 11 ) // Tuning Business
				{
					playerVariables[ playerid ][ pMoney ] -= GetGVarInt( "bus_Fee", tuningID );
					SetGVarInt( "bus_Money", GetGVarInt( "bus_Money", tuningID ) + GetGVarInt( "bus_Fee", tuningID ), tuningID );
					SendClientMessagef( playerid, COLOR_LIGHTGREEN, "[Tunning] You payd $%s to the owner of the business!", FormatNumber( GetGVarInt( "bus_Fee", tuningID ) ) );
					if(GetPlayerTurfID( playerid ) != 0) {
						new TaxaProtectie = floatround( (10.0/100) * GetGVarInt( "bus_Fee", GetBuildingEnterID( playerid, 0, 3 )), floatround_round);
						new TurfID = GetGVarInt( "turf_Owner", GetPlayerTurfID( playerid ) );

						SetGVarInt( "faction_Money", GetGVarInt( "faction_Money", TurfID ) + TaxaProtectie, TurfID );
						UpdateFactionSafe( TurfID );
					}
				}
			}
		}
	}
	gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, "%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d",
		vehicleVariables[ PlayerSlot ][ playerid ][ VehicleMods ][ 0 ],
		vehicleVariables[ PlayerSlot ][ playerid ][ VehicleMods ][ 1 ],
		vehicleVariables[ PlayerSlot ][ playerid ][ VehicleMods ][ 2 ],
		vehicleVariables[ PlayerSlot ][ playerid ][ VehicleMods ][ 3 ],
		vehicleVariables[ PlayerSlot ][ playerid ][ VehicleMods ][ 4 ],
		vehicleVariables[ PlayerSlot ][ playerid ][ VehicleMods ][ 5 ],
		vehicleVariables[ PlayerSlot ][ playerid ][ VehicleMods ][ 6 ],
		vehicleVariables[ PlayerSlot ][ playerid ][ VehicleMods ][ 7 ],
		vehicleVariables[ PlayerSlot ][ playerid ][ VehicleMods ][ 8 ],
		vehicleVariables[ PlayerSlot ][ playerid ][ VehicleMods ][ 9 ],
		vehicleVariables[ PlayerSlot ][ playerid ][ VehicleMods ][ 10 ],
		vehicleVariables[ PlayerSlot ][ playerid ][ VehicleMods ][ 11 ],
		vehicleVariables[ PlayerSlot ][ playerid ][ VehicleMods ][ 12 ] );

	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_personalvehicles` SET `vehicleMods` = '%s' WHERE `vehicleID` = %d", gsString, vehicleVariables[ PlayerSlot ][ playerid ][ VehicleID ] );
	mysql_tquery( g_Handle, gsQuery, "", "" );
	return true;
}
public OnPlayerEnterDynamicCP( playerid, checkpointid )
{

}
public OnPlayerEnterCheckpoint( playerid )
{
	#if defined DEBUG_SERVER
		printf( "[OnPlayerEnterCheckPoint] %s(%i) with variable: %d", playerVariables[ playerid ][ pNormalName ], playerid, gettime() - GetPVarInt( playerid, "checkpoint_Timer" ) );
	#endif

	// < Load the other script >
	new vehicleID = GetPlayerVehicleID( playerid );
	switch( playerVariables[ playerid ][ pCP ] )
	{
		case 1: // Medic Call
		{
			playerVariables[ playerid ][ pCP ] = 0;
			DisablePlayerCheckpoint( playerid );
			InfoTD_MSG( playerid, 15000, "You have reached your ~r~~h~Destination" );
		}
		#if defined HEIST_SYSTEM
		case 200: // Heist Meeting
		{
			new heistOwner = playerVariables[ playerid ][ pHeistOwner ];
			playerVariables[ playerid ][ pCP ] = 0;
			playerVariables[ playerid ][ pHeistStatus ] = 1; // < waiting for all >
			DisablePlayerCheckpoint(playerid);

			// < check the players active in CP >
			if(Iter_Contains(Heists[heistOwner], playerid)) playerVariables[heistOwner][pHeistCount]++;


			if(playerVariables[heistOwner][pHeistCount] != 4) SendClientMessage( playerid, COLOR_LIGHTRED, "Heist: {FFFFFF}Asteapta noi ordine de la liderul tau, foloseste /hchat pentru a comunica cu ei!");	    		

			if( playerVariables[heistOwner][pHeistCount] == 4 ) // < all players in the checkpoint >
			{
				playerVariables[heistOwner][pHeistBizz] = GetRandomBusinessCP();
				foreach(new i : Heists[heistOwner])
				{
					playerVariables[heistOwner][pHeistCount] = 0;
					playerVariables[ i ][ pCP ] = 201;
					SetPlayerCheckpoint(i, 1481.0646, -1771.3933, 18.7958, 5.0);
					SendClientMessage(i, COLOR_LIGHTRED, "Mike Toreno{FFFFFF}: Un checkpoint a fost pus pe harta! O sa ne intanlim acolo si o sa discutam!");
					//SetTimerEx("SetView", 1000, 0, "i", i);
				}
			}
		}
		case 201: // Heist Meeting in front of City Hall
		{
			SetPlayerInterior(playerid, 3);
			SetPlayerPos(playerid, 384.808624, 173.804992, 1008.382812);
			SendClientMessage(playerid, COLOR_LIGHTRED, "Mike Toreno{FFFFFF}: Veniti, aici este un loc sigur unde putem vorbii.");
			playerVariables[ playerid ][ pCP ] = 202;
			SetPlayerCheckpoint(playerid, 373.1677, 163.2907, 1008.3893, 5.0);
		}
		case 202: // Heist Meeting in City Hall
		{
			new heistOwner = playerVariables[ playerid ][ pHeistOwner ];
			DisablePlayerCheckpoint(playerid);
			if(Iter_Contains(Heists[heistOwner], playerid)) playerVariables[heistOwner][pHeistCount]++;
			SendClientMessage(playerid, COLOR_YELLOW, "[HEIST] {FFFFFF}Asteapta ca toti participantii sa fie aici.");

			if( playerVariables[heistOwner][pHeistCount] == 4 ) // < all players in the checkpoint >
			{
				playerVariables[heistOwner][pHeistBizz] = GetRandomBusinessCP();
				foreach(new i : Heists[heistOwner])
				{
					SetTimerEx("SetView", 1000, 0, "i", i);
				}
			}
		}
		case 250: // < Heist Location >
		{
			if( playerVariables[ playerid ][ pHeistOwner ] == playerid )
			{
				foreach(new i : Heists[playerid])
				{
					DisablePlayerCheckpoint( i );
					playerVariables[ i ][ pCP ] = 0;
					playerVariables[ i ][ pHeistStatus ] = 2; // < waiting for rob >
					playerVariables[playerid][pHeistCount] = 0;

					InfoTD_MSG( i, 10000, "Liderul a ajuns la locatia ce trebuie sa o jefuiti!~n~Intrati si folositi comanda /rob pentru a o jefui toti 4!~n~Miscati-va cat mai repede pentru a nu fi prinsi de politie!" );
				}
			}
		}
		case 300: // < heist final >
		{
			if( playerVariables[ playerid ][ pHeistStatus ] == 3 )
				playerVariables[ playerid ][ pHeistStatus ] = 4, playerVariables[ playerid ][ pCP ] = 0;

			// < check the players active in CP >
			new heistOwner = playerVariables[ playerid ][ pHeistOwner ];
			if(Iter_Contains(Heists[heistOwner], playerid)) playerVariables[heistOwner][pHeistCount]++;
					
			if( playerVariables[heistOwner][pHeistCount] == 4 ) // < all players in the checkpoint >
			{
				foreach(new i : Heists[heistOwner])
				{
					new randomMoney[ 2 ];
					randomMoney[ 0 ] = randomEx( 400000, 600000 );
					randomMoney[ 1 ] = floatround( randomMoney[ 0 ] / 4 );

					InfoTD_MSG( i, 30000, "Toti membrii heist-ului au depus banii in siguranta!~n~Ati acumulat ~g~~h~$%s~w~~h~, fiecare a primit ~g~~h~$%s ~w~~h~in mod egal!~n~Politia v-a pierdut urmele, nu mai aveti wanted!", 
						FormatNumber( randomMoney[ 0 ] ), FormatNumber( randomMoney[ 1 ] ) );

					// < clear player's wanted level, reset heist vars >
					playerVariables[ i ][ pWanted ] = 0;
					if(Iter_Contains(server_wanteds, playerid)) Iter_Remove(server_wanteds, playerid), server_wanteds--;
					playerVariables[ i ][ pWantedTime ] = 0;
					playerVariables[ i ][ pCrimeReason ] = EOS;
					format( playerVariables[ i ][ pCrimeReason ], 90, "N/A" );
					SetPlayerWantedLevel( i, 0 );
					PlayerTextDrawHide( i, PLAYER_TD[ 3 ] );

					SetTimedMessage(i, COLOR_LIGHTRED, "Mike Toreno: "COL_W"Am mituit autoritatile iar voi ati scapat de politie. Banii v-au intrat in conturi.", 500);
					SetTimedMessage(i, COLOR_LIGHTRED, "Mike Toreno: "COL_W"Reveniti la mine pentru alte jafuri.", 1500);

					playerVariables[ i ][ pMoney ] += randomMoney[ 1 ];
					playerVariables[ i ][ pHeistOwner ] = INVALID_PLAYER_ID;
					playerVariables[ i ][ pHeist ][ playerVariables[ i ][ pHeistKey ]-1 ] = 2;
					playerVariables[ i ][ pHeistKey ] = 0;
					playerVariables[ i ][ pCP ] = 0;
					DisablePlayerCheckpoint( i );

					if( IsPlayerAttachedObjectSlotUsed( i, INDEX_ROB ) )
						RemovePlayerAttachedObject( i, INDEX_ROB );
				}
				DestroyVehicle_( playerVariables[ heistOwner ][ pHeistVehicle ] ), playerVariables[ heistOwner ][ pHeistVehicle ] = INVALID_VEHICLE_ID;
			}
		}
		#endif
		case 50200:
		{
			DisablePlayerCheckpoint( playerid );
			new robCash = randomEx( 8000, 15000 );
			SendClientMessagef( playerid, COLOR_GREEN, "(+) Money earned from the rob[1/2]: $%s. Rob time: %d seconds.", FormatNumber( robCash ), playerVariables[ playerid ][ pRobTime ] );

			playerVariables[ playerid ][ pMoney ] += robCash;
			playerVariables[ playerid ][ pRobStatus ] = 2;
			serverVariables[ rob_players ] ++;
			playerVariables[ playerid ][ pRobTime ] = 0;
			playerVariables[ playerid ][ pCP ] = 50300;
			new randRob = random( sizeof( gRandomRob2 ) );
			SetPlayerCheckpoint( playerid, gRandomRob2[ randRob ][ 0 ], gRandomRob2[ randRob ][ 1 ], gRandomRob2[ randRob ][ 2 ], 4.0 );
		}
		case 50300:
		{
			DisablePlayerCheckpoint( playerid );
			new robCash = randomEx( 8000, 15000 );
			SendClientMessagef( playerid, COLOR_GREEN, "(+) Money earned from the rob[2/2]: $%s. Rob time: %d seconds.", FormatNumber( robCash ), playerVariables[ playerid ][ pRobTime ] );

			playerVariables[ playerid ][ pMoney ] += robCash;
			playerVariables[ playerid ][ pRobStatus ] = 0;
			serverVariables[ rob_players ] --;
			playerVariables[ playerid ][ pRobTime ] = 0;
			playerVariables[ playerid ][ pCP ] = 0;

			if( IsPlayerAttachedObjectSlotUsed( playerid, INDEX_ROB ) )
				RemovePlayerAttachedObject( playerid, INDEX_ROB );
		}
		case 50100: // Rob Bank
		{
			if( playerVariables[ playerid ][ pRobStatus ] != 0 )
			{
				new robCash = randomEx( 30000, 50000 );
				DisablePlayerCheckpoint( playerid );
				InfoTD_MSG( playerid, 5000, "~g~~h~ROB SUCCESS:~n~~w~~h~Ai ajuns la ~y~~h~Safe House ~w~~h~si ai primit $%s", FormatNumber( robCash ) );

				playerVariables[ playerid ][ pRobStatus ] = 0;
				serverVariables[ rob_players ] --;
				playerVariables[ playerid ][ pCP ] = 0;
				playerVariables[ playerid ][ pRCP ] = 0;
				playerVariables[ playerid ][ pRobs ]++;
				playerVariables[ playerid ][ pMoney ] += robCash;
				DisablePlayerCheckpoint( playerid );

				if( IsPlayerAttachedObjectSlotUsed( playerid, INDEX_ROB ) )
					RemovePlayerAttachedObject( playerid, INDEX_ROB );
			}
		}
		case 5000: // GPS
		{
			InfoTD_MSG( playerid, 5000, "You have reached your ~r~~h~Destination/Target" );
			DisablePlayerCheckpoint( playerid );
			playerVariables[ playerid ][ pCP ] = 0;
			HideGPSForPlayer( playerid );
		}
		case 5001: // FIND
		{
			// < Show player the info message )
			InfoTD_MSG( playerid, 5000, "You have found your ~r~~h~Destination/Target" );

			// < Check if medic / taxi driver  )
			if( playerVariables[ playerid ][ pFaction ] == 2 || playerVariables[ playerid ][ pFaction ] == 3 || playerVariables[ playerid ][ pJob ] == 10 )
			{

				if( IsPlayerConnected( playerVariables[ playerid ][ pTaxiClient ] ) )
					playerVariables[ playerVariables[ playerid ][ pTaxiClient ] ][ pTaxiAccept ] = 0, playerVariables[ playerVariables[ playerid ][ pTaxiClient ] ][ pTaxiCall ] = 0;

				if( IsPlayerConnected( playerVariables[ playerid ][ pMedicClient ] ) )
					playerVariables[ playerVariables[ playerid ][ pMedicClient ] ][ pMedicAccept ] = 0, playerVariables[ playerVariables[ playerid ][ pMedicClient ] ][ pMedicCall ] = 0;

				if( IsPlayerConnected( playerVariables[ playerid ][ pMechanicClient ] ) )
					playerVariables[ playerVariables[ playerid ][ pMechanicClient ] ][ pMechanicAccept ] = 0, playerVariables[ playerVariables[ playerid ][ pMechanicClient ] ][ pMechanicCall ] = 0;


                SetPVarInt( playerVariables[ playerid ][ pTaxiClient ] , "player_taxi" , INVALID_PLAYER_ID );
				SetPVarInt( playerVariables[ playerid ][ pMedicClient ], "player_medic" , INVALID_PLAYER_ID );
				SetPVarInt( playerVariables[ playerid ][ pMechanicClient ], "player_mechanic", INVALID_PLAYER_ID );
				Iter_Remove( playerFinds[ playerVariables[ playerid ][ pFindPlayer ] ], playerid );
				playerVariables[ playerid ][ pFindPlayer ] = INVALID_PLAYER_ID;

				playerVariables[ playerid ][ pTaxiClient ] = INVALID_PLAYER_ID;
				playerVariables[ playerid ][ pMedicClient ] = INVALID_PLAYER_ID;
				playerVariables[ playerid ][ pMechanicClient ] = INVALID_PLAYER_ID;
			}
			DisablePlayerCheckpoint( playerid );
			playerVariables[ playerid ][ pCP ] = 0;
			Iter_Remove( playerFinds[ playerVariables[ playerid ][ pFindPlayer ] ], playerid );
			playerVariables[ playerid ][ pFindPlayer ] = INVALID_PLAYER_ID;
			KillTimer( playerVariables[ playerid ][ pFindPlayerTimer ] );
			PlayerTextDrawHide( playerid, PlayerText:FIND_TD );
		}
		case 5005:
		{
			InfoTD_MSG( playerid, 5000, "You have found your ~r~~h~Personal Vehicle" );
			DisablePlayerCheckpoint( playerid );
			playerVariables[ playerid ][ pCP ] = 0;
		}
		case 5010:
		{
			// < Show player job locations )
			mysql_pquery( g_Handle, "SELECT * FROM `server_joblocations` WHERE `locJobID` = 1", "ShowLocationsDialog", "i", playerid );

			// < Prepare player for the job )
			DisablePlayerCheckpoint( playerid );
			if( !playerVariables[ playerid ][ pDoingJob ] )
			{
				ClearAnimationEx( playerid );
				playerVariables[ playerid ][ pJobVehicle ][ 0 ] = CreateVehicle( 515, 2206.3298, -2230.0242, 14.1237, 314.3354, -1, -1, -1 ); // The Truck

				PutPlayerInVehicle( playerid, playerVariables[ playerid ][ pJobVehicle ][ 0 ], 0 );
				serverVariables[ VehicleGas ][ playerVariables[ playerid ][ pJobVehicle ][ 0 ] ] = 500.0;
				SetGVarInt( "veh_Faction", 0, playerVariables[ playerid ][ pJobVehicle ][ 0 ] );
			}
			playerVariables[ playerid ][ pDoingJob ] = 1;
		}
		case 5020:
		{
			HideGPSForPlayer( playerid );
			DisablePlayerCheckpoint( playerid );
			playerVariables[ playerid ][ pCP ] = 5010;
			SetPlayerCheckpoint( playerid, 2206.3298, -2230.0242, 14.1237, 8.0 );

			if( GetVehicleTrailer( vehicleID ) == playerVariables[ playerid ][ pJobVehicle ][ 1 ] )
			{
				PayPlayerJob( playerid, 1 );
				UpdateJobBox( playerid, GetServerData(workers_trucker), "Intoarce-te la ~r~~h~Baza ~w~~h~indicata pe GPS!~n~~r~~h~Atentie! ~w~~h~Nu parasiti vehiculul!" );
				InfoTD_MSG( playerid, 10000, "~y~~h~INFO JOB~n~~w~~h~Du-te la checkpoint pentru a primi o alta incarcatura!" );
			}
			else
			{
				InfoTD_MSG( playerid, 10000, "~y~~h~INFO JOB~n~~w~~h~Nu ai fost platit pentru ca ai pierdut marfa!~n~Du-te la checkpoint pentru a primi o alta incarcatura!" );
			}
			DestroyVehicle_( playerVariables[ playerid ][ pJobVehicle ][ 1 ] ), playerVariables[ playerid ][ pJobVehicle ][ 1 ] = INVALID_VEHICLE_ID;
		}
		case 6010:
		{
			DisablePlayerCheckpoint( playerid );

			//SetPlayerCheckpoint( playerid, 1564.4912, 23.4593, 24.1641, 5 );
			//GPS_Location( playerid, "Farmer Job", 1564.4912, 23.4593, 24.1641, 1 );
			InfoTD_MSG( playerid, 10000, "~y~~h~INFO JOB~n~~w~~h~Mergi pe camp ~g~~h~120 ~w~~h~de secunde pentru a primi banii!" );

			if( !playerVariables[ playerid ][ pDoingJob ] )
			{
				ClearAnimationEx( playerid );
				playerVariables[ playerid ][ pJobVehicle ][ 0 ] = CreateVehicle( 531, -375.9869, -1447.6426, 26.0747, 2.5224, -1, -1, -1 ); // The Tractor

				PutPlayerInVehicle( playerid, playerVariables[ playerid ][ pJobVehicle ][ 0 ], 0 );
				serverVariables[ VehicleGas ][ playerVariables[ playerid ][ pJobVehicle ][ 0 ] ] = 500.0;
				SetGVarInt( "veh_Faction", 0, playerVariables[ playerid ][ pJobVehicle ][ 0 ] );
			}
			playerVariables[ playerid ][ pTotalEarnings ] = 0;
			playerVariables[ playerid ][ pFarmerTime ] = 120;
			playerVariables[ playerid ][ pDoingJob ] = 1;

			//CreatePlayerTrailer( playerid );
			//new vehID = GetPlayerVehicleID( playerid );
			//SetTimerEx( "AttachTrailTruck", 1000, false, "ii", playerVariables[ playerid ][ pJobVehicle ][ 1 ], vehID );
			playerVariables[ playerid ][ pFarmerTimer ] = SetTimerEx( "FarmerTimer", 1000, true, "i", playerid );
		}
		case 7010:
		{
			new randomPizza = randomEx(1, 39);
			DisablePlayerCheckpoint( playerid );
			if( !playerVariables[ playerid ][ pDoingJob ] )
			{
				ClearAnimationEx( playerid );
				playerVariables[ playerid ][ pJobVehicle ][ 0 ] = CreateVehicle( 448, 2106.3606, -1782.4164, 13.1153, 349.2693, 3, 6, -1 ); // The Pizza Scuter

				ResetJobHolds( playerid, playerVariables[ playerid ][ pJobVehicle ][ 0 ] );
				playerVariables[ playerid ][ pPizzaBoxes ] = playerVariables[playerid][jSkill][3];
				SendClientMessagef(playerid, COLOR_GREY, "Ai primit %d cutii de pizza, livreaza-le la destinatie!", playerVariables[playerid][jSkill][3]);
				PutPlayerInVehicle( playerid, playerVariables[ playerid ][ pJobVehicle ][ 0 ], 0 );
				serverVariables[ VehicleGas ][ playerVariables[ playerid ][ pJobVehicle ][ 0 ] ] = 500.0;
				SetGVarInt( "veh_Faction", 0, playerVariables[ playerid ][ pJobVehicle ][ 0 ] );
			}
			playerVariables[ playerid ][ pCP ] = 7020;
			playerVariables[ playerid ][ pRandomCP ] = randomPizza;
			playerVariables[ playerid ][ pDoingJob ] = 1;
			UpdateJobBox( playerid, GetServerData(workers_pizza), "Livreaza Pizza la ~r~~h~Checkpoint-ul ~w~~h~indicat pe GPS!~n~~r~~h~Atentie!~n~~w~~h~Cazaturile vor duce la oprirea job-ului curent!" );
			SetPlayerCheckpoint( playerid, GetGVarFloat( "house_EnterX", randomPizza ), GetGVarFloat( "house_EnterY", randomPizza ), GetGVarFloat( "house_EnterZ", randomPizza ), 5.0 );
		}
		case 7020:
		{
			if( !playerVariables[ playerid ][ pPizzaBoxes ] )
			{
				playerVariables[ playerid ][ pPizzaBoxes ] = playerVariables[playerid][jSkill][3];
				playerVariables[ playerid ][ pCP ] = 7020;
				playerVariables[ playerid ][ pRandomCP ] = GetRandomHouseCP( playerid );
				SetPlayerCheckpoint( playerid, GetGVarFloat( "house_EnterX", playerVariables[ playerid ][ pRandomCP ] ), GetGVarFloat( "house_EnterY", playerVariables[ playerid ][ pRandomCP ] ), GetGVarFloat( "house_EnterZ", playerVariables[ playerid ][ pRandomCP ] ), 6.0 );
				ResetJobHolds( playerid, playerVariables[ playerid ][ pJobVehicle ][ 0 ] );

				
				InfoTD_MSG( playerid, 10000, "~y~~h~INFO JOB~n~~w~~h~Du-te la urmatoarea casa pentru a livra Pizza!~n~Cutii de pizza ramase: ~y~~h~%d", playerVariables[ playerid ][ pPizzaBoxes ] );
				return SendClientMessagef( playerid, COLOR_YELLOW, "Ai primit %d cutii de pizza proaspat scoase din cuptor!", playerVariables[playerid][jSkill][3] );
			}
			if( IsPlayerInAnyVehicle( playerid ) )
				return SendClientMessage( playerid, COLOR_WHITE, "Trebuie sa te dai jos de pe scuter pentru a livra pizza!" );

			new boxString[ 16 ];
			format( boxString, 16, "job_Hold%d", playerVariables[ playerid ][ pPizzaBoxes ] );
			DestroyDynamicObject( GetPVarInt( playerid, boxString ) ), DeletePVar( playerid, boxString );

			RemovePlayerAttachedObject( playerid, INDEX_PIZZABOX );
			playerVariables[ playerid ][ pPizzaBoxes ]--;
			SetPlayerSpecialAction( playerid, SPECIAL_ACTION_NONE );

			if( !playerVariables[ playerid ][ pPizzaBoxes ] )
			{
				playerVariables[ playerid ][ pRandomCP ] = 0;
				InfoTD_MSG( playerid, 10000, "~y~~h~INFO JOB~n~~w~~h~Mergi inapoi la pizzerie pentru a primi cutii de pizza!" );
				SetPlayerCheckpoint( playerid, GetGVarFloat( "job_PosX", playerVariables[ playerid ][ pJob ] ), GetGVarFloat( "job_PosY", playerVariables[ playerid ][ pJob ] ), GetGVarFloat( "job_PosZ", playerVariables[ playerid ][ pJob ] ), 6.0 );
			}
			else
			{
				playerVariables[ playerid ][ pRandomCP ] = GetRandomHouseCP( playerid );
				SetPlayerCheckpoint( playerid, GetGVarFloat( "house_EnterX", playerVariables[ playerid ][ pRandomCP ] ), GetGVarFloat( "house_EnterY", playerVariables[ playerid ][ pRandomCP ] ), GetGVarFloat( "house_EnterZ", playerVariables[ playerid ][ pRandomCP ] ), 6.0 );
				InfoTD_MSG( playerid, 10000, "~y~~h~INFO JOB~n~~w~~h~Du-te la urmatoarea casa pentru a livra Pizza!~n~Cutii de pizza ramase: ~y~~h~%d", playerVariables[ playerid ][ pPizzaBoxes ] );
			}
			playerVariables[ playerid ][ pCP ] = 7020;
			PayPlayerJob( playerid, 3 );
			UpdateJobBox( playerid, GetServerData(workers_pizza), "Livreaza Pizza la ~r~~h~Checkpoint-ul ~w~~h~indicat pe GPS!~n~~r~~h~Atentie!~n~~w~~h~Cazaturile vor duce la oprirea job-ului curent!" );
		}
		case 8010:
		{
			playerVariables[ playerid ][ pCP ] = 0;
			DisablePlayerCheckpoint( playerid );
			if( !playerVariables[ playerid ][ pDoingJob ] )
			{
				ClearAnimationEx( playerid );
				playerVariables[ playerid ][ pJobVehicle ][ 0 ] = CreateVehicle( JobPlanes[ playerVariables[ playerid ][ jSkill ][ 4 ] - 1 ], 1389.0065, 1361.9304, 11.7393, 0.0360, -1, -1, -1 ); // The Plane

				PutPlayerInVehicle( playerid, playerVariables[ playerid ][ pJobVehicle ][ 0 ], 0 );
				serverVariables[ VehicleGas ][ playerVariables[ playerid ][ pJobVehicle ][ 0 ] ] = 500.0;
				SetGVarInt( "veh_Faction", 0, playerVariables[ playerid ][ pJobVehicle ][ 0 ] );
			}
			SelectNextAirport( playerid );
			playerVariables[ playerid ][ pDoingJob ] = 1;
			UpdateJobBox( playerid, GetServerData(workers_pilot), "Zboara la ~r~~h~Aeroportul ~w~~h~indicat pe GPS!~n~~r~~h~Atentie! ~w~~h~Nu parasiti avionul in timpul zborului!" );
		}
		case 9010:
		{
			PayPlayerJob( playerid, 5 );
			DisablePlayerCheckpoint( playerid );
			playerVariables[ playerid ][ pCP ] = 0;
			RemovePlayerAttachedObject( playerid, INDEX_ROB );
		}
		case 10030: // Drop Car
		{
			DisablePlayerCheckpoint( playerid );
			playerVariables[ playerid ][ pCP ] = 0;

			new vehicleid = GetPlayerVehicleID( playerid );
			new PlayerSlot = playerVariables[ playerid ][ VehicleSlot ];

			if( GetPlayerState( playerid ) != PLAYER_STATE_DRIVER ) return SendClientMessage( playerid, ~1, "Trebuie sa fii soferul unei masini!" );
			if( vehicleVariables[ PlayerSlot ][ playerid ][ Vehicle ] == vehicleid ) return SendClientMessage( playerid, ~1, "Nu poti fura masina ta personala!" );

			PayPlayerJob( playerid, 6 );
			SetVehicleToRespawn( vehicleid );
		}
		case 10040: // Fisher
		{
			DisablePlayerCheckpoint( playerid );
			if( !playerVariables[ playerid ][ pDoingJob ] )
			{
				ClearAnimationEx( playerid );
				playerVariables[ playerid ][ pJobVehicle ][ 0 ] = CreateVehicle( 453, 2091.1987, -112.1740, 0.7686, 124.6733, -1, -1, -1 ); // The Boat

				PutPlayerInVehicle( playerid, playerVariables[ playerid ][ pJobVehicle ][ 0 ], 0 );
				serverVariables[ VehicleGas ][ playerVariables[ playerid ][ pJobVehicle ][ 0 ] ] = 100.0;
				SetGVarInt( "veh_Faction", 0, playerVariables[ playerid ][ pJobVehicle ][ 0 ] );
			}
			playerVariables[ playerid ][ pCP ] = 0;
			playerVariables[ playerid ][ pDoingJob ] = 1;
			UpdateJobBox( playerid, GetServerData(workers_fisher), "Pescuieste la o distanta de 20m de ~r~~h~Checkpoint~n~~w~~h~Dupa ce adunati 5 pesti trebuie sa-i~n~vindeti la magazin!" );
		}
		case 10050:
		{
			PayPlayerJob( playerid, 8 );
			DisablePlayerCheckpoint( playerid );
			playerVariables[ playerid ][ pCP ] = 0;
			playerVariables[ playerid ][ pDoingJob ] = 0;
		}
		case 10060: // Colective CPs
		{
			switch( playerVariables[ playerid ][ pJob ] )
			{
				case 10:
				{
					DisablePlayerCheckpoint( playerid );
					playerVariables[ playerid ][ pCP ] = 0;
					playerVariables[ playerid ][ pDoingJob ] = 1;

					ClearAnimationEx( playerid );
					playerVariables[ playerid ][ pJobVehicle ][ 0 ] = CreateVehicle( 525, 867.5190, -1209.2643, 16.9692, 181.5532, -1, -1, -1 ); // The Tow Truck

					SetVehicleNumberPlate( playerVariables[ playerid ][ pJobVehicle ][ 0 ], "Tow Truck" );
					PutPlayerInVehicle( playerid, playerVariables[ playerid ][ pJobVehicle ][ 0 ], 0 );
					serverVariables[ VehicleGas ][ playerVariables[ playerid ][ pJobVehicle ][ 0 ] ] = 500.0;
					SetGVarInt( "veh_Faction", 0, playerVariables[ playerid ][ pJobVehicle ][ 0 ] );

					UpdateJobBox( playerid, GetServerData(workers_mechanic), "Cauta o masina si foloseste comanda /tow~n~~r~~h~Atentie! ~w~~h~Nu pierdeti masina pe drum!" );
					InfoTD_MSG( playerid, 10000, "Foloseste comenzile: ~y~~h~/tow /refill /repair ~w~~h~pentru a castiga bani!" );
				}
				case 11:
				{
					DisablePlayerCheckpoint( playerid );
					SetPlayerCheckpoint( playerid, gRandomSweeper[ 0 ][ 0 ], gRandomSweeper[ 0 ][ 1 ], gRandomSweeper[ 0 ][ 2 ], 5.0 );
					playerVariables[ playerid ][ pCP ] = 10070;
					playerVariables[ playerid ][ pSweeperCP ] = 0;
					playerVariables[ playerid ][ pDoingJob ] = 1;

					ClearAnimationEx( playerid );
					playerVariables[ playerid ][ pJobVehicle ][ 0 ] = CreateVehicle( 574, 2160.7576, -1177.7554, 23.5455, 90.7820, -1, -1, -1 ); // The Sweeper

					SetVehicleNumberPlate( playerVariables[ playerid ][ pJobVehicle ][ 0 ], "Sweeper" );
					PutPlayerInVehicle( playerid, playerVariables[ playerid ][ pJobVehicle ][ 0 ], 0 );
					serverVariables[ VehicleGas ][ playerVariables[ playerid ][ pJobVehicle ][ 0 ] ] = 500.0;
					SetGVarInt( "veh_Faction", 0, playerVariables[ playerid ][ pJobVehicle ][ 0 ] );

					UpdateJobBox( playerid, GetServerData(workers_sweeper), "Curata strazile marcate cu Checkpoint~n~~y~~h~Info! ~w~~h~Sunteti platiti pentru fiecare Checkpoint!" );
					InfoTD_MSG( playerid, 10000, "Urmeaza traseul marcat pe GPS si curata strazile din Los Santos!~n~Skill-ul se aplica la fiecare traseu completat!" );
				}
				case 12:
				{
					DisablePlayerCheckpoint( playerid );
					playerVariables[ playerid ][ pCP ] = 10070;
					playerVariables[ playerid ][ pGarbageCP ] = 0;
					playerVariables[ playerid ][ pDoingJob ] = 1;
					SelectRandomGarbage( playerid );

					ClearAnimationEx( playerid );
					playerVariables[ playerid ][ pJobVehicle ][ 0 ] = CreateVehicle( 408, 2159.7034, -1978.1818, 14.0984, 269.0462, -1, -1, -1 ); // The Trashmaster

					SetVehicleNumberPlate( playerVariables[ playerid ][ pJobVehicle ][ 0 ], "Garbage" );
					PutPlayerInVehicle( playerid, playerVariables[ playerid ][ pJobVehicle ][ 0 ], 0 );
					serverVariables[ VehicleGas ][ playerVariables[ playerid ][ pJobVehicle ][ 0 ] ] = 500.0;
					SetGVarInt( "veh_Faction", 0, playerVariables[ playerid ][ pJobVehicle ][ 0 ] );

					UpdateJobBox( playerid, GetServerData(workers_garbage), "Colecteaza gunoiul din Los Santos~n~~y~~h~Info! ~w~~h~Sunteti platiti pentru fiecare Checkpoint!" );
					InfoTD_MSG( playerid, 10000, "Urmeaza traseul pentru a colecta gunoiul din Los Santos!~n~Skill-ul se aplica la fiecare traseu completat!" );
				}
				case 14:
				{
					DisablePlayerCheckpoint( playerid );
					playerVariables[ playerid ][ pCP ] = 10070;
					playerVariables[ playerid ][ pDoingJob ] = 1;
					playerVariables[ playerid ][ pTransporterCP ] = 0;

					ClearAnimationEx( playerid );
					playerVariables[ playerid ][ pJobVehicle ][ 0 ] = CreateVehicle( 554, 1508.6135, -1734.1775, 6.4515, 78.2354, 0, 0, -1 ); // Yosemite / Black

					SetVehicleNumberPlate( playerVariables[ playerid ][ pJobVehicle ][ 0 ], "Transporter" );
					PutPlayerInVehicle( playerid, playerVariables[ playerid ][ pJobVehicle ][ 0 ], 0 );
					serverVariables[ VehicleGas ][ playerVariables[ playerid ][ pJobVehicle ][ 0 ] ] = 500.0;
					SetGVarInt( "veh_Faction", 0, playerVariables[ playerid ][ pJobVehicle ][ 0 ] );

					playerVariables[ playerid ][ pRandomCP ] = GetRandomHouseCP( playerid );
					SetPlayerCheckpoint( playerid, GetGVarFloat( "house_EnterX", playerVariables[ playerid ][ pRandomCP ] ), GetGVarFloat( "house_EnterY", playerVariables[ playerid ][ pRandomCP ] ), GetGVarFloat( "house_EnterZ", playerVariables[ playerid ][ pRandomCP ] ), 5.0 );

					UpdateJobBox( playerid, GetServerData(workers_transporter), "Mergi la destinatia de pe GPS!~n~~r~~h~Atentie! ~w~~h~Evitati politia locala!~n~~y~~h~Progres: ~w~~h~%d/5 colete in masina", playerVariables[ playerid ][ pTransporterCP ] );
					InfoTD_MSG( playerid, 10000, "Trebuie sa aduni coletele cu prafuri ilegale, marcate pe GPS~n~Evita politia pentru a nu primi wanted!" );
				}
			}
		}
		case 10070: // Mechanic - /towcar
		{
			switch( playerVariables[ playerid ][ pJob ] )
			{
				case 10:
				{
					DisablePlayerCheckpoint( playerid );
					playerVariables[ playerid ][ pCP ] = 0;
					new targetVehicle = GetVehicleFromBehind( GetPlayerVehicleID( playerid ) );
					if( targetVehicle == targetVehicleID[playerid] )
					{
						targetVehicleID[playerid] = INVALID_VEHICLE_ID;
						PayPlayerJob( playerid, 10 );
						SetVehicleToRespawn( targetVehicle );
						UpdateJobBox( playerid, GetServerData(workers_mechanic), "Cauta alta masina si foloseste comanda /tow~n~~r~~h~Atentie! ~w~~h~Nu pierdeti masina pe drum!" );
					}
					else InfoTD_MSG( playerid, 7000, "You have lost your tow vehicle on your way! (ID:%d)", targetVehicleID[playerid] );
				}
				case 11:
				{
					if( !IsPlayerInAnyVehicle( playerid ) || GetPlayerVehicleID( playerid ) != playerVariables[ playerid ][ pJobVehicle ][ 0 ] )
					{
						DestroyPlayerJobVehicles( playerid, 1 );
						return SendClientMessage( playerid, COLOR_GREY, "Job failed, you're on foot or in another vehicle right now!" );
					}
					PayPlayerJob( playerid, 11 );
					DisablePlayerCheckpoint( playerid );
					playerVariables[ playerid ][ pCP ] = 10070;
					playerVariables[ playerid ][ pSweeperCP ]++;

					if( playerVariables[ playerid ][ pSweeperCP ] == 23 )
					{
						CheckPlayerQuest( playerid, QUEST_SWEEPER );
						InfoTD_MSG( playerid, 5000, "Ai terminat traseul si ai primit ~y~~h~Skill ~g~~h~+1" );
						UpdatePlayerSkill( playerid, playerVariables[ playerid ][ pJob ] );
						playerVariables[ playerid ][ pSweeperCP ] = 0;

						if(playerVariables[playerid][pJobHype] != 0)
						{
							playerVariables[playerid][pJobValue2] = RandomChance( randomEx(5000, 8000), randomEx2(3000, 5000), 100 );
							playerVariables[ playerid ][ pMoney ] += playerVariables[playerid][pJobValue2];
							SendClientMessagef(playerid, 0x0E4682FF, "[JOB-BOOST] {FFFFFF}Ai primit %s$ pentru ca ai un job boost activ.", FormatNumber(playerVariables[playerid][pJobValue2]));
						}

					}
					new sweeperCP = playerVariables[ playerid ][ pSweeperCP ];
					SetPlayerCheckpoint( playerid, gRandomSweeper[ sweeperCP ][ 0 ], gRandomSweeper[ sweeperCP ][ 1 ], gRandomSweeper[ sweeperCP ][ 2 ], 5.0 );
					UpdateJobBox( playerid, GetServerData(workers_sweeper), "Curata strazile marcate cu Checkpoint~n~~y~~h~Info! ~w~~h~Sunteti platiti pentru fiecare Checkpoint!~n~Current Progress: ~y~~h~%d/23", playerVariables[ playerid ][ pSweeperCP ] );
				}
				case 12:
				{
					TogglePlayerControllable( playerid, false );
					playerVariables[ playerid ][ pJobTimer ] = 5; // 5 seconds wait time

					switch( playerVariables[ playerid ][ pGarbageCP ] )
					{
						case 0..19: InfoTD_MSG( playerid, 5000, "Asteapta aici pentru a ridica gunoiul!" );
						case 99: InfoTD_MSG( playerid, 5000, "Asteapta aici pentru a descarca gunoiul!~n~Vei primi banii si noul skill!" );
					}
				}
				case 14:
				{
					if( playerVariables[ playerid ][ pTransporterCP ] >= 5 ) // Start the job again!
					{
						DisablePlayerCheckpoint( playerid );
						playerVariables[ playerid ][ pCP ] = 10070;
						playerVariables[ playerid ][ pTransporterCP ] = 0;
						PayPlayerJob( playerid, playerVariables[ playerid ][ pJob ] );
						ResetJobHolds( playerid, playerVariables[ playerid ][ pJobVehicle ][ 0 ] );

						InfoTD_MSG( playerid, 10000, "Ai ajuns la destinatie si ai fost platit!~n~Un checkpoint a fost pus pe harta pentru un colet nou!" );
						playerVariables[ playerid ][ pRandomCP ] = GetRandomHouseCP( playerid );
						SetPlayerCheckpoint( playerid, GetGVarFloat( "house_EnterX", playerVariables[ playerid ][ pRandomCP ] ), GetGVarFloat( "house_EnterY", playerVariables[ playerid ][ pRandomCP ] ), GetGVarFloat( "house_EnterZ", playerVariables[ playerid ][ pRandomCP ] ), 3.0 );
                          
	     				UpdateJobBox( playerid, GetServerData(workers_transporter), "Mergi la destinatia de pe GPS!~n~~r~~h~Atentie! ~w~~h~Evitati politia locala!~n~~y~~h~Progres: ~w~~h~%d/5 colete in masina", playerVariables[ playerid ][ pTransporterCP ] );
					}
					else
					{
						if( IsPlayerInAnyVehicle( playerid ) )
							return SendClientMessage( playerid, COLOR_WHITE, "Trebuie sa te dai jos din masina pentru a prelua coletul." );

						new Float:behindPos[ 3 ];
						DisablePlayerCheckpoint( playerid );
						playerVariables[ playerid ][ pCP ] = 2005;

						SetPlayerSpecialAction( playerid, SPECIAL_ACTION_CARRY );
						switch( playerVariables[ playerid ][ pTransporterCP ] )
						{
							case 0: SetPlayerAttachedObject( playerid, INDEX_PIZZABOX, 1575, 1, -0.088283, 0.480375, 0.010084, 273.620666, 90.063682, 0.000000, 0.806736, 1.712144, 1.355166 ); // drug_yellow - Hold Droguri
							case 1: SetPlayerAttachedObject( playerid, INDEX_PIZZABOX, 1576, 1, -0.088283, 0.480375, 0.010084, 273.620666, 90.063682, 0.000000, 0.806736, 1.712144, 1.355166 );
							case 2: SetPlayerAttachedObject( playerid, INDEX_PIZZABOX, 1577, 1, -0.088283, 0.480375, 0.010084, 273.620666, 90.063682, 0.000000, 0.806736, 1.712144, 1.355166 );
							case 3: SetPlayerAttachedObject( playerid, INDEX_PIZZABOX, 1578, 1, -0.088283, 0.480375, 0.010084, 273.620666, 90.063682, 0.000000, 0.806736, 1.712144, 1.355166 );
							case 4: SetPlayerAttachedObject( playerid, INDEX_PIZZABOX, 1579, 1, -0.088283, 0.480375, 0.010084, 273.620666, 90.063682, 0.000000, 0.806736, 1.712144, 1.355166 );
						}
						GetVehicleRelativePos( playerVariables[ playerid ][ pJobVehicle ][ 0 ], behindPos[ 0 ], behindPos[ 1 ], behindPos[ 2 ], 0.0, -3.0, 0.0 );
						SetPlayerCheckpoint( playerid, behindPos[ 0 ], behindPos[ 1 ], behindPos[ 2 ], 1.0 );
						InfoTD_MSG( playerid, 10000, "Plaseaza coletul in portbagajul masinii tale!" );
					}
				}
			}
		}
		case 2005: // Transporter
		{
			if( ++playerVariables[ playerid ][ pTransporterCP ] >= 5 )
			{
				DisablePlayerCheckpoint( playerid );
				playerVariables[ playerid ][ pCP ] = 10070;
				RemovePlayerAttachedObject( playerid, INDEX_PIZZABOX );

				new randFinal = random( sizeof( gRandomTransporter ) );
				SetPlayerCheckpoint( playerid, gRandomTransporter[ randFinal ][ 0 ], gRandomTransporter[ randFinal ][ 1 ], gRandomTransporter[ randFinal ][ 2 ], 3.0 );

				UpdateJobBox( playerid, GetServerData(workers_transporter), "Mergi la destinatia de pe GPS!~n~~r~~h~Atentie! ~w~~h~Evitati politia locala!~n~~y~~h~Progres: ~w~~h~%d/5 colete in masina", playerVariables[ playerid ][ pTransporterCP ] );
				InfoTD_MSG( playerid, 10000, "Ai adunat coletele, livreaza-le la locatia marcata pe GPS~n~Evita politia pentru ca poti primi wanted!" );
			}
			else
			{
				DisablePlayerCheckpoint( playerid );
				playerVariables[ playerid ][ pCP ] = 10070;

				UpdateJobBox( playerid, GetServerData(workers_transporter), "Mergi la destinatia de pe GPS!~n~~r~~h~Atentie! ~w~~h~Evitati politia locala!~n~~y~~h~Progres: ~w~~h~%d/5 colete in masina", playerVariables[ playerid ][ pTransporterCP ] );
				InfoTD_MSG( playerid, 10000, "Mergi la urmatoarea casa pentru a prelua pachetul~n~Evita politia pentru ca poti primi wanted!" );

				playerVariables[ playerid ][ pRandomCP ] = GetRandomHouseCP( playerid );
				SetPlayerCheckpoint( playerid, GetGVarFloat( "house_EnterX", playerVariables[ playerid ][ pRandomCP ] ), GetGVarFloat( "house_EnterY", playerVariables[ playerid ][ pRandomCP ] ), GetGVarFloat( "house_EnterZ", playerVariables[ playerid ][ pRandomCP ] ), 3.0 );
			}
			// Plaseaza obiectul in masina.
			SetPlayerSpecialAction( playerid, SPECIAL_ACTION_NONE );
			RemovePlayerAttachedObject( playerid, INDEX_PIZZABOX );

			switch( playerVariables[ playerid ][ pTransporterCP ] )
			{
				case 1: SetPVarInt( playerid, "job_Hold1", CreateDynamicObject( 1575, 0.00000, 0.00000, 0.00000,   0.00000, 0.00000, 0.00000 ) ), AttachDynamicObjectToVehicle( GetPVarInt( playerid, "job_Hold1" ), playerVariables[ playerid ][ pJobVehicle ][ 0 ], 0.26640, -1.22240, -0.30280,   0.00000, 0.00000, 0.00000 );
				case 2: SetPVarInt( playerid, "job_Hold2", CreateDynamicObject( 1576, 0.00000, 0.00000, 0.00000,   0.00000, 0.00000, 0.00000 ) ), AttachDynamicObjectToVehicle( GetPVarInt( playerid, "job_Hold2" ), playerVariables[ playerid ][ pJobVehicle ][ 0 ], -0.33136, -1.67153, -0.30280,   0.00000, 0.00000, 0.00000 );
				case 3: SetPVarInt( playerid, "job_Hold3", CreateDynamicObject( 1577, 0.00000, 0.00000, 0.00000,   0.00000, 0.00000, 0.00000 ) ), AttachDynamicObjectToVehicle( GetPVarInt( playerid, "job_Hold3" ), playerVariables[ playerid ][ pJobVehicle ][ 0 ], -0.32824, -1.22100, -0.30280,   0.00000, 0.00000, 0.00000 );
				case 4: SetPVarInt( playerid, "job_Hold4", CreateDynamicObject( 1578, 0.00000, 0.00000, 0.00000,   0.00000, 0.00000, 0.00000 ) ), AttachDynamicObjectToVehicle( GetPVarInt( playerid, "job_Hold4" ), playerVariables[ playerid ][ pJobVehicle ][ 0 ], 0.24992, -1.66135, -0.30280,   0.00000, 0.00000, 0.00000 );
				case 5: SetPVarInt( playerid, "job_Hold5", CreateDynamicObject( 1579, 0.00000, 0.00000, 0.00000,   0.00000, 0.00000, 0.00000 ) ), AttachDynamicObjectToVehicle( GetPVarInt( playerid, "job_Hold5" ), playerVariables[ playerid ][ pJobVehicle ][ 0 ], -0.07021, -2.04543, -0.30280,   0.00000, 0.00000, 0.00000 );
			}
		}
		case 2000:
		{
			DisablePlayerCheckpoint( playerid );
			playerVariables[ playerid ][ pCP ] = 0;

			playerVariables[ playerid ][ pWantedTime ] = 0;
			playerVariables[ playerid ][ pWanted ] = 0;
			SetPlayerWantedLevel( playerid, playerVariables[ playerid ][ pWanted ] );
			if(Iter_Contains(server_wanteds, playerid)) Iter_Remove(server_wanteds, playerid), server_wanteds--;

			SendClientMessagef( playerid, COLOR_RADIOCHAT, "Felicitari %s ai ajuns la Safe House in siguranta!", username( playerid ) );
			playerVariables[ playerid ][ pCrimeReason ] = EOS;
			format( playerVariables[ playerid ][ pCrimeReason ], 90, "N/A" );
			PlayerTextDrawHide( playerid, PLAYER_TD[ 3 ] );
		}
	}
	return true;
}

public OnPlayerLeaveCheckpoint(playerid)
{
	return true;
}

public OnPlayerEnterRaceCheckpoint( playerid )
{
	#if defined DEBUG_SERVER
		printf( "[OnPlayerEnterRaceCheckPoint] %s(%i) with variable: %d", playerVariables[ playerid ][ pNormalName ], playerid, gettime() - GetPVarInt( playerid, "checkpoint_Timer" ) );
	#endif

	// < Load the other script )
	switch( playerVariables[ playerid ][ pRCP ] )
	{
		case 1000:
		{
			DisablePlayerRaceCheckpoint( playerid );
			playerVariables[ playerid ][ pDMVCP ]++;
			new DMVCP = playerVariables[ playerid ][ pDMVCP ];
 
            if(playerVariables[ playerid ][ pCity ] == 0)
            {
				switch( DMVCP )
				{
					case 0 .. 22:
					{
						playerVariables[ playerid ][ pRCP ] = 1000;
						SetPlayerRaceCheckpoint( playerid, 0, gRandomDMV[ DMVCP ][ 0 ], gRandomDMV[ DMVCP ][ 1 ], gRandomDMV[ DMVCP ][ 2 ], gRandomDMV[ DMVCP+1 ][ 0 ], gRandomDMV[ DMVCP+1 ][ 1 ], gRandomDMV[ DMVCP+1 ][ 2 ], 5.0 );
					}
					case 23:
					{
						playerVariables[ playerid ][ pRCP ] = 1010;
						SetPlayerRaceCheckpoint( playerid, 1, gRandomDMV[ DMVCP ][ 0 ], gRandomDMV[ DMVCP ][ 1 ], gRandomDMV[ DMVCP ][ 2 ], 0, 0, 0, 5.0 );
					}
				}
			}	
			else if(playerVariables[ playerid ][ pCity ] == 1)
			{
				switch( DMVCP )
				{
					case 0 .. 22:
					{
						playerVariables[ playerid ][ pRCP ] = 1000;
						SetPlayerRaceCheckpoint( playerid, 0, gRandomDMVLV[ DMVCP ][ 0 ], gRandomDMVLV[ DMVCP ][ 1 ], gRandomDMVLV[ DMVCP ][ 2 ], gRandomDMVLV[ DMVCP+1 ][ 0 ], gRandomDMVLV[ DMVCP+1 ][ 1 ], gRandomDMVLV[ DMVCP+1 ][ 2 ], 5.0 );
					}
					case 23:
					{
						playerVariables[ playerid ][ pRCP ] = 1010;
						SetPlayerRaceCheckpoint( playerid, 1, gRandomDMVLV[ DMVCP ][ 0 ], gRandomDMVLV[ DMVCP ][ 1 ], gRandomDMVLV[ DMVCP ][ 2 ], 0, 0, 0, 5.0 );
					}
				}
			}	
			new Float:DMV_Health;
			GetVehicleHealth( GetPlayerVehicleID( playerid ), DMV_Health );
			new DMV_Cost = ( 999 - floatround( DMV_Health, floatround_round) ) * 2;

			playerVariables[ playerid ][ pDamageTax ] = DMV_Cost;
			InfoTD_MSG( playerid, 20000, "Checkpoint: ~y~~h~%d/24~n~~w~~h~Vehicle damage cost: %s~g~~h~$", DMVCP, FormatNumber( DMV_Cost ) );
		}
		case 1010:
		{
			DestroyVehicle_( playerVariables[ playerid ][ pJobVehicle ][ 0 ] ), playerVariables[ playerid ][ pJobVehicle ][ 0 ] = INVALID_VEHICLE_ID;

			// < Stop player's exam and give license )
			SetPlayerVirtualWorld( playerid, 0 );
			DisablePlayerRaceCheckpoint( playerid );

			playerVariables[ playerid ][ pRCP ] = 0;
			playerVariables[ playerid ][ pDMVCP ] = 0;
			playerVariables[ playerid ][ pTakeExam ] = 0;
			playerVariables[ playerid ][ pCarLicense ] = 100;
			playerVariables[ playerid ][ pMoney ] -= playerVariables[ playerid ][ pDamageTax ];

			InfoTD_MSG( playerid, 5000, "~y~~h~Felicitari!~n~~w~~h~Ai obtinut permisul de conducere auto!~n~Total taxe platite pentru pagube: %d~g~~h~$", playerVariables[ playerid ][ pDamageTax ] );

			// < Give player's DMV )
			if( playerVariables[ playerid ][ pPlayTime ] < 10800 ) // 3 Ore de playtime
			{
				SendClientMessagef( playerid, COLOR_HOTORANGE, "[Bonus Primit] "COL_W"Ai primit un Sanchez personal si $50.000 din partea serverului "COL_R"LURK "COL_W"RPG" );
				playerVariables[ playerid ][ pMoney ] += 50000, GivePlayerPersonalVehicle( playerid, 468, 1 ); // Sanchez Bonus DMV
			}
		}
		case 8020:
		{
			SelectNextAirport( playerid );
			PayPlayerJob( playerid, 4 );
			UpdateJobBox( playerid, GetServerData(workers_pilot), "Zboara la ~r~~h~Aeroportul ~w~~h~indicat pe GPS!~n~~r~~h~Atentie! ~w~~h~Nu parasiti avionul in timpul livrarii!" );
		}
		case 5000: // Race Arena
		{
			DisablePlayerRaceCheckpoint( playerid );
			playerVariables[ playerid ][ pRaceArenaCP ]++;
			new raceCP = playerVariables[ playerid ][ pRaceArenaCP ];
			//( playerid, 1139, 0.0, 0.0, 0.0 );

			switch(raceVariables[raceTrack])
			{
				case 0:
				{
					if(raceCP == raceSystem[raceVariables[raceTrack]][rTotalCP]-1)
					{
						playerVariables[ playerid ][ pRCP ] = 5010;
						SetPlayerRaceCheckpoint( playerid, 1, Airport_Race[ raceCP-1 ][ 0 ], Airport_Race[ raceCP-1 ][ 1 ], Airport_Race[ raceCP-1 ][ 2 ], 0, 0, 0, 10.0 );
					}
					else
					{
						SetPlayerRaceCheckpoint( playerid, 0, Airport_Race[ raceCP ][ 0 ], Airport_Race[ raceCP ][ 1 ], Airport_Race[ raceCP ][ 2 ], Airport_Race[ raceCP+1 ][ 0 ], Airport_Race[ raceCP+1 ][ 1 ], Airport_Race[ raceCP+1 ][ 2 ], 10.0 );
					}
				}
				case 1:
				{
					if(raceCP == raceSystem[raceVariables[raceTrack]][rTotalCP]-1)
					{
						playerVariables[ playerid ][ pRCP ] = 5010;
						SetPlayerRaceCheckpoint( playerid, 1, Beach_Race[ raceCP-1 ][ 0 ], Beach_Race[ raceCP-1 ][ 1 ], Beach_Race[ raceCP-1 ][ 2 ], 0, 0, 0, 10.0 );
					}
					else
					{
						SetPlayerRaceCheckpoint( playerid, 0, Beach_Race[ raceCP ][ 0 ], Beach_Race[ raceCP ][ 1 ], Beach_Race[ raceCP ][ 2 ], Beach_Race[ raceCP+1 ][ 0 ], Beach_Race[ raceCP+1 ][ 1 ], Beach_Race[ raceCP+1 ][ 2 ], 10.0 );
					}
				}
				case 2:
				{
					if(raceCP == raceSystem[raceVariables[raceTrack]][rTotalCP]-1)
					{
						playerVariables[ playerid ][ pRCP ] = 5010;
						SetPlayerRaceCheckpoint( playerid, 1, Chilliad_Race[ raceCP-1 ][ 0 ], Chilliad_Race[ raceCP-1 ][ 1 ], Chilliad_Race[ raceCP-1 ][ 2 ], 0, 0, 0, 10.0 );
					}
					else
					{
						SetPlayerRaceCheckpoint( playerid, 0, Chilliad_Race[ raceCP ][ 0 ], Chilliad_Race[ raceCP ][ 1 ], Chilliad_Race[ raceCP ][ 2 ], Chilliad_Race[ raceCP+1 ][ 0 ], Chilliad_Race[ raceCP+1 ][ 1 ], Chilliad_Race[ raceCP+1 ][ 2 ], 10.0 );
					}
				}
				case 3:
				{
					if(raceCP == raceSystem[raceVariables[raceTrack]][rTotalCP]-1)
					{
						playerVariables[ playerid ][ pRCP ] = 5010;
						SetPlayerRaceCheckpoint( playerid, 1, Hard_Race[ raceCP-1 ][ 0 ], Hard_Race[ raceCP-1 ][ 1 ], Hard_Race[ raceCP-1 ][ 2 ], 0, 0, 0, 10.0 );
					}
					else
					{
						SetPlayerRaceCheckpoint( playerid, 0, Hard_Race[ raceCP ][ 0 ], Hard_Race[ raceCP ][ 1 ], Hard_Race[ raceCP ][ 2 ], Hard_Race[ raceCP+1 ][ 0 ], Hard_Race[ raceCP+1 ][ 1 ], Hard_Race[ raceCP+1 ][ 2 ], 10.0 );
					}
				}
			}
		}
		case 5010:
		{
			//( playerid, 1139, 0.0, 0.0, 0.0 );
			DisablePlayerRaceCheckpoint( playerid );
			switch( raceVariables[ PositionRaceFinish ] )
			{
				case 0:
				{
					raceVariables[ PositionRaceFinish ] = 1;
					playerVariables[ playerid ][ pRCP ] = 0;
					gsString[ 0 ] = EOS;
					format( gsString, 120, "Race Arena: "COL_W"%s has finished the Race Arena on the 1st place!", playerVariables[ playerid ][ pNormalName ] );
					SendRaceArenaMessage( COLOR_NEWSRP, gsString );

					CheckIfIsFirst(playerid);

					SendClientMessage( playerid, COLOR_GREY, "You received $8.000 because you finished the race in the first place" );
					playerVariables[ playerid ][ pMoney ] += 8000;
					RemovePlayerFromRaceArena( playerid );
				}
				case 1:
				{
					raceVariables[ PositionRaceFinish ] = 2;
					playerVariables[ playerid ][ pRCP ] = 0;
					gsString[ 0 ] = EOS;
					format( gsString, 120, "Race Arena: "COL_W"%s has finished the Race Arena on the 2nd place!", playerVariables[ playerid ][ pNormalName ] );
					SendRaceArenaMessage( COLOR_NEWSRP, gsString );
					SendClientMessage( playerid, COLOR_GREY, "You received $5.000 because you finished the race on the second place" );
					playerVariables[ playerid ][ pMoney ] += 5000;
					RemovePlayerFromRaceArena( playerid );
				}
				case 2:
				{
					playerVariables[ playerid ][ pRCP ] = 0;
					gsString[ 0 ] = EOS;
					format( gsString, 120, "Race Arena: "COL_W"%s has finished the Race Arena on the 3rd place!", playerVariables[ playerid ][ pNormalName ] );
					SendRaceArenaMessage( COLOR_NEWSRP, gsString );
					SendClientMessage( playerid, COLOR_GREY, "You received $3.000 because you finished the race on the third place" );
					playerVariables[ playerid ][ pMoney ] += 3000;
					RemovePlayerFromRaceArena( playerid );

					SetTimer("LoseAndGetOut", 500, false);
				}
			}
		}
	}
	return true;
}

function CheckIfIsFirst(id)
{
	if(raceSystem[raceVariables[raceTrack]][BestRacerTime] == 0) raceSystem[raceVariables[raceTrack]][BestRacerTime] = (playerVariables[id][pRaceArenaSeconds]+20);
	if(playerVariables[id][pRaceArenaSeconds] < raceSystem[raceVariables[raceTrack]][BestRacerTime])
	{
		new year, month, day, hour, minute, second;

		gettime(hour, minute, second);
		getdate(year, month, day);

		raceSystem[raceVariables[raceTrack]][BestRacerTime] = playerVariables[id][pRaceArenaSeconds];
		format(raceSystem[raceVariables[raceTrack]][BestRacer], 26, username(id));
		format(raceSystem[raceVariables[raceTrack]][BestRacerDateTime], 40, "%02d-%02d-%02d %02d:%02d:%02d", year, month, day, hour, minute, second);


		gsQuery[0] = EOS;
		mysql_format(g_Handle, gsQuery, sizeof(gsQuery), "UPDATE `server_races` SET `BestRacer` = '%e', `BestRacerSkinID` = '%d', `BestRacerTimeDate` = '%e', `BestTimeRacer` = '%d' WHERE `raceKey` = %d", raceSystem[raceVariables[raceTrack]][BestRacer], GetPlayerSkin(id), raceSystem[raceVariables[raceTrack]][BestRacerDateTime], raceSystem[raceVariables[raceTrack]][BestRacerTime], raceVariables[raceTrack]+1);
		mysql_tquery( g_Handle, gsQuery, "", "" );
	}
	return 1;
}

function LoseAndGetOut()
{
	if(raceVariables[racePlayers] >= 1)
	{
		foreach(new i : Racers)
		{
			RemovePlayerFromRaceArena(i);
			SendClientMessagef(i, COLOR_LIGHTRED, "Race Arena: "COL_W"%s, you have left the Race Arena due to your lost!", playerVariables[i][pNormalName]);
		}
		ResetRaceArena();
	}
}
public OnPlayerLeaveRaceCheckpoint(playerid)
{
	return true;
}
public OnPlayerEnterDynamicArea(playerid, areaid)
{
	foreach( new bID : ServerBusiness )
		if( GetGVarInt( "Business_Zone", bID ) == areaid )
			DisableRemoteVehicleCollisions( playerid, true );

	for( new i=0; i < sizeof( Server_Zone ); i++ )
	{
		if( Server_Zone[ i ] == areaid && !playerVariables[playerid][pRaceArena] && !playerVariables[ playerid ][ pFactionWar ] && playerVariables[ playerid ][ pSpectating ] == INVALID_PLAYER_ID )
		{
			//GameTextForPlayer( playerid, "~w~~h~collisions~n~~r~~h~disabled", 3000, 1 );
			DisableRemoteVehicleCollisions( playerid, false );
		}
	}
	for( new i=0; i < sizeof( Spawn_Zone ); i++ )
		if( Spawn_Zone[ i ] == areaid )
			PlayerTextDrawShow( playerid, PlayerText:SERVER_TD[ 1 ] );

	#if defined OBJECT_QUEST
	// < Quest Objects )
	foreach( new objID : QuestObjects )
	{
		if( GetGVarInt( "object_Zone", objID ) == areaid && !playerVariables[ playerid ][ pQuestObject ][ objID ] )
		{
			if( gettime() - GetPVarInt( playerid, "quest_Timer" ) <= 30 )
				return SendClientMessagef( playerid, ~1, "* Trebuie sa astepti %d secunde pentru a ridica urmatorul cadou!", 30 - (gettime() - GetPVarInt( playerid, "quest_Timer" )) );

			playerVariables[ playerid ][ pQuestObject ][ objID ] = 1;
			DestroyDynamicObject( playerVariables[ playerid ][ pQuestObjectPickup ][ objID ] );
			playerVariables[ playerid ][ pQuestObjectPickup ][ objID ] = INVALID_OBJECT_ID;

			SendClientMessagef( playerid, COLOR_LIGHTGREEN, "> Felicitari %s, ai gasit obiectul ascuns cu ID-ul: %d!", playerVariables[ playerid ][ pNormalName ], objID );
			SendClientMessagef( playerid, COLOR_LIGHTGREEN, "> Object Quest Progress: %d/%d objects found!", GetPlayerTotalObjectQuest( playerid ), MAX_QUESTOBJ - 1 );

			//( playerid, 14407, 0.0, 0.0, 0.0 );
			SetPVarInt( playerid, "quest_Timer", gettime() );
			UpdatePlayerQuestObject( playerid );

			// < Check if player completed the quest! )
			if( GetPlayerTotalObjectQuest( playerid ) == MAX_QUESTOBJ - 1 )
			{
				SendClientMessageToAllf( COLOR_GENANNOUNCE, "* OBJECTS QUEST: %s a gasit toate obiectele ascunse [35/35]! Felicitari!", playerVariables[ playerid ][ pNormalName ] );
				SendClientMessagef( playerid, COLOR_LIGHTRED, "> Felicitari, ai gasit toate obiectele ascunse pe harta si ai primit:" );
				SendClientMessagef( playerid, COLOR_LIGHTGREEN, "[+] "COL_W"Un vehicul personal rar, Patriot!" );
				SendClientMessagef( playerid, COLOR_LIGHTGREEN, "[+] "COL_W"$50.000 | 10 Respect Points | 10 Premium Points | 10 Rob Points!" );

				playerVariables[ playerid ][ pRP ] += 10;
				//playerVariables[ playerid ][ pHiddenColors ]++;
				playerVariables[ playerid ][ pMoney ] += 50000;
				playerVariables[ playerid ][ pRobPoints ] += 10;
				playerVariables[ playerid ][ pPremiumPoints ] += 10;

				if( GetPersonalVehiclesNumber( playerid ) < 10 )
				{
					if( GetPersonalVehiclesNumber( playerid ) == playerVariables[ playerid ][ pVSlots ] )
						playerVariables[ playerid ][ pVSlots ]++, GivePlayerPersonalVehicle( playerid, 470 );
					else GivePlayerPersonalVehicle( playerid, 470 ); // Patriot
				}
				else
				{
					playerVariables[ playerid ][ pPremiumPoints ] += 10;
					SendClientMessagef( playerid, COLOR_LIGHTGREEN, "[+] "COL_W"Ai deja 10 masini personale, vei primi 10PP in locul masinii." );
				}
			}
		}
	}
	#endif
	if( playerVariables[ playerid ][ pFaction ] != 0 && GetPlayerInterior( playerid ) == 0 )
	{
		new TurfID = GetGVarInt( "faction_WarTurf", playerVariables[ playerid ][ pFaction ] );
		if( GetGVarInt( "TurfREC", TurfID ) == areaid )
		{
			if( GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
			{
				if( IsAPlaneModel( GetVehicleModel( GetPlayerVehicleID( playerid ) ) ) )
					return SendClientMessage( playerid, COLOR_LIGHTBLUE, "[WAR] Ai intrat pe teritoriul de war cu un aparat de zbor, iesi din el si intra in turf din nou!" );

				SetVehicleVirtualWorld( GetPlayerVehicleID( playerid ), GetGVarInt( "faction_WarVirtual", playerVariables[ playerid ][ pFaction ] ) );
			}
			SetPlayerVirtualWorld( playerid, GetGVarInt( "faction_WarVirtual", playerVariables[ playerid ][ pFaction ] ) );
			SetPlayerFactionSolidColor( playerid );
			SendClientMessage( playerid, COLOR_LIGHTBLUE, "[WAR] Ai intrat pe teritoriul de war intr-un virtual world. Succes in omorarea inamicilor!" );
		}
	}
	// < Radar System - Show message )
	if( !IsPlayerCop( playerid ) && GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
		foreach(new cop : playerFaction[ FACTION_COP ])
			if( IsValidDynamicArea( playerVariables[ cop ][ pRadarZone ] ) && playerVariables[ cop ][ pRadarZone ] == areaid )
			{
				new vehicleID = GetPlayerVehicleID( playerid ),
			        vehicleSpeed = GetVehicleSpeed( vehicleID, 0 );
				
				if(vehicleSpeed <= 119)
				{	
					SendClientMessagef( cop, COLOR_COOLBLUE, "LSPD System"COL_W": Radarul l-a detectat pe "COL_LR"%s(%d) "COL_W"cu o viteza de "COL_LYE"%d km/h("COL_G" ** LEGAL **)", playerVariables[ playerid ][ pNormalName ], playerid, vehicleSpeed);
			    }
			    else
			    {
					SendClientMessagef( cop, COLOR_COOLBLUE, "LSPD System"COL_W": Radarul l-a detectat pe "COL_LR"%s(%d) "COL_W"cu o viteza de "COL_LYE"%d km/h("COL_R" !!! ILEGAL !!!) ", playerVariables[ playerid ][ pNormalName ], playerid, vehicleSpeed);
			        SendClientMessagef(playerid, COLOR_COOLBLUE, "LSPD System:"COL_W": Ai fost surprins de radar cu o viteza de: "COL_LR"%d km/h(ILEGAL)", vehicleSpeed);
			        SendClientMessagef(playerid, COLOR_COOLBLUE, "Daca te vei deconecta inainte de a plati amenda sau inainte de ati fi confiscata licenta de condus, vei primi warn!");

			        playerVariables[ playerid ][ pRadarON ] = 1;
			    }
			}
	return true;
}
public OnPlayerLeaveDynamicArea(playerid, areaid)
{
	foreach( new bID : ServerBusiness )
		if( GetGVarInt( "Business_Zone", bID ) == areaid )
			DisableRemoteVehicleCollisions( playerid, false );

	for( new i=0; i < sizeof( Server_Zone ); i++ )
		if( Server_Zone[ i ] == areaid && !playerVariables[playerid][pRaceArena] && !playerVariables[ playerid ][ pFactionWar ] )
			//GameTextForPlayer( playerid, "~w~~h~collisions~n~~g~~h~enabled", 3000, 1 ), 
		    DisableRemoteVehicleCollisions( playerid, true );

	for( new i=0; i < sizeof( Spawn_Zone ); i++ )
		if( Spawn_Zone[ i ] == areaid )
			PlayerTextDrawHide( playerid, PlayerText:SERVER_TD[ 1 ] );

	if( playerVariables[ playerid ][ pFaction ] != 0 && GetPlayerInterior( playerid ) == 0 && GetPlayerVirtualWorld( playerid ) == GetGVarInt( "faction_WarVirtual", playerVariables[ playerid ][ pFaction ] ) && GetPlayerState( playerid ) != PLAYER_STATE_WASTED )
	{
		new TurfID = GetGVarInt( "faction_WarTurf", playerVariables[ playerid ][ pFaction ] );
		if( GetGVarInt( "TurfREC", TurfID ) == areaid )
		{
			if( GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
				SetVehicleVirtualWorld( GetPlayerVehicleID( playerid ), 0 );

			SetPlayerVirtualWorld( playerid, 0 );
			SetPlayerFactionColor( playerid );
			SendClientMessage( playerid, COLOR_LIGHTBLUE, "[WAR] Ai iesit de pe teritoriul de war, ai fost sters de pe radar si ai revenit in virtual world!" );
		}
	}
	foreach( new x : ServerTurfs )
	{
		if( GetGVarInt( "TurfREC", x ) == areaid )
		{
			//GangZoneStopFlashForAll( GetGVarInt( "TurfID", x ) );
			#if defined DEBUG_SERVER
			if( playerVariables[ playerid ][ pAdminLevel ] != 0 )
				InfoTD_MSG( playerid, 10000, "Ai iesit de pe teritoriul mafiei: ~y~~h~%s", GetGVarStringEx( "faction_Name", GetGVarInt( "turf_Owner", x ) ) );
			#endif
		}
	}
}
public OnRconCommand(cmd[])
{
	return true;
}

public OnPlayerRequestSpawn(playerid)
{
	SetPlayerHealth( playerid, 100 );
	return true;
}
public OnObjectMoved( objectid )
{
	if( objectid == NR_GATE[ 0 ] )
		MoveObject( NR_GATE[ 0 ], 778.35889, -1330.21143, 12.95970, 0.5 ), serverVariables[ gateNRStatus ][ 0 ] = false;
	else if( objectid == NR_GATE[ 1 ] )
		MoveObject( NR_GATE[ 1 ], 777.90912, -1384.72534, 13.10640, 0.5 ), serverVariables[ gateNRStatus ][ 1 ] = false;
	else if( objectid == LSPD_GATE[ 0 ] )
		MoveObject( LSPD_GATE[ 0 ], 1588.6552, -1637.9025, 15.0358, 0.5 ), serverVariables[ gateLSPDStatus ][ 0 ] = false;
	else if( objectid == LSPD_GATE[ 1 ] )
		MoveObject( LSPD_GATE[ 1 ], 1544.7007, -1630.7527, 13.2983, 0.03, 0.0000, 90.0200, 90.0000 ), serverVariables[ gateLSPDStatus ][ 1 ] = false;
	return true;
}
public OnPlayerObjectMoved(playerid, objectid)
{
	DestroyPlayerObject(playerid, objectid);
	return true;
}
public OnPlayerPickUpPickup(playerid, pickupid)
{
	return true;
}
public OnPlayerPickUpDynamicPickup( playerid, pickupid )
{
	// < Weapon Drop System )
	if(pickupInfo[ pickupid ][ house_pickups ] != 0) playerVariables[ playerid ][ GET_AREA_HOUSE ] = pickupInfo[ pickupid ][ house_pickups ];
    if(pickupInfo[ pickupid ][ bizz_pickups ] != 0) playerVariables[ playerid ][ GET_AREA_BIZZ ] = pickupInfo[ pickupid ][ bizz_pickups ];
    if(pickupInfo[ pickupid ][ faction_pickups ] != 0) playerVariables[ playerid ][ GET_AREA_FACTION ] = pickupInfo[ pickupid ][ faction_pickups ];
    if(pickupInfo[ pickupid ][ tele_pickups ] != 0) playerVariables[ playerid ][ GET_AREA_TELES ] = pickupInfo[ pickupid ][ tele_pickups ];
    if(pickupInfo[ pickupid ][ tele_pickupss ] != 0) playerVariables[ playerid ][ GET_AREA_TELES ] = pickupInfo[ pickupid ][ tele_pickupss ];
    if(pickupInfo[ pickupid ][ jobs_pickups ] != 0) playerVariables[ playerid ][ GET_AREA_JOBS ] = pickupInfo[ pickupid] [ jobs_pickups ];
    if(pickupInfo[ pickupid ][ apartments_pickups ] != 0) playerVariables[ playerid ][ GET_AREA_APARTMENT ] = pickupInfo[ pickupid] [ apartments_pickups ];
	OnWeaponDropPickup( playerid, pickupid );
	return true;
}
public OnVehicleMod( playerid, vehicleid, componentid )
{
	#if defined DEBUG_SERVER
		SendClientMessagef( playerid, COLOR_LIGHTGREEN, "[Debug #2] You have added component ID: %d on your vehicle!", componentid );
	#endif
	new PlayerSlot = playerVariables[ playerid ][ VehicleSlot ];
	if(vehicleid == vehicleVariables[ PlayerSlot ][ playerid ][ Vehicle ] )
		for( new i = 0; i < 13; i++ )
			vehicleVariables[ PlayerSlot ][ playerid ][ VehicleMods ][ i ] = GetVehicleComponentInSlot( vehicleVariables[ PlayerSlot ][ playerid ][ Vehicle ], i );

	gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, "%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d",
		vehicleVariables[ PlayerSlot ][ playerid ][ VehicleMods ][ 0 ],
		vehicleVariables[ PlayerSlot ][ playerid ][ VehicleMods ][ 1 ],
		vehicleVariables[ PlayerSlot ][ playerid ][ VehicleMods ][ 2 ],
		vehicleVariables[ PlayerSlot ][ playerid ][ VehicleMods ][ 3 ],
		vehicleVariables[ PlayerSlot ][ playerid ][ VehicleMods ][ 4 ],
		vehicleVariables[ PlayerSlot ][ playerid ][ VehicleMods ][ 5 ],
		vehicleVariables[ PlayerSlot ][ playerid ][ VehicleMods ][ 6 ],
		vehicleVariables[ PlayerSlot ][ playerid ][ VehicleMods ][ 7 ],
		vehicleVariables[ PlayerSlot ][ playerid ][ VehicleMods ][ 8 ],
		vehicleVariables[ PlayerSlot ][ playerid ][ VehicleMods ][ 9 ],
		vehicleVariables[ PlayerSlot ][ playerid ][ VehicleMods ][ 10 ],
		vehicleVariables[ PlayerSlot ][ playerid ][ VehicleMods ][ 11 ],
		vehicleVariables[ PlayerSlot ][ playerid ][ VehicleMods ][ 12 ] );

	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_personalvehicles` SET `vehicleMods` = '%s' WHERE `vehicleID` = %d", gsString, vehicleVariables[ PlayerSlot ][ playerid ][ VehicleID ] );
	mysql_tquery( g_Handle, gsQuery, "", "" );

	return true;
}

public OnVehiclePaintjob( playerid, vehicleid, paintjobid )
{
	new PlayerSlot = playerVariables[ playerid ][ VehicleSlot ];
	if( GetPlayerVehicleID( playerid ) == vehicleVariables[ PlayerSlot ][ playerid ][ Vehicle ] )
	{
		vehicleVariables[ PlayerSlot ][ playerid ][ VehiclePaintJobs ] = paintjobid;
		gsQuery[ 0 ] = EOS;
		mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_personalvehicles` SET `vehiclePaintJob` = %d WHERE `vehicleID` = %d", paintjobid, vehicleVariables[ PlayerSlot ][ playerid ][ VehicleID ] );
		mysql_tquery( g_Handle, gsQuery, "", "" );

		// < log the action >
		gsString[ 0 ] = EOS;
		format( gsString, sizeof gsString, "Vehicle\\'s paintjob has been changed to: %d", paintjobid );
		InsertVehicleLog( playerVariables[ playerid ][ Vehicle ][ PlayerSlot ], GetPlayerMysqlID(playerid), gsString );
	}
	return true;
}

public OnVehicleRespray( playerid, vehicleid, color1, color2 )
{
	new pnsID;
	if(GetPVarInt( playerid, "is_owner") == playerid ) pnsID = 54;
	else pnsID = playerVariables[playerid][GET_AREA_BIZZ];
	playerVariables[ playerid ][ pMoney ] -= GetGVarInt( "bus_Fee", pnsID );
	SetGVarInt( "bus_Money", GetGVarInt( "bus_Money", pnsID ) + GetGVarInt( "bus_Fee", pnsID ), pnsID );
	SendClientMessagef( playerid, COLOR_LIGHTGREEN, "[PNS] You paid $%s to the owner of the business!", FormatNumber( GetGVarInt( "bus_Fee", pnsID ) ) );

	//SendClientMessagef( playerid, COLOR_GREEN, "You resprayed vehicle %d to colors %d and %d!", vehicleid, color1, color2 );
	if(GetPlayerTurfID( playerid ) != 0) {
		new TaxaProtectie = floatround( (10.0/100) * GetGVarInt( "bus_Fee", GetBuildingEnterID( playerid, 0, 3 )), floatround_round);
		new TurfID = GetGVarInt( "turf_Owner", GetPlayerTurfID( playerid ) );

		SetGVarInt( "faction_Money", GetGVarInt( "faction_Money", TurfID ) + TaxaProtectie, TurfID );
		UpdateFactionSafe( TurfID );
	}
	return false;
}

public OnPlayerSelectedMenuRow(playerid, row)
{
	return true;
}

public OnPlayerExitedMenu(playerid)
{
	return true;
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	return true;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
    if(newkeys & KEY_SUBMISSION && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
		changeEngineStatus(playerid);
    }
	if( newkeys & KEY_NO )
		callcmd::lock( playerid, "");

	if( IsPlayerInAnyVehicle( playerid ) && GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
	{
		if( newkeys & KEY_FIRE )
		{
			if( playerVariables[ playerid ][ pSpeedBoost ] == 1 )
			{
				new Float:vx, Float:vy, Float:vz;
				GetVehicleVelocity( GetPlayerVehicleID( playerid ), vx, vy, vz );
				SetVehicleVelocity( GetPlayerVehicleID( playerid ), vx * 1.8, vy *1.8, vz * 1.8 );
			}
		}
		return 1;
	}

	if( newkeys & KEY_FIRE && playerVariables[ playerid ][ pFirstSpawn ] == 0 )
	{
		if( playerVariables[ playerid ][ pFirstPress ] == 0 )
		{
			playerVariables[ playerid ][ pFirstPress ] = 1;

			InterpolateCameraPos( playerid, 1772.629028, -1813.489990, 45.188911, 1739.2528, 1477.6411, 42.9726, 5000 );
			InterpolateCameraLookAt( playerid, 1770.010620, -1817.109985, 42.944004, 1676.8617, 1447.7217, 10.7832, 5000 );

			/*InterpolateCameraPos( playerid, 1772.629028, -1813.489990, 45.188911, 1610.144897, -2265.480224, 22.239614, 5000 );
			InterpolateCameraLookAt( playerid, 1770.010620, -1817.109985, 42.944004, 1613.875000, -2262.500000, 20.754552, 5000 );*/
		}
		else
		{
			playerVariables[ playerid ][ pFirstPress ] = 0;

			InterpolateCameraPos( playerid, 1739.2528, 1477.6411, 42.9726, 1772.629028, -1813.489990, 45.188911, 5000 );
			InterpolateCameraLookAt( playerid, 1676.8617, 1447.7217, 10.7832, 1770.010620, -1817.109985, 42.944004, 5000 );

			/*InterpolateCameraPos( playerid, 1610.144897, -2265.480224, 22.239614, 1772.629028, -1813.489990, 45.188911, 5000 );
			InterpolateCameraLookAt( playerid, 1613.875000, -2262.500000, 20.754552, 1770.010620, -1817.109985, 42.944004, 5000 );*/
		}
		return 1;
	}
	if( newkeys & KEY_SECONDARY_ATTACK && playerVariables[ playerid ][ pFirstSpawn ] == 0 )
	{
		if( playerVariables[ playerid ][ pFirstPress ] == 0 ) // < Train Station >
		{
			gsQuery[ 0 ] = EOS;
			mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerFirstSpawn` = 1, `playerSpawnChoose` = 1, `playerCity` = 0 WHERE `id` = %d", GetPlayerMysqlID(playerid) );
			mysql_tquery( g_Handle, gsQuery, "", "" );
			playerVariables[ playerid ][ pFirstSpawn ] = 1;
			playerVariables[ playerid ][ pSpawnChoose ] = 1;
			playerVariables[ playerid ][ pCity ] = 0;
			SetPVarInt(playerid, "playerInRegister", 0);

			TogglePlayerSpectating( playerid, false );
			SpawnPlayerTimer( playerid );
			HideTutorial(playerid);
		}
		else // < Aero Station LV >
		{
			gsQuery[ 0 ] = EOS;
			mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerFirstSpawn` = 1, `playerSpawnChoose` = 2, `playerCity` = 1 WHERE `id` = %d", GetPlayerMysqlID(playerid) );
			mysql_tquery( g_Handle, gsQuery, "", "" );
			playerVariables[ playerid ][ pFirstSpawn ] = 1;
			playerVariables[ playerid ][ pSpawnChoose ] = 2;
			playerVariables[ playerid ][ pCity ] = 1;
			SetPVarInt(playerid, "playerInRegister", 0);

			TogglePlayerSpectating( playerid, false );
			SpawnPlayerTimer( playerid );
			HideTutorial(playerid);
		}
		PlayerTextDrawShow(playerid, PlayerText:CeasPTD);
		TextDrawShowForPlayer(playerid, Text:CeasTD);    

		return 1;
	}

    if((IsACBUGWeapon(playerid) && RELEASED(KEY_FIRE)) && newkeys != KEY_FIRE && newkeys & KEY_CROUCH)
    {
       ApplyAnimation ( playerid , "PED" , "getup" , 4.1 , 0 , 0 , 0 , 0 , 0 ) ;
       SendClientMessage( playerid, ~1, ""COL_R"C-BUG interzis! RISTI SA FII BANAT! ");
    }
	
	if( newkeys & KEY_SPRINT )
	{
		if( playerVariables[ playerid ][ pLoopingAnim ] )
			StopLoopingAnim( playerid );

		return 1;
	}
	if( newkeys & KEY_CROUCH )
	{
		if( IsPlayerCop( playerid ) )
		{
			if( IsPlayerInRangeOfPoint( playerid, 15.0, 1588.6552, -1637.9025, 15.0358 ) && serverVariables[ gateLSPDStatus ][ 0 ] == false )
			{
				serverVariables[ gateLSPDStatus ][ 0 ] = true;
				MoveObject( LSPD_GATE[ 0 ], 1596.7352, -1637.9025, 15.0358, 2.0 );
			}
			else if( IsPlayerInRangeOfPoint( playerid, 15.0, 1544.7007, -1630.7527, 13.2983 ) && serverVariables[ gateLSPDStatus ][ 1 ] == false )
			{
				serverVariables[ gateLSPDStatus ][ 1 ] = true;
				MoveObject( LSPD_GATE[ 1 ], 1544.7107, -1630.8527, 13.3000, 0.1, 0.0000, 0.0000, 90.0000 );
				// default: 1544.7007, -1630.7527, 13.2983 // +0.001
			}
		}
		else if( playerVariables[ playerid ][ pFaction ] == 5 )
		{
			if( IsPlayerInRangeOfPoint( playerid, 10.0, 778.35889, -1330.21143, 12.95970 ) && serverVariables[ gateNRStatus ][ 0 ] == false )
			{
				serverVariables[ gateNRStatus ][ 0 ] = true;
				MoveObject( NR_GATE[ 0 ], 767.0, -1330.21143, 12.95970, 2.0 );
			}
			else if( IsPlayerInRangeOfPoint( playerid, 10.0, 777.90912, -1384.72534, 13.10640 ) && serverVariables[ gateNRStatus ][ 1 ] == false )
			{
				serverVariables[ gateNRStatus ][ 1 ] = true;
				MoveObject( NR_GATE[ 1 ], 767.0, -1384.72534, 13.10640, 2.0 );
			}
		}
		return 1;
	}
	if( newkeys & KEY_WALK && playerVariables[ playerid ][ pSpectating ] != INVALID_PLAYER_ID )
	{
		SendClientMessage( playerid, COLOR_GREY, "You have stopped your Spectating!" );
		TogglePlayerSpectating( playerid, false );
	}
	if( ( newkeys == KEY_CTRL_BACK )&&( IsPlayerInAnyVehicle( playerid ))&&(GetPlayerState( playerid ) == PLAYER_STATE_DRIVER ) )
	{
		return ShowPlayerRadioDialog( playerid );
	}
	if( newkeys == KEY_YES)
	{
		if( IsPlayerInRangeOfPoint( playerid, 5, GetGVarFloat( "bus_EnterX", 54 ), GetGVarFloat( "bus_EnterY", 54 ), GetGVarFloat( "bus_EnterZ", 54 ) ) )
		{
			if(!IsPlayerInAnyVehicle(playerid)) return 1;
			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
				return SendClientMessage(playerid, -1, "You are not driver.");

            if( playerVariables[ playerid ][ pMoney ] < GetGVarInt("bus_Fee", 54) )
				return SendClientMessage(playerid, -1, "You don't have money.");

			new Float:vehicleHealth;
			GetVehicleHealth( GetPlayerVehicleID(playerid), vehicleHealth );
			if( vehicleHealth >= 999.0 )
				return SendClientMessage(playerid, -1, "Vehiculul tau nu are damage scazut.");

			Iter_gPlayerVehicleId[playerid] = GetPlayerVehicleID(playerid);
            foreach(new i : vehiclePlayerStream[Iter_gPlayerVehicleId[playerid]])
            {
            	SetPVarInt(i, "seat_id", GetPlayerVehicleSeat(i));
            	SetPVarInt(playerid, "Veh_idd", GetPlayerVehicleID(playerid));
            	SetPVarInt(playerid, "is_owner", playerid);
				SetPlayerVirtualWorld(i, GetPlayerVehicleID(playerid));
				SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), GetPlayerVirtualWorld(playerid));
				SetVehiclePos(GetPlayerVehicleID(playerid), -1904.6980,286.3127,41.0469);
				PutPlayerInVehicle(playerid, GetPlayerVehicleID(playerid), 0);
				TogglePlayerControllable( playerid, 0 );

				SetTimerEx( "player_pns", 2000, false, "d", i );

            }
		}
		return 1;
	}
	if( newkeys & KEY_SECONDARY_ATTACK )
	{
		if( playerVariables[ playerid ][ pFly ] )
			callcmd::fly( playerid, "lol" );
		new // Type( 0=enter/1=exit ) Building( 0=faction/1=teleport/2=house )
			ATMID = GetATMID( playerid ),
			FactionIDENT = GetBuildingEnterID( playerid, 0, 0 ),
			FactionIDEX = GetBuildingEnterID( playerid, 1, 0 ),

			TeleIDENT = GetBuildingEnterID( playerid, 0, 1, 2.0 ),
			TeleIDEX = GetBuildingEnterID( playerid, 1, 1, 2.0 ),

			HouseIDENT = GetBuildingEnterID( playerid, 0, 2 ),
			HouseIDEX = GetBuildingEnterID( playerid, 1, 2 ),

			BusIDENT = GetBuildingEnterID( playerid, 0, 3 ),
			BusIDEX = GetBuildingEnterID( playerid, 1, 3 ),

			ApartmentIDENT = GetBuildingEnterID( playerid, 0, 4, 1.5 ),
			ApartmentIDEX = GetBuildingEnterID( playerid, 1, 4, 1.5 );

		//printf( "Faction ENT: %d | Faction EXT: %d", FactionIDENT, FactionIDEX );
		if( FactionIDENT != -404 )
		{
			if( GetGVarInt( "faction_Locked", FactionIDENT ) && playerVariables[ playerid ][ pFactionRank ] < 6 ) // < cu rank mai mic decat co-liderul >
				return InfoTD_MSG( playerid, 5000, "Faction HQ is ~r~~h~LOCKED" );

			if( IsPlayerInAnyVehicle( playerid ) )
				return SendClientMessage( playerid, COLOR_WHITE, "Nu poti intra, te afli intr-un vehicul!" );

			if( playerVariables[ playerid ][ pFaction ] == FactionIDENT || playerVariables[ playerid ][ pAdminLevel ] != 0 )
			{
				SetPlayerVirtualWorld( playerid, GetGVarInt( "faction_Virtual", FactionIDENT ) );
				SetPlayerInterior( playerid, GetGVarInt( "faction_Interior", FactionIDENT ) );
				SetPlayerPos( playerid, GetGVarFloat( "faction_ExitX", FactionIDENT ), GetGVarFloat( "faction_ExitY", FactionIDENT ), GetGVarFloat( "faction_ExitZ", FactionIDENT ) );
			}
			return 1;
		}
		else if( FactionIDEX != -404 )
		{
			SetPlayerVirtualWorld( playerid, 0 );
			SetPlayerInterior( playerid, GetGVarInt( "faction_InteriorEnter", FactionIDEX ) );
			SetPlayerPos( playerid, GetGVarFloat( "faction_EnterX", FactionIDEX ), GetGVarFloat( "faction_EnterY", FactionIDEX ), GetGVarFloat( "faction_EnterZ", FactionIDEX ) );
		    return 1;
		}
		else if( TeleIDENT != -404 )
		{
			if(TeleIDENT == 17)
			{
				if(GetGVarInt("bus_OwnerKey", HOTEL_DB_ID) != GetPlayerMysqlID(playerid))
					return SendClientMessage(playerid, -1, "Nu esti proprietarul hotelului!");
			}
			if( TeleIDENT == 10 && !IsPlayerCop( playerid ) )
				return SendClientMessage( playerid, COLOR_WHITE, "Doar membrii LSPD pot folosi acest teleport!" );

			if( IsPlayerInAnyVehicle( playerid ) )
				return SendClientMessage( playerid, COLOR_WHITE, "Nu poti intra, te afli intr-un vehicul!" );

			if( playerVariables[ playerid ][ pFactionWar ] != 0 )
				return SendClientMessage( playerid, COLOR_LIGHTRED, "Esti intr-un war in acest moment!" );

			if( GetGVarInt( "tele_Status", TeleIDENT ) )
				return SendClientMessage( playerid, COLOR_LIGHTRED, "Acest teleport este blocat momentan!" );

			if( GetPlayerVirtualWorld( playerid ) != GetGVarInt( "tele_Virtual", TeleIDENT ) )
				return SendClientMessagef( playerid, COLOR_GREY, "Your virtual: %d | Tele virtual: %d", GetPlayerVirtualWorld( playerid ), GetGVarInt( "tele_Virtual", TeleIDENT ) );

			if( TeleIDENT == 2 && playerVariables[ playerid ][ pRobStatus ] == 1 )
			{
				InfoTD_MSG( playerid, 30000, "~r~~h~ROB HINT:~n~~w~~h~Trage in usa cu un ~y~~h~Desert Eagle ~w~~h~pentru a deschide seiful!" );
				//( playerid, 1058, 0.0, 0.0, 0.0 );
			}
			SetPlayerVirtualWorld( playerid, GetGVarInt( "tele_VirtualExit", TeleIDENT ) );
			SetPlayerInterior( playerid, GetGVarInt( "tele_InteriorExit", TeleIDENT ) );
			SetPlayerPos( playerid, GetGVarFloat( "tele_ExitX", TeleIDENT ), GetGVarFloat( "tele_ExitY", TeleIDENT ), GetGVarFloat( "tele_ExitZ", TeleIDENT ) );
			return 1;
		}
		else if( TeleIDEX != -404 )
		{
            if(TeleIDEX == 17)
			{
				if(GetGVarInt("bus_OwnerKey", HOTEL_DB_ID) != GetPlayerMysqlID(playerid))
					return SendClientMessage(playerid, -1, "Nu esti proprietarul hotelului!");
			}

			if( TeleIDEX == 10 && !IsPlayerCop( playerid ) )
				return SendClientMessage( playerid, COLOR_WHITE, "Doar membrii LSPD pot folosi acest teleport!" );

			if( GetGVarInt( "tele_Status", TeleIDEX ) )
				return SendClientMessage( playerid, COLOR_LIGHTRED, "Acest teleport este blocat momentan!" );

			if( GetPlayerVirtualWorld( playerid ) != GetGVarInt( "tele_VirtualExit", TeleIDEX ) )
				return SendClientMessagef( playerid, COLOR_GREY, "Your virtual: %d | Tele virtual: %d", GetPlayerVirtualWorld( playerid ), GetGVarInt( "tele_VirtualExit", TeleIDEX ) );

			SetPlayerVirtualWorld( playerid, GetGVarInt( "tele_Virtual", TeleIDEX ) );
			SetPlayerInterior( playerid, GetGVarInt( "tele_Interior", TeleIDEX ) );
			SetPlayerPos( playerid, GetGVarFloat( "tele_EnterX", TeleIDEX ), GetGVarFloat( "tele_EnterY", TeleIDEX ), GetGVarFloat( "tele_EnterZ", TeleIDEX ) );
			return 1;
		}
		else if( HouseIDENT != -404 )
		{
			if( IsPlayerInAnyVehicle( playerid ) )
				return SendClientMessage( playerid, COLOR_WHITE, "Nu poti intra, te afli intr-un vehicul!" );

			if( playerVariables[ playerid ][ pFactionWar ] != 0 )
				return SendClientMessage( playerid, COLOR_LIGHTRED, "Esti intr-un war in acest moment!" );

			#if defined XMAS_MODE
			if( playerVariables[ playerid ][ pHouse ] == HouseIDENT )
				SendClientMessage( playerid, COLOR_LIGHTRED, "> Foloseste comenzile /placegift si /editgift pentru a-ti plasa un cadou in locuinta!" );
			#endif
			if( playerVariables[ playerid ][ pHouse ] == HouseIDENT || playerVariables[ playerid ][ pRentRoom ] == HouseIDENT )
			{
				StopAudioStreamForPlayer( playerid ), PlayAudioStreamForPlayer( playerid, GetGVarStringEx( "house_Music", HouseIDENT ) );

				SetPlayerInterior( playerid, GetGVarInt( "house_Interior", HouseIDENT ) );
				SetPlayerVirtualWorld( playerid, GetGVarInt( "house_Virtual", HouseIDENT ) );
				SetPlayerPos( playerid, GetGVarFloat( "house_ExitX", HouseIDENT ), GetGVarFloat( "house_ExitY", HouseIDENT ), GetGVarFloat( "house_ExitZ", HouseIDENT ) );
			}
			else if( !GetGVarInt( "house_Lock", HouseIDENT ) )
			{
				StopAudioStreamForPlayer( playerid ), PlayAudioStreamForPlayer( playerid, GetGVarStringEx( "house_Music", HouseIDENT ) );

				SetPlayerInterior( playerid, GetGVarInt( "house_Interior", HouseIDENT ) );
				SetPlayerVirtualWorld( playerid, GetGVarInt( "house_Virtual", HouseIDENT ) );
				SetPlayerPos( playerid, GetGVarFloat( "house_ExitX", HouseIDENT ), GetGVarFloat( "house_ExitY", HouseIDENT ), GetGVarFloat( "house_ExitZ", HouseIDENT ) );
			}
			else
			{
				// < Set the houseID )
				SetPVarInt( playerid, "break_House", HouseIDENT );

				if( playerVariables[ playerid ][ pAdminLevel ] != 0 && playerVariables[ playerid ][ pAdminDuty ] != 0 )
					ShowPlayerDialog( playerid, DIALOG_HOUSE_ENTER, DIALOG_STYLE_MSGBOX, "SERVER: House Break", "This House is locked.\r\nAs an administrator, you can brake this lock and enter. Would you like to do so?", "Yes", "No" );
				else if( playerVariables[ playerid ][ pFaction ] == 6 ) // Hitman
					ShowPlayerDialog( playerid, DIALOG_HOUSE_ENTER, DIALOG_STYLE_MSGBOX, "SERVER: House Break", "This House is locked.\r\nAs a hitman, you can brake this lock and enter. Would you like to do so?", "Yes", "No" );
				else if( IsPlayerCop( playerid ) )
					ShowPlayerDialog( playerid, DIALOG_HOUSE_ENTER, DIALOG_STYLE_MSGBOX, "SERVER: House Break", "This House is locked.\r\nAs a law enforcement officer, you can brake this lock and enter. Would you like to do so?", "Yes", "No" );
				else
					SendClientMessage( playerid, COLOR_WHITE, "House it's locked! Please buy it or use /rent room !" );
			}
			return 1;
		}
		else if( HouseIDEX != -404 )
		{
			SetPlayerInterior( playerid, 0 );
			SetPlayerVirtualWorld( playerid, 0 );
			StopAudioStreamForPlayer( playerid );
			SetPlayerPos( playerid, GetGVarFloat( "house_EnterX", HouseIDEX ), GetGVarFloat( "house_EnterY", HouseIDEX ), GetGVarFloat( "house_EnterZ", HouseIDEX ) );
		    return 1;
		}
		else if( ApartmentIDENT != -404)
		{
			if(GetGVarInt("apartment_LOCK", ApartmentIDENT) == 1 && playerVariables[playerid][pRentAP] != ApartmentIDENT && GetGVarInt("apartment_OWNERKEY", ApartmentIDENT) != GetPlayerMysqlID(playerid))
			{
				SetPVarInt( playerid, "apartment_BREAK", ApartmentIDENT );

				if( playerVariables[ playerid ][ pAdminLevel ] != 0 && playerVariables[ playerid ][ pAdminDuty ] != 0 )
					ShowPlayerDialog( playerid, DIALOG_AP_ENTER, DIALOG_STYLE_MSGBOX, "SERVER: House Break", "This House is locked.\r\nAs an administrator, you can brake this lock and enter. Would you like to do so?", "Yes", "No" );
				else if( playerVariables[ playerid ][ pFaction ] == 6 ) // Hitman
					ShowPlayerDialog( playerid, DIALOG_AP_ENTER, DIALOG_STYLE_MSGBOX, "SERVER: House Break", "This House is locked.\r\nAs a hitman, you can brake this lock and enter. Would you like to do so?", "Yes", "No" );
				else if( IsPlayerCop( playerid ) )
					ShowPlayerDialog( playerid, DIALOG_AP_ENTER, DIALOG_STYLE_MSGBOX, "SERVER: House Break", "This House is locked.\r\nAs a law enforcement officer, you can brake this lock and enter. Would you like to do so?", "Yes", "No" );
				else
					SendClientMessage( playerid, COLOR_WHITE, "This apartment is locked." );
			}
            else 
            {
            	SetPVarInt( playerid, "is_in_apartament", 1 );
            	SetPlayerPos(playerid, GetGVarFloat("apartment_EXITX", ApartmentIDENT), GetGVarFloat("apartment_EXITY", ApartmentIDENT), GetGVarFloat("apartment_EXITZ", ApartmentIDENT));
			    SetPlayerFacingAngle(playerid, GetGVarFloat("apartment_ANGLE", ApartmentIDENT));
            }
            return 1;
		}
		else if( ApartmentIDEX != -404 )
		{
			SetPVarInt( playerid, "is_in_apartament", 0 );
			SetPlayerPos(playerid, GetGVarFloat("apartment_ENTERX", ApartmentIDEX), GetGVarFloat("apartment_ENTERY", ApartmentIDEX), GetGVarFloat("apartment_ENTERZ", ApartmentIDEX));
		    return 1;
		}
		else if( BusIDENT != -404 )
		{
			if( IsPlayerInAnyVehicle( playerid ) )
				return SendClientMessage( playerid, COLOR_WHITE, "Nu poti intra, te afli intr-un vehicul!" );

			if( playerVariables[ playerid ][ pFactionWar ] != 0 )
				return SendClientMessage( playerid, COLOR_LIGHTRED, "Esti intr-un war in acest moment!" );

			if( GetGVarInt( "bus_Type", BusIDENT ) != 5 && GetGVarInt( "bus_Type", BusIDENT ) != 11 && GetGVarInt( "bus_Type", BusIDENT ) != 12 && GetGVarInt( "bus_Type", BusIDENT ) != 13 && GetGVarInt( "bus_Type", BusIDENT ) != 16)
			{
				// < Check if it's the last business! )
				if( playerVariables[ playerid ][ pLastBusiness ] != BusIDENT || playerVariables[ playerid ][ pLastBusiness ] == BusIDENT && playerVariables[ playerid ][ pLastBusinessTimer ] == 0 )
				{
					if( playerVariables[ playerid ][ pMoney ] < GetGVarInt( "bus_Fee", BusIDENT ) )
					{
						SendClientMessagef( playerid, ~1, "You need $%s to pay the business fee!", FormatNumber( GetGVarInt( "bus_Fee", BusIDENT ) ) );
						return false;
					}
					playerVariables[ playerid ][ pLastBusiness ] = BusIDENT;
					playerVariables[ playerid ][ pLastBusinessTimer ] = 60;
					playerVariables[ playerid ][ pMoney ] -= GetGVarInt( "bus_Fee", BusIDENT );
					SendClientMessagef( playerid, ~1, "You payed $%s to the owner of the business!", FormatNumber( GetGVarInt( "bus_Fee", BusIDENT ) ) );
					SetGVarInt( "bus_Money", GetGVarInt( "bus_Money", BusIDENT ) + GetGVarInt( "bus_Fee", BusIDENT ), BusIDENT );
					if(GetPlayerTurfID( playerid ) != 0) {
						new TaxaProtectie = floatround( (10.0/100) * GetGVarInt( "bus_Fee", BusIDENT ), floatround_round);
						new TurfID = GetGVarInt( "turf_Owner", GetPlayerTurfID( playerid ) );

						SetGVarInt( "faction_Money", GetGVarInt( "faction_Money", TurfID ) + TaxaProtectie, TurfID );
						UpdateFactionSafe( TurfID );
					}

				}
				else if( playerVariables[ playerid ][ pLastBusiness ] == BusIDENT && playerVariables[ playerid ][ pLastBusinessTimer ] != 0 )
				{
					GameTextForPlayer( playerid, "welcome back", 5000, 1 );
				}
				// < Load the rest of the code )
				businessTypeMessages( BusIDENT, playerid );
				SetPlayerInterior( playerid, GetGVarInt( "bus_Interior", BusIDENT ) );
				SetPlayerVirtualWorld( playerid, GetGVarInt( "bus_Virtual", BusIDENT ) );
				SetPlayerPos( playerid, GetGVarFloat( "bus_ExitX", BusIDENT ), GetGVarFloat( "bus_ExitY", BusIDENT ), GetGVarFloat( "bus_ExitZ", BusIDENT ) );

				// < Check if it's in farmer job and Burger Shot )
				if( GetGVarInt( "bus_Type", BusIDENT ) == 7 && playerVariables[ playerid ][ pJobValue ] != 0 && playerVariables[ playerid ][ pJob ] == 2 )
				{
					CheckPlayerQuest( playerid, QUEST_FARMER );
					playerVariables[ playerid ][ pMoney ] += playerVariables[ playerid ][ pJobValue ];
					SendClientMessagef( playerid, COLOR_DARKGREEN, "(+) "COL_W"Ai vandut un sac de faina pentru $%s.", FormatNumber( playerVariables[ playerid ][ pJobValue ] ) );
					playerVariables[ playerid ][ pJobValue ] = 0;
				}
			}
			return 1;
		}
		else if( BusIDEX != -404 )
		{
			if( GetGVarInt( "bus_Robbed", BusIDEX ) == playerid )
			{
				ResetBankActors();
				LoadSafeGoldBars();
				callcmd::cseif( playerid, "lol" ); // Inchide usa
				playerVariables[ playerid ][ pRobSlots ] = 0;
				SetGVarInt( "bus_Robbed", INVALID_PLAYER_ID, BusIDEX ); // Bank
			}
			//( playerid, 3402, 0.0, 0.0, 0.0 );
			SetPlayerInterior( playerid, 0 );
			SetPlayerVirtualWorld( playerid, 0 );
			SetPlayerPos( playerid, GetGVarFloat( "bus_EnterX", BusIDEX ), GetGVarFloat( "bus_EnterY", BusIDEX ), GetGVarFloat( "bus_EnterZ", BusIDEX ) );
		}
		else if( ATMID != -404 )
		{
			gsString[ 0 ] = EOS;
			format( gsString, sizeof gsString, "ATM Location: %s "COL_YE"(Tax: %d$)", GetGVarStringEx( "atm_Name", ATMID ), GetGVarInt( "atm_Tax", ATMID ) );
			ShowPlayerDialog( playerid, DIALOG_ATM_MENU, DIALOG_STYLE_LIST, gsString, "Check Balance\nWithdraw", "Select", "Cancel" );
		}
		return 1;
	}
	if( ( newkeys == KEY_ACTION ) && ( IsPlayerInAnyVehicle( playerid ) ) && ( GetPlayerState( playerid ) == PLAYER_STATE_DRIVER ) )
	{
		new vehID = GetPlayerVehicleID( playerid );
		GetVehicleParamsEx( vehID, engine, lights, alarm, doors, bonnet, boot, objective );
		switch( lights )
		{
			case VEHICLE_PARAMS_ON: SetVehicleParamsEx( vehID, engine, VEHICLE_PARAMS_OFF, alarm, doors, bonnet, boot, objective );
			case VEHICLE_PARAMS_OFF: SetVehicleParamsEx( vehID, engine, VEHICLE_PARAMS_ON, alarm, doors, bonnet, boot, objective );
			default: SetVehicleParamsEx( vehID, engine, VEHICLE_PARAMS_ON, alarm, doors, bonnet, boot, objective );
		}
		return 1;
	}
	if( IsPlayerInAnyVehicle( playerid ) && GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
	{
		if( newkeys & KEY_ANALOG_DOWN ) // boot
		{
			new PlayerSlot = playerVariables[ playerid ][ VehicleSlot ],
				vehID = GetPlayerVehicleID( playerid );

			if( vehID == vehicleVariables[ PlayerSlot ][ playerid ][ Vehicle ] )
				if( vehicleVariables[ PlayerSlot ][ playerid ][ VehicleVIP ] )
					return false;

			GetVehicleParamsEx( vehID, engine, lights, alarm, doors, bonnet, boot, objective );
			switch( boot )
			{
				case VEHICLE_PARAMS_ON: SetVehicleParamsEx( vehID, engine, lights, alarm, doors, bonnet, VEHICLE_PARAMS_OFF, objective );
				case VEHICLE_PARAMS_OFF: SetVehicleParamsEx( vehID, engine, lights, alarm, doors, bonnet, VEHICLE_PARAMS_ON, objective );
				default: SetVehicleParamsEx( vehID, engine, lights, alarm, doors, bonnet, VEHICLE_PARAMS_ON, objective );
			}
		}
		if( newkeys & KEY_ANALOG_UP ) // bonnet
		{
			new vehID = GetPlayerVehicleID( playerid );
			GetVehicleParamsEx( vehID, engine, lights, alarm, doors, bonnet, boot, objective );
			switch( bonnet )
			{
				case VEHICLE_PARAMS_ON: SetVehicleParamsEx( vehID, engine, lights, alarm, doors, VEHICLE_PARAMS_OFF, boot, objective );
				case VEHICLE_PARAMS_OFF: SetVehicleParamsEx( vehID, engine, lights, alarm, doors, VEHICLE_PARAMS_ON, boot, objective );
				default: SetVehicleParamsEx( vehID, engine, lights, alarm, doors, VEHICLE_PARAMS_ON, boot, objective );
			}
		}
	}
	return true;
}

public OnRconLoginAttempt(ip[], password[], success)
{
	return true;
}

function ApplyActorAnim(target)
{
	ApplyActorAnimation( target, "SHOP", "SHP_Rob_HandsUp", 4.1, 1, 0, 0, 0, 0 );
	return 1;
}
public OnPlayerStreamIn( playerid, forplayerid )
{
	Iter_Add(playersStream[playerid], forplayerid);
	if( playerVariables[ playerid ][ pUndercover ] )
		ShowPlayerNameTagForPlayer( forplayerid, playerid, false );
	else if( !playerVariables[ playerid ][ pUndercover ] && playerVariables[ playerid ][ pFaction ] == 6 )
		ShowPlayerNameTagForPlayer( forplayerid, playerid, true );

	if( playerVariables[ playerid ][ pJob ] == 14 && playerVariables[ playerid ][ pDoingJob ] && playerVariables[ playerid ][ pTransporterCP ] != 0 ) // Transporter
	{
		if( IsPlayerCop( forplayerid ) && gettime() - GetPVarInt( playerid, "transporter_Timer" ) >= 120 )
		{
			SetPVarInt( playerid, "transporter_Timer", gettime() ); // Cooldown
			SendClientMessagef( forplayerid, COLOR_RADIOCHAT, "AntiDrog: Un transport ilegal se desfasoara in apropiere de tine!" );
			SendClientMessagef( playerid, COLOR_LIGHTRED, "Transporter Dealer: Un politist te-a detectat, evita-l pentru a scapa de control!" );
		}
	}
	return true;
}
public OnPlayerStreamOut(playerid, forplayerid)
{
	Iter_Remove(playersStream[playerid], forplayerid);
	return true;
}
public OnTrailerUpdate( playerid, vehicleid )
{
	/*if( IsTrailerAttachedToVehicle( vehicleid ) )
	{
		// Fa aici sa bage marker pe remorca!
	}*/
	return true;
}
public OnUnoccupiedVehicleUpdate( vehicleid, playerid, passenger_seat, Float:new_x, Float:new_y, Float:new_z )
{
	#if defined DEBUG_SERVER

	SendClientMessageToAllf( COLOR_WHITE, "V[%d] | P[%d] | S[%d] | x: %0.2f, y: %0.2f, z: %0.2f", vehicleid, playerid, passenger_seat, new_x, new_y, new_z );
	/*if( GetVehicleSpeed( vehicleid, 1 ) > 150 && GetVehicleDistanceFromPoint( vehicleid, new_x, new_y, new_z ) > 40 )
	{
		playerVariables[ playerid ][ pCheating ][ TROLL_HACK ]++;
		format( playerVariables[ playerid ][ pCheatingReason ], 64, "Vehicle Troll [W: %d]", playerVariables[ playerid ][ pCheating ][ TROLL_HACK ] );
		switch( playerVariables[ playerid ][ pCheating ][ TROLL_HACK ] )
		{
			case 1, 3, 5, 10, 15: AdminBroadCast( 1, COLOR_HOTORANGE, "* AdmWarn: %s(%i) e posibil sa foloseasca hack: "COL_LR"Vehicle Troll [W:%d]", username( playerid ), playerid, playerVariables[ playerid ][ pCheating ][ TROLL_HACK ] );
		}
		if( playerVariables[ playerid ][ pCheating ][ TROLL_HACK ] == 15 && !playerVariables[ playerid ][ pKicked ] && serverVariables[ anticheatStatus ] == true )
		{
			ServerBanPlayer( playerid, 30, 1, "Cheats (vehicles troll)" );
			ShowPlayerHackIsland( playerid, "vehicles troll" );
			return false;
		}
		return false;
	}*/
	#endif
	return true;
}
public OnVehicleStreamIn(vehicleid, forplayerid)
{
	for( new slot=0; slot<MAX_SLOTS; slot++ )
	{
		if( vehicleVariables[slot][forplayerid][Vehicle] == vehicleid )
		{
			SetVehicleParamsForPlayer(vehicleid, forplayerid, 0, 0);
		}
	}
	#if defined HEIST_SYSTEM
	if(playerVariables[forplayerid][pHeistStatus] != 0)
	{
		if(serverVariables[VehicleOwnerHeist][vehicleid] == playerVariables[forplayerid][pHeistOwner])
		{
			SetVehicleParamsForPlayer(vehicleid, forplayerid, 0, 0);
		}
	}
	#endif
	return true;
}
public OnVehicleStreamOut(vehicleid, forplayerid)
{
	return true;
}
public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	// Kind of security code i guess... 
	new len = strlen( inputtext );
	for( new i = 0; i < len; ++i )
	{
		if( inputtext [ i ] == '%' || inputtext [ i ] == ';' || inputtext [ i ] == '`' || inputtext [ i ] == '/' )
			inputtext [ i ] = '#';
	}

	// Load the rest of the dialogs 
	switch( dialogid )
	{
		#if defined CRATES
		case DIALOG_OPENCRATE:
		{
			if( response )
			{
				for(new i; i < 10; i++) 
				{
					if(playerVariables[ playerid ][ pCrateSkins ][ i ] == CrateSkinSaves[ playerid ])
					{
						playerVariables[ playerid ][ pCrateSkinAmount ][ i ]++;
					}
				}
			}
			else
			{
				playerVariables[ playerid ][ pCrates ]++;
				SendClientMessagef( playerid, COLOR_WHITE, "You decided not to keep your winnings in exchange for another spin." );
				
				format( gsString, 45, "Select action~n~You have %d crates.", playerVariables[ playerid ][ pCrates ] );
				PlayerTextDrawSetString( playerid, CratePlayer[ playerid ][ 0 ], gsString );
				PlayerTextDrawShow( playerid, CratePlayer[ playerid ][ 0 ] );
				SelectTextDraw( playerid, 0x9999BBBB );
			}
		}
		#endif
		case DIALOG_INSERT_EVENT:
		{
			if(response)
			{
				switch(GetPVarInt(playerid, "InsertSwitcher"))
				{
					case 0://command: /insertevent main
					{
						switch(listitem)
						{
							case 0: 
							{
								SetPVarInt(playerid, "InsertSwitcher", 1);
								ShowPlayerDialog(playerid, DIALOG_INSERT_EVENT, DIALOG_STYLE_INPUT, "SERVER: EVENT DATE", "Type date for event, must be a day in future !", " Continue", "Cancel");
							}
							case 1: 
							{
								SetPVarInt(playerid, "InsertSwitcher", 2);
								ShowPlayerDialog(playerid, DIALOG_INSERT_EVENT, DIALOG_STYLE_INPUT, "SERVER: EVENT HOUR", "Type hour for event, it must be 12, 17, 20, 21, 22, 23 !", " Continue", "Cancel");
							}
							case 2:
							{
								SetPVarInt(playerid, "InsertSwitcher", 3);
								ShowPlayerDialog(playerid, DIALOG_INSERT_EVENT, DIALOG_STYLE_INPUT, "SERVER: EVENT PRIZE", "If prize is money, job boost, vehicle or RP you must put here, ex: All licences for 100 hours | Job Boost 5 hours | Money: $15,000 | Car: Infernus (car) | RP: 5 Respect Points | etc", " Continue", "Cancel");
							}
							case 3:
							{
								SetPVarInt(playerid, "InsertSwitcher", 4);
								ShowPlayerDialog(playerid, DIALOG_INSERT_EVENT, DIALOG_STYLE_INPUT, "SERVER: EVENT ITEM", "Write here the prize you want to give.\n0 for money | 1 for respect points | 2 for licence | 3 for vehicle | 4 for vehicle slot | 5 for premium points | 6 for rob points | 7 for hidden color | 8 for premium account | 9 for job boost", " Continue", "Cancel");
							}
							case 4:
							{
								SetPVarInt(playerid, "InsertSwitcher", 5);
								ShowPlayerDialog(playerid, DIALOG_INSERT_EVENT, DIALOG_STYLE_INPUT, "SERVER: EVENT VALUE", "If prize is RP or money, put here exact value for them, ex: job boost: 5 | money: 15000 | rp: 3 | car: id of vehicle(use /vname)", " Continue", "Cancel");
							}
							case 5:
							{	
								SetPVarInt(playerid, "InsertSwitcher", 6);
								ShowPlayerDialog(playerid, DIALOG_INSERT_EVENT, DIALOG_STYLE_INPUT, "SERVER: EVENT TYPE", "Type type for event, it must be 0 - for picking a random player | 1 - for all players online at that hour and date !", " Continue", "Cancel");
							}
							case 6:
							{
								SetPVarInt(playerid, "InsertSwitcher", 7);
								gsString[0] = EOS;
								format(gsString, 400, "Event Info:\nDate: %d, Hour: %d, Prize: %s\nItem: %d, Value: %d, Type: %d", GetPVarInt(playerid, "PEventDate"), GetPVarInt(playerid, "PEventHour"), GetPVarStringEx(playerid, "PEventPrize"), GetPVarInt(playerid, "PEventItem"), GetPVarInt(playerid, "PEventValue"), GetPVarInt(playerid, "PEventType"));
								ShowPlayerDialog(playerid, DIALOG_INSERT_EVENT, DIALOG_STYLE_MSGBOX, "SERVER: ARE YOU SURE?", gsString, "YES", "NO");
							}
						}
					}
					case 1: // set date for event
					{
						SetPVarInt(playerid, "InsertSwitcher", 0);
						SetPVarInt(playerid, "PEventDate", strval(inputtext));
						String_InsertEvent(playerid);
					}
					case 2: // set hour for event
					{
						SetPVarInt(playerid, "InsertSwitcher", 0);
						SetPVarInt(playerid, "PEventHour", strval(inputtext));
						String_InsertEvent(playerid);
					}
					case 3: // set prize for event
					{
						SetPVarInt(playerid, "InsertSwitcher", 0);
						SetPVarString(playerid, "PEventPrize", inputtext);
						String_InsertEvent(playerid);
					}
					case 4: // set item for event
					{
						SetPVarInt(playerid, "InsertSwitcher", 0);
						SetPVarInt(playerid, "PEventItem", strval(inputtext));
						String_InsertEvent(playerid);
					}
					case 5: // set value for event
					{
						SetPVarInt(playerid, "InsertSwitcher", 0);
						SetPVarInt(playerid, "PEventValue", strval(inputtext));
						String_InsertEvent(playerid);
					}
					case 6: // set item for event
					{
						SetPVarInt(playerid, "InsertSwitcher", 0);
						SetPVarInt(playerid, "PEventType", strval(inputtext));
						String_InsertEvent(playerid);
					}
					case 7: // for safe, ask if its sure
					{
						if(response)
						{
							gsQuery[ 0 ] = EOS;
							mysql_format( g_Handle, gsQuery, sizeof gsQuery, "INSERT INTO `server_events` (`eventDate`, `eventHour`, `eventPrize`, `eventItem`, `eventValue`, `eventType`) VALUES (%d, %d, '%s', '%d', '%d', '%d')", GetPVarInt(playerid, "PEventDate"), GetPVarInt(playerid, "PEventHour"), GetPVarStringEx(playerid, "PEventPrize"), GetPVarInt(playerid, "PEventItem"), GetPVarInt(playerid, "PEventValue"), GetPVarInt(playerid, "PEventType"));
							mysql_tquery( g_Handle, gsQuery, "", "" );
							AdminBroadCast(1, COLOR_ADMCHAT, "Admin %s has created a new event, date: %d | hour: %d | prize: %s", username(playerid), GetPVarInt(playerid, "PEventDate"), GetPVarInt(playerid, "PEventHour"), GetPVarStringEx(playerid, "PEventPrize"));
							SetPVarInt(playerid, "PEventDate", 0);
							SetPVarInt(playerid, "PEventHour", 0);
							SetPVarString(playerid, "PEventPrize", "");
							SetPVarInt(playerid, "PEventItem", 0);
							SetPVarInt(playerid, "PEventValue", 0);
							SetPVarInt(playerid, "PEventType", 0);
						}
						else
						{
							SetPVarInt(playerid, "InsertSwitcher", 0);
							String_InsertEvent(playerid);
							SendClientMessage(playerid, COLOR_NEWBIE, "You can edit all events !");
						}
					}
				}
			}
		}
		case DIALOG_EDITAPP:
		{
			if(response)
			{
				new title[56];
				format(title, sizeof title, "Edit apartment: %d", listitem+1);
				ShowPlayerDialog(playerid, DIALOG_EDITAPP1, DIALOG_STYLE_LIST, title, "Rent price\nView all renters\nLock Apartment\nUnlock apartment", "Select", "Cancel");

				SetPVarInt(playerid, "ap_id", listitem+1);
			}
		}
		case DIALOG_EDITAPP1:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						ShowPlayerDialog(playerid, DIALOG_EDITAPP2, DIALOG_STYLE_INPUT, "Rent price", "Scrie suma de bani pentru rent", "Ok", "Cancel");
					}
					case 1:
					{
						gsQuery[0] = EOS;

						mysql_format(g_Handle, gsQuery, sizeof gsQuery, "SELECT * FROM `server_accounts` WHERE `playerApartment` = '%d'", GetPVarInt(playerid, "ap_id"));
						return mysql_pquery( g_Handle, gsQuery, "load_rents", "i", playerid ); 
					}
					case 2:
					{
						if(GetGVarInt("apartment_LOCK", GetPVarInt(playerid, "ap_id")) == 1)
							return SendClientMessage(playerid, -1, "This apartment is locked.");

						SetGVarInt("apartment_LOCK", 1, GetPVarInt(playerid, "ap_id"));

						SendClientMessage(playerid, -1, "This apartment is now locked.");

						UpdateApartment(GetPVarInt(playerid, "ap_id"));
					}
					case 3:
					{
						if(GetGVarInt("apartment_LOCK", GetPVarInt(playerid, "ap_id")) == 2)
							return SendClientMessage(playerid, -1, "This apartment is unlocked.");

						SetGVarInt("apartment_LOCK", 2, GetPVarInt(playerid, "ap_id"));

						SendClientMessage(playerid, -1, "This apartment is now unlocked.");

						UpdateApartment(GetPVarInt(playerid, "ap_id"));
					}
				}
			}
		}
		case DIALOG_EDITAPP2:
		{
			if(response)
			{
				if(strval(inputtext) > 100 || strval(inputtext) < 5000)
					return SendClientMessage(playerid, -1, "Suma minima: $100 si suma maxima: $5,000.");

                new ap_id = GetPVarInt(playerid, "ap_id");
				SetGVarInt("apartment_RENT", strval(inputtext), ap_id);

				SendClientMessagef(playerid, -1, "Suma de rent a apartamentului %d este acum $%s.", GetPVarInt(playerid, "ap_id"), FormatNumber(strval(inputtext)));

				gsQuery[0] = EOS;

				mysql_format(g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_apartments` SET `apartmentRENT` = '%d' WHERE `apartmentKEY` = '%d'", inputtext, GetPVarInt(playerid, "ap_id"));
				mysql_tquery(g_Handle, gsQuery, "", "");

				UpdateApartment(GetPVarInt(playerid, "ap_id"));

			}
		}
		case DIALOG_EDITAPP3:
		{
			if(response)
			{
				playerVariables[ playerid ][ pSelected ] = listitem;

				ShowPlayerDialog(playerid, DIALOG_EDITAPP4, DIALOG_STYLE_LIST, "Manage Player Rent", "Remove from rent", "Yes", "No");
			}
		}
		case DIALOG_EDITAPP4:
		{
			if(response)
			{
				if( GetGVarInt( "apartment_KEY_p", playerVariables[ playerid ][ pSelected ] ) == GetGVarInt("bus_OwnerKey", HOTEL_DB_ID) )
					return SendClientMessage( playerid, COLOR_GREY, "Nu te poti da afara singur!" );

				new PlayerKey = GetGVarInt( "apartment_KEY_p", playerVariables[ playerid ][ pSelected ] ),
				    ap_id = GetGVarInt( "apartment_ID_p", playerVariables[ playerid ][ pSelected ] ),
				    Player = GetPlayerIDFromKey( PlayerKey );

				if(IsPlayerConnected(Player))
				{
					SendClientMessagef(Player, -1, ""COL_LR"Administratorul hotelului(%s) te-a dat afara din hotel!", GetGVarStringEx("bus_Owner", HOTEL_DB_ID));
					SendClientMessagef(playerid, -1, " "COL_LR"L-ai dat pe %s afara din apartament-ul: %d.", GetGVarStringEx("apartment_NAME_p", playerVariables[playerid][pSelected]), playerVariables[Player][pRentAP]);

                    SetGVarInt("apartment_RENTERS", GetGVarInt("apartment_RENTERS", playerVariables[Player][pRentAP]) - 1, playerVariables[Player][pRentAP]);

                    gsQuery[ 0 ] = EOS;
					mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_apartments` SET `apartmentRENTERS` = apartmentRENTERS - 1  WHERE `id` = %d", ap_id );
					mysql_tquery( g_Handle, gsQuery, "", "" );
					UpdateApartment(ap_id);

					playerVariables[Player][pRentAP] = 0;

					if( playerVariables[ playerid ][ pSpawnType ] == 3 )
		                playerVariables[ playerid ][ pSpawnType ] = 0;
				}
				else 
				{
					gsQuery[0] = EOS;
		            mysql_format(g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerApartment` = 0, `playerSpawnType` = 0 WHERE `id`='%d'", PlayerKey);
		            mysql_tquery(g_Handle, gsQuery, "", "");

		            gsString[0] = EOS;
		            format(gsString, sizeof gsString, "Administratorul hotelului(%s) te-a dat afara din hotel.", GetGVarStringEx("bus_Owner", HOTEL_DB_ID));
		            InsertPlayerMail(PlayerKey, gsString);

		            gsQuery[ 0 ] = EOS;
					mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_apartments` SET `apartmentRENTERS` = apartmentRENTERS - 1  WHERE `id` = %d", ap_id );
					mysql_tquery( g_Handle, gsQuery, "", "" );

		            SetGVarInt("apartment_RENTERS", GetGVarInt("apartment_RENTERS", ap_id) - 1, ap_id);
					UpdateApartment(ap_id);
				}
			}
		}
		case DIALOG_INTERIORS:
		{
			if(response)
			{
				SendClientMessagef(playerid, COLOR_WHITE, "Interior %s [id in /interiorlist: %d] - interior id: %d.", IntName[listitem], listitem, IntArray2[listitem]);
			}
		}
		case DIALOG_FNC:
		{
			if(response)
			{
				new ls_NewNick[ MAX_PLAYER_NAME ];
				if( sscanf( inputtext, "s[24]", ls_NewNick ) )
				{
					SendClientMessage( playerid, COLOR_GREY, "Trebuie sa introduci un nume valid!" );
					ShowPlayerDialog(playerid, DIALOG_FNC, DIALOG_STYLE_INPUT, "SERVER: Change Nickname", "You're forced by an administrator to change your name. In case you refuse you will receive "COL_R"Permanent BAN.\nYour actual name contains injuries, advertise to other server or vulgar language.", "Change", "");
					return 1;
				}

				if( strlen( ls_NewNick ) < 3 || strlen( ls_NewNick ) > MAX_PLAYER_NAME )
				{
					SendClientMessage( playerid, COLOR_GREY, "Lungimea acestui nume este prea mare/mica!" );
					ShowPlayerDialog(playerid, DIALOG_FNC, DIALOG_STYLE_INPUT, "SERVER: Change Nickname", "You're forced by an administrator to change your name. In case you refuse you will receive "COL_R"Permanent BAN.\nYour actual name contains injuries, advertise to other server or vulgar language.", "Change", "");
					return 1;
				}
				// Escape the new string
				mysql_escape_string( ls_NewNick, ls_NewNick );

				gsQuery[ 0 ] = EOS;
				mysql_format( g_Handle, gsQuery, sizeof gsQuery, "SELECT `id` FROM `server_accounts` WHERE `username` = '%s'", ls_NewNick );
				mysql_tquery( g_Handle, gsQuery, "ForceChangeName", "is", playerid, ls_NewNick );
			}
			else
			{
				if(FNCCount[playerid] == 3)
				{
					SendClientMessage(playerid, COLOR_RED, "You refused to change your nickname for three times, you will get banned by our administrators in a few seconds.");
					AdminBroadCast(1, COLOR_RED, "AdmInfo: "COL_R"%s refused to change his nickname for three times (ban him permanently for refusing change name).", username(playerid));
					return 1;
				}
				FNCCount[playerid]++;
				AdminBroadCast(1, COLOR_YELLOW, "AdmInfo: %s refused to change his nickname. (asked by %s) #%d", username(playerid), username(FNCBY[playerid]), FNCCount[playerid]);
				SendClientMessage(playerid, COLOR_GREY, "If you refuse to change your nickname for three time you will get banned.");
				ShowPlayerDialog(playerid, DIALOG_FNC, DIALOG_STYLE_INPUT, "SERVER: Change Nickname", "You're forced by an administrator to change your name. In case you refuse you will receive "COL_R"Permanent BAN.\nYour actual name contains injuries, advertise to other server or vulgar language.", "Change", "");
			}
		}
		case DIALOG_SELECT_RACE_MAP:
		{
			if(response)
			{
				raceVariables[noonevoted1] = 1;
				raceVariables[raceVoteTrack][listitem]++;
				playerVariables[playerid][pRaceVotedMap] = 1;
				gsString[0] = EOS;
				format(gsString, sizeof(gsString), "%s voted for %s.", playerVariables[playerid][pNormalName], GetTrackName(listitem));
				SendRaceArenaMessage(COLOR_RACEMESSAGE, gsString);
			}
			else return ShowPlayerDialog(playerid, DIALOG_SELECT_RACE_MAP, DIALOG_STYLE_LIST, "Race Arena: Vote Track", "Airport Race\nBeach Race\nChilliad Race\nHard Race", "Vote", "");
		}
		case DIALOG_SELECT_RACE_TYPE:
		{
			if(response)
			{
				raceVariables[noonevoted2] = 1;
				raceVariables[raceVoteType][listitem]++;
				playerVariables[playerid][pRaceVotedType] = 1;
				gsString[0] = EOS;
				switch(listitem)
				{
					case 0:	format(gsString, sizeof(gsString), "%s voted for classic race mode [collisions included].", playerVariables[playerid][pNormalName]);
					case 1:	format(gsString, sizeof(gsString), "%s voted for classic race mode [no-collisions].", playerVariables[playerid][pNormalName]);
				}
				SendRaceArenaMessage(COLOR_RACEMESSAGE, gsString);
			}
			else return ShowPlayerDialog(playerid, DIALOG_SELECT_RACE_TYPE, DIALOG_STYLE_LIST, "Race Arena: Vote Type", "Classic [collision]\nClassic [no-colission]", "Vote", "");
		}
		case DIALOG_SELECT_RACE_VEHICLE:
		{
			if(response)
			{
				raceVariables[noonevoted3] = 1;
				gsString[0] = EOS;
				switch(listitem)
				{
					case 0:	format(gsString, sizeof(gsString), "%s voted for convertibles category.", playerVariables[playerid][pNormalName]);
					case 1:	format(gsString, sizeof(gsString), "%s voted for lowriders category.", playerVariables[playerid][pNormalName]);
					case 2:	format(gsString, sizeof(gsString), "%s voted for off-road category.", playerVariables[playerid][pNormalName]);
					case 3:	format(gsString, sizeof(gsString), "%s voted for sport-vehicles category.", playerVariables[playerid][pNormalName]);
					case 4:	format(gsString, sizeof(gsString), "%s voted for saloons category.", playerVariables[playerid][pNormalName]);
					case 5:	format(gsString, sizeof(gsString), "%s voted for motorcycles category.", playerVariables[playerid][pNormalName]);
				}
				SendRaceArenaMessage(COLOR_RACEMESSAGE, gsString);
				raceVariables[raceVoteVehicle][listitem]++;
				playerVariables[playerid][pRaceVotedVehicle] = 1;
			}
			else return ShowPlayerDialog(playerid, DIALOG_SELECT_RACE_VEHICLE, DIALOG_STYLE_LIST, "Race Arena: Vote Vehicle Category", "Convertibles\nLowriders\nOff Road\nSport Vehicles\nSaloons\nMotorcycles", "Vote", "");
		}
		case DIALOG_SELECT_RACE_VEHICLEE:
		{
			if(response)
			{
				raceVariables[raceVehicleID][listitem]++;
				playerVariables[playerid][pRaceVotedVehicleID] = 1;
			}
			else return ShowPlayerDialog(playerid, DIALOG_SELECT_RACE_VEHICLEE, DIALOG_STYLE_LIST, "Race Arena: Vote Vehicle", RaceVehicle_ID(raceVariables[raceVehicle]), "Vote", "");
		}
		#if defined HEIST_SYSTEM
		case DIALOG_HEIST:
		{
			if( response )
			{
				new heistKey = GetHeistID( playerid );
				if( heistKey == -404 )
					return SendClientMessage( playerid, COLOR_ULTRARED, ERROR_MESSAGE"Trebuie sa fii intr-un checkpoint de Heist!" );

				playerVariables[playerid][pHeistStatus] = 1;
				playerVariables[playerid][pHeistKey] = heistKey;
				playerVariables[playerid][pHeistOwner] = playerid;
				playerVariables[playerid][pHeistCount] = 1;

				Iter_Init(Heists);

				Iter_Add(Heists[playerid], playerid);
				//SetPlayerCheckpoint( playerid, GetGVarFloat( "heist_PosX", heistKey-1 ), GetGVarFloat( "heist_PosY", heistKey-1 ), GetGVarFloat( "heist_PosZ", heistKey-1 ), 5.0 );

				InfoTD_MSG( playerid, 10000, "Foloseste comanda ~r~~h~/hinvite ~w~~h~pentru a invita 3 prieteni in Heist!~n~Jucatorii se vor aduna in acest Checkpoint!" );
			}
		}
		#endif
		case DIALOG_VEHICLE_VIP_COLOR:
		{
			if( response )
			{
				new vehicleID = GetPlayerVehicleID( playerid ),
					PlayerSlot = playerVariables[ playerid ][ VehicleSlot ];

				if( GetPlayerState( playerid ) != PLAYER_STATE_DRIVER ) 
					return SendClientMessage( playerid, COLOR_GREY, "You have to be in your personal vehicle!" );

				if( vehicleVariables[ PlayerSlot ][ playerid ][ Vehicle ] != vehicleID ) 
					return SendClientMessage( playerid, COLOR_GREY, "You can only change colors on your personal vehicle!" );

				format(vehicleVariables[ PlayerSlot ][ playerid ][ vehicleVIPColor ], 40, "%s", CreateVehicleVipColor( listitem ));
				DestroyVehicle_Text( playerid, PlayerSlot );
				SendClientMessage( playerid, COLOR_LIGHTRED, "Move your vehicle to see the text with your new color!" );
				CreateVehicleText( playerid, PlayerSlot, vehicleVariables[ PlayerSlot ][ playerid ][ VehicleVIPText ] );

				gsQuery[ 0 ] = EOS;
				mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_personalvehicles` SET `vehicleVIPColor` = '%s' WHERE `vehicleID` = '%d'", vehicleVariables[ PlayerSlot ][ playerid ][ vehicleVIPColor ], vehicleVariables[ PlayerSlot ][ playerid ][ VehicleID ] );
				mysql_tquery( g_Handle, gsQuery, "", "" );
			}
		}
		case DIALOG_VEHICLE_VIP_WHEELS:
		{
			if( response )
			{
				new vehicleID = GetPlayerVehicleID( playerid ),
					PlayerSlot = playerVariables[ playerid ][ VehicleSlot ];

				if( GetPlayerState( playerid ) != PLAYER_STATE_DRIVER ) 
					return SendClientMessage( playerid, COLOR_GREY, "You have to be in your personal vehicle!" );

				if( vehicleVariables[ PlayerSlot ][ playerid ][ Vehicle ] != vehicleID ) 
					return SendClientMessage( playerid, COLOR_GREY, "You can only change rims on your personal vehicle!" );

				// < Change the personal's vehicle wheels )
				vehicleVariables[ PlayerSlot ][ playerid ][ VehicleVIPWheel ] = listitem;
				switch( listitem )
				{
					case 0: AddVehicleComponent( vehicleID, 1077 ), InfoTD_MSG( playerid, 5000, "~y~~h~Classic ~w~~h~rims added to your personal vehicle" );
					case 1: AddVehicleComponent( vehicleID, 1078 ), InfoTD_MSG( playerid, 5000, "~y~~h~Twist ~w~~h~rims added to your personal vehicle" );
					case 2: AddVehicleComponent( vehicleID, 1080 ), InfoTD_MSG( playerid, 5000, "~y~~h~Switch ~w~~h~rims added to your personal vehicle" );
					case 3: AddVehicleComponent( vehicleID, 1083 ), InfoTD_MSG( playerid, 5000, "~y~~h~Dollar ~w~~h~rims added to your personal vehicle" );
					case 4: AddVehicleComponent( vehicleID, 1084 ), InfoTD_MSG( playerid, 5000, "~y~~h~Trance ~w~~h~rims added to your personal vehicle" );
				}
				gsQuery[ 0 ] = EOS;
				mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_personalvehicles` SET `vehicleVIPWheel` = %d WHERE `vehicleID` = %d", listitem, vehicleVariables[ PlayerSlot ][ playerid ][ VehicleID ] );
				mysql_tquery( g_Handle, gsQuery, "", "" );
			}
		}
		case DIALOG_VEHICLE_VIP_NEON:
		{
			new vehicleID = GetPlayerVehicleID( playerid ),
				PlayerSlot = playerVariables[ playerid ][ VehicleSlot ];

			if( response )
			{
				if( GetPlayerState( playerid ) != PLAYER_STATE_DRIVER ) 
					return SendClientMessage( playerid, COLOR_GREY, "You have to be in your personal vehicle!" );

				if( vehicleVariables[ PlayerSlot ][ playerid ][ Vehicle ] != vehicleID ) 
					return SendClientMessage( playerid, COLOR_GREY, "You can only change neon on your personal vehicle!" );

				InfoTD_MSG( playerid, 5000, "Your vehicle's neon has been ~y~~h~updated~w~~h~!" );
				vehicleVariables[ PlayerSlot ][ playerid ][ VehicleVIPNeon ] = listitem;
				DestroyVehicle_Neon( playerid, PlayerSlot );
				CreateVehicleNeon( playerid, PlayerSlot );

				gsQuery[ 0 ] = EOS;
				mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_personalvehicles` SET `vehicleVIPNeon` = %d WHERE `vehicleID` = %d", listitem, vehicleVariables[ PlayerSlot ][ playerid ][ VehicleID ] );
				mysql_tquery( g_Handle, gsQuery, "", "" );
			}
			else
			{
				InfoTD_MSG( playerid, 5000, "Your vehicle's neon has been ~r~~h~removed~w~~h~!" );
				vehicleVariables[ PlayerSlot ][ playerid ][ VehicleVIPNeon ] = INVALID_VEHICLE_ID;
				DestroyVehicle_Neon( playerid, PlayerSlot );

				gsQuery[ 0 ] = EOS;
				mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_personalvehicles` SET `vehicleVIPNeon` = 65535 WHERE `vehicleID` = %d", vehicleVariables[ PlayerSlot ][ playerid ][ VehicleID ] );
				mysql_tquery( g_Handle, gsQuery, "", "" );
			}
		}
		case DIALOG_DEALER_CONFIRM_SELL:
		{
			if( response )
			{
				// < Get curent player vehicle slot >
				new vehicleID = GetPlayerVehicleID( playerid ),
					PlayerSlot = playerVariables[ playerid ][ VehicleSlot ];

				switch( playerVariables[ playerid ][ pCity ] )
				{
					case 0:
					{
						if( !IsPlayerInRangeOfPoint( playerid, 30.0, 327.0816, -1516.5175, 36.0391 ) )
						{
							GPS_Location( playerid, "DealerShip LS", 327.0816, -1516.5175, 36.0391 );
							return SendClientMessage( playerid, COLOR_GREY, "Trebuie sa fii la 30m de un Dealership pentru a folosi comanda!" );
						}
					}
					case 1:
					{
						if( !IsPlayerInRangeOfPoint( playerid, 30.0, 2435.2942,1654.4897,10.8203 ) )
						{
							GPS_Location( playerid, "DealerShip LV", 2435.2942,1654.4897,10.8203 );
							return SendClientMessage( playerid, COLOR_GREY, "Trebuie sa fii la 30m de un Dealership pentru a folosi comanda!" );
						}
					}
				}
				if( vehicleVariables[ PlayerSlot ][ playerid ][ Vehicle ] != vehicleID )
					return InfoTD_MSG( playerid, 7000, "~r~~h~ERROR: ~w~~h~Trebuie sa fii in masina personala!" );

				//if( vehicleVariables[ PlayerSlot ][ playerid ][ PP ] != 0 ) return InfoTD_MSG( playerid, 7000, "~r~~h~ERROR: ~w~~h~Nu poti vinde o masina cumparata cu PP!" );
				#if defined DEBUG_SERVER
					SendClientMessagef( playerid, COLOR_YELLOW, "Vehicle[id:%d] price: %d", playerVariables[ playerid ][ Vehicle ][ PlayerSlot ], vehicleVariables[ PlayerSlot ][ playerid ][ Money ] );
				#endif

				// < Give back half >
				if( vehicleVariables[ PlayerSlot ][ playerid ][ Money ] != 0 )
				{ 
					new moneyBack = vehicleVariables[ PlayerSlot ][ playerid ][ Money ] / 2;
					playerVariables[ playerid ][ pMoney ] += moneyBack; // <Receive 75% from the price)
					InfoTD_MSG( playerid, 10000, "Ai vandut masina personala si ai primit 1/2 din valoarea acesteia!" ); // < Send chat information )
					gsString[ 0 ] = EOS;
					format( gsString, sizeof gsString, "%s[user:%d] sold his %s [car:%d] and got back $%s.", playerVariables[ playerid ][ pNormalName ], GetPlayerMysqlID(playerid), VehicleName( vehicleVariables[ PlayerSlot ][ playerid ][ VehicleModelID ] ), playerVariables[ playerid ][ Vehicle ][ PlayerSlot ], FormatNumber(moneyBack) );
					submitToAdmins(gsString, COLOR_YELLOW);
					InsertPlayerLog( GetPlayerMysqlID(playerid), 0, gsString );
				}
				else if( vehicleVariables[ PlayerSlot ][ playerid ][ PP ] != 0 )
				{
					new moneyBack = vehicleVariables[ PlayerSlot ][ playerid ][ PP ] / 2;
					playerVariables[ playerid ][ pPremiumPoints ] += moneyBack;
					InfoTD_MSG( playerid, 10000, "Ai vandut masina personala si ai primit %d PP [1/2]", moneyBack ); // < Send chat information )
					gsString[ 0 ] = EOS;
					format( gsString, sizeof gsString, "%s[user:%d] sold his %s [car:%d] and got back %d PP.", playerVariables[ playerid ][ pNormalName ], GetPlayerMysqlID(playerid), VehicleName( vehicleVariables[ PlayerSlot ][ playerid ][ VehicleModelID ] ), playerVariables[ playerid ][ Vehicle ][ PlayerSlot ], moneyBack );
					submitToAdmins(gsString, COLOR_YELLOW);
					InsertPlayerLog( GetPlayerMysqlID(playerid), 0, gsString );
				}
				else
				{
					InfoTD_MSG( playerid, 10000, "Ai vandut masina personala castigata la event/giftbox!~n~Masinile castigate nu au valoare in bani/puncte premium!" ); // < Send chat information )
					gsString[ 0 ] = EOS;
					format( gsString, sizeof gsString, "%s[user:%d] sold his %s [car:%d] from event/giftbox.", playerVariables[ playerid ][ pNormalName ], GetPlayerMysqlID(playerid), VehicleName( vehicleVariables[ PlayerSlot ][ playerid ][ VehicleModelID ] ), playerVariables[ playerid ][ Vehicle ][ PlayerSlot ] );
					submitToAdmins(gsString, COLOR_YELLOW);
					InsertPlayerLog( GetPlayerMysqlID(playerid), 0, gsString );
				}
				// < Set timer )
				vehicleVariables[ PlayerSlot ][ playerid ][ Sold ] = true;
				RemovePlayerFromVehicle( playerid );
				SetTimerEx( "SellVehicle", 1000, false, "dd", playerid, PlayerSlot );
			}
		}
		case DIALOG_COP_SUSPECT:
		{
			if( response )
			{
				new Player = GetPVarInt( playerid, "su_Player" );
				if( !IsPlayerConnected( Player ) )
					return SendClientMessage( playerid, COLOR_GREY, "Suspect has been disconnected meanwhile!" );

				if( playerVariables[ Player ][ pWanted ] + SU_ACTIONS[ listitem ][ su_Level ] > 6 )
					playerVariables[ Player ][ pWanted ] = 6, SetPlayerWantedLevel( Player, 6 );
				else
					playerVariables[ Player ][ pWanted ] += SU_ACTIONS[ listitem ][ su_Level ], SetPlayerWantedLevel( Player, playerVariables[ Player ][ pWanted ] );

				playerVariables[ Player ][ pCrimes ]++;
				playerVariables[ Player ][ pWantedTime ] = 600;
				UpdateScadeWanted( Player, playerVariables[ Player ][ pWantedTime ] );

				if(!Iter_Contains(server_wanteds, Player)) Iter_Add(server_wanteds, Player), server_wanteds++;

				playerVariables[ Player ][ pCrimeReason ] = EOS;
				format( playerVariables[ Player ][ pCrimeReason ], 128, "%s - reporter: %s", SU_ACTIONS[ listitem ][ su_Crime ], playerVariables[ playerid ][ pNormalName ] );

				gsString[ 0 ] = EOS;
				format( gsString, sizeof gsString, "Dispatch: %s[%d] has comitted a crime: '%s'. Reporter: %s (%d). W: +%d | New Wanted Level: %d", 
					playerVariables[ Player ][ pNormalName ], Player, SU_ACTIONS[ listitem ][ su_Crime ], playerVariables[ playerid ][ pNormalName ], playerid, SU_ACTIONS[ listitem ][ su_Level ], playerVariables[ Player ][ pWanted ] );
				sendDepartmentMessage( COLOR_RADIOCHAT, gsString );

				SendClientMessagef( Player, COLOR_RED2, "Ai comis o infractiune: %s, raportat de: %s. W: +%d. Nivel urmarire nou: %d. ", SU_ACTIONS[ listitem ][ su_Crime ], playerVariables[ playerid ][ pNormalName ], SU_ACTIONS[ listitem ][ su_Level ], playerVariables[ Player ][ pWanted ] );
				SendClientMessage( playerid, COLOR_COOLBLUE, "> Acordarea unui wanted fara dovezi va duce la sanciuni in cazul unor plangeri din panel." );
			}
		}
		case DIALOG_AP_ENTER:
		{
			new ApartmentIDENT = GetPVarInt( playerid, "apartment_BREAK" );
			if( response && ApartmentIDENT != -404 )
			{
				if( playerVariables[ playerid ][ pFaction ] == 13 ) // Hitman
				{
					if( playerVariables[ playerid ][ pWanted ] <= 5 )
					{
						playerVariables[ playerid ][ pWanted ]++;
						SetPlayerWantedLevel( playerid, playerVariables[ playerid ][ pWanted ] );
						PlayCrimeReportForPlayer( playerid, playerid, 6 );

						if(!Iter_Contains(server_wanteds, playerid)) Iter_Add(server_wanteds, playerid), server_wanteds++;

						playerVariables[ playerid ][ pWantedTime ] = 600;
						UpdateScadeWanted( playerid, playerVariables[ playerid ][ pWantedTime ] );

						playerVariables[ playerid ][ pCrimeReason ] = EOS;
						format( playerVariables[ playerid ][ pCrimeReason ], 128, "breaking an entrance - reporter: Unknown" );

						gsString[ 0 ] = EOS;
						format( gsString, sizeof gsString, "Dispatch: %s[%d] has comitted a crime: breaking an entrance. Reporter: unknown W: +1 | New Wanted Level: %d", username( playerid ), playerid, playerVariables[ playerid ][ pWanted ] );
						sendDepartmentMessage( COLOR_RADIOCHAT, gsString );	
					}
				}
				SetPVarInt( playerid, "is_in_apartament", 1 );
				DeletePVar( playerid, "ApartmentIDENT" );
				nearByMessage( playerid, COLOR_PURPLE, NBM_DIST, "* %s breaks down the door and enters the building.", playerVariables[ playerid ][ pNormalName ] );
				SetPlayerFacingAngle(playerid, GetGVarFloat("apartment_ANGLE", ApartmentIDENT));
				SetPlayerPos( playerid, GetGVarFloat( "apartment_EXITX", ApartmentIDENT ), GetGVarFloat( "apartment_EXITY", ApartmentIDENT ), GetGVarFloat( "apartment_EXITZ", ApartmentIDENT ) );
			}
		}
		case DIALOG_HOUSE_ENTER:
		{
			new HouseIDENT = GetPVarInt( playerid, "break_House" );
			if( response && HouseIDENT != -404 )
			{
				if( playerVariables[ playerid ][ pFaction ] == 13 ) // Hitman
				{
					if( playerVariables[ playerid ][ pWanted ] <= 5 )
					{
						playerVariables[ playerid ][ pWanted ]++;
						SetPlayerWantedLevel( playerid, playerVariables[ playerid ][ pWanted ] );
						PlayCrimeReportForPlayer( playerid, playerid, 6 );

						if(!Iter_Contains(server_wanteds, playerid)) Iter_Add(server_wanteds, playerid), server_wanteds++;

						playerVariables[ playerid ][ pWantedTime ] = 600;
						UpdateScadeWanted( playerid, playerVariables[ playerid ][ pWantedTime ] );

						playerVariables[ playerid ][ pCrimeReason ] = EOS;
						format( playerVariables[ playerid ][ pCrimeReason ], 128, "breaking an entrance - reporter: Unknown" );

						gsString[ 0 ] = EOS;
						format( gsString, sizeof gsString, "Dispatch: %s[%d] has comitted a crime: breaking an entrance. Reporter: unknown W: +1 | New Wanted Level: %d", username( playerid ), playerid, playerVariables[ playerid ][ pWanted ] );
						sendDepartmentMessage( COLOR_RADIOCHAT, gsString );	
					}
				}
				DeletePVar( playerid, "break_House" );
				nearByMessage( playerid, COLOR_PURPLE, NBM_DIST, "* %s breaks down the door and enters the building.", playerVariables[ playerid ][ pNormalName ] );
				SetPlayerInterior( playerid, GetGVarInt( "house_Interior", HouseIDENT ) );
				SetPlayerVirtualWorld( playerid, GetGVarInt( "house_Virtual", HouseIDENT ) );
				SetPlayerPos( playerid, GetGVarFloat( "house_ExitX", HouseIDENT ), GetGVarFloat( "house_ExitY", HouseIDENT ), GetGVarFloat( "house_ExitZ", HouseIDENT ) );
			}
		}
		case DIALOG_CHANGE_SPAWN:
		{
			if( response )
			{
				switch( listitem )
				{
					case 0: playerVariables[ playerid ][ pSpawnType ] = listitem, SendClientMessage( playerid, COLOR_WHITE, "Your spawn has been changed!" );
					case 1:
					{
						if( !playerVariables[ playerid ][ pFaction ] )
							return SendClientMessage( playerid, COLOR_GREY, "You're not a member of any faction!" );

						playerVariables[ playerid ][ pSpawnType ] = listitem, SendClientMessage( playerid, COLOR_WHITE, "Your spawn has been changed!" );
					}
					case 2:
					{
						if( !playerVariables[ playerid ][ pHouse ] && !playerVariables[ playerid ][ pRentRoom ] )
							return SendClientMessage( playerid, COLOR_GREY, "You don't have any house or active rent!" );

						playerVariables[ playerid ][ pSpawnType ] = listitem, SendClientMessage( playerid, COLOR_WHITE, "Your spawn has been changed!" );
					}
					case 3:
					{
						if(!playerVariables[playerid][pRentAP])
							return SendClientMessage(playerid, -1, "You don't have rent at apartment.");

						playerVariables[playerid][pSpawnType] = listitem, SendClientMessage(playerid, COLOR_WHITE, "Your spawn has been changed.");
					}
					#if defined CITY_LV
					case 4:
					{
						switch( playerVariables[ playerid ][ pCity ] )
						{
							case 0: playerVariables[ playerid ][ pCity ] = 1, SendClientMessage( playerid, COLOR_WHITE, "Your City has been changed to "COL_LYE"Las Venturas" );
							case 1: playerVariables[ playerid ][ pCity ] = 0, SendClientMessage( playerid, COLOR_WHITE, "Your City has been changed to "COL_LYE"Los Santos" );
						}
						gsQuery[ 0 ] = EOS;
						mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerCity` = %d WHERE `id` = %d", playerVariables[ playerid ][ pCity ], GetPlayerMysqlID(playerid) );
						mysql_tquery( g_Handle, gsQuery, "", "" );
					}
					#endif
				}
			}
		}
		case DIALOG_REPORT_LIST:
		{
			if( response )
			{
				switch( listitem )
				{
					case 0:
					{
						gsBigString[ 0 ] = EOS;
						strcat( gsBigString, "Cont blocat\n");
						strcat( gsBigString, "Daca ai contul blocat automat va trebui sa astepti 72 de ore pana cand va fi deblocat.\n");
						strcat( gsBigString, "Daca ai contul blocat de catre un admin, deschide un tichet pe "SERVER_PANEL"\n");
						strcat( gsBigString, "De acolo vei putea deschide un ticket pentru a discuta cu adminii despre ce a cauzat blocarea contului tau.\n");
						strcat( gsBigString, "Adminii NU iti vor debloca contul din joc. Nu are rost sa intrebi pe /report cum poti sa iti deblochezi contul. Nu vei primi raspuns.\n\n");
						strcat( gsBigString, "Cont spart\n");
						strcat( gsBigString, "Daca ai contul spart, tot ce poti face e sa deschizi un ticket si sa astepti un raspuns. De obicei se primesc raspunsuri in mai putin de 24 ore.\n");
						strcat( gsBigString, "Daca ti-a fost spart contul e DOAR vina ta. Nu sunt adminii vinovati si nimeni nu are vreo obligatie de a te ajuta.\n");
						strcat( gsBigString, "Totusi, incercam sa ajutam playerii ce pot fi ajutati. Deci, deschide un ticket si asteapta un raspuns.\n");
						strcat( gsBigString, "Pentru a deschide un ticket, intra pe "SERVER_PANEL" > Ticket > Deschide ticket nou.\n");
						strcat( gsBigString, "Nu da /report pentru a zice adminilor sa raspunda mai repede la tickete. Vei primi suspend pe /report si atat.");
						ShowPlayerDialog( playerid, DIALOG_NULL, DIALOG_STYLE_MSGBOX, "Cont blocat", gsBigString, "Inchide", "" );
					}


					case 1:
					{
						ShowPlayerDialog( playerid, DIALOG_REPORT_DM, DIALOG_STYLE_LIST, "Raportare DM", "Nu stiu numele playerului care m-a atacat\nStiu ID-ul playerului care m-a atacat", "Selecteaza", "Inapoi" );
					}
					case 2:
					{
						ShowPlayerDialog( playerid, DIALOG_REPORT_CH, DIALOG_STYLE_LIST, "Raportare Cheater", "Nu stiu numele playerului ce foloseste cheat-uri\nStiu ID-ul playerului ce foloseste cheat-uri", "Selecteaza", "Inapoi" );
					}
					case 3:
					{
						gsBigString[ 0 ] = EOS;
						strcat( gsBigString, "Pentru a dona si a primi bunuri pe acest server, trimiteti-ne un e-mail.\n");
						strcat( gsBigString, "E-Mail: plati@LURK.ro\nPe viitor donatiile se vor face direct din panel.");
						ShowPlayerDialog( playerid, DIALOG_NULL, DIALOG_STYLE_MSGBOX, "Donatii/Plati", gsBigString, "Inchide", "" );
					}
					case 4: // stuck
					{
						AdminBroadCast( 1, COLOR_FRED, "Report from %s [%d, level %d]: Sunt blocat/cad sub harta/doresc spawn.", username( playerid ), playerid, playerVariables[ playerid ][ pLevel ] );
						SendClientMessage( playerid, 0xF3FF02FF, "Your report message was sent to Admins and Helpers!" );

						playerVariables[ playerid ][ pReportType ] = REPORT_STUCK;
						playerVariables[ playerid ][ pReportTimer ] = 60;
						playerVariables[ playerid ][ pReported ] = 1;
						Iter_Add(server_reports, playerid);
						server_reports++;
						playerVariables[playerid][pReportedID] = playerid;
						format( playerVariables[ playerid ][ pReportMessage ], 256, "%s", "Sunt blocat/cad sub harta/doresc spawn." );
					}
					case 5: // afacere
					{
						AdminBroadCast( 1, COLOR_FRED, "Report from %s [%d, level %d]: Am nevoie de un admin pentru o afacere!", username( playerid ), playerid, playerVariables[ playerid ][ pLevel ] );
						SendClientMessage( playerid, 0xF3FF02FF, "Your report message was sent to Admins and Helpers!" );

						playerVariables[ playerid ][ pReportType ] = 0;
						playerVariables[ playerid ][ pReportTimer ] = 60;
						playerVariables[ playerid ][ pReported ] = 1;
						Iter_Add(server_reports, playerid);
						server_reports++;
						playerVariables[playerid][pReportedID] = playerid;
						format( playerVariables[ playerid ][ pReportMessage ], 256, "%s", "Am nevoie de un admin pentru o afacere!" );
					}
					case 6: // problema
					{
						ShowPlayerDialog( playerid, DIALOG_REPORT_TEXT, DIALOG_STYLE_INPUT, "Alta problema", "Scrie mai jos problema pe care o ai.\nNu scrie 'am nevoie de un admin', scrie mai detaliat!", "Trimite", "Inapoi" );	
					}
				}
			}
		}
		case DIALOG_REPORT_DM:
		{
			if( response )
			{
				switch( listitem )
				{
					case 0:
					{
						ShowPlayerDialog( playerid, DIALOG_REPORT_DM_1, DIALOG_STYLE_INPUT, "Raportare player pentru DM", "Scrie mai jos in ce locatie sunt playerii care te-au atacat.", "Trimite", "Inapoi" );	
					}
					case 1:
					{
						ShowPlayerDialog( playerid, DIALOG_REPORT_DM_2, DIALOG_STYLE_INPUT, "Raportare player pentru DM", "Scrie mai jos ID-ul/numele playerului care te-a atacat.", "Trimite", "Inapoi" );	
					}
				}
			}
			else callcmd::report( playerid, "lol" );
		}
		case DIALOG_REPORT_DM_1:
		{
			if( response )
			{
				new reportText[ 128 ];
				if( sscanf( inputtext, "s[128]", reportText ) )
					return ShowPlayerDialog( playerid, DIALOG_REPORT_DM_1, DIALOG_STYLE_INPUT, "Raportare player pentru DM", "Trebuie sa scrii zona in care ai fost atacat:", "Trimite", "Inapoi" );

				AdminBroadCast( 1, COLOR_FRED, "Report from %s [%d, level %d]: DM in zone: %s", username( playerid ), playerid, playerVariables[ playerid ][ pLevel ], reportText );
				SendClientMessage( playerid, 0xF3FF02FF, "Your report message was sent to Admins and Helpers!" );

				playerVariables[ playerid ][ pReportTimer ] = 60;
				playerVariables[ playerid ][ pReported ] = 1;
				Iter_Add(server_reports, playerid);
				server_reports++;
				playerVariables[playerid][pReportedID] = playerid;
				format( playerVariables[ playerid ][ pReportMessage ], 256, "DM in zone: %s", reportText );
			}
			else callcmd::report( playerid, "lol" );
		}
		case DIALOG_REPORT_DM_2:
		{
			if( response )
			{
				new Player;
				if( sscanf( inputtext, "u", Player ) )
					return ShowPlayerDialog( playerid, DIALOG_REPORT_DM_2, DIALOG_STYLE_INPUT, "Raportare player pentru DM", "Trebuie sa scrii numele/id-ul playerului care te-a atacat:", "Trimite", "Inapoi" );

				if( playerid == Player)
					return SendClientMessage( playerid, COLOR_GREY, "You cannot report yourself!" );

				if( !IsPlayerConnected( Player ) )
					return SendClientMessage( playerid, COLOR_GREY, "This player it's no longer connected!" );

				AdminBroadCast( 1, COLOR_FRED, "Report from %s [%d, level %d]: Has reported %s(%i) for DM!", username( playerid ), playerid, playerVariables[ playerid ][ pLevel ], username( Player ), Player );
				SendClientMessage( playerid, 0xF3FF02FF, "Your report message was sent to Admins and Helpers!" );

				playerVariables[ Player ][ pReportType ] = REPORT_DM;
				playerVariables[ playerid ][ pReportTimer ] = 60;
				playerVariables[ playerid ][ pReported ] = 1;
				Iter_Add(server_reports, playerid);
				server_reports++;
				playerVariables[Player][pReportedID] = playerid;
				format( playerVariables[ playerid ][ pReportMessage ], 256, "Has reported %s(%i) for DM!", username( Player ), Player );
			}
			else callcmd::report( playerid, "lol" );
		}
		case DIALOG_REPORT_CH:
		{
			if( response )
			{
				switch( listitem )
				{
					case 0:
					{
						gsBigString[ 0 ] = EOS;
						strcat( gsBigString, "Daca stii id-ul playerului ce foloseste cheat-uri, foloseste /cheat.\n");
						strcat( gsBigString, "Abuzul de aceasta optiune se sanctioneaza cu mute 2 ore pe /report.\n");
						strcat( gsBigString, "Scrie aici detalii despre playerul/playerii ce folosesc cheat-uri.");
						ShowPlayerDialog( playerid, DIALOG_REPORT_CH_1, DIALOG_STYLE_INPUT, "Raportare player pentru cheat-uri", gsBigString, "Trimite", "Inapoi" );	
					}
					case 1: SendClientMessage( playerid, COLOR_LIGHTRED, "Foloseste /cheat <id> <reason> pentru a raporta un player pentru cheat-uri." );
				}
			}
			else callcmd::report( playerid, "lol" );
		}
		case DIALOG_REPORT_CH_1:
		{
			if( response )
			{
				new reportText[ 128 ];
				if( sscanf( inputtext, "s[128]", reportText ) )
					return ShowPlayerDialog( playerid, DIALOG_REPORT_CH_1, DIALOG_STYLE_INPUT, "Raportare player pentru cheat", "Trebuie sa scrii detalii despre cheater:", "Trimite", "Inapoi" );

				AdminBroadCast( 1, COLOR_FRED, "Report from %s [%d, level %d]: Cheater report details: %s!", username( playerid ), playerid, playerVariables[ playerid ][ pLevel ], reportText );
				SendClientMessage( playerid, 0xF3FF02FF, "Your report message was sent to Admins and Helpers!" );

				playerVariables[ playerid ][ pReportTimer ] = 60;
				playerVariables[ playerid ][ pReported ] = 1;
				Iter_Add(server_reports, playerid);
				server_reports++;
				playerVariables[playerid][pReportedID] = playerid;
				format( playerVariables[ playerid ][ pReportMessage ], 256, "Cheater report details: %s", reportText );
			}
			else callcmd::report( playerid, "lol" );
		}
		case DIALOG_REPORT_TEXT:
		{
			if( response )
			{
				new reportText[ 128 ];
				if( sscanf( inputtext, "s[128]", reportText ) )
					return ShowPlayerDialog( playerid, DIALOG_REPORT_CH_1, DIALOG_STYLE_INPUT, "Report alte probleme", "Trebuie sa scrii detalii despre problema ta:", "Trimite", "Inapoi" );

				AdminBroadCast( 1, COLOR_FRED, "Report from %s [%d, level %d]: %s.", username( playerid ), playerid, playerVariables[ playerid ][ pLevel ], reportText );
				SendClientMessage( playerid, 0xF3FF02FF, "Your report message was sent to Admins and Helpers!" );

				playerVariables[ playerid ][ pReportTimer ] = 60;
				playerVariables[ playerid ][ pReported ] = 1;
				Iter_Add(server_reports, playerid);
				server_reports++;
				playerVariables[playerid][pReportedID] = playerid;
				format( playerVariables[ playerid ][ pReportMessage ], 256, "%s", reportText );
			}
			else callcmd::report( playerid, "lol" );
		}
		case DIALOG_KILLCP:
		{
			if( response )
				callcmd::killcp( playerid, "lol" );
		}
		case DIALOG_LOCATIONS:
		{
			if( response )
			{
				switch( listitem )
				{
					case 0: GPS_Location( playerid, "DMV LS", 1219.2964, -1813.3220, 16.5938 );
					case 1: GPS_Location( playerid, "DMV LV", 1909.3464, 2350.3469, 10.9799 );
					case 2: GPS_Location( playerid, "LS Bank", 1457.21, -1012.55, 26.8438 );
					case 3: GPS_Location( playerid, "LV Bank", GetGVarFloat( "bus_EnterX", 4 ), GetGVarFloat( "bus_EnterY", 4 ), GetGVarFloat( "bus_EnterZ", 4 ) );
					case 4: GPS_Location( playerid, "Paintball", 1310.1031, -1367.7607, 13.5401 );
					case 5: GPS_Location( playerid, "Race Arena", 2695.5996, -1704.7468, 11.8438 );
					case 6: GPS_Location( playerid, "DealerShip LS", 327.0816, -1516.5175, 36.0391 );
					case 7: GPS_Location( playerid, "DealerShip LV", 2435.2942, 1654.4897, 10.8203 );
					case 8: GPS_Location( playerid, "CNN ADS", 1169.8340, -1489.6545, 22.7559 );
					case 9: GPS_Location( playerid, "Event Arena", 1022.5323, -1121.6538, 23.8720 );
					case 10: callcmd::jobs( playerid, "lol" );
					case 11: callcmd::factions( playerid, "lol" );
					case 12: callcmd::business( playerid, "lol" );
					case 13: GPS_Location( playerid, "Hotel LURK", 289.1813,-1620.1870,33.0970);
				}
			}
		}
		case DIALOG_PAINTBALL:
		{
			if( response )
			{
				// < Init the player variables )
				playerVariables[ playerid ][ pPaintBall ] = listitem;
				Iter_Add(playerPaint[listitem], playerid);
				paintballVariables[ listitem ][ paintPlayers ]++;
				playerVariables[ playerid ][ pPaintBallKills ] = 0;
				playerVariables[ playerid ][ pPaintBallDeaths ] = 0;
				playerVariables[ playerid ][ pPaintBallLevel ] = 0;
				playerVariables[ playerid ][ pPaintBallVotedMap ] = false;
				playerVariables[ playerid ][ pPaintBallVotedWeapon ] = false;

				// < Load player Arena )
				SetPlayerArenaPosition( playerid );

				// < Setup the player )
				SetPlayerHealth( playerid, 100 );
				SetPlayerArmour( playerid, 0.0 );
				ResetServerWeapons( playerid );

				// < Make markers invisible )
				SetPlayerColor( playerid, COLOR_HOTORANGE );

				#if defined ANTI_CHEAT
				// < Disable weapon-hack check for player >
				EnableAntiCheatForPlayer( playerid, 15, 0 );
				EnableAntiCheatForPlayer( playerid, 52, 0 );
				#endif

				// < Check if it's started to give weapons )
				if( paintballVariables[ listitem ][ paintStatus ] == 2 )
					GivePlayerWeaponPack( playerid, playerVariables[ playerid ][ pPaintBall ] );

				// < Announce the Paintball Arena )
				gsString[ 0 ] = EOS;
				format( gsString, sizeof gsString, "%s has joined the paintball arena.", username( playerid ) );
				SendMessageToArena( listitem, COLOR_YELLOW, gsString );
				InfoTD_MSG( playerid, 5000, "You have joined the Paintball Arena!" );
			}
		}
		case DIALOG_PAINT_VOTE_WEAPON:
		{
			if( response )
			{
				// < Vote for the weapon pack )
				playerVariables[ playerid ][ pPaintBallVotedWeapon ] = true;
				new paintID = playerVariables[ playerid ][ pPaintBall ];
				paintballVariables[ paintID ][ paintVoteWeapon ][ listitem ]++;

				gsString[ 0 ] = EOS;
				format( gsString, sizeof gsString, "%s has voted for: [%s] and now it has [%d] votes! [/votegun]", username( playerid ), Paintball_Weapons[ listitem ], paintballVariables[ paintID ][ paintVoteWeapon ][ listitem ] );
				SendMessageToArena( paintID, COLOR_YELLOW, gsString );
			}
		}
		case DIALOG_PAINT_VOTE_MAP:
		{
			if( response )
			{
				playerVariables[ playerid ][ pPaintBallVotedMap ] = true;
				new paintID = playerVariables[ playerid ][ pPaintBall ];
				paintballVariables[ paintID ][ paintVoteMap ][ listitem ]++;

				gsString[ 0 ] = EOS;
				format( gsString, sizeof gsString, "%s has voted for the map: [%s] and now it has [%d] votes! [/votemap]", username( playerid ), Paintball_Arena[ listitem ], paintballVariables[ paintID ][ paintVoteMap ][ listitem ] );
				SendMessageToArena( paintID, COLOR_YELLOW, gsString );
			}
		}
		case DIALOG_FRIENDS:
		{
			if( response )
			{
				switch( listitem )
				{
					case 0: // Add Friend
					{
						ShowPlayerDialog( playerid, DIALOG_FRIENDS_ADD, DIALOG_STYLE_INPUT, "Add friend", "Type ID of the player you want to add as a friend:", "Add Friend", "Back" );
					}
					default: //Show Friend
					{
						gsString[ 0 ] = EOS;

						new pID = GetPlayerIDFromKey( GetPVarIntEx(playerid, "friends_Key", listitem-1) );
						status_string[ 0 ] = EOS;

						if(pID != INVALID_PLAYER_ID)
							status_string = "{228b22}[online]{ffffff}";
						else 
							status_string = "{dc143c}[offline]";

						format( gsString, sizeof gsString, "%s %s", status_string, GetPVarStringExx( playerid, "friends_Name", listitem-1 ) );
						ShowPlayerDialog( playerid, DIALOG_FRIENDS_VIEW, DIALOG_STYLE_LIST, gsString, ""COL_W"Remove Friend\n"COL_W"View phone number", "Select", "Exit" );
						playerVariables[ playerid ][ pSelectFriend ] = listitem-1;
					}
				}
			}
		}
		case DIALOG_FRIENDS_ADD:
		{
			if( response )
			{
				new friendID = strval( inputtext );
				if( !IsPlayerConnected( friendID ) ) 	return SendClientMessage( playerid, COLOR_GREY, "Player is not connected!" );
				if( friendID == playerid )              return SendClientMessage( playerid, COLOR_GREY, "You can't add yourself to your friends list!" );

				gsQuery[ 0 ] = EOS;
				mysql_format( g_Handle, gsQuery, sizeof gsQuery, "SELECT COUNT(*) `server_friends` WHERE `friendsPlayer` = '%d' AND `friendsFriendID` = '%d' ", GetPlayerMysqlID( playerid ), GetPlayerMysqlID( friendID ) );
				mysql_pquery( g_Handle, gsQuery, "Load_Friend", "ii", playerid, friendID );	
			}
			else callcmd::friends( playerid, "lol" );
		}
		case DIALOG_FRIENDS_VIEW:
		{
			if( response )
			{
				switch( listitem )
				{
					case 0: // remove friend
					{
						new friendID = GetPVarIntEx( playerid, "friends_Key", playerVariables[ playerid ][ pSelectFriend ] );

						gsQuery[ 0 ] = EOS;
						mysql_format( g_Handle, gsQuery, sizeof gsQuery, "DELETE FROM `server_friends` WHERE `friendsPlayer` = %d AND `friendsFriendID` = %d", GetPlayerMysqlID(playerid), friendID );
						mysql_tquery( g_Handle, gsQuery, "", "" );

						callcmd::friends( playerid, "lol" );
						SendClientMessage( playerid, COLOR_YELLOW, "Friend has been removed from your list!" );
					}
					case 1: // show phone number
					{
						new friendID = GetPlayerIDFromKey( GetPVarIntEx( playerid, "friends_Key", playerVariables[ playerid ][ pSelectFriend ] ) );
						if( friendID == INVALID_PLAYER_ID ) 				return SendClientMessage( playerid, COLOR_YELLOW, "Friend it's not online!" );
						if( !playerVariables[ friendID ][ pPhone ] ) 		return SendClientMessage( playerid, COLOR_GREY, "This friend doesn't have a phone!" );
						if( !playerVariables[ friendID ][ pPhoneNumber ] )  return SendClientMessage( playerid, COLOR_GREY, "This friend doesn't have a number phone!" );

						SendClientMessagef( playerid, ~1, "Name: {CECECE}%s"COL_W" | Number: {CECECE}%d", playerVariables[ friendID ][ pNormalName ], playerVariables[ friendID ][ pPhoneNumber ] );
					}
				}
			}
		}
		#if defined PET
		case DIALOG_PET:
		{
			if( response )
			{
				//Status\t%s\nNume\t%s\nLevel\t%d\nPoints\t%d/%s\nPet type\t%s\nBeneficii
				switch( listitem )
				{
					case 0://status
					{
						switch(playerVariables[playerid][pPetStatus])
						{
							case 0: 
							{
								SendClientMessagef(playerid, COLOR_WHITE, "You summoned your Pet [{3EA80D}%s - level %d{FFFFFF}].", playerVariables[playerid][pPetName], playerVariables[playerid][pPetLevel]);

								SummonPet(playerid);
							}
							case 1: 
							{
								UnSummonPet(playerid);
								SendClientMessage(playerid, COLOR_WHITE, "You sent your pet away.");
							}
						}
					}
					case 1://nume
					{
						ShowPlayerDialog( playerid, DIALOG_PETNAME, DIALOG_STYLE_INPUT, "SERVER: Pet Name", "Please enter your new desired name for the pet.\n{FFFF00}Do not enter words that contain swearing", "Change", "");
					}
					case 2://level
					{
						SendClientMessagef(playerid, COLOR_WHITE, "Your pet's actual level is %d.", playerVariables[playerid][pPetLevel]);
					}
					case 3://puncte
					{
						if(playerVariables[playerid][pPetLevel] != 5)
						{
							if(playerVariables[playerid][pPetPoints] < (playerVariables[playerid][pPetLevel]*10))
								return SendClientMessagef(playerid, COLOR_WHITE, "You need %d points to level up your pet.", (playerVariables[playerid][pPetLevel]*10)-playerVariables[playerid][pPetPoints]);
							else
							{
								playerVariables[playerid][pPetPoints] -= (playerVariables[playerid][pPetLevel]*10);
								playerVariables[playerid][pPetLevel]++;

								SendClientMessagef(playerid, COLOR_GREEN, "Your pet has reached level %d, you will get more money on each payday.", playerVariables[playerid][pPetLevel]);
								
								gsString[0] = EOS;
								format(gsString, 70, "{3EA80D}%s{FFFFFF} - lv {3EA80D}%d{FFFFFF}", playerVariables[playerid][pPetName], playerVariables[playerid][pPetLevel]);

								UpdateDynamic3DTextLabelText(PetText[playerid], COLOR_WHITE, gsString);
							}
						}
						else
						{
							SendClientMessagef(playerid, COLOR_WHITE, "Your pet's level is maxed, you can't level up.");
						}
					}
					case 4://pet type
					{
						gsString[0] = EOS;
						format(gsString, 160, "Pet Type\tStatus\nParrot\t%s\nShark\t%s\nCow\t%s\nFish\t%s\nDolphin\t%s", (playerVariables[playerid][pPetType][0]) ? ("{33AA33}UNLOCKED") : (""COL_LYE"LOCKED"), (playerVariables[playerid][pPetType][1]) ? ("{33AA33}UNLOCKED") : (""COL_LYE"LOCKED"),
							(playerVariables[playerid][pPetType][2]) ? ("{33AA33}UNLOCKED") : (""COL_LYE"LOCKED"), (playerVariables[playerid][pPetType][3]) ? ("{33AA33}UNLOCKED") : (""COL_LYE"LOCKED"), (playerVariables[playerid][pPetType][4]) ? ("{33AA33}UNLOCKED") : (""COL_LYE"LOCKED"));
						ShowPlayerDialog( playerid, DIALOG_PETTYPE, DIALOG_STYLE_TABLIST_HEADERS, "SERVER: Pet Type", gsString, "Select", "Cancel");
					}
					case 5://beneficii
					{
						SendClientMessagef(playerid, COLOR_LIGHTGREEN, "You will receive $%d every payday. Every pet level gives you an extra $1000!", (playerVariables[playerid][pPetLevel]*1000));
					}
				}
			}
		}
		case DIALOG_BUYPET:
		{
			if(response)
			{
				if(playerVariables[playerid][pPremiumPoints] < 35) return SendClientMessage(playerid, COLOR_WHITE, "You need 35 premium points to perfom this action.");
				playerVariables[playerid][pPetType][GetPVarInt(playerid, "PetListItemForBuying")] = GetPVarInt(playerid, "PetIDForBuying");
				SendClientMessagef(playerid, COLOR_WHITE, "You bought pet %s for 35 premium points. You can use /pet to apply it.", pettype(playerid, 2));
				TakePlayerPremiumPoints(playerid, 35);
			}
			else SendClientMessage(playerid, COLOR_WHITE, "You exited the Pet Menu.");
		}
		case DIALOG_PETTYPE:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						if(playerVariables[playerid][pPetType][0] != 0)
						{
							playerVariables[playerid][pPetID] = 19078;
							if(playerVariables[playerid][pPetStatus] == 1)
							{
								RemovePlayerAttachedObject(playerid, INDEX_PARROT);
								SetPlayerAttachedObject(playerid, INDEX_PARROT, playerVariables[playerid][pPetID], 1, GetOffsetPet(playerid, 0), GetOffsetPet(playerid, 1), GetOffsetPet(playerid, 2), GetRotatePet(playerid, 0), GetRotatePet(playerid, 1), GetRotatePet(playerid, 2), GetScalePet(playerid, 0), GetScalePet(playerid, 1), GetScalePet(playerid, 2)); // Parrot
							}
						}
						else
						{
							ShowPlayerDialog(playerid, DIALOG_BUYPET, DIALOG_STYLE_MSGBOX, "SERVER: Buy Pet", "You don't own this pet, do you want to buy this pet? It cost you 35 premium points\nPet Informations:\nParrot, level 1, gives you $2,000 every PayDay when you played and $1,000 when you are AFK.", "Buy", "Cancel");
							SetPVarInt(playerid, "PetListItemForBuying", 0);
							SetPVarInt(playerid, "PetIDForBuying", 19078);
						}
					}
					case 1:
					{
						if(playerVariables[playerid][pPetType][1] != 0)
						{
							playerVariables[playerid][pPetID] = 1608;
							if(playerVariables[playerid][pPetStatus] == 1)
							{
								RemovePlayerAttachedObject(playerid, INDEX_PARROT);
								SetPlayerAttachedObject(playerid, INDEX_PARROT, playerVariables[playerid][pPetID], 1, GetOffsetPet(playerid, 0), GetOffsetPet(playerid, 1), GetOffsetPet(playerid, 2), GetRotatePet(playerid, 0), GetRotatePet(playerid, 1), GetRotatePet(playerid, 2), GetScalePet(playerid, 0), GetScalePet(playerid, 1), GetScalePet(playerid, 2)); // Parrot
							}
						}
						else
						{
							ShowPlayerDialog(playerid, DIALOG_BUYPET, DIALOG_STYLE_MSGBOX, "SERVER: Buy Pet", "You don't own this pet, do you want to buy this pet? It cost you 35 premium points\nPet Informations:\nShark, level 1, gives you $2,000 every PayDay when you played and $1,000 when you are AFK.", "Buy", "Cancel");
							SetPVarInt(playerid, "PetListItemForBuying", 1);
							SetPVarInt(playerid, "PetIDForBuying", 1608);
						}
					}
					case 2:
					{
						if(playerVariables[playerid][pPetType][2] != 0)
						{
							playerVariables[playerid][pPetID] = 19833;
							if(playerVariables[playerid][pPetStatus] == 1)
							{
								RemovePlayerAttachedObject(playerid, INDEX_PARROT);
								SetPlayerAttachedObject(playerid, INDEX_PARROT, playerVariables[playerid][pPetID], 1, GetOffsetPet(playerid, 0), GetOffsetPet(playerid, 1), GetOffsetPet(playerid, 2), GetRotatePet(playerid, 0), GetRotatePet(playerid, 1), GetRotatePet(playerid, 2), GetScalePet(playerid, 0), GetScalePet(playerid, 1), GetScalePet(playerid, 2)); // Parrot
							}
						}
						else
						{
							ShowPlayerDialog(playerid, DIALOG_BUYPET, DIALOG_STYLE_MSGBOX, "SERVER: Buy Pet", "You don't own this pet, do you want to buy this pet? It cost you 35 premium points\nPet Informations:\nCow, level 1, gives you $2,000 every PayDay when you played and $1,000 when you are AFK.", "Buy", "Cancel");
							SetPVarInt(playerid, "PetListItemForBuying", 2);
							SetPVarInt(playerid, "PetIDForBuying", 19833);
						}
					}
					case 3:
					{
						if(playerVariables[playerid][pPetType][3] != 0)
						{
							playerVariables[playerid][pPetID] = 19630;
							if(playerVariables[playerid][pPetStatus] == 1)
							{
								RemovePlayerAttachedObject(playerid, INDEX_PARROT);
								SetPlayerAttachedObject(playerid, INDEX_PARROT, playerVariables[playerid][pPetID], 1, GetOffsetPet(playerid, 0), GetOffsetPet(playerid, 1), GetOffsetPet(playerid, 2), GetRotatePet(playerid, 0), GetRotatePet(playerid, 1), GetRotatePet(playerid, 2), GetScalePet(playerid, 0), GetScalePet(playerid, 1), GetScalePet(playerid, 2)); // Parrot
							}
						}
						else
						{
							ShowPlayerDialog(playerid, DIALOG_BUYPET, DIALOG_STYLE_MSGBOX, "SERVER: Buy Pet", "You don't own this pet, do you want to buy this pet? It cost you 35 premium points\nPet Informations:\nFish, level 1, gives you $2,000 every PayDay when you played and $1,000 when you are AFK.", "Buy", "Cancel");
							SetPVarInt(playerid, "PetListItemForBuying", 3);
							SetPVarInt(playerid, "PetIDForBuying", 19630);
						}
					}
					case 4:
					{
						if(playerVariables[playerid][pPetType][4] != 0)
						{
							playerVariables[playerid][pPetID] = 1607;
							if(playerVariables[playerid][pPetStatus] == 1)
							{
								RemovePlayerAttachedObject(playerid, INDEX_PARROT);
								SetPlayerAttachedObject(playerid, INDEX_PARROT, playerVariables[playerid][pPetID], 1, GetOffsetPet(playerid, 0), GetOffsetPet(playerid, 1), GetOffsetPet(playerid, 2), GetRotatePet(playerid, 0), GetRotatePet(playerid, 1), GetRotatePet(playerid, 2), GetScalePet(playerid, 0), GetScalePet(playerid, 1), GetScalePet(playerid, 2)); // Parrot
							}
						}
						else
						{
							ShowPlayerDialog(playerid, DIALOG_BUYPET, DIALOG_STYLE_MSGBOX, "SERVER: Buy Pet", "You don't own this pet, do you want to buy this pet? It cost you 35 premium points\nPet Informations:\nDolphin, level 1, gives you $2,000 every PayDay when you played and $1,000 when you are AFK.", "Buy", "Cancel");
							SetPVarInt(playerid, "PetListItemForBuying", 4);
							SetPVarInt(playerid, "PetIDForBuying", 1607);
						}
					}
				}
			}
		}

		case DIALOG_PETNAME:
		{
			if(response)
			{
				new newNickPet[ MAX_PLAYER_NAME ];
				if( sscanf( inputtext, "s[24]", newNickPet ) )
					return SendClientMessage( playerid, COLOR_GREY, "Trebuie sa introduci un nume valid!" );

				if( strlen( newNickPet ) < 3 || strlen( newNickPet ) > 12 )
					return SendClientMessage( playerid, COLOR_GREY, "Lungimea acestui nume este prea mare/mica!" );

				// Escape the new string
				mysql_escape_string( newNickPet, newNickPet );

				format(playerVariables[playerid][pPetName], 15, newNickPet);

				SendClientMessagef(playerid, COLOR_WHITE, "You changed the nickname of your pet. New nickname: %s", newNickPet);

				if(playerVariables[playerid][pPetStatus] == 1)
				{
					gsString[0] = EOS;
					format(gsString, 70, "{3EA80D}%s{FFFFFF} - lv {3EA80D}%d{FFFFFF}", playerVariables[playerid][pPetName], playerVariables[playerid][pPetLevel]);

					UpdateDynamic3DTextLabelText(PetText[playerid], COLOR_WHITE, gsString);
				}
			}
		}
		#endif
		case DIALOG_RADIO:
		{
			if( response )
			{
				new vehicleID = GetPlayerVehicleID( playerid );
				serverVariables[ VehicleRadio ][ vehicleID ] = listitem;

				if( listitem == 0 )
				{
					nearByMessage( playerid, COLOR_PURPLE, NBM_DIST, "* %s has turned OFF the radio.", playerVariables[ playerid ][ pNormalName ] );
					PlayAudioStreamForPlayersInCar( vehicleID, "lol", 0 );
				}
				else
				{
					nearByMessage( playerid, COLOR_PURPLE, NBM_DIST, "* %s has changed the radio station to %s.", playerVariables[ playerid ][ pNormalName ], SERVER_RADIO[ listitem-1 ][ Radio_Name ] );
					PlayAudioStreamForPlayersInCar( vehicleID, SERVER_RADIO[ listitem-1 ][ Radio_Adress ] );
				}
				return true;
			}
		}
		case DIALOG_HUD:
		{
			if( response )
			{
				if(playerVariables[ playerid ][ pAdminLevel ] == 0 && listitem == 4) 
				{
					switch( playerVariables[ playerid ][ pHud ][ 5 ] )
					{
						case 0: playerVariables[ playerid ][ pHud ][ 5 ] = 1;
						case 1: playerVariables[ playerid ][ pHud ][ 5 ] = 0;
					}
				}
				else
				{
					switch( playerVariables[ playerid ][ pHud ][ listitem ] )
					{
						case 0: playerVariables[ playerid ][ pHud ][ listitem ] = 1;
						case 1: playerVariables[ playerid ][ pHud ][ listitem ] = 0;
					}
				}
				callcmd::hud( playerid, "lol" );
			}
		}
		case DIALOG_TOG:
		{
			if( response )
			{
				if( listitem == 3 && !playerVariables[ playerid ][ pAdminLevel ] )
					return SendClientMessage( playerid, COLOR_GREY, "You have to be Admin to be able to use this feature!" );

				if( listitem == 4 && !playerVariables[ playerid ][ pAdminLevel ] )
					return SendClientMessage( playerid, COLOR_GREY, "You have to be Admin to be able to use this feature!" );

				switch( playerVariables[ playerid ][ pTog ][ listitem ] )
				{
					case 0: playerVariables[ playerid ][ pTog ][ listitem ] = 1;
					case 1: playerVariables[ playerid ][ pTog ][ listitem ] = 0;
				}
				callcmd::tog( playerid, "lol" );
			}
		}
		case DIALOG_HELPERCOLOR:
		{
			if( response )
			{
				playerVariables[ playerid ][ pHelperColor ] = listitem;
			}
		}
		case DIALOG_ADMINCOLOR:
		{
			if( response )
			{
				playerVariables[ playerid ][ pAdminColor ] = listitem;
			}
		}
		case DIALOG_QUIT_FACTION:
		{
			if( response )
			{
				new quitFP;
				if(playerVariables[playerid][pFactionRank] == 7) return SendClientMessage(playerid, COLOR_GREY, "Contact an admin in order to quit your faction.");
				if( GetGVarInt( "faction_Leaders", playerVariables[ playerid ][ pFaction ] ) != 0 )
				{
					if( playerVariables[ playerid ][ pFactionDays ] < 14 )
						quitFP = 20;
					else if( playerVariables[ playerid ][ pFactionDays ] >= 14 )
						quitFP = 0;
				}else quitFP = 0;

				// < Update Panel Info )
				gsString[ 0 ] = EOS;
				format( gsString, sizeof gsString, "left faction %s (rank %d) after %d days using /quitfaction, WITH %d FP.", GetGVarStringEx( "faction_Name", playerVariables[ playerid ][ pFaction ] ), playerVariables[ playerid ][ pFactionRank ], playerVariables[ playerid ][ pFactionDays ], quitFP );
				gsQuery[ 0 ] = EOS;
				mysql_format( g_Handle, gsQuery, sizeof gsQuery, "INSERT INTO `server_feed`(`playerKey`,`playerName`,`logText`) VALUES (%d, '%s', '%s')", GetPlayerMysqlID(playerid), playerVariables[ playerid ][ pNormalName ], gsString );
				mysql_tquery( g_Handle, gsQuery, "", "" );

				gsString[ 0 ] = EOS;
				format( gsString, sizeof gsString, "%s has left faction %s (rank %d) after %d days using /quitfaction, WITH %d FP.", playerVariables[ playerid ][ pNormalName ], GetGVarStringEx( "faction_Name", playerVariables[ playerid ][ pFaction ] ), playerVariables[ playerid ][ pFactionRank ], playerVariables[ playerid ][ pFactionDays ], quitFP );
				InsertFactionLog( gsString, playerVariables[ playerid ][ pFaction ], GetPlayerMysqlID(playerid), playerVariables[ playerid ][ pNormalName ], 0, "N/A" );
				SendToFaction( playerVariables[ playerid ][ pFaction ], COLOR_GENANNOUNCE, gsString );
				ResetPlayerFactionRaport( GetPlayerMysqlID(playerid));

				gsQuery[ 0 ] = EOS;
				mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_factions` SET `factionMembers` = `factionMembers` - 1 WHERE `factionKey` = %d", playerVariables[ playerid ][ pFaction ] );
				mysql_tquery( g_Handle, gsQuery, "", "" );
				SetGVarInt( "faction_Members", GetGVarInt( "faction_Members", playerVariables[ playerid ][ pFaction ] ) - 1, playerVariables[ playerid ][ pFaction ] );

                new FactionID = playerVariables[ playerid ][ pFaction ];
				switch(playerVariables[ playerid ][ pFaction ])
				{
					case 1, 2: Iter_Remove(Departments, playerid), Iter_Remove(playerFaction[FactionID], playerid);
					case 4: Iter_Remove(server_instructors, playerid), server_instructors--, Iter_Remove(playerFaction[FactionID], playerid);
					case 5: Iter_Remove(server_reporters, playerid), server_reporters--, Iter_Remove(playerFaction[FactionID], playerid);
					default: Iter_Remove(playerFaction[FactionID], playerid);
				}

				// < Reset Player Variables )
				SetPlayerHealth( playerid, 100 );
				SetPlayerArmour( playerid, 0 );
				playerVariables[ playerid ][ pFW ] = 0;
				playerVariables[ playerid ][ pFP ] = quitFP;
				playerVariables[ playerid ][ pFaction ] = 0;
				playerVariables[ playerid ][ pFactionRank ] = 0;
				switch( playerVariables[ playerid ][ pSex ])
				{
					case 1: playerVariables[ playerid ][ pSkin ] = CIVIL_SKIN_MALE;
					case 2: playerVariables[ playerid ][ pSkin ] = CIVIL_SKIN_FEMALE;
				}
				SetPlayerFactionColor( playerid );
				SetPlayerFactionSkin( playerid );

				if( playerVariables[ playerid ][ pSpawnType ] == 1 )
					playerVariables[ playerid ][ pSpawnType ] = 0;

				gsQuery[ 0 ] = EOS;
				mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerFaction` = 0, `playerFactionRank` = 0, `playerFactionDays` = 0, `playerFW` = 0, `playerFP` = %d, `playerSkin` = %d WHERE `id` = %d", quitFP, playerVariables[ playerid ][ pSkin ], GetPlayerMysqlID(playerid) );
				mysql_tquery( g_Handle, gsQuery, "", "" );
			}
		}
		case DIALOG_EMAIL:
		{
			new lsMail[ 128 ];
			if( sscanf( inputtext, "s[128]", lsMail ) )
			{
				gsString[ 0 ] = EOS;
				strcat( gsString, "Please enter below your E-Mail address!\n\n" );
				strcat( gsString, "Scrie mai jos adresa ta de E-Mail!\nAdresa trebuie sa fie valida, altfel iti vei pierde contul." );
				strcat( gsString, ""COL_R"ERROR: Nu ai introdus nimic in acest dialog!" );
				return ShowPlayerDialog( playerid, DIALOG_EMAIL, DIALOG_STYLE_INPUT, "Account E-Mail", gsString, "Insert", "" );
			}
			if( strlen( lsMail ) < 8 || strlen( lsMail ) > 60 )
			{
				gsString[ 0 ] = EOS;
				strcat( gsString, "Please enter below your E-Mail address!\n\n" );
				strcat( gsString, "Scrie mai jos adresa ta de E-Mail!\nAdresa trebuie sa fie valida, altfel iti vei pierde contul." );
				strcat( gsString, ""COL_R"ERROR: Lungimea trebuie sa fie intre 8 si 60 de caractere!" );
				return ShowPlayerDialog( playerid, DIALOG_EMAIL, DIALOG_STYLE_INPUT, "Account E-Mail", gsString, "Insert", "" );
			}
			if( strfind( lsMail, "@", false ) == -1 || strfind( lsMail, ".", false ) == -1 )
			{
				gsString[ 0 ] = EOS;
				strcat( gsString, "Please enter below your E-Mail address!\n\n" );
				strcat( gsString, "Scrie mai jos adresa ta de E-Mail!\nAdresa trebuie sa fie valida, altfel iti vei pierde contul." );
				strcat( gsString, ""COL_R"ERROR: Adresa de E-Mail trebuie sa contina @ !" );
				return ShowPlayerDialog( playerid, DIALOG_EMAIL, DIALOG_STYLE_INPUT, "Account E-Mail", gsString, "Insert", "" );
			}
			mysql_escape_string( lsMail, lsMail );
			gsQuery[ 0 ] = EOS;
			mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `email` = '%s' WHERE `id` = %d", lsMail, GetPlayerMysqlID(playerid) );
			mysql_tquery( g_Handle, gsQuery, "", "" );
			format( playerVariables[ playerid ][ pEMail ], 128, "%s", lsMail );

			ClearPlayerChat( playerid );
			SendClientMessagef( playerid, ~1, ""COL_YE"INREGISTRARE: "COL_W"Adresa ta de E-mail este: %s", lsMail );

			/*gsString[ 0 ] = EOS;
			format( gsString, sizeof gsString, "Salut %s si bine ai venit pe Fixed Roleplay! Iti multumim ca ai ales severul nostru si te asteptam pe: forum.rofixed.com | panel.rofixed.com", username( playerid ) );
			SendMail( lsMail, "noreply@rofixed.com", "Fixed Roleplay - Server Support", "Welcome on Fixed Roleplay", gsString );*/

			gsString[ 0 ] = EOS;
			strcat( gsString, "Please chose your character sex!\n\n" );
			strcat( gsString, "Te rog sa alegi sexul caracterului tau!" );
			return ShowPlayerDialog( playerid, DIALOG_SEX, DIALOG_STYLE_MSGBOX, "Account Sex", gsString, "Masculin", "Feminin" );
		}
		case DIALOG_SEX:
		{
			ClearPlayerChat( playerid );
			if( response ) // Masculin
			{
				playerVariables[ playerid ][ pSex ] = 1;
				playerVariables[ playerid ][ pSkin ] = CIVIL_SKIN_MALE;
				//SendClientMessage( playerid, ~1, ""COL_YE"INREGISTRARE: "COL_W"Sexul caracterului tau este: Masculin" );
			}
			if( !response ) // Feminin
			{
				playerVariables[ playerid ][ pSex ] = 2;
				playerVariables[ playerid ][ pSkin ] = CIVIL_SKIN_FEMALE;
				//SendClientMessage( playerid, ~1, ""COL_YE"INREGISTRARE: "COL_W"Sexul caracterului tau este: Feminin" );
			}
			gsQuery[ 0 ] = EOS;
			mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerSex` = %d, `playerSkin` = %d, `playerConnected` = 1 WHERE `id` = %d", playerVariables[ playerid ][ pSex ], playerVariables[ playerid ][ pSkin ], GetPlayerMysqlID(playerid) );
			mysql_tquery( g_Handle, gsQuery, "", "" );

			gsString[ 0 ] = EOS;
			strcat( gsString, "Thank you for filling in all the information,\n" );
			strcat( gsString, "have fun on our server!\n\n" );
			strcat( gsString, "Multumim pentru ca ati completat datele.\n" );
			strcat( gsString, "Distractie placuta pe server!" );
			ShowPlayerDialog( playerid, DIALOG_REGISTER_DONE, DIALOG_STYLE_MSGBOX, "Account Registered", gsString, "Continue", "" );
		}
		case DIALOG_REGISTER_DONE:
		{
			if( response )
			{
				gsString[ 0 ] = EOS;
				format( gsString, sizeof gsString, "[REGISTER] New account: %s | Key: %s | E-Mail: %s | IP: %s", 
					username( playerid ), FormatNumber( GetPlayerMysqlID(playerid)), playerVariables[ playerid ][ pEMail ], GetPlayerIPEx( playerid ) );
				submitToHelpersAndAdmins( gsString, COLOR_RED );

				gsString[ 0 ] = EOS;
				strcat( gsString, "English: If somebody brought your to this server please enter his referral code! You can change later!\n\n" );
				strcat( gsString, "Romana: Daca te-a adus cineva pe acest server te rugam sa introduci codul referral! Il poti schimba mai tarziu!\n" );
				return ShowPlayerDialog( playerid, DIALOG_REFERRAL, DIALOG_STYLE_INPUT, "Account Registered", gsString, "Enter", "Skip" );
			}
		}
		case DIALOG_REFERRAL:
		{
			if( response )
			{
				if( !strval( inputtext ) )
				{
					gsString[ 0 ] = EOS;
					strcat( gsString, "English: This referral code it's invalid, please try again!\n\n" );
					strcat( gsString, "Romana: Acest cod referral este incorect, te rog incearca din nou!\n" );
					return ShowPlayerDialog( playerid, DIALOG_REFERRAL, DIALOG_STYLE_INPUT, ""COL_R"#5 "COL_W"Account Registered", gsString, "Enter", "Skip" );
				}
				else
				{
					gsQuery[ 0 ] = EOS;
					mysql_format( g_Handle, gsQuery, sizeof gsQuery, "SELECT * FROM `server_accounts` WHERE `playerReferral` = %d", strval( inputtext ) );
					return mysql_pquery( g_Handle, gsQuery, "VerifyReferralCode", "id", playerid, strval( inputtext ) );
				}
			}
			else
			{
				Tutorial( playerid, "LURK ~w~- Spawn Selector", "Alege-ti spawn-ul favorit. Apasa ~r~LCTRL (LMB) ~w~pentru a trece la urmatorul spawn si ~r~ENTER ~w~pentru a alege spawn-ul dorit." );
				
				SetPlayerCameraPos( playerid, 1772.629028, -1813.489990, 45.188911 );
				SetPlayerCameraLookAt( playerid, 1770.010620, -1817.109985, 42.944004 );

				playerVariables[ playerid ][ pCity ] = 0;
			}
		}
		case DIALOG_REFERRAL_DONE:
		{
			if( response )
			{
				gsString[ 0 ] = EOS;
				format( gsString, sizeof gsString, "REFERRAL LOG: %s[user:%d] added %s[user:%d | code:%d] as referral player [IP: %s]", username( playerid ), GetPlayerMysqlID(playerid), GetPVarStringEx( playerid, "referral_Name" ), playerVariables[ playerid ][ pReferral ], GetPVarInt( playerid, "referral_Code" ), GetPlayerIPEx( playerid ) );
				InsertPlayerLog( GetPlayerMysqlID(playerid), 0, gsString );
				submitToAdmins( gsString, COLOR_LIGHTRED );

				gsQuery[ 0 ] = EOS;
				mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerReferralKey` = %d WHERE `id` = %d", playerVariables[ playerid ][ pReferral ], GetPlayerMysqlID(playerid) );
				mysql_tquery( g_Handle, gsQuery, "", "" );
				SendClientMessage( playerid, COLOR_LIGHTGREEN, "SERVER: "COL_W"You have successfully set your refferal player!" );

				Tutorial( playerid, "LURK ~w~- Spawn Selector", "Alege-ti spawn-ul favorit. Apasa ~r~LCTRL (LMB) ~w~pentru a trece la urmatorul spawn si ~r~ENTER ~w~pentru a alege spawn-ul dorit." );
			
				SetPlayerCameraPos( playerid, 1772.629028, -1813.489990, 45.188911 );
				SetPlayerCameraLookAt( playerid, 1770.010620, -1817.109985, 42.944004 );

				playerVariables[ playerid ][ pCity ] = 0;
			}
			else
			{
				gsString[ 0 ] = EOS;
				strcat( gsString, "English: If somebody brought your to this server please enter his referral code!\n\n" );
				strcat( gsString, "Romana: Daca te-a adus cineva pe acest server te rugam sa introduci codul referral!\n" );
				return ShowPlayerDialog( playerid, DIALOG_REFERRAL, DIALOG_STYLE_INPUT, ""COL_R"#5 "COL_W"Account Registered", gsString, "Enter", "Skip" );
			}
		}
		case DIALOG_PREMIUM_CHANGENAME:
		{
			if( response )
			{
				new ls_NewNick[ MAX_PLAYER_NAME ];
				if( sscanf( inputtext, "s[24]", ls_NewNick ) )
					return SendClientMessage( playerid, COLOR_GREY, "Trebuie sa introduci un nume valid!" );

				if( strlen( ls_NewNick ) < 3 || strlen( ls_NewNick ) > MAX_PLAYER_NAME )
					return SendClientMessage( playerid, COLOR_GREY, "Lungimea acestui nume este prea mare/mica!" );

				// Escape the new string
				mysql_escape_string( ls_NewNick, ls_NewNick );

				gsQuery[ 0 ] = EOS;
				mysql_format( g_Handle, gsQuery, sizeof gsQuery, "SELECT `id` FROM `server_accounts` WHERE `username` = '%s'", ls_NewNick );
				mysql_tquery( g_Handle, gsQuery, "ChangeName", "is", playerid, ls_NewNick );
			}
		}
		case DIALOG_PREMIUM_SHOP:
		{
			if( response )
			{
				switch( listitem )
				{
					case 0:
					{
						if( playerVariables[ playerid ][ pPremiumPoints ] < SHOP_ACTIONS[ listitem ][ shop_Price ] )		
							return SendClientMessagef( playerid, COLOR_GREY, "Nu ai destule Puncte Premium! (%d PP)", SHOP_ACTIONS[ listitem ][ shop_Price ] );

						if( playerVariables[ playerid ][ pPremium ] == 2 ) 				
							return SendClientMessage( playerid, COLOR_GREY, "Acest cont este deja VIP!" );

						playerVariables[ playerid ][ pPremium ] = 2;
						TakePlayerPremiumPoints( playerid, SHOP_ACTIONS[ listitem ][ shop_Price ] );

						if( playerVariables[ playerid ][ pVSlots ] + 2 <= MAX_SLOTS )
							playerVariables[ playerid ][ pVSlots ] += 2; // Adauga 2 sloturi bonus de la Premium

						SendClientMessagef( playerid, COLOR_RED, "(!) You have bought a vip account, you have now +2 vehicle slots (-%d Premium Points)", SHOP_ACTIONS[ listitem ][ shop_Price ] );
                        SendClientMessage( playerid, COLOR_RED, "(!) You have acces at commands: /vc(hat), /emotes, /volor, /despawncars, /spawncars");

						gsQuery[ 0 ] = EOS;
						mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerPremium` = 2 WHERE `id` = %d", GetPlayerMysqlID(playerid) );
						mysql_tquery( g_Handle, gsQuery, "", "" );

						Iter_Add(premiumPlayers[ playerVariables[ playerid ][ pPremium ] ], playerid);

						gsString[ 0 ] = EOS;
						format( gsString, sizeof gsString, "%s[user:%d] bought VIP Account for %d PP. [/shop]", playerVariables[ playerid ][ pNormalName ], GetPlayerMysqlID(playerid), SHOP_ACTIONS[ listitem ][ shop_Price ] );
						submitToAdmins(gsString, COLOR_YELLOW);
						InsertPlayerLog( GetPlayerMysqlID(playerid), 0, gsString );
					}
					case 1: // iPhone
					{
						if( playerVariables[ playerid ][ pPhone ] == 2 )
							return SendClientMessage( playerid, COLOR_GREY, "Ai deja un iPhone pe acest cont!" );

						if( playerVariables[ playerid ][ pPremiumPoints ] < SHOP_ACTIONS[ listitem ][ shop_Price ] )		
							return SendClientMessagef( playerid, COLOR_GREY, "Nu ai destule Puncte Premium! (%d PP)", SHOP_ACTIONS[ listitem ][ shop_Price ] );

						// < Show Dialog )
						ShowPlayerDialog( playerid, DIALOG_BUY_IPHONE, DIALOG_STYLE_INPUT, "SHOP: iPhone", "Avantaje iPhone:\n- numar de telefon din 4 cifre la alegere.\n- poti dezactiva apelurile daca vrei sa primesti doar SMS-uri.\n- in chat va aparea `* Player turns of his iPhone`.\n- optiune de /reply raspunde la ultimul SMS primit.\n- optiune /block pentru a bloca temporar un numar de telefon.\n\nChoose a phone number:", "Buy", "Cancel" );
					}
					case 2: // Change Name
					{
						if( playerVariables[ playerid ][ pPremiumPoints ] < SHOP_ACTIONS[ listitem ][ shop_Price ] )		
							return SendClientMessagef( playerid, COLOR_GREY, "Nu ai destule Puncte Premium! (%d PP)", SHOP_ACTIONS[ listitem ][ shop_Price ] );

						// < Show Dialog >
						ShowPlayerDialog( playerid, DIALOG_PREMIUM_CHANGENAME, DIALOG_STYLE_INPUT, "SHOP: Change Name", "ATENTIE! Nu folositi clan tag-uri in noul nume pentru ca nu veti mai putea folosi contul!\nPentru a-ti schimba numele pe server introdu-l mai jos:", "Change", "Exit" );
					}
					case 3: // Premium
					{
						if( playerVariables[ playerid ][ pPremiumPoints ] < SHOP_ACTIONS[ listitem ][ shop_Price ] )		
							return SendClientMessagef( playerid, COLOR_GREY, "Nu ai destule Puncte Premium! (%d PP)", SHOP_ACTIONS[ listitem ][ shop_Price ] );

						if( playerVariables[ playerid ][ pPremium ] == 1 ) 				
							return SendClientMessage( playerid, COLOR_GREY, "Acest cont este deja Premium!" );

						playerVariables[ playerid ][ pPremium ] = 1;
						TakePlayerPremiumPoints( playerid, SHOP_ACTIONS[ listitem ][ shop_Price ] );

						if( playerVariables[ playerid ][ pVSlots ] + 2 <= MAX_SLOTS )
							playerVariables[ playerid ][ pVSlots ] += 2; // Adauga 2 sloturi bonus de la Premium

						SendClientMessagef( playerid, COLOR_RED, "(!) You have bought a premium account, you have now +2 vehicle slots (-%d Premium Points)", SHOP_ACTIONS[ listitem ][ shop_Price ] );
						SendClientMessage( playerid, COLOR_RED, "(!) You have acces at commands: /pc(hat), /emotes, /pcolor, /despawncars, /spawncars");

						gsQuery[ 0 ] = EOS;
						mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerPremium` = 1 WHERE `id` = %d", GetPlayerMysqlID(playerid) );
						mysql_tquery( g_Handle, gsQuery, "", "" );

						Iter_Add(premiumPlayers[ playerVariables[ playerid ][ pPremium ] ], playerid);

						gsString[ 0 ] = EOS;
						format( gsString, sizeof gsString, "%s[user:%d] bought Premium Account for %d PP. [/shop]", playerVariables[ playerid ][ pNormalName ], GetPlayerMysqlID(playerid), SHOP_ACTIONS[ listitem ][ shop_Price ] );
						submitToAdmins(gsString, COLOR_YELLOW);
						InsertPlayerLog( GetPlayerMysqlID(playerid), 0, gsString );
					}
					case 4: // Warns
					{
						if( playerVariables[ playerid ][ pPremiumPoints ] < SHOP_ACTIONS[ listitem ][ shop_Price ] )		
							return SendClientMessagef( playerid, COLOR_GREY, "Nu ai destule Puncte Premium! (%d PP)", SHOP_ACTIONS[ listitem ][ shop_Price ] );

						if( !playerVariables[ playerid ][ pWarnings ] ) 			
							return SendClientMessage( playerid, COLOR_GREY, "Nu ai niciun warn pe acest cont!" );

						playerVariables[ playerid ][ pWarnings ] = 0;
						TakePlayerPremiumPoints( playerid, SHOP_ACTIONS[ listitem ][ shop_Price ] );
						SendClientMessagef( playerid, COLOR_WHITE, "(!) You have cleared your warns! (-%d Premium Points)", SHOP_ACTIONS[ listitem ][ shop_Price ] );

						gsQuery[ 0 ] = EOS;
						mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerWarnings` = 0 WHERE `id` = %d", GetPlayerMysqlID(playerid) );
						mysql_tquery( g_Handle, gsQuery, "", "" );

						gsString[ 0 ] = EOS;
						format( gsString, sizeof gsString, "%s[user:%d] bought Clear Warns for %d PP. [/shop]", playerVariables[ playerid ][ pNormalName ], GetPlayerMysqlID(playerid), SHOP_ACTIONS[ listitem ][ shop_Price ] );
						submitToAdmins(gsString, COLOR_YELLOW);
						InsertPlayerLog( GetPlayerMysqlID(playerid), 0, gsString );
					}
					case 5: BuyPlayerClearFP( playerid, 20, SHOP_ACTIONS[ listitem ][ shop_Price ] ); // Clear 20 FP
					case 6: BuyPlayerClearFP( playerid, 40, SHOP_ACTIONS[ listitem ][ shop_Price ] ); // Clear 40 FP
					case 7: BuyPlayerClearFP( playerid, 60, SHOP_ACTIONS[ listitem ][ shop_Price ] ); // Clear 60 FP
					case 8: // one hour job boost
					{
						if( playerVariables[ playerid ][ pPremiumPoints ] < SHOP_ACTIONS[ listitem ][ shop_Price ] )		
							return SendClientMessagef( playerid, COLOR_GREY, "Nu ai destule Puncte Premium! (%d PP)", SHOP_ACTIONS[ listitem ][ shop_Price ] );


						playerVariables[ playerid ][ pJobHype ] += 1;
						TakePlayerPremiumPoints( playerid, SHOP_ACTIONS[ listitem ][ shop_Price ] );
						SendClientMessagef( playerid, COLOR_WHITE, "(!) You have bought one hour job boost, now you have %d hours job boost! (-%d Premium Points)", playerVariables[ playerid ][ pJobHype ], SHOP_ACTIONS[ listitem ][ shop_Price ] );

						gsQuery[ 0 ] = EOS;
						mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerJobBoost` = %d WHERE `id` = %d", playerVariables[playerid][pJobHype], GetPlayerMysqlID(playerid) );
						mysql_tquery( g_Handle, gsQuery, "", "" );

						gsString[ 0 ] = EOS;
						format( gsString, sizeof gsString, "%s[user:%d] bought job boost for one hour with %d PP. [/shop]", playerVariables[ playerid ][ pNormalName ], GetPlayerMysqlID(playerid), SHOP_ACTIONS[ listitem ][ shop_Price ] );
						submitToAdmins(gsString, COLOR_YELLOW);
						InsertPlayerLog( GetPlayerMysqlID(playerid), 0, gsString );
					}
					case 9: // three hour job boost
					{
						if( playerVariables[ playerid ][ pPremiumPoints ] < SHOP_ACTIONS[ listitem ][ shop_Price ] )		
							return SendClientMessagef( playerid, COLOR_GREY, "Nu ai destule Puncte Premium! (%d PP)", SHOP_ACTIONS[ listitem ][ shop_Price ] );


						playerVariables[ playerid ][ pJobHype ] += 3;
						TakePlayerPremiumPoints( playerid, SHOP_ACTIONS[ listitem ][ shop_Price ] );
						SendClientMessagef( playerid, COLOR_WHITE, "(!) You have bought job boost for three hours, now you have %d hours job boost! (-%d Premium Points)", playerVariables[ playerid ][ pJobHype ], SHOP_ACTIONS[ listitem ][ shop_Price ] );

						gsQuery[ 0 ] = EOS;
						mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerJobBoost` = %d WHERE `id` = %d", playerVariables[playerid][pJobHype], GetPlayerMysqlID(playerid) );
						mysql_tquery( g_Handle, gsQuery, "", "" );

						gsString[ 0 ] = EOS;
						format( gsString, sizeof gsString, "%s[user:%d] bought job boost for three hour with %d PP. [/shop]", playerVariables[ playerid ][ pNormalName ], GetPlayerMysqlID(playerid), SHOP_ACTIONS[ listitem ][ shop_Price ] );
						submitToAdmins(gsString, COLOR_YELLOW);
						InsertPlayerLog( GetPlayerMysqlID(playerid), 0, gsString );
					}
					case 10: // five hour job boost
					{
						if( playerVariables[ playerid ][ pPremiumPoints ] < SHOP_ACTIONS[ listitem ][ shop_Price ] )		
							return SendClientMessagef( playerid, COLOR_GREY, "Nu ai destule Puncte Premium! (%d PP)", SHOP_ACTIONS[ listitem ][ shop_Price ] );


						playerVariables[ playerid ][ pJobHype ] += 5;
						TakePlayerPremiumPoints( playerid, SHOP_ACTIONS[ listitem ][ shop_Price ] );
						SendClientMessagef( playerid, COLOR_WHITE, "(!) You have bought job boost for five hours, now you have %d hours job boost! (-%d Premium Points)", playerVariables[ playerid ][ pJobHype ], SHOP_ACTIONS[ listitem ][ shop_Price ] );

						gsQuery[ 0 ] = EOS;
						mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerJobBoost` = %d WHERE `id` = %d", playerVariables[playerid][pJobHype], GetPlayerMysqlID(playerid) );
						mysql_tquery( g_Handle, gsQuery, "", "" );

						gsString[ 0 ] = EOS;
						format( gsString, sizeof gsString, "%s[user:%d] bought job boost for five hour with %d PP. [/shop]", playerVariables[ playerid ][ pNormalName ], GetPlayerMysqlID(playerid), SHOP_ACTIONS[ listitem ][ shop_Price ] );
						submitToAdmins(gsString, COLOR_YELLOW);
						InsertPlayerLog( GetPlayerMysqlID(playerid), 0, gsString );
					}
					case 11: // Hidden Color
					{
						if( playerVariables[ playerid ][ pPremiumPoints ] < SHOP_ACTIONS[ listitem ][ shop_Price ] )
							return SendClientMessagef( playerid, COLOR_GREY, "Nu ai destule Puncte Premium! (%d PP)", SHOP_ACTIONS[ listitem ][ shop_Price ] );

						playerVariables[ playerid ][ pHiddenColors ]++;
						TakePlayerPremiumPoints( playerid, SHOP_ACTIONS[ listitem ][ shop_Price ] );
						SendClientMessagef( playerid, COLOR_RED, "(!) You have bought a hidden vehicle color! (-%d Premium Points)", SHOP_ACTIONS[ listitem ][ shop_Price ] );

						gsQuery[ 0 ] = EOS;
						mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerHiddens` = %d WHERE `id` = %d", playerVariables[ playerid ][ pHiddenColors ], GetPlayerMysqlID(playerid) );
						mysql_tquery( g_Handle, gsQuery, "", "" );

						gsString[ 0 ] = EOS;
						format( gsString, sizeof gsString, "%s[user:%d] bought a Hidden Color for %d PP. [/shop]", playerVariables[ playerid ][ pNormalName ], GetPlayerMysqlID(playerid), SHOP_ACTIONS[ listitem ][ shop_Price ] );
						submitToAdmins(gsString, COLOR_YELLOW);
						InsertPlayerLog( GetPlayerMysqlID(playerid), 0, gsString );
					}
					case 12: //Pet
					{
						#if defined PET
							if( playerVariables[ playerid ][ pPremiumPoints ] < SHOP_ACTIONS[ listitem ][ shop_Price ] )
								return SendClientMessagef( playerid, COLOR_GREY, "Nu ai destule Puncte Premium! (%d PP)", SHOP_ACTIONS[ listitem ][ shop_Price ] );

							if(playerVariables[playerid][pPet] == 1)
								return SendClientMessage(playerid, COLOR_GREY, "You already own a pet. Use /pet for more info.");

							playerVariables[ playerid ][ pPet ] = 1;
							playerVariables[ playerid ][ pPetType ][0] = 1;
							playerVariables[ playerid ][ pPetID ] = 19078;
							playerVariables[ playerid ][ pPetStatus ] = 0;
							playerVariables[ playerid ][ pPetLevel ] = 1;
							playerVariables[ playerid ][ pPetPoints ] = 0;
							format( playerVariables[ playerid ][ pPetName ], 35, "BGZ-PET" );
							TakePlayerPremiumPoints( playerid, SHOP_ACTIONS[ listitem ][ shop_Price ] );
							SendClientMessagef( playerid, COLOR_RED, "(!) You have bought a Pet. Use /pet for more information! (-%d Premium Points)", SHOP_ACTIONS[ listitem ][ shop_Price ] );

							gsString[ 0 ] = EOS;
							format( gsString, sizeof gsString, "%s[user:%d] bought a Pet for %d PP. [/shop]", playerVariables[ playerid ][ pNormalName ], GetPlayerMysqlID(playerid), SHOP_ACTIONS[ listitem ][ shop_Price ] );
							submitToAdmins(gsString, COLOR_YELLOW);
							InsertPlayerLog( GetPlayerMysqlID(playerid), 0, gsString );
						#else
							SendClientMessagef( playerid, COLOR_GREY, "Acest sistem este dezactivat temporar!" );
						#endif
					}
					case 13: //Crate
					{
						#if defined CRATES
							if( playerVariables[ playerid ][ pPremiumPoints ] < SHOP_ACTIONS[ listitem ][ shop_Price ] )
								return SendClientMessagef( playerid, COLOR_GREY, "Nu ai destule Puncte Premium! (%d PP)", SHOP_ACTIONS[ listitem ][ shop_Price ] );

							playerVariables[ playerid ][ pCrates]++;
							TakePlayerPremiumPoints( playerid, SHOP_ACTIONS[ listitem ][ shop_Price ] );
							SendClientMessagef( playerid, COLOR_RED, "(!) You have bought a Crate. Use /opencrate to open it. (-%d Premium Points)", SHOP_ACTIONS[ listitem ][ shop_Price ] );

							gsString[ 0 ] = EOS;
							format( gsString, sizeof gsString, "%s[user:%d] bought a Crate for %d PP. [/shop]", playerVariables[ playerid ][ pNormalName ], GetPlayerMysqlID(playerid), SHOP_ACTIONS[ listitem ][ shop_Price ] );
							submitToAdmins(gsString, COLOR_YELLOW);
							InsertPlayerLog( GetPlayerMysqlID(playerid), 0, gsString );
						#else
							SendClientMessagef( playerid, COLOR_GREY, "Acest sistem este dezactivat temporar!" );
						#endif
					}
					case 14: // Create Clan
					{
						if( playerVariables[ playerid ][ pPremiumPoints ] < SHOP_ACTIONS[ listitem ][ shop_Price ] )
							return SendClientMessagef( playerid, COLOR_GREY, "Nu ai destule Puncte Premium! (%d PP)", SHOP_ACTIONS[ listitem ][ shop_Price ] );

						if( playerVariables[ playerid ][ pClan ] != 0 )				
							return SendClientMessage( playerid, COLOR_WHITE, "Ai deja un clan si nu poti folosi comanda!" );

						ShowPlayerDialog( playerid, DIALOG_PREMIUM_CLAN, DIALOG_STYLE_INPUT, "Premium: Create Clan", "Insert your Clan's Name to continue:", "Buy", "Back" );
					}
					case 15: // 5x Fireworks
					{
						if( playerVariables[ playerid ][ pPremiumPoints ] < SHOP_ACTIONS[ listitem ][ shop_Price ] )
							return SendClientMessagef( playerid, COLOR_GREY, "Nu ai destule Puncte Premium! (%d PP)", SHOP_ACTIONS[ listitem ][ shop_Price ] );

						playerVariables[ playerid ][ pFireworks ]++;
						TakePlayerPremiumPoints( playerid, SHOP_ACTIONS[ listitem ][ shop_Price ] );
						SendClientMessagef( playerid, COLOR_RED, "(!) You have bought 5x Fireworks! (-%d Premium Points) use (/firework)", SHOP_ACTIONS[ listitem ][ shop_Price ] );

						gsString[ 0 ] = EOS;
						format( gsString, sizeof gsString, "%s[user:%d] bought 5x Fireworks for %d PP. [/shop]", playerVariables[ playerid ][ pNormalName ], GetPlayerMysqlID(playerid), SHOP_ACTIONS[ listitem ][ shop_Price ] );
						submitToAdmins(gsString, COLOR_YELLOW);
						InsertPlayerLog( GetPlayerMysqlID(playerid), 0, gsString );
					}
					//case 15: BuyPlayerCash( playerid, 5000, SHOP_ACTIONS[ listitem ][ shop_Price ] ); // 5k - 1 PP
					//case 16: BuyPlayerCash( playerid, 50000, SHOP_ACTIONS[ listitem ][ shop_Price ] ); // 50k - 10 PP
					//case 17: BuyPlayerCash( playerid, 500000, SHOP_ACTIONS[ listitem ][ shop_Price ] ); // 500k - 100 PP
				}
			}
		}
		case DIALOG_PREMIUM_CLAN:
		{
			if( response )
			{
				if( playerVariables[ playerid ][ pClan ] != 0 )				
					return SendClientMessage( playerid, COLOR_WHITE, "Ai deja un clan si nu poti folosi comanda!" );

				if( playerVariables[ playerid ][ pPremiumPoints ] < 100 )	
					return SendClientMessage( playerid, COLOR_WHITE, "Trebuie sa ai 100 puncte premium!" );

				new clanName[ 24 ], escclanName[ 24 ];
				if( sscanf( inputtext, "s[24]", clanName ) )
					return ShowPlayerDialog( playerid, DIALOG_PREMIUM_CLAN, DIALOG_STYLE_INPUT, "Premium: Create Clan", "Insert your Clan's Name to continue:", "Buy", "Back" );

				// < Check if the clan name exists )
				mysql_escape_string( clanName, escclanName );

				foreach( new i : ServerClans )
					if( strfind( clanName, GetGVarStringEx( "clan_Name", i ), true ) != -1 )
					{
						ShowPlayerDialog( playerid, DIALOG_PREMIUM_CLAN, DIALOG_STYLE_INPUT, "Premium: Create Clan", "Insert your Clan's Name to continue:", "Buy", "Back" );
						return SendClientMessagef( playerid, COLOR_GREY, "Acest nume este deja folosit de clanul: %s( TAG: %s )", GetGVarStringEx( "clan_Name", i ), GetGVarStringEx( "clan_Tag", i ) );
					}
				// < Take player PP )
				TakePlayerPremiumPoints( playerid, 100 );
				gsString[ 0 ] = EOS;
				format( gsString, sizeof gsString, "%s[user:%d] bought a new Clan for 100 PP. [/shop]", playerVariables[ playerid ][ pNormalName ], GetPlayerMysqlID(playerid) );
				submitToAdmins(gsString, COLOR_YELLOW);
				InsertPlayerLog( GetPlayerMysqlID(playerid), 0, gsString );

				// < Create the Clan )
				gsQuery[ 0 ] = EOS;
				mysql_format( g_Handle, gsQuery, sizeof gsQuery, "INSERT INTO `server_clans`(`clanName`) VALUES ('%s')", escclanName );
				mysql_tquery( g_Handle, gsQuery, "OnClanCreated", "is", playerid, escclanName );
			}
			else callcmd::shop( playerid, "lol" );
		}
		case DIALOG_PREMIUM_COLORS:
		{
			if( response )
			{
				playerVariables[ playerid ][ pPremiumColor ] = listitem;
				SendClientMessagef( playerid, COLOR_WHITE, "{%s}Server: "COL_W"Nick color changed! Hope you like the new color!", Premium_Colors[ listitem ] );

				gsQuery[ 0 ] = EOS;
				mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerPColor` = %d WHERE `id` = %d", listitem, GetPlayerMysqlID(playerid) );
				mysql_tquery( g_Handle, gsQuery, "", "" );
			}
		}
		case DIALOG_MEMBERS:
		{
			if( response )
			{
				playerVariables[ playerid ][ pSelected ] = listitem;
				//InfoTD_MSG( playerid, 10000, "Ai dat click pe numele ~r~~h~%s", GetGVarStringEx( "fmembers_Name", listitem ) );
				ShowPlayerDialog( playerid, DIALOG_MEMBERS_ACTION, DIALOG_STYLE_LIST, "Select action:", "Uninvite\nChange Rank\nFaction Warn", "Select", "Cancel" );
			}
		}
		case DIALOG_MANAGE_GANG:
		{
			if( response )
			{
				switch( listitem )
				{
					case 0:
					{
						gsQuery[ 0 ] = EOS;
						mysql_format( g_Handle, gsQuery, sizeof gsQuery, "SELECT * FROM `server_accounts` WHERE `playerFaction` = %d ORDER BY `playerFactionRank` DESC", playerVariables[ playerid ][ pFaction ] );
						return mysql_pquery( g_Handle, gsQuery, "LoadFactionMembers", "i", playerid );
					}
					case 1: ShowPlayerDialog( playerid, DIALOG_MANAGE_GANG_MOTD, DIALOG_STYLE_INPUT, "Gang MOTD", "Aici poti schimba motd ul factiunii\nLungimea maxima este de 114 caractere.", "Change", "Back" );
					case 2:
					{
						if( GetGVarInt( "faction_Money", playerVariables[ playerid ][ pFaction ] ) < 10000 )
							return SendClientMessage( playerid, COLOR_GREY, "Nu ai $10.000 in seiful factiunii!" );

						foreach( new i : ServerVehicles )
							if( GetGVarInt( "veh_Faction", i ) == playerVariables[ playerid ][ pFaction ] )
								serverVariables[ VehicleGas ][ i ] = 100.0;

						SetGVarInt( "faction_Money", GetGVarInt( "faction_Money", playerVariables[ playerid ][ pFaction ] ) - 10000, playerVariables[ playerid ][ pFaction ] );
						UpdateFactionSafe( playerVariables[ playerid ][ pFaction ] );
						SendClientMessage( playerid, COLOR_GREY, "Faction vehicles filled! (-$10.000 din Seiful factiunii tale!)" );
					}
					case 3:
					{
						foreach( new i : ServerVehicles )
							if( GetGVarInt( "veh_Faction", i ) == playerVariables[ playerid ][ pFaction ] )
								if( !IsVehicleOccupied( GetGVarInt( "Server_Vehicle", i ) ) )
									SetVehicleToRespawn( GetGVarInt( "Server_Vehicle", i ) ), serverVariables[ VehicleGas ][ i ] = 100.0, LinkVehicleToInterior( GetGVarInt( "Server_Vehicle", i ), 0 ), SetVehicleVirtualWorld( GetGVarInt( "Server_Vehicle", i ), 0 );

						gsString[ 0 ] = EOS;
						format( gsString, sizeof gsString, "(Faction) "COL_W"Leader %s(%i) has respawned faction's vehicles with full gas tank!", username( playerid ), playerid );
						SendToFaction( playerVariables[ playerid ][ pFaction ], COLOR_GENANNOUNCE, gsString );
					}
					case 4:
					{
						gsString[0] = EOS;
						format(gsString, sizeof gsString, "#\tRank\n");
						for(new i; i < 7; i++)
						{
							svString[0] = EOS;
							format(svString, 15, "faction_Rank%d", i+1);
							format(gsString, 256, "%s%d\t%s\n", gsString, i+1, GetGVarStringEx(svString, playerVariables[playerid][pFaction]));
						}
						ShowPlayerDialog(playerid, DIALOG_MANAGE_GANG_RANKS, DIALOG_STYLE_TABLIST_HEADERS, "Select rank to edit:", gsString, "Select", "Back");
					}
				}
			}
		}
		case DIALOG_MANAGE_GANG_RANKS:
		{
			if(response)
			{
				svString[0] = EOS;
				format(svString, 15, "faction_Rank%d", listitem+1);
				gsString[0] = EOS;
				format(gsString, 85, "Introdu noul nume pentru rank-ul #%d, nume actual: {FFFFFF}%s", listitem+1, GetGVarStringEx(svString, playerVariables[playerid][pFaction]));
				ShowPlayerDialog(playerid, DIALOG_MANAGE_GANG_RANKS2, DIALOG_STYLE_INPUT, "Introdu noul nume", gsString, "Change", "Close");
				SetPVarInt(playerid, "RankForChange", listitem+1);
			}
			else 
			{
				ShowPlayerDialog( playerid, DIALOG_MANAGE_GANG, DIALOG_STYLE_LIST, "Select action:", "Members\nChange MOTD\nFaction vehicles refuel\nFaction vehicle respawn (fvr)\nChange rank names", "Select", "Cancel" );
			}
		}
		case DIALOG_MANAGE_GANG_RANKS2:
		{
			if(response)
			{
				new rRank[ 32 ], eureka_Rank[64];
				if( sscanf( inputtext, "s[32]", rRank ) )
					return SendClientMessage(playerid, COLOR_GREY, "Numele rank-ului trebuie sa fie unul valid.");

				if( strlen( rRank ) < 3 || strlen( rRank ) > 32 )
					return SendClientMessage(playerid, COLOR_GREY, "Lungimea trebuie sa fie intre 3 si 32 de caractere.");
				
				mysql_escape_string(inputtext, eureka_Rank);

				svString[ 0 ] = EOS;
				format( svString, 15, "faction_Rank%d", GetPVarInt(playerid, "RankForChange") );
				SetGVarString( svString, eureka_Rank, playerVariables[playerid][pFaction] );
				SendClientMessagef( playerid, COLOR_GENANNOUNCE, "(Faction) "COL_W"Ai schimbat numele rank-ului #%d in: %s", GetPVarInt(playerid, "RankForChange"), rRank);

				gsString[ 0 ] = EOS;
				format( gsString, sizeof gsString, "%s:%s:%s:%s:%s:%s:%s",
					GetGVarStringEx( "faction_Rank1", playerVariables[playerid][pFaction] ), GetGVarStringEx( "faction_Rank2", playerVariables[playerid][pFaction] ),
					GetGVarStringEx( "faction_Rank3", playerVariables[playerid][pFaction] ), GetGVarStringEx( "faction_Rank4", playerVariables[playerid][pFaction] ),
					GetGVarStringEx( "faction_Rank5", playerVariables[playerid][pFaction] ), GetGVarStringEx( "faction_Rank6", playerVariables[playerid][pFaction] ),
					GetGVarStringEx( "faction_Rank7", playerVariables[playerid][pFaction] ) );

				gsQuery[ 0 ] = EOS;
				mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_factions` SET `factionRanks` = '%s' WHERE `factionKey` = %d", gsString, playerVariables[playerid][pFaction] );
				mysql_tquery( g_Handle, gsQuery, "", "" );
				SetPVarInt(playerid, "RankForChange", 0);
			}
			else
			{
				SetPVarInt(playerid, "RankForChange", 0);
			}
		}
		case DIALOG_MANAGE_GANG_MOTD:
		{
			if( response )
			{
				if( playerVariables[ playerid ][ pFactionRank ] < 6 )
					return SendClientMessage( playerid, COLOR_GREY, "Trebuie sa fii Leader/Co-Leader pentru a folosi comanda!" );

				new rMotd[ 114 ];
				if( sscanf( inputtext, "s[114]", rMotd ) )
					return ShowPlayerDialog( playerid, DIALOG_MANAGE_GANG_MOTD, DIALOG_STYLE_INPUT, "Gang MOTD", "Aici poti schimba motd ul factiunii\nLungimea maxima este de 114 caractere.", "Change", "Back" );

				if( strlen( rMotd ) < 1 || strlen( rMotd ) > 114 )
					return ShowPlayerDialog( playerid, DIALOG_MANAGE_GANG_MOTD, DIALOG_STYLE_INPUT, "Gang MOTD", "Aici poti schimba motd ul factiunii\nLungimea maxima este de 114 caractere.", "Change", "Back" );
				new FactionID = playerVariables[ playerid ][ pFaction ];

				SetGVarString( "faction_MOTD", rMotd, FactionID );
				gsString[ 0 ] = EOS;
				format( gsString, 75, "%s has changed the faction motd to:", username( playerid ) );
				SendToFaction( FactionID, COLOR_GENANNOUNCE, gsString );
				SendToFaction( FactionID, COLOR_WHITE, rMotd );
				SendClientMessage( playerid, COLOR_GENANNOUNCE, "(Faction) "COL_W"Ai schimbat Faction MOTD cu success! Tasteaza /showmotd pentru a vizualiza mesajul!" );
				return true;
			}
			else
			{
				ShowPlayerDialog( playerid, DIALOG_MANAGE_GANG, DIALOG_STYLE_LIST, "Select action:", "Members\nChange MOTD\nFaction vehicles refuel\nFaction vehicle respawn (fvr)\nChange rank names", "Select", "Cancel" );
			}
		}
		case DIALOG_CLAN:
		{
			if( response )
			{
				switch( listitem )
				{
					case 0:
					{
						SendClientMessage( playerid, COLOR_GENANNOUNCE, "Clan help:" );
						SendClientMessage( playerid, COLOR_GREY, "/clan - clan menu, /c - clan chat, /cinvite - invite member to clan, /quitclan - quit the clan" );
						SendClientMessage( playerid, COLOR_GREY, "/cmotd - change clan MOTD, /clanmotd - show the curent clan MOTD" );
					}
					case 1: return callcmd::cmembers( playerid, "lol" );
					case 2:
					{
						if( playerVariables[ playerid ][ pClanRank ] < 6 )
							return SendClientMessage( playerid, COLOR_GREY, "You have to be Leader or Co-Leader of the Clan!" );

						ShowPlayerDialog( playerid, DIALOG_CLAN_SETTINGS, DIALOG_STYLE_LIST, "Clan settings", "Clan Rank Names\nChange Clan Chat Color\nChange Clan Tag", "Select", "Back" );
					}
					case 3:
					{
						new clanID = playerVariables[ playerid ][ pClan ];
						gsString[ 0 ] = EOS;
						format( gsString, sizeof gsString, "Remove Clan Tag: %s\nUse Clan Tag #1: %s%s\nUse Clan Tag #2: %s%s", playerVariables[ playerid ][ pNormalName ], GetGVarStringEx( "clan_Tag", clanID ), playerVariables[ playerid ][ pNormalName ], playerVariables[ playerid ][ pNormalName ], GetGVarStringEx( "clan_Tag", clanID ) );
						ShowPlayerDialog( playerid, DIALOG_CLAN_TAG, DIALOG_STYLE_LIST, "Clan Tag", gsString, "Select", "Back" );
					}
					case 4: // Buy clan slots
					{
						if( playerVariables[ playerid ][ pClanRank ] != 7 )
							return SendClientMessage( playerid, COLOR_GREY, "Trebuie sa fii liderul clanului pentru a putea adauga sloturi!" );

						if( playerVariables[ playerid ][ pPremiumPoints ] < 50 )
							return SendClientMessage( playerid, COLOR_GREY, "Trebuie sa ai 50PP in cont pentru a adauga sloturi!" );

						new clanID = playerVariables[ playerid ][ pClan ];
						if( GetGVarInt( "clan_Slots", clanID ) > 80 )
							return SendClientMessage( playerid, COLOR_GREY, "Ai deja numarul maxim de sloturi admis pentru un clan!" );

						gsQuery[ 0 ] = EOS;
						mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_clans` SET `clanSlots` = `clanSlots` + 10 WHERE `clanKey` = %d", clanID );
						mysql_tquery( g_Handle, gsQuery, "", "" );

						playerVariables[ playerid ][ pPremiumPoints ] -= 50;
						SetGVarInt( "clan_Slots", GetGVarInt( "clan_Slots", clanID ) + 10, clanID );
						SendClientMessagef( playerid, COLOR_RED, "(!) You have bought 10 slots for your Clan! (-50 Premium Points)" );

						AdminBroadCast( 1, COLOR_YELLOW, "%s[user:%d] bought 10 slots for his Clan for 50 PP. [/shop]", playerVariables[ playerid ][ pNormalName ], GetPlayerMysqlID(playerid) );
						InsertPlayerLog( GetPlayerMysqlID(playerid), 0, gsString );
					}
				}
			}
		}
		case DIALOG_CLAN_SETTINGS:
		{
			if( response )
			{
				new clanID = playerVariables[ playerid ][ pClan ];
				switch( listitem )
				{
					case 0:
					{
						gsString[ 0 ] = EOS;
						format( gsString, sizeof gsString, "Rank 1: %s\nRank 2: %s\nRank 3: %s\nRank 4: %s\nRank 5: %s\nRank 6: %s\nRank 7: %s", GetGVarStringEx( "clan_Rank1", clanID ), GetGVarStringEx( "clan_Rank2", clanID ), GetGVarStringEx( "clan_Rank3", clanID ), GetGVarStringEx( "clan_Rank4", clanID ), GetGVarStringEx( "clan_Rank5", clanID ), GetGVarStringEx( "clan_Rank6", clanID ), GetGVarStringEx( "clan_Rank7", clanID ) );
						ShowPlayerDialog( playerid, DIALOG_CLAN_CHANGERANK, DIALOG_STYLE_LIST, "Change clan ranks", gsString, "Change", "Back" );
					}
					case 1:
					{
						gsString[ 0 ] = EOS;
						format( gsString, sizeof gsString, "You can go to "SERVER_PANEL"/color to get html color codes\nEnter the HTML code for the clan color:\n"COL_W"Current: {%s}COLOR\n\n{FFFFFF}Type color code(HEX CODE) without symbol '#'", GetGVarStringEx( "clan_Color", clanID ) );
						ShowPlayerDialog( playerid, DIALOG_CLAN_CHANGECOLOR, DIALOG_STYLE_INPUT, "Clan color", gsString, "Change", "Back" );
					}
					case 2:
					{
						gsString[ 0 ] = EOS;
						format( gsString, sizeof gsString, "You can change your clan tag only once!\nMax lenght is 5 characters! You can use brackets aswell '[]' " );
						ShowPlayerDialog( playerid, DIALOG_CLAN_CHANGETAG, DIALOG_STYLE_INPUT, "Clan tag", gsString, "Change", "Back" );
					}
				}
			}
			else return callcmd::clan( playerid, "lol" );
		}
		case DIALOG_CLAN_CHANGETAG:
		{
			if( response )
			{
				if( playerVariables[ playerid ][ pClanRank ] != 7 )			return SendClientMessage( playerid, COLOR_WHITE, "Trebuie sa fii Leader-ul clanului pentru a schimba tagul!" );
				//if( strfind( GetGVarStringEx( "clan_Tag", playerVariables[ playerid ][ pClan ] ), "[NA]", true) == -1 ) return SendClientMessage( playerid, COLOR_WHITE, "Poti schimba tag-ul clanului doar o singura data!" );
				
				new clanTag[ 10 ], escclanTag[ 10 ];
				if( strfind( inputtext, "/", true ) != -1 )
					return SendClientMessage( playerid, COLOR_GREY, "Tag-ul tau contine un caracter invalid!" );

				if( strlen( inputtext ) > 5 )
					return SendClientMessage( playerid, COLOR_GREY, "Tag-ul introdus are mai mult de 5 caractere!" );

				foreach( new i : ServerClans )
					if( strfind( clanTag, GetGVarStringEx( "clan_Tag", i ), true) != -1 && playerVariables[ playerid ][ pClan ] != i )
						return SendClientMessagef( playerid, COLOR_GREY, "Acest TAG este deja folosit de clanul: %s", GetGVarStringEx( "clan_Name", i ) );

				new clanID = playerVariables[ playerid ][ pClan ];
				mysql_escape_string( inputtext, escclanTag );
				SetGVarString( "clan_Tag", escclanTag, clanID );

				foreach(new x : playerClans[ clanID ])
				{
					switch( playerVariables[ x ][ pClanTag ] )
					{
						case 1:
						{
							gsString[ 0 ] = EOS;
							format( gsString, sizeof gsString, "%s%s", GetGVarStringEx( "clan_Tag", clanID ), playerVariables[ x ][ pNormalName ] );
							SetPlayerName( x, gsString );
						}
						case 2:
						{
							gsString[ 0 ] = EOS;
							format( gsString, sizeof gsString, "%s%s", playerVariables[ x ][ pNormalName ], GetGVarStringEx( "clan_Tag", clanID ) );
							SetPlayerName( x, gsString );
						}
					}
				}
				gsQuery[ 0 ] = EOS;
				mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_clans` SET `clanTag` = '%s' WHERE `clanKey` = %d", escclanTag, clanID );
				mysql_tquery( g_Handle, gsQuery, "", "" );
				SendClientMessagef( playerid, ~1, "You have changed the clan's tag to: %s", escclanTag );
			}
			else return callcmd::clan( playerid, "lol" );
		}
		case DIALOG_CLAN_CHANGECOLOR:
		{
			if( response )
			{
				new colorLen = strlen( inputtext );
				if( colorLen < 6 || colorLen > 6 )
					return SendClientMessage( playerid, COLOR_WHITE, "Culoare invalida, te rugam foloseste pagina: "SERVER_PANEL"/color" );

				for( new i=0; i<colorLen; i++ )
					if( (inputtext[i] < 'A' && inputtext[i] > 'F') || (inputtext[i] < '0' && inputtext[i] > '9') )
						return SendClientMessage( playerid, COLOR_WHITE, "Culoare invalida, te rugam foloseste pagina: "SERVER_PANEL"/color" );

				gsQuery[ 0 ] = EOS;
				mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_clans` SET `clanColor` = '%s' WHERE `clanKey` = %d", inputtext, playerVariables[ playerid ][ pClan ] );
				mysql_tquery( g_Handle, gsQuery, "", "" );

				gsString[ 0 ] = EOS;
				format( gsString, sizeof gsString, "%s changed the clan color to: {%s}%s", playerVariables[ playerid ][ pNormalName ], inputtext, inputtext );
				SendToClan( playerVariables[ playerid ][ pClan ], COLOR_GENANNOUNCE, gsString );
				SetGVarString( "clan_Color", inputtext, playerVariables[ playerid ][ pClan ] );
			}
			else return callcmd::clan( playerid, "lol" );
		}
		case DIALOG_CLAN_CHANGERANK:
		{
			if( response )
			{
				svString[ 0 ] = EOS;
				format( svString, sizeof svString, "clan_Rank%d", listitem+1 );
				playerVariables[ playerid ][ pSelectRank ] = listitem+1;

				gsString[ 0 ] = EOS;
				format( gsString,sizeof gsString, "Current clan rank %d: %s\n\nSet a new clan rank:", listitem+1, GetGVarStringEx( svString, listitem+1 ) );
				ShowPlayerDialog( playerid, DIALOG_CLAN_CHANGERANK_DONE, DIALOG_STYLE_INPUT, "Change clan rank", gsString, "Change", "Back" );
			}
			else return callcmd::clan( playerid, "lol" );
		}
		case DIALOG_CLAN_CHANGERANK_DONE:
		{
			if( response )
			{
				new clanID = playerVariables[ playerid ][ pClan ];
				svString[ 0 ] = EOS;
				format( svString, sizeof svString, "clan_Rank%d", playerVariables[ playerid ][ pSelectRank ] );
				SetGVarString( svString, inputtext, clanID );

				gsString[ 0 ] = EOS;
				format( gsString, sizeof gsString, "%s:%s:%s:%s:%s:%s:%s",
					GetGVarStringEx( "clan_Rank1", clanID ), GetGVarStringEx( "clan_Rank2", clanID ), GetGVarStringEx( "clan_Rank3", clanID ),
					GetGVarStringEx( "clan_Rank4", clanID ), GetGVarStringEx( "clan_Rank5", clanID ), GetGVarStringEx( "clan_Rank6", clanID ), GetGVarStringEx( "clan_Rank7", clanID ) );

				gsQuery[ 0 ] = EOS;
				mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_clans` SET `clanRanks` = '%s' WHERE `clanKey` = %d", gsString, clanID );
				mysql_tquery( g_Handle, gsQuery, "", "" );
				SendClientMessagef( playerid, COLOR_WHITE, "{%s}Clan rank %d has been changed to: %s", GetGVarStringEx( "clan_Color", clanID ), playerVariables[ playerid ][ pSelectRank ], inputtext );
			}
			else return callcmd::clan( playerid, "lol" );
		}
		case DIALOG_CLAN_TAG:
		{
			if( response )
			{
				new clanID = playerVariables[ playerid ][ pClan ];
				switch( listitem )
				{
					case 0:
					{
						SetPlayerName( playerid, playerVariables[ playerid ][ pNormalName ] );
						SendClientMessagef( playerid, COLOR_GENANNOUNCE, "Your nickname is now: %s", playerVariables[ playerid ][ pNormalName ] );
					}
					case 1:
					{
						gsString[ 0 ] = EOS;
						format( gsString, sizeof gsString, "%s%s", GetGVarStringEx( "clan_Tag", clanID ), playerVariables[ playerid ][ pNormalName ] );
						SetPlayerName( playerid, gsString );
						SendClientMessagef( playerid, COLOR_GENANNOUNCE, "Your nickname is now: %s", gsString );
					}
					case 2:
					{
						gsString[ 0 ] = EOS;
						format( gsString, sizeof gsString, "%s%s", playerVariables[ playerid ][ pNormalName ], GetGVarStringEx( "clan_Tag", clanID ) );
						SetPlayerName( playerid, gsString );
						SendClientMessagef( playerid, COLOR_GENANNOUNCE, "Your nickname is now: %s", gsString );
					}
				}

				gsString[ 0 ] = EOS;
				format( gsString, 64, "%s(%d) / "SERVER_LOGO"", username(playerid), playerid );
				PlayerTextDrawSetString( playerid, PlayerText:SERVER_TD[ 0 ] , gsString );

				PlayerTextDrawShow( playerid, PlayerText:SERVER_TD[ 0 ] );
				playerVariables[ playerid ][ pClanTag ] = listitem;

				gsQuery[ 0 ] = EOS;
				mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerClanTag` = %d WHERE `id` = %d", listitem, GetPlayerMysqlID(playerid) );
				mysql_tquery( g_Handle, gsQuery, "", "" );
			}
			else return callcmd::clan( playerid, "lol" );
		}
		case DIALOG_EMAIL_LIST:
		{
			if( response )
			{
				gsString[ 0 ] = EOS;
				format( gsString, sizeof gsString, "%s\n\n%s", GetGVarStringEx( "email_Text", listitem ), GetGVarStringEx( "email_Date", listitem ) );
				ShowPlayerDialog( playerid, DIALOG_EMAIL_SHOW, DIALOG_STYLE_MSGBOX, "Read email", gsString, "Back", "Exit" );

				// < Verificam daca e-mailul este necitit si-i schimbam statusul! )
				if( !GetGVarInt( "email_Read", listitem ) )
				{
					gsQuery[ 0 ] = EOS;
					mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_emails` SET `emailRead` = 1 WHERE `emailKey` = %d", GetGVarInt( "email_Key", listitem ) );
					mysql_tquery( g_Handle, gsQuery, "", "" );
				}
			}
		}
		case DIALOG_EMAIL_SHOW:
		{
			if( response )
				return callcmd::email( playerid, "lol" );
		}
		case DIALOG_CLAN_MEMBERS:
		{
			if( response )
			{
				if( listitem != 0 )
				{
					format( playerVariables[ playerid ][ pSelectClanName ], MAX_PLAYER_NAME, "%s", GetGVarStringEx( "Cmembers_Name", listitem-1 ) );
					playerVariables[ playerid ][ pSelectClanKey ] = GetGVarInt( "Cmembers_Key", listitem-1 );

					switch( playerVariables[ playerid ][ pClanRank ] )
					{
						case 6..7: ShowPlayerDialog( playerid, DIALOG_CLAN_MEMBER_VIEW, DIALOG_STYLE_MSGBOX, "Manage user", ClanMember_String( listitem-1 ), "Back", "Manage" );
						default: ShowPlayerDialog( playerid, DIALOG_CLAN_MEMBER_VIEW, DIALOG_STYLE_MSGBOX, "Manage user", ClanMember_String( listitem-1 ), "Back", "" );
					}
				}
				else SendClientMessage( playerid, COLOR_LIGHT, "Foloseste comanda /cinvite pentru a adauga noi membri clanului!" );
			}
			else return callcmd::clan( playerid, "lol" );
		}
		case DIALOG_CLAN_MEMBER_VIEW:
		{
			if( response ) 
				return callcmd::cmembers( playerid, "lol" );

			if( !response && playerVariables[ playerid ][ pClanRank ] >= 6 )
				return ShowPlayerDialog( playerid, DIALOG_CLAN_MEMBER_SETTINGS, DIALOG_STYLE_LIST, "Manage user", "Set clan rank\nSet clan warn\nUninvite from clan", "Select", "Back" );
		}
		case DIALOG_CLAN_MEMBER_SETTINGS:
		{
			if( response )
			{
				switch( listitem )
				{
					case 0: // Clan Rank
					{
						switch( playerVariables[ playerid ][ pClanRank ] )
						{
							case 7: 	ShowPlayerDialog( playerid, DIALOG_CLAN_MEMBER_RANK, DIALOG_STYLE_LIST, "Set user rank", "Set rank 1\nSet rank 2\nSet rank 3\nSet rank 4\nSet rank 5\nSet rank 6\nSet rank 7 - you will get demoted to rank 6", "Select", "Back" );
							default: 	ShowPlayerDialog( playerid, DIALOG_CLAN_MEMBER_RANK, DIALOG_STYLE_LIST, "Set user rank", "Set rank 1\nSet rank 2\nSet rank 3\nSet rank 4\nSet rank 5", "Select", "Back" );
						}
					}
					case 1: return ShowPlayerDialog( playerid, DIALOG_CLAN_MEMBER_WARNS, DIALOG_STYLE_LIST, "Set user warns", "Warns: 0/3\nWarns: 1/3\nWarns: 2/3", "Select", "Back" );
					case 2:
					{
						new clanID = playerVariables[ playerid ][ pClan ];
						if( GetPlayerMysqlID(playerid) == playerVariables[ playerid ][ pSelectClanKey ] )
							return SendClientMessage( playerid, COLOR_GREY, "You can't uninvite yourself, please use /quitclan!" );

						gsString[ 0 ] = EOS;
						format( gsString, sizeof gsString, "%s left the clan (uninvited by %s).", playerVariables[ playerid ][ pSelectClanName ], playerVariables[ playerid ][ pNormalName ] );
						SendToClan( clanID, COLOR_GENANNOUNCE, gsString );
						InsertClanLog( playerid, clanID, gsString );

						gsQuery[ 0 ] = EOS;
						mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_clans` SET `clanMembers` = `clanMembers` - 1 WHERE `clanKey` = %d", clanID );
						mysql_tquery( g_Handle, gsQuery, "", "" );

						gsQuery[ 0 ] = EOS;
						mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerClan` = 0, `playerClanRank` = 0, `playerClanWarns` = 0, `playerClanDays` = 0, `playerClanJoined` = 'N/A' WHERE `id` = %d", playerVariables[ playerid ][ pSelectClanKey ] );
						mysql_tquery( g_Handle, gsQuery, "", "" );

						gsString[ 0 ] = EOS;
						format( gsString, sizeof gsString, "%s te-a dat afara din clan-ul %s.", username( playerid ), GetGVarStringEx( "clan_Name", clanID ) );
						InsertPlayerMail( playerVariables[ playerid ][ pSelectClanKey ], gsString );

						new pID = GetPlayerIDFromKey( playerVariables[ playerid ][ pSelectClanKey ] );
						if( IsPlayerConnected( pID ) )
						{
							if(Iter_Contains(playerClans[clanID], pID)) Iter_Remove(playerClans[clanID], pID);
							playerVariables[ pID ][ pClan ] = 0;
							playerVariables[ pID ][ pClanTag ] = 0;
							playerVariables[ pID ][ pClanWarns ] = 0;
							playerVariables[ pID ][ pClanDays ] = 0;
							playerVariables[ pID ][ pClanRank ] = 0;
							SetPlayerName( playerid, playerVariables[ playerid ][ pNormalName ] );
						}
					}
				}
			}
			else return callcmd::cmembers( playerid, "lol" );
		}
		case DIALOG_CLAN_MEMBER_WARNS:
		{
			if( response )
			{
				new clanID = playerVariables[ playerid ][ pClan ];
				new playerKey = playerVariables[ playerid ][ pSelectClanKey ];

				gsString[ 0 ] = EOS;
				format( gsString, sizeof gsString, "%s changed %s warn level to %d.", playerVariables[ playerid ][ pNormalName ], playerVariables[ playerid ][ pSelectClanName ], listitem );
				SendToClan( clanID, COLOR_WHITE, gsString );
				InsertClanLog( playerid, clanID, gsString );

				gsQuery[ 0 ] = EOS;
				mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerClanWarns` = %d WHERE `id` = %d", listitem, playerKey );
				mysql_tquery( g_Handle, gsQuery, "", "" );

				new pID = GetPlayerIDFromKey( playerVariables[ playerid ][ pSelectClanKey ] );
				if( IsPlayerConnected( pID ) )
				{
					playerVariables[ pID ][ pClanWarns ] = listitem;
				}
			}
			else return callcmd::cmembers( playerid, "lol" );
		}
		case DIALOG_CLAN_MEMBER_RANK:
		{
			if( response )
			{
				new clanID = playerVariables[ playerid ][ pClan ];
				new playerKey = playerVariables[ playerid ][ pSelectClanKey ];

				if( playerKey == GetPlayerMysqlID(playerid) )
					return SendClientMessagef( playerid, COLOR_GREY, "Esti owner-ul clanului, nu iti poti schimba rank-ul!" );

				if( listitem + 1 == 7 && playerVariables[ playerid ][ pClanRank ] == 7 && playerKey != GetPlayerMysqlID(playerid) )
				{
					gsQuery[ 0 ] = EOS;
					mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerClanRank` = 6 WHERE `id` = %d", GetPlayerMysqlID(playerid) );
					mysql_tquery( g_Handle, gsQuery, "", "" );

					// < Set player's rank 6 )
					playerVariables[ playerid ][ pClanRank ] = 6;
					SendClientMessagef( playerid, COLOR_LIGHTBLUE, "[CLAN] Ai primit rank 6 pentru ca ai renuntat la functia de owner al clanului!" );
				}
				gsString[ 0 ] = EOS;
				format( gsString, sizeof gsString, "%s changed %s rank to %d.", playerVariables[ playerid ][ pNormalName ], playerVariables[ playerid ][ pSelectClanName ], listitem+1 );
				SendToClan( clanID, COLOR_WHITE, gsString );
				InsertClanLog( playerid, clanID, gsString );

				gsQuery[ 0 ] = EOS;
				mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerClanRank` = %d WHERE `id` = %d", listitem+1, playerKey );
				mysql_tquery( g_Handle, gsQuery, "", "" );

				new pID = GetPlayerIDFromKey( playerVariables[ playerid ][ pSelectClanKey ] );
				if( IsPlayerConnected( pID ) )
					playerVariables[ pID ][ pClanRank ] = listitem+1;
			}
		}
		case DIALOG_MEMBERS_ACTION: // Faction Members
		{
			if( response )
			{
				switch( listitem )
				{
					case 0:
					{
						if( playerVariables[ playerid ][ pFactionRank ] < 6 )		return SendClientMessage( playerid, -1, "You are not the leader/co-leader of this faction!" );
						ShowPlayerDialog( playerid, DIALOG_MEMBERS_UNINVITE, DIALOG_STYLE_LIST, "Uninvite Player: Select FP", "With Faction Punish[20 FP]\nWithout Faction Punish[0 FP]", "OK", "Cancel" );
					}
					case 1:
					{
						if( playerVariables[ playerid ][ pFactionRank ] < 6 )		return SendClientMessage( playerid, -1, "You are not the leader/co-leader of this faction!" );
						ShowPlayerDialog( playerid, DIALOG_MEMBERS_FACTIONRANK, DIALOG_STYLE_LIST, "Rank Player: Select Rank", "Rank 1\nRank 2\nRank 3\nRank 4\nRank 5\nRank 6", "Select", "Cancel" );
					}
					case 2:
					{
						if( playerVariables[ playerid ][ pFactionRank ] < 6 )		return SendClientMessage( playerid, -1, "You are not the leader/co-leader of this faction!" );
						ShowPlayerDialog( playerid, DIALOG_MEMBERS_FACTIONWARNS, DIALOG_STYLE_LIST, "Warn Player: Select Warn", "Warns: 0/3\nWarns: 1/3\nWarns: 2/3\nWarns: 3/3", "Select", "Cancel" );
					}
				}
			}
		}
		case DIALOG_MEMBERS_UNINVITE:
		{
			if( response )
			{
				if( GetGVarInt( "fmembers_FactionRank", playerVariables[ playerid ][ pSelected ] ) == 7 )
					return SendClientMessage( playerid, COLOR_GREY, "Nu poti da uninvite unui lider din factiunea ta!" );

				new PlayerDays = GetGVarInt( "fmembers_Days", playerVariables[ playerid ][ pSelected ] );
				switch( listitem )
				{
					case 0:
					{
						gsString[ 0 ] = EOS;
						format( gsString, sizeof gsString, "Esti pe cale sa-i dai uninvite lui %s cu 20 FP.\nAcesta are %d zile in factiune.\nScrie motivul pentru uninvite mai jos:\n\n", 
							GetGVarStringEx( "fmembers_Name", playerVariables[ playerid ][ pSelected ] ), PlayerDays );

						format( gsString, sizeof gsString, "%sAtentie!!! Playerii ce au peste 14 zile se vor da afara fara FP,\ncu exceptia cazurilor in care acesta incalca regulile factiunii.", gsString );
						ShowPlayerDialog( playerid, DIALOG_UNINVITE_FP, DIALOG_STYLE_INPUT, "Uninvite Player: With FP", gsString, "Uninvite", "Cancel" );
					}
					case 1:
					{
						gsString[ 0 ] = EOS;
						format( gsString, sizeof gsString, "Esti pe cale sa-i dai uninvite lui %s fara FP.\nAcesta are %d zile in factiune.\nScrie motivul pentru uninvite mai jos:\n\n", 
							GetGVarStringEx( "fmembers_Name", playerVariables[ playerid ][ pSelected ] ), PlayerDays );

						format( gsString, sizeof gsString, "%sAtentie!!! Playerii ce au sub 14 zile in factiune se vor da afara cu FP,\ncu exceptia cazurilor in care un owner iti spune ca e ok sa dai uninvite fara FP.", gsString );
						ShowPlayerDialog( playerid, DIALOG_UNINVITE_NOFP, DIALOG_STYLE_INPUT, "Uninvite Player: Without FP", gsString, "Uninvite", "Cancel" );
					}
				}
			}
		}
		case DIALOG_UNINVITE_FP:
		{
			if( response )
			{
				new PlayerKey = GetGVarInt( "fmembers_Key", playerVariables[ playerid ][ pSelected ] ),
				PlayerRank = GetGVarInt( "fmembers_FactionRank", playerVariables[ playerid ][ pSelected ] ),
				PlayerDays = GetGVarInt( "fmembers_Days", playerVariables[ playerid ][ pSelected ] ),
				Player = GetPlayerIDFromKey( PlayerKey ),
				FactionID = playerVariables[ playerid ][ pFaction ];

				if( GetPlayerMysqlID(playerid) == PlayerKey && playerVariables[ playerid ][ pFactionRank ] == 7 )
					return SendClientMessage( playerid, COLOR_GREY, "Nu poti sa-ti dai uninvite pentru ca esti liderul factiunii!" );

				if( playerVariables[ playerid ][ pFactionRank ] < 7 && PlayerRank == 7 )
					return SendClientMessage( playerid, COLOR_GREY, "Nu poti sa dai uninvite liderului!" );

				if( IsPlayerConnected( Player ) )
				{
					Faction_UninvitePlayer( playerid, Player, 20, inputtext );
				}
				else
				{
					// < Announce the faction )
					gsString[ 0 ] = EOS;
					format( gsString, sizeof gsString, "%s was uninvited by Leader %s from faction %s (rank %d) after %d days with 20 FP. Reason: %s", GetGVarStringEx( "fmembers_Name", playerVariables[ playerid ][ pSelected ] ), playerVariables[ playerid ][ pNormalName ], GetGVarStringEx( "faction_Name", FactionID ), PlayerRank, PlayerDays, inputtext );
					SendToFaction( FactionID, COLOR_GENANNOUNCE, gsString );

					SendClientMessage( playerid, COLOR_GREY, "L-ai dat afara pe acel player din factiunea din care facea parte!" );
					InsertFactionLog( gsString, FactionID, PlayerKey, GetGVarStringEx( "fmembers_Name", playerVariables[ playerid ][ pSelected ] ), GetPlayerMysqlID(playerid), playerVariables[ playerid ][ pNormalName ] );
					ResetPlayerFactionRaport( PlayerKey );

					// < Update Panel Info )
					gsString[ 0 ] = EOS;
					format( gsString, sizeof gsString, "was uninvited by Leader %s from faction %s (rank %d) after %d days with 20 FP. Reason: %s", playerVariables[ playerid ][ pNormalName ], GetGVarStringEx( "faction_Name", FactionID ), PlayerRank, PlayerDays, inputtext );
					gsQuery[ 0 ] = EOS;
					mysql_format( g_Handle, gsQuery, sizeof gsQuery, "INSERT INTO `server_feed`(`playerKey`,`playerName`,`logText`) VALUES (%d, '%s', '%s')", PlayerKey, GetGVarStringEx( "fmembers_Name", playerVariables[ playerid ][ pSelected ] ), gsString );
					mysql_tquery( g_Handle, gsQuery, "", "" );

					// < Send player E-Mail )
					gsString[ 0 ] = EOS;
					format( gsString, sizeof gsString, "%s te-a dat afara din factiunea %s cu 20 FP si Reason: %s", playerVariables[ playerid ][ pNormalName ], GetGVarStringEx( "faction_Name", FactionID ), inputtext );
					InsertPlayerMail( PlayerKey, gsString );

					// < Update faction members )
					switch( PlayerRank )
					{
						case 7:
						{
							gsQuery[ 0 ] = EOS;
							mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_factions` SET `factionMembers` = `factionMembers` - 1, `factionLeaders` = `factionLeaders` - 1 WHERE `factionKey` = %d", FactionID );
							mysql_tquery( g_Handle, gsQuery, "", "" );
							SetGVarInt( "faction_Members", GetGVarInt( "faction_Members", FactionID ) - 1, FactionID );
							SetGVarInt( "faction_Leaders", GetGVarInt( "faction_Leaders", FactionID ) - 1, FactionID );
						}
						default:
						{
							gsQuery[ 0 ] = EOS;
							mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_factions` SET `factionMembers` = `factionMembers` - 1 WHERE `factionKey` = %d", FactionID );
							mysql_tquery( g_Handle, gsQuery, "", "" );
							SetGVarInt( "faction_Members", GetGVarInt( "faction_Members", FactionID ) - 1, FactionID );
						}
					}
					gsQuery[ 0 ] = EOS;
					mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerFaction` = 0, `playerFactionRank` = 0, `playerFactionDays` = 0, `playerFW` = 0, `playerFP` = 20, `playerSkin` = 60 WHERE `id` = %d", PlayerKey );
					mysql_tquery( g_Handle, gsQuery, "", "" );
				}
			}
		}
		case DIALOG_UNINVITE_NOFP:
		{
			if( response )
			{
				new PlayerKey = GetGVarInt( "fmembers_Key", playerVariables[ playerid ][ pSelected ] ),
					PlayerRank = GetGVarInt( "fmembers_FactionRank", playerVariables[ playerid ][ pSelected ] ),
					PlayerDays = GetGVarInt( "fmembers_Days", playerVariables[ playerid ][ pSelected ] ),
					Player = GetPlayerIDFromKey( PlayerKey ),
					FactionID = playerVariables[ playerid ][ pFaction ];

				if( GetPlayerMysqlID(playerid) == PlayerKey && playerVariables[ playerid ][ pFactionRank ] == 7 )
					return SendClientMessage( playerid, COLOR_GREY, "Nu poti sa-ti dai uninvite pentru ca esti liderul factiunii!" );

				if( playerVariables[ playerid ][ pFactionRank ] < 7 && PlayerRank == 7 )
					return SendClientMessage( playerid, COLOR_GREY, "Nu poti sa dai uninvite liderului!" );

				if( IsPlayerConnected( Player ) )
				{
					Faction_UninvitePlayer( playerid, Player, 0, inputtext );
				}
				else
				{
					// < Announce the faction )
					gsString[ 0 ] = EOS;
					format( gsString, sizeof gsString, "%s was uninvited by Leader %s from faction %s (rank %d) after %d days without FP. Reason: %s", GetGVarStringEx( "fmembers_Name", playerVariables[ playerid ][ pSelected ] ), playerVariables[ playerid ][ pNormalName ], GetGVarStringEx( "faction_Name", FactionID ), PlayerRank, PlayerDays, inputtext );
					SendToFaction( FactionID, COLOR_GENANNOUNCE, gsString );

					SendClientMessage( playerid, COLOR_GREY, "L-ai dat afara pe acel player din factiunea din care facea parte!" );
					InsertFactionLog( gsString, FactionID, PlayerKey, GetGVarStringEx( "fmembers_Name", playerVariables[ playerid ][ pSelected ] ), GetPlayerMysqlID(playerid), playerVariables[ playerid ][ pNormalName ] );
					ResetPlayerFactionRaport( PlayerKey );

					// < Update Panel Info )
					gsString[ 0 ] = EOS;
					format( gsString, sizeof gsString, "was uninvited by Leader %s from faction %s (rank %d) after %d days without FP. Reason: %s", playerVariables[ playerid ][ pNormalName ], GetGVarStringEx( "faction_Name", FactionID ), PlayerRank, PlayerDays, inputtext );
					gsQuery[ 0 ] = EOS;
					mysql_format( g_Handle, gsQuery, sizeof gsQuery, "INSERT INTO `server_feed`(`playerKey`,`playerName`,`logText`) VALUES (%d, '%s', '%s')", PlayerKey, GetGVarStringEx( "fmembers_Name", playerVariables[ playerid ][ pSelected ] ), gsString );
					mysql_tquery( g_Handle, gsQuery, "", "" );

					// < Send player E-Mail )
					gsString[ 0 ] = EOS;
					format( gsString, sizeof gsString, "%s te-a dat afara din factiunea %s fara FP si Reason: %s", playerVariables[ playerid ][ pNormalName ], GetGVarStringEx( "faction_Name", FactionID ), inputtext );
					InsertPlayerMail( PlayerKey, gsString );

					// < Update faction members )
					switch( PlayerRank )
					{
						case 7:
						{
							gsQuery[ 0 ] = EOS;
							mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_factions` SET `factionMembers` = `factionMembers` - 1, `factionLeaders` = `factionLeaders` - 1 WHERE `factionKey` = %d", FactionID );
							mysql_tquery( g_Handle, gsQuery, "", "" );
							SetGVarInt( "faction_Members", GetGVarInt( "faction_Members", FactionID ) - 1, FactionID );
							SetGVarInt( "faction_Leaders", GetGVarInt( "faction_Leaders", FactionID ) - 1, FactionID );
						}
						default:
						{
							gsQuery[ 0 ] = EOS;
							mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_factions` SET `factionMembers` = `factionMembers` - 1 WHERE `factionKey` = %d", FactionID );
							mysql_tquery( g_Handle, gsQuery, "", "" );
							SetGVarInt( "faction_Members", GetGVarInt( "faction_Members", FactionID ) - 1, FactionID );
						}
					}
					gsQuery[ 0 ] = EOS;
					mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerFaction` = 0, `playerFactionRank` = 0, `playerFactionDays` = 0, `playerFW` = 0, `playerFP` = 0, `playerSkin` = 60 WHERE `id` = %d", PlayerKey );
					mysql_tquery( g_Handle, gsQuery, "", "" );
				}
			}
		}
		case DIALOG_MEMBERS_FACTIONRANK:
		{
			if( response )
			{
				new pRank = listitem + 1, FactionID = playerVariables[ playerid ][ pFaction ],
					PlayerKey = GetGVarInt( "fmembers_Key", playerVariables[ playerid ][ pSelected ] ),
					PlayerRank = GetGVarInt( "fmembers_FactionRank", playerVariables[ playerid ][ pSelected ] ),
					Player = GetPlayerIDFromKey( PlayerKey );

				if( GetPlayerMysqlID(playerid) == PlayerKey && playerVariables[ playerid ][ pFactionRank ] == 7 )
					return SendClientMessage( playerid, COLOR_GREY, "Nu poti sa-ti schimbi rank-ul pentru ca esti liderul factiunii!" );

				if( playerVariables[ playerid ][ pFactionRank ] < 7 && PlayerRank == 7 )
					return SendClientMessage( playerid, COLOR_GREY, "Nu poti sa-ti schimbi rank-ul liderului!" );

				if( IsPlayerConnected( Player ) )
				{
					svString[ 0 ] = EOS;
					format( svString, sizeof svString, "faction_Rank%d", pRank );
					playerVariables[ Player ][ pFactionRank ] = pRank;
					SetPlayerFactionSkin( Player );
					SendClientMessagef( Player, COLOR_NICESKY, "%s has promoted you to the rank of %s (%d).", playerVariables[ playerid ][ pNormalName ], GetGVarStringEx( svString, FactionID ), pRank );

					gsString[ 0 ] = EOS;
					format( gsString, sizeof gsString, "%s has promoted %s to the rank of %s (%d).", playerVariables[ playerid ][ pNormalName ], playerVariables[ Player ][ pNormalName ], GetGVarStringEx( svString, FactionID ), pRank );
					InsertFactionLog( gsString, FactionID, GetPlayerMysqlID(Player), playerVariables[ Player ][ pNormalName ], GetPlayerMysqlID(playerid), playerVariables[ playerid ][ pNormalName ] );
				}
				svString[ 0 ] = EOS;
				format( svString, sizeof svString, "faction_Rank%d", pRank );

				gsString[ 0 ] = EOS;
				format( gsString, sizeof gsString, "%s has promoted %s to the rank of %s (%d).", playerVariables[ playerid ][ pNormalName ], GetGVarStringEx( "fmembers_Name", playerVariables[ playerid ][ pSelected ] ), GetGVarStringEx( svString, FactionID ), pRank );
				InsertFactionLog( gsString, FactionID, PlayerKey, GetGVarStringEx( "fmembers_Name", playerVariables[ playerid ][ pSelected ] ), GetPlayerMysqlID(playerid), playerVariables[ playerid ][ pNormalName ] );

				SendClientMessagef( playerid, COLOR_WHITE, "You have promoted %s to the rank of %s (%d).", GetGVarStringEx( "fmembers_Name", playerVariables[ playerid ][ pSelected ] ), GetGVarStringEx( svString, FactionID ), pRank );
				gsQuery[ 0 ] = EOS;
				mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerFactionRank` = %d WHERE `id` = %d", pRank, PlayerKey );
				mysql_tquery( g_Handle, gsQuery, "", "" );
			}
		}
		case DIALOG_MEMBERS_FACTIONWARNS:
		{
			if( response )
			{
				new Player = GetPlayerIDFromKey( GetGVarInt( "fmembers_Key", playerVariables[ playerid ][ pSelected ] ) ),
					PlayerKey = GetGVarInt( "fmembers_Key", playerVariables[ playerid ][ pSelected ] ),
					PlayerRank = GetGVarInt( "fmembers_FactionRank", playerVariables[ playerid ][ pSelected ] ),
					PlayerDays = GetGVarInt( "fmembers_Days", playerVariables[ playerid ][ pSelected ] ),
					FactionID = playerVariables[ playerid ][ pFaction ];

				if( GetPlayerMysqlID(playerid) == PlayerKey && playerVariables[ playerid ][ pFactionRank ] == 7 )
					return SendClientMessage( playerid, COLOR_GREY, "Nu poti sa-ti dai faction warn pentru ca esti liderul factiunii!" );

				if( playerVariables[ playerid ][ pFactionRank ] < 7 && PlayerRank == 7 )
					return SendClientMessage( playerid, COLOR_GREY, "Nu poti sa dai warn liderului!" );

				switch( listitem )
				{
					case 0:
					{
						if( IsPlayerConnected( Player ) )
						{
							gsQuery[ 0 ] = EOS;
							mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerFW` = 0 WHERE `id` = %d", PlayerKey );
							mysql_tquery( g_Handle, gsQuery, "", "" );

							gsString[ 0 ] = EOS;
							format( gsString, sizeof gsString, "%s got a FW clear from %s.", GetGVarStringEx( "fmembers_Name", playerVariables[ playerid ][ pSelected ] ), playerVariables[ playerid ][ pNormalName ] );
							SendToFaction( playerVariables[ playerid ][ pFaction ], COLOR_GENANNOUNCE, gsString );
							InsertFactionLog( gsString, playerVariables[ playerid ][ pFaction ], PlayerKey, GetGVarStringEx( "fmembers_Name", playerVariables[ playerid ][ pSelected ] ), GetPlayerMysqlID(playerid), playerVariables[ playerid ][ pNormalName ] );

							playerVariables[ Player ][ pFW ] = 0;
							SendClientMessage( playerid, COLOR_GREY, "You succesfull cleared the Faction Warns from that player!" );
							SendClientMessage( Player, COLOR_WHITE, "The leader has cleared your Faction Warns!" );
						}
						else
						{
							gsString[ 0 ] = EOS;
							format( gsString, sizeof gsString, "%s got a Faction Warns clear from %s.", GetGVarStringEx( "fmembers_Name", playerVariables[ playerid ][ pSelected ] ), playerVariables[ playerid ][ pNormalName ] );
							SendToFaction( playerVariables[ playerid ][ pFaction ], COLOR_GENANNOUNCE, gsString );
							InsertFactionLog( gsString, playerVariables[ playerid ][ pFaction ], PlayerKey, GetGVarStringEx( "fmembers_Name", playerVariables[ playerid ][ pSelected ] ), GetPlayerMysqlID(playerid), playerVariables[ playerid ][ pNormalName ] );

							gsQuery[ 0 ] = EOS;
							mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerFW` = 0 WHERE `id` = %d", PlayerKey );
							mysql_tquery( g_Handle, gsQuery, "", "" );

							SendClientMessage( playerid, COLOR_GREY, "You succesfull cleared the Faction Warns from that player." );
						}
					}
					case 1 .. 2:
					{
						if( IsPlayerConnected( Player ) )
						{
							gsQuery[ 0 ] = EOS;
							mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerFW` = %d WHERE `id` = %d", listitem, PlayerKey );
							mysql_tquery( g_Handle, gsQuery, "", "" );

							gsString[ 0 ] = EOS;
							format( gsString, sizeof gsString, "%s received a faction warn from %s. FW: %d/3", GetGVarStringEx( "fmembers_Name", playerVariables[ playerid ][ pSelected ] ), playerVariables[ playerid ][ pNormalName ], listitem );
							SendToFaction( playerVariables[ playerid ][ pFaction ], COLOR_GENANNOUNCE, gsString );
							InsertFactionLog( gsString, playerVariables[ playerid ][ pFaction ], PlayerKey, playerVariables[ playerid ][ pSelected ], GetPlayerMysqlID(playerid), playerVariables[ playerid ][ pNormalName ] );

							playerVariables[ Player ][ pFW ] = listitem;
							SendClientMessagef( playerid, COLOR_GREY, "You succesfull changed the player's FW to %d/3!", listitem );
							SendClientMessagef( Player, COLOR_WHITE, "The leader has set you to have %d FW!", listitem );
						}
						else
						{
							gsString[ 0 ] = EOS;
							format( gsString, sizeof gsString, "%s received a faction warn from %s. FW: %d/3.", GetGVarStringEx( "fmembers_Name", playerVariables[ playerid ][ pSelected ] ), playerVariables[ playerid ][ pNormalName ], listitem );
							SendToFaction( playerVariables[ playerid ][ pFaction ], COLOR_GENANNOUNCE, gsString );
							InsertFactionLog( gsString, playerVariables[ playerid ][ pFaction ], PlayerKey, GetGVarStringEx( "fmembers_Name", playerVariables[ playerid ][ pSelected ] ), GetPlayerMysqlID(playerid), playerVariables[ playerid ][ pNormalName ] );

							gsQuery[ 0 ] = EOS;
							mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerFW` = %d WHERE `id` = %d", listitem, PlayerKey );
							mysql_tquery( g_Handle, gsQuery, "", "" );

							SendClientMessagef( playerid, COLOR_GREY, "You succesfull changed the player's FW to %d/3!", listitem );
						}
					}
					case 3: // 3/3 warns -> uninvite
					{
						if( IsPlayerConnected( Player ) )
						{
							Faction_UninvitePlayer( playerid, Player, 60, "3/3 faction warns" );
						}
						else
						{
							// < Announce the faction )
							gsString[ 0 ] = EOS;
							format( gsString, sizeof gsString, "%s was uninvited by Leader %s from faction %s (rank %d) after %d days with 60 FP. Reason: 3/3 faction warns", GetGVarStringEx( "fmembers_Name", playerVariables[ playerid ][ pSelected ] ), playerVariables[ playerid ][ pNormalName ], GetGVarStringEx( "faction_Name", FactionID ), PlayerRank, PlayerDays );
							SendToFaction( FactionID, COLOR_GENANNOUNCE, gsString );

							SendClientMessage( playerid, COLOR_GREY, "L-ai dat afara pe acel player din factiunea din care facea parte!" );
							InsertFactionLog( gsString, FactionID, PlayerKey, GetGVarStringEx( "fmembers_Name", playerVariables[ playerid ][ pSelected ] ), GetPlayerMysqlID(playerid), playerVariables[ playerid ][ pNormalName ] );
							ResetPlayerFactionRaport( PlayerKey );

							// < Update Panel Info )
							gsString[ 0 ] = EOS;
							format( gsString, sizeof gsString, "was uninvited by Leader %s from faction %s (rank %d) after %d days with 20 FP. Reason: 3/3 faction warns", playerVariables[ playerid ][ pNormalName ], GetGVarStringEx( "faction_Name", FactionID ), PlayerRank, PlayerDays );
							gsQuery[ 0 ] = EOS;
							mysql_format( g_Handle, gsQuery, sizeof gsQuery, "INSERT INTO `server_feed`(`playerKey`,`playerName`,`logText`) VALUES (%d, '%s', '%s')", PlayerKey, GetGVarStringEx( "fmembers_Name", playerVariables[ playerid ][ pSelected ] ), gsString );
							mysql_tquery( g_Handle, gsQuery, "", "" );

							// < Send player E-Mail )
							gsString[ 0 ] = EOS;
							format( gsString, sizeof gsString, "%s te-a dat afara din factiunea %s cu 60 FP si Reason: 3/3 faction warns", playerVariables[ playerid ][ pNormalName ], GetGVarStringEx( "faction_Name", FactionID ) );
							InsertPlayerMail( PlayerKey, gsString );

							// < Update faction )
							gsQuery[ 0 ] = EOS;
							mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_factions` SET `factionMembers` = `factionMembers` - 1 WHERE `factionKey` = %d", FactionID );
							mysql_tquery( g_Handle, gsQuery, "", "" );
							SetGVarInt( "faction_Members", GetGVarInt( "faction_Members", FactionID ) - 1, FactionID );

							gsQuery[ 0 ] = EOS;
							mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerFaction` = 0, `playerFactionRank` = 0, `playerFactionDays` = 0, `playerFW` = 0, `playerFP` = 60, `playerSkin` = 60 WHERE `id` = %d", PlayerKey );
							mysql_tquery( g_Handle, gsQuery, "", "" );
						}
					}
				}
			}
		}
		case DIALOG_BUY_SHOP:
		{
			if( response )
			{
				switch( listitem )
				{
					case 0: // Telefon
					{
						if( playerVariables[ playerid ][ pPhone ] != 0 )
							return SendClientMessage( playerid, COLOR_GREY, "Detii deja un telefon mobil!" );

						if( playerVariables[ playerid ][ pMoney ] < 150 )
							return SendClientMessage( playerid, COLOR_GREY, "You don't have $150 for a Phone!" );

						playerVariables[ playerid ][ pMoney ] -= 150;
						playerVariables[ playerid ][ pPhone ] = 1;

						BuyPlayerNumber(playerid);
					}
					case 1: // Agenda
					{
						if( playerVariables[ playerid ][ pPhoneBook ] == 1 )
							return SendClientMessage( playerid, COLOR_GREY, "Detii deja o carte de telefonl!" );

						if( playerVariables[ playerid ][ pMoney ] < 100 )
							return SendClientMessage( playerid, COLOR_GREY, "You don't have $100 for a Phone Book!" );

						playerVariables[ playerid ][ pMoney ] -= 100;
						playerVariables[ playerid ][ pPhoneBook ] = 1;
						InfoTD_MSG( playerid, 5000, "Ai cumparat o ~r~~h~Carte de telefon" );
					}
					case 2: // Credit
					{
						if( playerVariables[ playerid ][ pMoney ] < 50 )
							return SendClientMessage( playerid, COLOR_GREY, "You don't have $50 for Phone Credit!" );

						playerVariables[ playerid ][ pMoney ] -= 50;
						playerVariables[ playerid ][ pPhoneCredit ] += 30;
						InfoTD_MSG( playerid, 5000, "Ai cumparat ~r~~h~30 Credite ~w~~h~pentru telefonul tau!~n~Creditul tau actual este acum: ~y~~h~%d", playerVariables[ playerid ][ pPhoneCredit ] );
					}
					case 3: // Walkie Talkie
					{
						if( playerVariables[ playerid ][ pMoney ] < 200 )
							return SendClientMessage( playerid, COLOR_GREY, "You don't have $200 for Walkie Talkie!" );

						playerVariables[ playerid ][ pMoney ] -= 200;
						playerVariables[ playerid ][ pWTalkie ] = 1;
						InfoTD_MSG( playerid, 5000, "Ai cumparat un ~r~~h~Walkie Talkie~n~Use /setfrequency to tune it, and /wt to speak" );

						gsQuery[ 0 ] = EOS;
						mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerWTalkie` = 1 WHERE `id` = %d", GetPlayerMysqlID(playerid) );
						mysql_tquery( g_Handle, gsQuery, "", "" );
					}
				}
			}
		}
		case DIALOG_BUY_GUN:
		{
			if( response )
			{
				if( playerVariables[ playerid ][ pMoney ] < SHOP_WEAPONS[ listitem ][ weapon_Price ] )
					return SendClientMessagef( playerid, COLOR_GREY, "You don't have $%d to buy this %s!", SHOP_WEAPONS[ listitem ][ weapon_Price ], SHOP_WEAPONS[ listitem ][ weapon_Name ] );

				playerVariables[ playerid ][ pMoney ] -= SHOP_WEAPONS[ listitem ][ weapon_Price ];
				GivePlayerServerWeapon( playerid, SHOP_WEAPONS[ listitem ][ weapon_ID ], SHOP_WEAPONS[ listitem ][ weapon_Bullets ] );
				InfoTD_MSG( playerid, 5000, "Ai cumparat un ~y~~h~%s ~w~~h~cu suma de $%d si cu %d gloante.", SHOP_WEAPONS[ listitem ][ weapon_Name ], SHOP_WEAPONS[ listitem ][ weapon_Price ], SHOP_WEAPONS[ listitem ][ weapon_Bullets ] );
			}
		}
		case DIALOG_BUY_DRINK:
		{
			if( response )
			{
				new barID = GetBuildingEnterID( playerid, 0, 3, 100.0 );
				switch( listitem )
				{
					case 0:
					{
						if( playerVariables[ playerid ][ pMoney ] < 50 )
							return SendClientMessage( playerid, COLOR_GREY, "You don't have enough money." );

						playerVariables[ playerid ][ pMoney ] -= 50;
						SetGVarInt( "bus_Money", GetGVarInt( "bus_Money", barID ) + 50, barID );
						SetPlayerSpecialAction( playerid, SPECIAL_ACTION_SMOKE_CIGGY );
					}
					case 1:
					{
						if( playerVariables[ playerid ][ pMoney ] < 50 )
							return SendClientMessage( playerid, COLOR_GREY, "You don't have enough money." );

						playerVariables[ playerid ][ pMoney ] -= 50;
						SetGVarInt( "bus_Money", GetGVarInt( "bus_Money", barID ) + 50, barID );
						SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_SPRUNK );
					}
					case 2:
					{
						if( playerVariables[ playerid ][ pMoney ] < 60 )
							return SendClientMessage( playerid, COLOR_GREY, "You don't have enough money." );

						playerVariables[ playerid ][ pMoney ] -= 60;
						SetGVarInt( "bus_Money", GetGVarInt( "bus_Money", barID ) + 60, barID );
						SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_BEER );
					}
					case 3:
					{
						if( playerVariables[ playerid ][ pMoney ] < 100 )
							return SendClientMessage( playerid, COLOR_GREY, "You don't have enough money." );

						playerVariables[ playerid ][ pMoney ] -= 100;
						SetGVarInt( "bus_Money", GetGVarInt( "bus_Money", barID ) + 100, barID );
						SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_WINE );
					}
				}
			}
		}
		case DIALOG_BUY_IPHONE:
		{
			if( response )
			{
				if( !IsNumeric( inputtext ) ) 	return SendClientMessage( playerid, COLOR_WHITE, "Numar de telefon invalid. Poti alege un numar de telefon intre 1000 si 9999." );
				if( strlen( inputtext ) != 4 ) 	return SendClientMessage( playerid, COLOR_WHITE, "Numar de telefon invalid. Poti alege un numar de telefon intre 1000 si 9999." );
				if( inputtext[ 0 ] == '0' )		return SendClientMessage( playerid, COLOR_WHITE, "Numar de telefon invalid. Poti alege un numar de telefon intre 1000 si 9999." );

				// < Verifica daca este detinut de alt jucator! )
				gsQuery[ 0 ] = EOS;
				mysql_format( g_Handle, gsQuery, sizeof gsQuery, "SELECT * FROM `server_accounts` WHERE `playerPhoneNumber` = %d", strval( inputtext ) );
				mysql_pquery( g_Handle, gsQuery, "CheckiPhoneNumber", "dd", playerid, strval( inputtext ) );
			}
		}
		case DIALOG_HELP:
		{
			if( response )
			{
				switch( listitem )
				{
					case 0: ShowPlayerDialog( playerid, DIALOG_HELP_BACK, DIALOG_STYLE_MSGBOX, "General Commands", Help_General(), "Exit", "Back" );
					case 1: ShowFactionHelp( playerid );
					case 2: ShowPlayerDialog( playerid, DIALOG_HELP_BACK, DIALOG_STYLE_MSGBOX, "Vehicle Commands", Help_Vehicles(), "Exit", "Back" );
					case 3: ShowPlayerDialog( playerid, DIALOG_HELP_BACK, DIALOG_STYLE_MSGBOX, "Anim Commands", Anims_String(), "Exit", "Back" );
					case 4: ShowPlayerDialog( playerid, DIALOG_HELP_BACK, DIALOG_STYLE_MSGBOX, "Bank Commands", Help_Bank(), "Exit", "Back" );
					case 5: ShowPlayerDialog( playerid, DIALOG_HELP_BACK, DIALOG_STYLE_MSGBOX, "Rob System Commands", Help_RobSystem(), "Exit", "Back" );
					case 6: ShowPlayerDialog( playerid, DIALOG_HELP_BACK, DIALOG_STYLE_MSGBOX, "Chat Commands", Help_Chat(), "Exit", "Back" );
					case 7: ShowPlayerDialog( playerid, DIALOG_HELP_BACK, DIALOG_STYLE_MSGBOX, "Jobs Commands", Help_Jobs(), "Exit", "Back" );
					case 8: ShowPlayerDialog( playerid, DIALOG_HELP_BACK, DIALOG_STYLE_MSGBOX, "House Commands", Help_Houses(), "Exit", "Back" );
					case 9: ShowPlayerDialog( playerid, DIALOG_HELP_BACK, DIALOG_STYLE_MSGBOX, "Business Commands", Help_Business(), "Exit", "Back" );
					case 10: ShowPlayerDialog( playerid, DIALOG_HELP_BACK, DIALOG_STYLE_MSGBOX, "Helper Commands", Help_Helper( playerid ), "Exit", "Back" );
					case 11: ShowPlayerDialog( playerid, DIALOG_HELP_BACK, DIALOG_STYLE_MSGBOX, "Hotel Commands", Hotel_Commands(), "Exit", "Back" );
				}
			}
		}
		case DIALOG_HELP_BACK:
		{
			if( !response )
				callcmd::help( playerid, "lol" );
		}
		case DIALOG_WANTED_PLAYERS:
		{
			if( response )
			{
				new WNT, WantedPlayer;
				foreach(new i : server_wanteds)
				{
					WNT++;
					if( WNT == listitem + 1 )
					{
						WantedPlayer = i;
						break;
					}
				}
				// < Activate the Find )
				gsString[ 0 ] = EOS;
				format( gsString, 8, "%d", WantedPlayer );
				callcmd::find( playerid, gsString );

				// < Show player MDC )
				SendClientMessagef( playerid, COLOR_WHITE, "-- MDC [ID: %d - %s] ["COL_YE"W:%d"COL_W"] [Chased by %d cops] [Wanted expires in: %s] --", WantedPlayer, playerVariables[ WantedPlayer ][ pNormalName ], playerVariables[ WantedPlayer ][ pWanted ], CountChasingCops( WantedPlayer ), TimeConvert( playerVariables[ WantedPlayer ][ pWantedTime ] ) );
				SendClientMessage( playerid, COLOR_WHITE, playerVariables[ WantedPlayer ][ pCrimeReason ] );
				return true;
			}
		}
		case DIALOG_ATM_MENU:
		{
			if( !response ) return true;
			switch( listitem )
			{
				case 0:
				{
					gsString[ 0 ] = EOS;
					format( gsString, sizeof gsString, "Your bank account balance is currently standing at $%s", FormatNumber( playerVariables[ playerid ][ pBankMoney ] ) );
					ShowPlayerDialog( playerid, DIALOG_NULL, DIALOG_STYLE_MSGBOX, "Bank Ballance", gsString, "Close", "" );
				}
				case 1:
				{
					new ATMID = GetATMID( playerid );
					gsString[ 0 ] = EOS;
					format( gsString, sizeof gsString, "Please specify the amount of money that you'd like to withdraw.\n\nYou can withdraw up to $100,000 from this ATM.\n\nNote: This ATM charges $%d from any withdrawals you make.", GetGVarInt( "atm_Tax", ATMID ) );
					ShowPlayerDialog( playerid, DIALOG_ATM_WITHDRAWAL, DIALOG_STYLE_INPUT, "SERVER: ATM", gsString, "OK", "Cancel" );
				}
			}
		}
		case DIALOG_ATM_WITHDRAWAL:
		{
			if(!response) return true;
			new ATMID = GetATMID( playerid );
			new iWithdrawalAmount = strval( inputtext );

			if( playerVariables[ playerid ][pBankMoney] > iWithdrawalAmount && iWithdrawalAmount > 1 && iWithdrawalAmount <= 100000 )
			{
				playerVariables[ playerid ][ pBankMoney ] -= iWithdrawalAmount - GetGVarInt( "atm_Tax", ATMID );
				playerVariables[ playerid ][ pMoney ] += iWithdrawalAmount;
				Announce_Player( playerid, 5000, 1, "~g~+$%d", iWithdrawalAmount );
				ShowPlayerDialog( playerid, DIALOG_NULL, DIALOG_STYLE_MSGBOX, "SERVER: Automated Teller Machine", "Your money has been withdrawn.\n\nThank you for using our ATM today!", "OK", "" );
			}
			else
			{
				SendClientMessage( playerid, COLOR_GREY, "You do not have enough money to withdraw or it's bigger than $100,000" );
				gsString[ 0 ] = EOS;
				format( gsString, sizeof gsString, "Please specify the amount of money that you'd like to withdraw.\n\nYou can withdraw up to $100,000 from this ATM.\n\nNote: This ATM charges $%d from any withdrawals you make.", GetGVarInt( "atm_Tax", ATMID ) );
				ShowPlayerDialog( playerid, DIALOG_ATM_WITHDRAWAL, DIALOG_STYLE_INPUT, "SERVER: ATM", gsString, "OK", "Cancel" );
			}
		}
		case DIALOG_SELECT_TRUCKER_LOCATION:
		{
			if( response )
			{
				new locID = listitem + 1;
				playerVariables[ playerid ][ pCP ] = 5020;
				SetPlayerCheckpoint( playerid, GetPVarFloatEx( playerid, "loc_PosX", locID ), GetPVarFloatEx( playerid, "loc_PosY", locID ), GetPVarFloatEx( playerid, "loc_PosZ", locID ), 5 );
				//GPS_Location( playerid, GetPVarStringExx( playerid, "loc_Name", locID ), GetPVarFloatEx( playerid, "loc_PosX", locID ), GetPVarFloatEx( playerid, "loc_PosY", locID ), GetPVarFloatEx( playerid, "loc_PosZ", locID ), 1 );

				CreatePlayerTrailer( playerid, GetPVarIntEx( playerid, "loc_Trailer", locID ) );
				SetTimerEx( "AttachTrailTruck", 3000, true, "ii", playerVariables[ playerid ][ pJobVehicle ][ 1 ], GetPlayerVehicleID( playerid ) );

				InfoTD_MSG( playerid, 10000, "~y~~h~INFO~n~~w~~h~Du-te la checkpoint pentru a castiga banii!~n~Trailerul va fi atasat in 3 secunde automat!" );
				UpdateJobBox( playerid, GetServerData(workers_trucker), "Livreaza ~y~~h~%s ~w~~h~la ~r~~h~%s~w~~h~!~n~~r~~h~Atentie! ~w~~h~Remorca se re-ataseaza singura!", GetPVarStringExx( playerid, "loc_Text", locID ), GetPVarStringExx( playerid, "loc_Name", locID ) );
			}
		}
		case DIALOG_JOBS:
		{
			if( response )
			{
				new JobID = listitem + 1;
				GPS_Location( playerid, GetGVarStringEx( "job_Name", JobID ), GetGVarFloat( "job_PosX", JobID ), GetGVarFloat( "job_PosY", JobID ), GetGVarFloat( "job_PosZ", JobID ) );
			}
		}
		case DIALOG_GOTOJOBS:
		{
			if(response)
			{
				new f = listitem + 1;
				SetPlayerPos(playerid, GetGVarFloat( "job_PosX", f ), GetGVarFloat( "job_PosY", f ), GetGVarFloat( "job_PosZ", f ));
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
			}
		}
		case DIALOG_GOTOFACTIONS:
		{
			if(response)
			{
				new f = listitem + 1;
				if(f != 1)
				{
					SetPlayerPos(playerid, GetGVarFloat( "faction_EnterX", f ), GetGVarFloat( "faction_EnterY", f ), GetGVarFloat( "faction_EnterZ", f ));
					SetPlayerInterior(playerid, 0);
					SetPlayerVirtualWorld(playerid, 0);
				}
				else
				{
					SetPlayerPos(playerid, 1555.04, -1675.78, 16.1953);
					SetPlayerInterior(playerid, 0);
					SetPlayerVirtualWorld(playerid, 0);
				}
			}
		}
		case DIALOG_BUSINESS:
		{
			if( response )
			{
				new BizzID = listitem + 1;
				GPS_Location( playerid, GetGVarStringEx( "bus_Name", BizzID ), GetGVarFloat( "bus_EnterX", BizzID ), GetGVarFloat( "bus_EnterY", BizzID ), GetGVarFloat( "bus_EnterZ", BizzID ) );
			}
		}
		#if defined HEIST_SYSTEM
		case DIALOG_HEISTS:
		{
			if( response )
			{
				switch(playerVariables[playerid][pHeist][listitem])
				{
					case 0: SendClientMessage(playerid, COLOR_GREY, "This Heist is blocked for you, you need to complete the others in order to complete this one.");
					case 1: GPS_Location( playerid, GetGVarStringEx( "heist_Name", listitem ), GetGVarFloat( "heist_PosX", listitem ), GetGVarFloat( "heist_PosY", listitem ), GetGVarFloat( "heist_PosZ", listitem ) );
					case 2: SendClientMessage(playerid, COLOR_GREY, "You already completed this heist, you cannot complete this one again.");
					default: GPS_Location( playerid, GetGVarStringEx( "heist_Name", listitem ), GetGVarFloat( "heist_PosX", listitem ), GetGVarFloat( "heist_PosY", listitem ), GetGVarFloat( "heist_PosZ", listitem ) );
				}
			}
		}
		#endif
		case DIALOG_FACTIONS:
		{
			if( response )
			{
				new FactionID = listitem + 1;
				if( FactionID != 1 )
					GPS_Location( playerid, GetGVarStringEx( "faction_Name", FactionID ), GetGVarFloat( "faction_EnterX", FactionID ), GetGVarFloat( "faction_EnterY", FactionID ), GetGVarFloat( "faction_EnterZ", FactionID ) );
				else GPS_Location( playerid, "LSPD", 1555.04, -1675.78, 16.1953 );
			}
		}
		case DIALOG_SHOW_DEALER_LIST:
		{
			if( response )
			{
				gsQuery[ 0 ] = EOS;
				mysql_format( g_Handle, gsQuery, sizeof gsQuery, "SELECT * FROM `server_dealer` WHERE `type` = %d", listitem + 1 );
				mysql_pquery( g_Handle, gsQuery, "ShowDealerDialog", "dd", playerid, listitem + 1 );
			}
		}
		case DIALOG_REGISTER:
		{
			if( !response )
				return ShowPlayerDialog( playerid, DIALOG_REGISTER, DIALOG_STYLE_PASSWORD, ""COL_W"Register "COL_R"Failed !", ""COL_R"ERROR!: "COL_W"You must obligatory register your account!", "Register", "" );

			new rPassword[ 128 ];
			if( sscanf( inputtext, "s[128]", rPassword ) )
				return ShowPlayerDialog( playerid, DIALOG_REGISTER, DIALOG_STYLE_PASSWORD, "Register", "You must type a password if you want to register!", "Register", "" );

			if( strlen( rPassword ) < 6 || strlen( rPassword ) > 25 )
				return ShowPlayerDialog( playerid, DIALOG_REGISTER, DIALOG_STYLE_PASSWORD, "Register", "The password must be between 6 and 24 characters!", "Register", "" );

			mysql_escape_string( rPassword, rPassword );

			SetPVarInt(playerid, "playerInRegister", 1);

			new Buf[ 129 ], liYear, liMonth, liDay;
			WP_Hash( Buf, 129, rPassword );
			getdate( liYear, liMonth, liDay );

			ClearPlayerChat( playerid );
			//SendClientMessagef( playerid, ~1, ""COL_YE"INREGISTRARE: "COL_W"Parola contului tau este: %s", rPassword );

			// < Generate player's quests )
			GeneratePlayerQuests( playerid );

			format( playerVariables[ playerid ][ pNormalName ], 32, "%s", username( playerid ) );

			gsQuery[ 0 ] = EOS;
			mysql_format( g_Handle, gsQuery, sizeof gsQuery, "INSERT INTO `server_accounts`(`username`,`password`,`playerAddress`,`playerSerial`) VALUES ('%e', '%e', '%e', '%e')", username( playerid ), Buf, GetPlayerIPEx( playerid ), GetPlayerSerial( playerid ) );
			mysql_tquery( g_Handle, gsQuery, "OnAccountCreated", "i", playerid );
			return true;
		}
		case DIALOG_LOGIN:
		{
			if( !response )
				return Kick( playerid );

			new lPassword[ 128 ];
			if( sscanf( inputtext, "s[128]", lPassword ) )
			{
				gsString[ 0 ] = EOS;
				format( gsString, sizeof gsString, "Welcome back, %s!\n\n", username( playerid ) );
				strcat( gsString, "This account is registered, you can login now by typing your password below.\n" );
				strcat( gsString, "If this isn't your own account, quit the server and join with another name!\n\n" );
				strcat( gsString, ""COL_R"ERROR: If you wanna play type the password!" );
				return ShowPlayerDialog( playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD, "Login Account", gsString, "Login", "Quit" );
			}
			if( strlen( lPassword ) < 6 || strlen( lPassword ) > 25 )
			{
				gsString[ 0 ] = EOS;
				format( gsString, sizeof gsString, "Welcome back, %s!\n\n", username( playerid ) );
				strcat( gsString, "This account is registered, you can login now by typing your password below.\n" );
				strcat( gsString, "If this isn't your own account, quit the server and join with another name!\n\n" );
				strcat( gsString, ""COL_R"ERROR: The password must be between 6  24 characters!" );
				return ShowPlayerDialog( playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD, "Login Account", gsString, "Login", "Quit" );
			}
			new Buf[ 129 ];
			WP_Hash( Buf, 129, lPassword );

			gsQuery[ 0 ] = EOS;
			mysql_format( g_Handle, gsQuery, sizeof gsQuery, "SELECT * FROM `server_accounts` WHERE `username` = '%s' AND `password` = '%s' LIMIT 1", username( playerid ), Buf );
			mysql_pquery( g_Handle, gsQuery, "CheckAccountPassword", "is", playerid, Buf );
			return true;
		}
		case DIALOG_SHOW_VEHICLE_INFO:
		{
			if( response )
			{
				new slot = listitem;
				playerVariables[ playerid ][ pCarSelected ] = listitem;
				if( slot + 1 > playerVariables[ playerid ][ pVSlots ] )
				{
					if( playerVariables[ playerid ][ pPremiumPoints ] < 20 ) 
						return SendClientMessage( playerid, -1, "You don't have enough Premium Points [20 PP]!" );

					if( playerVariables[ playerid ][ pVSlots ] >= MAX_SLOTS ) 
						return SendClientMessage( playerid, -1, "You already have the maximum slots!" );

					TakePlayerPremiumPoints( playerid, 20 );
					playerVariables[ playerid ][ pVSlots ] ++;
					callcmd::cars( playerid, "lol" );

					gsString[ 0 ] = EOS;
					format( gsString, sizeof gsString, "%s[user:%d] bought Vehicle Slot for 20 PP. [/shop]", playerVariables[ playerid ][ pNormalName ], GetPlayerMysqlID(playerid) );
					submitToAdmins(gsString, COLOR_YELLOW);
					InsertPlayerLog( GetPlayerMysqlID(playerid), 0, gsString );
					return InfoTD_MSG( playerid, 7000, "~r~~h~Info: ~w~~h~You have added a new Vehicle Slot!" );
				}
				else
				{
					if( playerVariables[ playerid ][ Vehicle ][ slot ] == 0 )
					{
						callcmd::cars( playerid, "lol" );
						return InfoTD_MSG( playerid, 7000, "~r~~h~Info: ~w~~h~This slot it's empty!" );
					}
					else return ShowPlayerDialog( playerid, DIALOG_VEHICLE_OPTIONS, DIALOG_STYLE_LIST, "Vehicle options", String_VehicleInfo(), "Select", "Close" );
				}
			}
		}
		case DIALOG_VEHICLE_PLATE:
		{
			if( response )
			{
				if( strlen( inputtext ) < 1 || strlen( inputtext ) > 32 )					
					return SendClientMessage( playerid, COLOR_GREY, "Invalid reason size. Between 1 and 32 characters !" );

				if( strfind(inputtext, "{", true) != -1 || strfind(inputtext, "}", true) != -1 )
					return SendClientMessage( playerid, COLOR_GREY, "You can't use hex colors on vehicle plates!" );

				new vehicleid = GetPlayerVehicleID( playerid ),
					PlayerSlot = playerVariables[ playerid ][ VehicleSlot ];

				if( GetPlayerState( playerid ) != PLAYER_STATE_DRIVER ) return SendClientMessage( playerid, COLOR_GREY, "You have to be in your personal vehicle!" );
				if( vehicleVariables[ PlayerSlot ][ playerid ][ Vehicle ] != vehicleid ) return SendClientMessage( playerid, COLOR_GREY, "This is not your personal vehicle!" );

				new vPlate[ 32 ];
				mysql_escape_string( inputtext, vPlate );
				playerVariables[ playerid ][ pMoney ] -= 2500;
				format( vehicleVariables[ PlayerSlot ][ playerid ][ VehiclePlate ], 32, "%s", vPlate );
				SetVehicleNumberPlate( vehicleVariables[ PlayerSlot ][ playerid ][ Vehicle ], vehicleVariables[ PlayerSlot ][ playerid ][ VehiclePlate ] );
				SendClientMessagef( playerid, COLOR_LIGHT, "Your vehicle plate has been changed to: %s. It will be available after next spawn!", vPlate );

				gsQuery[ 0 ] = EOS;
				mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_personalvehicles` SET `vehicleNumberPlate` = '%s' WHERE `vehicleID` = %d", vPlate, playerVariables[ playerid ][ Vehicle ][ PlayerSlot ] );
				mysql_tquery( g_Handle, gsQuery, "", "" );
			}
		}
		case DIALOG_VEHICLE_DETAILS:
		{
			if( response )
				return callcmd::cars( playerid, "lol" );
		}
		case DIALOG_VEHICLE_OPTIONS:
		{
			if( response )
			{
				switch( listitem )
				{
					case 0:
					{
						new PlayerSlot = playerVariables[ playerid ][ pCarSelected ];
						gsString[ 0 ] = EOS;
						format( gsString, sizeof gsString, "Vehicle Model: %s\nDistance Traveled: %0.2f KM\nVehicle Age: %d days\nInsurance Price: $%s\nInsurance Points: %d",
							VehicleName( vehicleVariables[ PlayerSlot ][ playerid ][ VehicleModelID ] ), vehicleVariables[ PlayerSlot ][ playerid ][ VehicleOdometter ], vehicleVariables[ PlayerSlot ][ playerid ][ VehicleAge ], 
							FormatNumber(vehicleVariables[ PlayerSlot ][ playerid ][ VehicleInsurance ]), vehicleVariables[ PlayerSlot ][ playerid ][ VehicleInsurancePoints ]);

						ShowPlayerDialog( playerid, DIALOG_VEHICLE_DETAILS, DIALOG_STYLE_MSGBOX, "Vehicle info", gsString, "Back", "Exit" );
					}
					case 1:
					{
						new PlayerSlot = playerVariables[ playerid ][ pCarSelected ];
						switch( vehicleVariables[ PlayerSlot ][ playerid ][ VehicleStatus ] )
						{
							case 0:
							{
								SpawnPlayerVehicle( PlayerSlot, playerid );
								#if defined DEBUG_SERVER
									printf( "Vehicle[slot:%d] has been Spawned(C:%d / D:%d)", PlayerSlot, GetTickCount(), vehicleVariables[ PlayerSlot ][ playerid ][ VehicleTimer ] );
								#endif
								InfoTD_MSG( playerid, 7000, "Your ~r~~h~%s ~w~~h~has been Spawned!", VehicleName( vehicleVariables[ PlayerSlot ][ playerid ][ VehicleModelID ] ) );
							}
							default:
							{
								DeSpawnPlayerVehicle( PlayerSlot, playerid );
								SpawnPlayerVehicle( PlayerSlot, playerid );
								InfoTD_MSG( playerid, 7000, "Your ~r~~h~%s ~w~~h~has been Re-Spawned!", VehicleName( vehicleVariables[ PlayerSlot ][ playerid ][ VehicleModelID ] ) );
							}
						}
					}
					case 2:
					{
						new PlayerSlot = playerVariables[ playerid ][ pCarSelected ];
						GetVehiclePos( vehicleVariables[ PlayerSlot ][ playerid ][ Vehicle ], vehicleVariables[ PlayerSlot ][ playerid ][ Position ][ 0 ], vehicleVariables[ PlayerSlot ][ playerid ][ Position ][ 1 ], vehicleVariables[ PlayerSlot ][ playerid ][ Position ][ 2 ] );
						GPS_Location( playerid, "Personal Car", vehicleVariables[ PlayerSlot ][ playerid ][ Position ][ 0 ], vehicleVariables[ PlayerSlot ][ playerid ][ Position ][ 1 ], vehicleVariables[ PlayerSlot ][ playerid ][ Position ][ 2 ] ) ;
						playerVariables[ playerid ][ pCP ] = 5000;
					}
					case 3:
					{
						new PlayerSlot = playerVariables[ playerid ][ pCarSelected ];
						gsString[ 0 ] = EOS;
						format( gsString, 500, "Cate puncte de asigurare vrei sa cumperi? %d / insurance point (%d/10)", vehicleVariables[ PlayerSlot ][ playerid ][ VehicleInsurance ], vehicleVariables[ PlayerSlot ][ playerid ][ VehicleInsurancePoints ]);
						ShowPlayerDialog( playerid, DIALOG_BUY_INSURANCE, DIALOG_STYLE_INPUT, "Insurance", gsString, "Buy", "Cancel" );
					}
					case 4:
					{
						// < Execute code )
						if( playerVariables[ playerid ][ pPremiumPoints ] < 20 ) 
							return InfoTD_MSG( playerid, 5000, "You don't have enough premium points! [20 PP]" );
						new PlayerSlot = playerVariables[ playerid ][ pCarSelected ];

						gsQuery[ 0 ] = EOS;
						mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_personalvehicles` SET `vehicleOdometter` = 0, `vehicleDays` = 0 WHERE `vehicleID` = %d", vehicleVariables[ PlayerSlot ][ playerid ][ VehicleID ] );
						mysql_tquery( g_Handle, gsQuery, "", "" );

						TakePlayerPremiumPoints( playerid, 20 );
						vehicleVariables[ PlayerSlot ][ playerid ][ VehicleOdometter ] 	= 0;
						vehicleVariables[ PlayerSlot ][ playerid ][ VehicleAge ] 		= 0;
						InfoTD_MSG( playerid, 5000, "You have cleared your vehicle's age and KMs~n~~r~~h~-20PP" );

						gsString[ 0 ] = EOS;
						format( gsString, sizeof gsString, "%s[user:%d] bought Vehicle KMs & Age Clear for 20 PP. [/shop]", playerVariables[ playerid ][ pNormalName ], GetPlayerMysqlID(playerid) );
						submitToAdmins(gsString, COLOR_YELLOW);
						InsertPlayerLog( GetPlayerMysqlID(playerid), 0, gsString );
					}
					case 5:
					{
						if( playerVariables[ playerid ][ pPremiumPoints ] < 100 ) 
							return InfoTD_MSG( playerid, 5000, "You don't have enough premium points" );

						// < Execute code )
						new PlayerSlot = playerVariables[ playerid ][ pCarSelected ];
						if( vehicleVariables[ PlayerSlot ][ playerid ][ VehicleVIP ] )
							return InfoTD_MSG( playerid, 5000, "This Vehicles it's already VIP!" );

						if( vehicleVariables[ PlayerSlot ][ playerid ][ VehicleModelID ] != 411 && vehicleVariables[ PlayerSlot ][ playerid ][ VehicleModelID ] != 541 && vehicleVariables[ PlayerSlot ][ playerid ][ VehicleModelID ] != 560 )
							return InfoTD_MSG( playerid, 5000, "You can upgrade just Infernus/Bullet/Sultan !" );

						gsQuery[ 0 ] = EOS;
						mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_personalvehicles` SET `vehicleVIP` = 1, `vehicleVIPText` = 'Change Me!' WHERE `vehicleID` = %d", playerVariables[ playerid ][ Vehicle ][ PlayerSlot ] );
						mysql_tquery( g_Handle, gsQuery, "", "" );

						TakePlayerPremiumPoints( playerid, 100 );
						vehicleVariables[ PlayerSlot ][ playerid ][ VehicleVIP ] = 1;
						InfoTD_MSG( playerid, 5000, "You have upgraded your vehicle to VIP, you can use /vipname" );

						gsString[ 0 ] = EOS;
						format( gsString, sizeof gsString, "%s[user:%d] bought Vehicle VIP Upgrade for 100 PP. [/shop]", playerVariables[ playerid ][ pNormalName ], GetPlayerMysqlID(playerid) );
						submitToAdmins(gsString, COLOR_YELLOW);
						InsertPlayerLog( GetPlayerMysqlID(playerid), 0, gsString );
					}
					case 6:
					{
					    new garajRandom = playerVariables[ playerid ][ pCity ] ? randomEx( 4, 7 ) : randomEx( 0, 3 ),
					        PlayerSlot = playerVariables[ playerid ][ pCarSelected ];

					    vehicleVariables[ PlayerSlot ][ playerid ][ VehicleOdometter ] 	= 0;
					    vehicleVariables[ PlayerSlot ][ playerid ][ VehicleOdometter ] 	= 0;
					    vehicleVariables[ PlayerSlot ][ playerid ][ VehicleOdometter ] 	= 0;

					    vehicleVariables[ PlayerSlot ][ playerid ][ Position ][ 0 ] 		= gRandomDSGaraj[ garajRandom ][ 0 ];
						vehicleVariables[ PlayerSlot ][ playerid ][ Position ][ 1 ] 		= gRandomDSGaraj[ garajRandom ][ 1 ];
						vehicleVariables[ PlayerSlot ][ playerid ][ Position ][ 2 ] 		= gRandomDSGaraj[ garajRandom ][ 2 ];
						vehicleVariables[ PlayerSlot ][ playerid ][ Rotation ] 			    = gRandomDSGaraj[ garajRandom ][ 3 ];

						switch( vehicleVariables[ PlayerSlot ][ playerid ][ VehicleStatus ] )
						{
							case 0:
							{
								SpawnPlayerVehicle( PlayerSlot, playerid );
								#if defined DEBUG_SERVER
									printf( "Vehicle[slot:%d] has been Spawned(C:%d / D:%d)", PlayerSlot, GetTickCount(), vehicleVariables[ PlayerSlot ][ playerid ][ VehicleTimer ] );
								#endif
							}
							default:
							{
								DeSpawnPlayerVehicle( PlayerSlot, playerid );
								SpawnPlayerVehicle( PlayerSlot, playerid );
							}
						}

						GPS_Location( playerid, "MY VEHICLE", gRandomDSGaraj[ garajRandom ][ 0 ], gRandomDSGaraj[ garajRandom ][ 1 ], gRandomDSGaraj[ garajRandom ][ 2 ]);

					    SendClientMessagef(playerid, COLOR_YELLOW, "Masina ta a fost spawnata intr-o parcare din %s. Mergi la checkpoint pentru a o gasi.", ( playerVariables[ playerid ][ pCity ] ) ? ("Las Venturas") : ("Los Santos")); 
					
                        gsQuery[ 0 ] = EOS;
						mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_personalvehicles` SET `vehiclePosX` = %.2f, `vehiclePosY` = %.2f, `vehiclePosZ` = %.2f, `vehiclePosRotation` = %.2f WHERE `vehicleID` = %d", vehicleVariables[ PlayerSlot ][ playerid ][ Position ][ 0 ], vehicleVariables[ PlayerSlot ][ playerid ][ Position ][ 1 ], vehicleVariables[ PlayerSlot ][ playerid ][ Position ][ 2 ], vehicleVariables[ PlayerSlot ][ playerid ][ Rotation ], playerVariables[ playerid ][ Vehicle ][ PlayerSlot ] );
						mysql_tquery( g_Handle, gsQuery, "", "" );
					}
				}
			}
		}
		case DIALOG_BUY_INSURANCE:
		{
			if( response )
			{
				if( !isnull( inputtext ) )
				{
					new points = strval( inputtext ), PlayerSlot = playerVariables[ playerid ][ pCarSelected ];
					if( points > 0 )
					{
						if( vehicleVariables[ PlayerSlot ][ playerid ][ VehicleInsurancePoints ] + points > 10 ) 
							return InfoTD_MSG( playerid, 7000, "~r~~h~ERROR: ~w~~h~You can only get 10 points." );
						new insCash = vehicleVariables[ PlayerSlot ][ playerid ][ VehicleInsurance ] * points;

						if( playerVariables[ playerid ][ pMoney ] > insCash )
						{
							vehicleVariables[ PlayerSlot ][ playerid ][ VehicleInsurancePoints ] += points;
							playerVariables[ playerid ][ pMoney ] -= insCash;
							InfoTD_MSG( playerid, 7000, "~y~~h~INFO: ~w~~h~Ai cumparat %d puncte de asigurare cu $%s.", points, FormatNumber( insCash ) );

							gsQuery[ 0 ] = EOS;
							mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_personalvehicles` SET `vehicleInsurancePoints` = %d WHERE `vehicleID` = %d", vehicleVariables[ PlayerSlot ][ playerid ][ VehicleInsurancePoints ], vehicleVariables[ PlayerSlot ][ playerid ][ VehicleID ] );
							mysql_tquery( g_Handle, gsQuery, "", "" );
						}
						else InfoTD_MSG( playerid, 7000, "~r~~h~ERROR: ~w~~h~You don't have enought money." );
					}
				}
			}
		}
		case DIALOG_DEALER_BUY:
		{
			if( response )
			{
				new vID = listitem + 1, ShopSlot = GetPlayerFreeVehicleSlot( playerid );
				if( ShopSlot + 1 > playerVariables[ playerid ][ pVSlots ] ) return InfoTD_MSG( playerid, 7000, "~r~~h~ERROR: ~w~~h~You have to buy more slots /v !" );
				if( playerVariables[ playerid ][ pMoney ] < GetPVarIntEx( playerid, "ds_price", vID ) ) return InfoTD_MSG( playerid, 7000, "~r~~h~ERROR: ~w~~h~You don't have enough Money !" );
				if( playerVariables[ playerid ][ pPremiumPoints ] < GetPVarIntEx( playerid, "ds_pprice", vID ) ) return InfoTD_MSG( playerid, 7000, "~r~~h~ERROR: ~w~~h~You don't have enough Premium Points !" );
				if( GetPVarIntEx( playerid, "ds_stock", vID ) <= 0 ) return InfoTD_MSG( playerid, 7000, "~r~~h~ERROR: ~w~~h~Acest vehicul nu mai este pe stoc !" );

				// < Get player cash / PP )
				playerVariables[ playerid ][ pMoney ] -= GetPVarIntEx( playerid, "ds_price", vID );
				playerVariables[ playerid ][ pPremiumPoints ] -= GetPVarIntEx( playerid, "ds_pprice", vID );

				// < Update this variable for PutPlayerInVehicle )
				playerVariables[ playerid ][ VehicleSlot ] = ShopSlot;

				// < Load Vehicle Position )
				new garajRandom = playerVariables[ playerid ][ pCity ] ? randomEx( 4, 7 ) : randomEx( 0, 3 );

				// < Load it's base variables >
				//vehicleVariables[ ShopSlot ][ playerid ][ VehicleID ] =
				vehicleVariables[ ShopSlot ][ playerid ][ VehicleTimer ] 		= VEHICLE_DESPAWN_TIMER;
				vehicleVariables[ ShopSlot ][ playerid ][ VehicleOwnerID ]		= playerid; // Spawned
				vehicleVariables[ ShopSlot ][ playerid ][ VehicleStatus ]		= 1; // Spawned
				vehicleVariables[ ShopSlot ][ playerid ][ VehicleModelID ] 		= GetPVarIntEx( playerid, "ds_carID", vID );
				vehicleVariables[ ShopSlot ][ playerid ][ VehicleOwner ] 		= GetPlayerMysqlID(playerid);
				vehicleVariables[ ShopSlot ][ playerid ][ VehicleColor ][ 0 ] 	= random( 127 );
				vehicleVariables[ ShopSlot ][ playerid ][ VehicleColor ][ 1 ] 	= random( 127 );
				vehicleVariables[ ShopSlot ][ playerid ][ VehicleOdometter ] 	= 0;
				vehicleVariables[ ShopSlot ][ playerid ][ VehicleLocked ] 		= 0;
				vehicleVariables[ ShopSlot ][ playerid ][ VehicleInsurance ] 	= 1000;
				vehicleVariables[ ShopSlot ][ playerid ][ VehicleInsurancePoints ] = 10;
				vehicleVariables[ ShopSlot ][ playerid ][ VehicleFuel ]         = 200;
				vehicleVariables[ ShopSlot ][ playerid ][ VehicleOdometter ]    = 0;
				vehicleVariables[ ShopSlot ][ playerid ][ VehicleAge ]    		= 0;
				vehicleVariables[ ShopSlot ][ playerid ][ VehicleVIP ]			= 0;
				vehicleVariables[ ShopSlot ][ playerid ][ VehicleVIPWheel ]		= -1;
				vehicleVariables[ ShopSlot ][ playerid ][ Money ] 				= GetPVarIntEx( playerid, "ds_price", vID );
				vehicleVariables[ ShopSlot ][ playerid ][ PP ] 					= GetPVarIntEx( playerid, "ds_pprice", vID );

				// < Create Personal Vehicle )
				if( IsAPlaneModel( GetPVarIntEx( playerid, "ds_carID", vID ) ) ) // Pozitie pentru avioane/elicoptere
				{
					vehicleVariables[ ShopSlot ][ playerid ][ Position ][ 0 ] 		= 1444.2604;
					vehicleVariables[ ShopSlot ][ playerid ][ Position ][ 1 ] 		= -2450.5342;
					vehicleVariables[ ShopSlot ][ playerid ][ Position ][ 2 ] 		= 13.5547;
					vehicleVariables[ ShopSlot ][ playerid ][ Rotation ] 			= 181.2094;
					vehicleVariables[ ShopSlot ][ playerid ][ Vehicle ] = CreateVehicle( GetPVarIntEx( playerid, "ds_carID", vID ), 1444.2604, -2450.5342, 13.5547, 181.2094, vehicleVariables[ ShopSlot ][ playerid ][ VehicleColor ][ 0 ], vehicleVariables[ ShopSlot ][ playerid ][ VehicleColor ][ 1 ], -1 );
				}
				else
				{
					vehicleVariables[ ShopSlot ][ playerid ][ Position ][ 0 ] 		= gRandomDSGaraj[ garajRandom ][ 0 ];
					vehicleVariables[ ShopSlot ][ playerid ][ Position ][ 1 ] 		= gRandomDSGaraj[ garajRandom ][ 1 ];
					vehicleVariables[ ShopSlot ][ playerid ][ Position ][ 2 ] 		= gRandomDSGaraj[ garajRandom ][ 2 ];
					vehicleVariables[ ShopSlot ][ playerid ][ Rotation ] 			= gRandomDSGaraj[ garajRandom ][ 3 ];
					vehicleVariables[ ShopSlot ][ playerid ][ Vehicle ] = CreateVehicle( GetPVarIntEx( playerid, "ds_carID", vID ), gRandomDSGaraj[ garajRandom ][ 0 ], gRandomDSGaraj[ garajRandom ][ 1 ], gRandomDSGaraj[ garajRandom ][ 2 ], gRandomDSGaraj[ garajRandom ][ 3 ], vehicleVariables[ ShopSlot ][ playerid ][ VehicleColor ][ 0 ], vehicleVariables[ ShopSlot ][ playerid ][ VehicleColor ][ 1 ], -1 );
				}
				serverVariables[ VehicleGas ][ vehicleVariables[ ShopSlot ][ playerid ][ Vehicle ] ] = 200;
				SetGVarInt( "veh_Faction", 0, vehicleVariables[ ShopSlot ][ playerid ][ Vehicle ] );
				SetGVarInt( "veh_FactionRank", 0, vehicleVariables[ ShopSlot ][ playerid ][ Vehicle ] );

				// < Set his Number Plate )
				format( vehicleVariables[ ShopSlot ][ playerid ][ VehiclePlate ], 64, "%s", playerVariables[ playerid ][ pNormalName ] );
				SetVehicleToRespawn( vehicleVariables[ ShopSlot ][ playerid ][ Vehicle ] );
				SetVehicleNumberPlate( vehicleVariables[ ShopSlot ][ playerid ][ Vehicle ], vehicleVariables[ ShopSlot ][ playerid ][ VehiclePlate ] );

				// < Put player in his new personal vehicle )
				PutPlayerInVehicle( playerid, vehicleVariables[ ShopSlot ][ playerid ][ Vehicle ], 0 );

				// < Update Vehicles Stock >
				gsQuery[ 0 ] = EOS;
				mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_dealer` SET `stock` = `stock` - 1, `onserver` = `onserver` + 1 WHERE `carID` = %d", GetPVarIntEx( playerid, "ds_carID", vID ) );
				mysql_tquery( g_Handle, gsQuery, "", "" );

				// < Insert into Database >
				gsQuery[ 0 ] = EOS;
				mysql_format( g_Handle, gsQuery, sizeof gsQuery, "INSERT INTO `server_personalvehicles` (vehicleModelID, vehicleOwner, vehicleNumberPlate, Money, PP) VALUES(%d, %d, '%s', %d, %d)", GetPVarIntEx( playerid, "ds_carID", vID ), GetPlayerMysqlID(playerid), vehicleVariables[ ShopSlot ][ playerid ][ VehiclePlate ], GetPVarIntEx( playerid, "ds_price", vID ), GetPVarIntEx( playerid, "ds_pprice", vID ) );
				mysql_tquery( g_Handle, gsQuery, "OnPersonalVehicleCreated", "dddds", playerid, ShopSlot, GetPVarIntEx( playerid, "ds_price", vID ), GetPVarIntEx( playerid, "ds_pprice", vID ), VehicleName( GetPVarIntEx( playerid, "ds_carID", vID ) ) );
			}
			else callcmd::buycar( playerid, "lol" ); // Go back to the menu
		}
		case DIALOG_DEALER_SELLCAR:
		{
			if( response )
			{
				new SellerID = GetPVarInt( playerid, "trade_Player" ),
					SellerSlot = GetPVarInt( playerid, "trade_Slot" ),
					vehPrice = GetPVarInt( playerid, "trade_Price" ),
					FreeSlot = GetPlayerFreeVehicleSlot( playerid );

				// < Delete the PVars )
				DeleteTradePVars( playerid );

				// < Check if seller is still connected! )
				if( !IsPlayerConnected( SellerID ) )
					return InfoTD_MSG( playerid, 7000, "~r~~h~ERROR~w~~h~: Vanzatorul s-a deconectat de pe server!" );

				if( GetPersonalVehiclesNumber( playerid ) >= MAX_SLOTS ) 
					return SendClientMessage( playerid, COLOR_GREY, "Nu poti cumpara mai mult de 10 masini personale!" );

				if( IsPlayerInAnyVehicle( playerid ) )
				{
					InfoTD_MSG( playerid, 7000, "You have to be on foot to accept the trade!" );
					return InfoTD_MSG( SellerID, 7000, "%s's trade has been declined!~n~~r~~h~Reason: ~w~~h~Player is not on foot!", username( playerid ) );
				}
				// < Info players >
				InfoTD_MSG( SellerID, 10000, "You have sold your ~y~~h~%s[Key:%d] ~w~~h~to ~r~~h~%s~n~~g~~h~Vehicle Price~w~~h~: ~g~~h~$~w~~h~%d",
					VehicleName( vehicleVariables[ SellerSlot ][ SellerID ][ VehicleModelID ] ), playerVariables[ SellerID ][ Vehicle ][ SellerSlot ], username( playerid ), vehPrice );

				InfoTD_MSG( playerid, 10000, "You bought the ~y~~h~%s[Key:%d] ~w~~h~from ~r~~h~%s~n~~g~~h~Vehicle Price~w~~h~: ~g~~h~$~w~~h~%d",
					VehicleName( vehicleVariables[ SellerSlot ][ SellerID ][ VehicleModelID ] ), playerVariables[ SellerID ][ Vehicle ][ SellerSlot ], username( SellerID ), vehPrice );

				// < log the action >
				gsString[ 0 ] = EOS;
				format( gsString, sizeof gsString, "Vehicle has been sold to %s[user: %d] for $%s", playerVariables[ playerid ][ pNormalName ], GetPlayerMysqlID(playerid), FormatNumber( vehPrice ) );
				InsertVehicleLog( playerVariables[ SellerID ][ Vehicle ][ SellerSlot ], GetPlayerMysqlID(SellerID), gsString );

				// < Announce the player/admins >
				gsString[ 0 ] = EOS;
				format( gsString, sizeof gsString, "%s[user:%d] sold his %s [car:%d] to %s[user:%d] for $%s.", 
					playerVariables[ SellerID ][ pNormalName ], GetPlayerMysqlID(SellerID), 
					VehicleName( vehicleVariables[ SellerSlot ][ SellerID ][ VehicleModelID ] ), playerVariables[ SellerID ][ Vehicle ][ SellerSlot ], 
					playerVariables[ playerid ][ pNormalName ], GetPlayerMysqlID(playerid), FormatNumber( vehPrice ) );

				nearByMessage( playerid, COLOR_PURPLE, NBM_DIST, gsString );
				submitToAdmins(gsString, COLOR_YELLOW);
				InsertPlayerLog( GetPlayerMysqlID(SellerID), GetPlayerMysqlID(playerid), gsString );

				// < Get player cash / PP >
				playerVariables[ playerid ][ pMoney ] -= vehPrice;
				playerVariables[ SellerID ][ pMoney ] += vehPrice;
				DeSpawnPlayerVehicle( SellerSlot, SellerID );

				// < Insert Vehicles Database >
				playerVariables[ playerid ][ Vehicle ][ FreeSlot ] = playerVariables[ SellerID ][ Vehicle ][ SellerSlot ];
				playerVariables[ SellerID ][ Vehicle ][ SellerSlot ] = 0;

				// < Delete the seller vars >
				ResetPersonalVehicleVars( SellerSlot, SellerID );

				gsQuery[ 0 ] = EOS;
				mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_personalvehicles` SET `vehicleOwner` = %d WHERE `vehicleID` = %d", GetPlayerMysqlID(playerid), playerVariables[ playerid ][ Vehicle ][ FreeSlot ] );
				mysql_tquery( g_Handle, gsQuery, "", "" );

				#if defined DEBUG_SERVER
					printf( "[Debug /sellcarto #1]: %s", gsQuery );
				#endif

				SetTimerEx( "PreparePersonalVehicle", 1000, false, "dd", playerid, FreeSlot );
			}
			else
			{
				// < Info players )
				InfoTD_MSG( playerid, 7000, "You have declined the ~g~~h~%s~w~~h~'s selling offer!", username( GetPVarInt( playerid, "trade_Player" ) ) );
				InfoTD_MSG( GetPVarInt( playerid, "trade_Player" ), 7000, "~r~~h~%s ~w~~h~has declined your selling offer!", username( playerid ) );

				// < Delete the pVars )
				DeleteTradePVars( playerid );
			}
		}
		case DIALOG_TOW_VEHICLE:
		{
			if( response )
			{
				playerVariables[ playerid ][ pCarSelected ] = listitem;
				switch( vehicleVariables[ listitem ][ playerid ][ VehicleStatus ] )
				{
					case 0:
					{
						SpawnPlayerVehicle( listitem, playerid );
						printf( "Vehicle[slot:%d] has been Spawned(C:%d / D:%d)", listitem, GetTickCount(), vehicleVariables[ listitem ][ playerid ][ VehicleTimer ] );
						InfoTD_MSG( playerid, 7000, "~y~~h~INFO: ~w~~h~Your ~r~~h~%s ~w~~h~has been Spawned!", VehicleName( vehicleVariables[ listitem ][ playerid ][ VehicleModelID ] ) );
					}
					default:
					{
						DeSpawnPlayerVehicle( listitem, playerid );
						SpawnPlayerVehicle( listitem, playerid );
						InfoTD_MSG( playerid, 7000, "~y~~h~INFO: ~w~~h~Your ~r~~h~%s ~w~~h~has been Re-Spawned!", VehicleName( vehicleVariables[ listitem ][ playerid ][ VehicleModelID ] ) );
					}
				}
			}
		}
	}
	return false;
}
public OnPlayerModelSelection( playerid, response, listid, modelid )
{
	if( listid == selection_skinlist )
	{
		if( response )
		{
			if( playerVariables[ playerid ][ pMoney ] < 1000 )
				return SendClientMessage( playerid, COLOR_GREY, "Nu ai destui bani pentru a cumpara haine!" );

			playerVariables[ playerid ][ pMoney ] -= 1000;
			playerVariables[ playerid ][ pSkin ] = modelid;
			SetPlayerSkin( playerid, playerVariables[ playerid ][ pSkin ] );
			SendClientMessage( playerid, COLOR_ATTACK, "Skin selected, you have paid $300!" );
		}
	}
	else if( listid == selection_hatslist )
	{
		if( response )
		{
			if( playerVariables[ playerid ][ pMoney ] < 500 )
				return SendClientMessage( playerid, COLOR_GREY, "Nu ai destui bani pentru a cumpara o palarie!" );

			playerVariables[ playerid ][ pHat ] = modelid;

			gsQuery[ 0 ] = EOS;
			mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerHat` = %d WHERE `id` = %d", playerVariables[ playerid ][ pHat ], GetPlayerMysqlID(playerid) );
			mysql_tquery( g_Handle, gsQuery, "", "" );

			playerVariables[ playerid ][ pMoney ] -= 500;
			RemovePlayerAttachedObject( playerid, INDEX_HAT );
			playerVariables[ playerid ][ pHatStatus ] = true;
			new playerSkin = playerVariables[ playerid ][ pSkin ];
			SetPlayerAttachedObject( playerid, INDEX_HAT, playerVariables[ playerid ][ pHat ], 2, SKIN_HATS[ playerSkin ][ 0 ], SKIN_HATS[ playerSkin ][ 1 ], SKIN_HATS[ playerSkin ][ 2 ], SKIN_HATS[ playerSkin ][ 3 ], SKIN_HATS[ playerSkin ][ 4 ], SKIN_HATS[ playerSkin ][ 5 ] );
		}
	}
	else if( listid == selection_glasseslist )
	{
		if( response )
		{
			if( playerVariables[ playerid ][ pMoney ] < 500 )
				return SendClientMessage( playerid, COLOR_GREY, "Nu ai destui bani pentru a cumpara ochelari!" );

			playerVariables[ playerid ][ pGlasses ] = modelid;

			gsQuery[ 0 ] = EOS;
			mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerGlasses` = %d WHERE `id` = %d", playerVariables[ playerid ][ pGlasses ], GetPlayerMysqlID(playerid) );
			mysql_tquery( g_Handle, gsQuery, "", "" );

			playerVariables[ playerid ][ pMoney ] -= 500;
			RemovePlayerAttachedObject( playerid, INDEX_GLASSES );
			playerVariables[ playerid ][ pGlassesStatus ] = true;
			new playerSkin = playerVariables[ playerid ][ pSkin ];
			SetPlayerAttachedObject( playerid, INDEX_GLASSES, playerVariables[ playerid ][ pGlasses ], 2, SKIN_GLASSES[ playerSkin ][ 0 ], SKIN_GLASSES[ playerSkin ][ 1 ], SKIN_GLASSES[ playerSkin ][ 2 ], SKIN_GLASSES[ playerSkin ][ 3 ], SKIN_GLASSES[ playerSkin ][ 4 ], SKIN_GLASSES[ playerSkin ][ 5 ] );
		}
	}
	else if( listid == selection_rentcars )
	{
		if( response )
		{
			if( playerVariables[ playerid ][ pMoney ] < 5000 )
				return SendClientMessage( playerid, COLOR_GREY, "Nu ai destui bani pentru a inchiria masina!" );

			if( playerVariables[ playerid ][ pCarRent ] != INVALID_VEHICLE_ID )
				DestroyVehicle_( playerVariables[ playerid ][ pCarRent ] ), playerVariables[ playerid ][ pCarRent ] = INVALID_VEHICLE_ID;

			new randomRent = random( sizeof( gRandomRentCar ) );
			playerVariables[ playerid ][ pCarRent ] = CreateVehicle( modelid, gRandomRentCar[ randomRent ][ 0 ], 
				gRandomRentCar[ randomRent ][ 1 ], 
				gRandomRentCar[ randomRent ][ 2 ], 
				gRandomRentCar[ randomRent ][ 3 ], 1, 1, -1 );

            UnLockVehicle(playerVariables [ playerid ][ pCarRent] );
			playerVariables[ playerid ][ pMoney ] -= 5000;
 
            gsBigString[0] = EOS;

            format(gsBigString, sizeof gsBigString, "ID %d RENT", playerid);

			SetVehicleNumberPlate( playerVariables[ playerid ][ pCarRent ], gsBigString );
			serverVariables[ VehicleGas ][ playerVariables[ playerid ][ pCarRent ] ] = 200.0;
			InfoTD_MSG( playerid, 20000, "~y~~h~INFO: ~w~~h~Ai inchiriat cu succes vehiculul ~r~~h~%s~n~~w~~h~Ai platit $5000 pentru inchiriere, vei fi taxat cu $25/km!~n~Masina ta o vei gasi in parcarea alaturata!", VehicleName( modelid ) );
		}
	}
	return true;
}
public OnPlayerSelectObject( playerid, type, objectid, modelid, Float:fX, Float:fY, Float:fZ )
{
	if( type == SELECT_OBJECT_GLOBAL_OBJECT )
	{
		for( new i=0; i < sizeof(GOLD_SAFE); i++ )
		{
			if( objectid == GOLD_SAFE[ i ] )
			{
				playerVariables[ playerid ][ pRobSlots ]++;
				DestroyObject( GOLD_SAFE[ i ] );
				//( playerid, 1084, 0.0, 0.0, 0.0 );

				if( playerVariables[ playerid ][ pRobSlots ] >= 34 )
				{
					// < Execute the code )
					//( playerid, 3401, 0.0, 0.0, 0.0 );
					TogglePlayerControllable( playerid, 1 );
					playerVariables[ playerid ][ pRobStatus ] = 2;
					serverVariables[ rob_players ] ++;
					playerVariables[ playerid ][ pRobSlots ] = 0;
					callcmd::cseif( playerid, "lol" ); // Inchide usa
					callcmd::crseif( playerid, "lol" ); // Stop Rob

					PlayCrimeReportForPlayer( playerid, playerid, 6 );
					InfoTD_MSG( playerid, 30000, "~r~~h~ROB HINT:~n~~w~~h~Ai furat tot din seiful bancii!~n~Mergi la ~y~~h~Safe House ~w~~h~ pentru a primi banii!~n~Ti-am pus un checkpoint pe GPS!" );

					new randomSafeHouse = randomEx( 1, MAX_HOUSES );
					DisablePlayerCheckpoint( playerid );
					playerVariables[ playerid ][ pCP ] = 50100;
					SetPlayerCheckpoint( playerid, GetGVarFloat( "house_EnterX", randomSafeHouse ), GetGVarFloat( "house_EnterY", randomSafeHouse ), GetGVarFloat( "house_EnterZ", randomSafeHouse ), 5.0 );
					return true;
				}
			}
		}
	}
	return true;
}
public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
	return true;
}
public OnPlayerClickMap( playerid, Float:fX, Float:fY, Float:fZ )
{
	if( playerVariables[ playerid ][ pAdminLevel ] != 0 && playerVariables[ playerid ][ pRobStatus ] == 0 )
	{
		if( GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
		{
			SetVehiclePos( GetPlayerVehicleID( playerid ), fX, fY + 20.0, fZ + 1.0 );
			LinkVehicleToInterior( GetPlayerVehicleID( playerid ), GetPlayerInterior( playerid ) );
			SetVehicleVirtualWorld( GetPlayerVehicleID( playerid ), GetPlayerVirtualWorld( playerid ) );
		}
		else SetPlayerPosFindZ( playerid, fX, fY + 20.0, fZ + 1.0 );

		InfoTD_MSG( playerid, 5000, "You have been teleported to:~n~~r~~h~%f : %f : %f", fX, fY, fZ );
		playerVariables[ playerid ][ pTeleport ] = true;
	}
	return true;
}
// <==============================================================================================================================================================================================================//
// <=========================================================================================[ SERVER COMMANDS ]==================================================================================================//
// <==============================================================================================================================================================================================================//
#if defined PET
CMD:pet( playerid, params[] )
{
	if( playerVariables[ playerid ][ pPet ] == 0 )
		return SendClientMessage( playerid, COLOR_WHITE, "Nu detii un pet! Poti achizitiona unul din /shop." );

	gsString[ 0 ] = EOS;
	format( gsString, 160, "Information\t\nStatus\t%s\nNickname\t%s\nLevel\t%d\nPoints\t%d/%s points\nPet type\t%s\nFeatures", ( playerVariables[ playerid ][ pPetStatus ] ) ? (""COL_G"Awake") : (""COL_LYE"Sleeping" ), playerVariables[ playerid ][ pPetName ], playerVariables[ playerid ][ pPetLevel ], playerVariables[ playerid ][ pPetPoints ], petlevelinfo( playerid ), pettype(playerid, 1) );
	ShowPlayerDialog( playerid, DIALOG_PET, DIALOG_STYLE_TABLIST_HEADERS, "Pet Menu", gsString, "Select", "Exit" );
	return 1;
}
stock SummonPet(playerid)
{
	playerVariables[playerid][pPetStatus] = 1;
	SetPlayerAttachedObject(playerid, INDEX_PARROT, playerVariables[playerid][pPetID], 1, GetOffsetPet(playerid, 0), GetOffsetPet(playerid, 1), GetOffsetPet(playerid, 2), GetRotatePet(playerid, 0), GetRotatePet(playerid, 1), GetRotatePet(playerid, 2), GetScalePet(playerid, 0), GetScalePet(playerid, 1), GetScalePet(playerid, 2)); // Parrot
		
	gsString[0] = EOS;
	format(gsString, 70, "{3EA80D}%s{FFFFFF} - lv {3EA80D}%d{FFFFFF}", playerVariables[playerid][pPetName], playerVariables[playerid][pPetLevel]);

	PetText[playerid] = CreateDynamic3DTextLabel(gsString, COLOR_WHITE, 350.120239, 1.712298, 349.232513, 20.0, playerid);
	return 1;
}

stock UnSummonPet(playerid)
{
	playerVariables[playerid][pPetStatus] = 0;
	RemovePlayerAttachedObject(playerid, INDEX_PARROT);
	DestroyDynamic3DTextLabel(PetText[playerid]);
	return 1;
}
#endif

CMD:resetspawn( playerid )
{
	playerVariables[ playerid ][ pSpawnType ] = 0; // Civil
	return InfoTD_MSG( playerid, 5000, "Your spawn has been reset to ~y~~h~Civil" );
}
alias:changespawn("spawnchange");
CMD:changespawn( playerid )
{
	// < Load the code >
	if(playerVariables[ playerid ][ pTakeExam ] == 1)
		return SendClientMessage(playerid, -1, "Nu iti poti schimba spawn-ul cand sustii examenul pentru permis.");

	new playerSpawnType[ 5 ];
	switch( playerVariables[ playerid ][ pSpawnType ] )
	{
		case 0: playerSpawnType[ 0 ] = 1;
		case 1: playerSpawnType[ 1 ] = 1;
		case 2: playerSpawnType[ 2 ] = 1;
		case 3: playerSpawnType[ 3 ] = 1;
	}
	// < Load dialogs >
	gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, "Spawn\tStatus\nCivil Spawn\t%s\n", ( playerSpawnType[ 0 ] ) ? ("{7CFC00}active") : ("{FF2020}disabled" ) );
	format( gsString, sizeof gsString, "%sHQ Spawn\t%s\n", gsString, ( playerSpawnType[ 1 ] ) ? ("{7CFC00}active") : ("{FF2020}disabled" ) );
	format( gsString, sizeof gsString, "%sHouse Spawn\t%s\n", gsString, ( playerSpawnType[ 2 ] ) ? ("{7CFC00}active") : ("{FF2020}disabled" ) );
	format( gsString, sizeof gsString, "%sApartment Spawn\t%s\n", gsString, ( playerSpawnType[ 3 ] ) ? ("{7CFC00}active") : ("{FF2020}disabled" ) );
	#if defined CITY_LV
		format( gsString, sizeof gsString, "%sCity Spawn\t%s", gsString, ( playerVariables[ playerid ][ pCity ] ) ? (""COL_LYE"Las Venturas") : (""COL_LYE"Los Santos" ) );
	#endif
	// < Show player dialog >
	ShowPlayerDialog( playerid, DIALOG_CHANGE_SPAWN, DIALOG_STYLE_TABLIST_HEADERS, "Change Spawn", gsString, "Select", "Cancel" );
	//SendClientMessage( playerid, COLOR_YELLOW, "Info: "COL_W"Daca intampinati probleme folositi comanda /resetspawn" );
	return true;
}
/*CMD:clocktest( playerid, params[] )
{
	AHCheck( playerid, 6, 5 );

	TogglePlayerClock( playerid, 1 );
	return SendClientMessage( playerid, COLOR_LIGHTGREEN, "Game clock has been enabled!" );
}*/
CMD:saverestart( playerid, params[] )
{
	AHCheck( playerid, 6, 5 );
	foreach(new i : Player)
	{
		savePlayerData( i );
		SetPlayerName( i, playerVariables[ i ][ pNormalName ] );
		InfoTD_MSG( i, 5000, "Your account has been saved!~n~Server restarts in ~r~~h~10 ~w~~h~seconds!" );
	}
	return true;
}

#if defined CRATES
CMD:myskins( playerid, params[] )
{
	if(IsPlayerInAnyVehicle(playerid))
		return SendClientMessage( playerid, COLOR_GREY, "You're not able to do this while you are in a vehicle!" );
	
	if(GetPVarInt(playerid, "InMySkins") == 1)
		return SendClientMessage( playerid, COLOR_GREY, "You're already opening this menu!" );

	if(GetPVarInt(playerid, "InCrate") == 1)
		return SendClientMessage( playerid, COLOR_GREY, "You're already in another menu!" );

	TextDrawShowForPlayer(playerid, SkinsTD[4]);
	TextDrawShowForPlayer(playerid, SkinsTD[3]);
	TextDrawShowForPlayer(playerid, SkinsTD[2]);
	TextDrawShowForPlayer(playerid, SkinsTD[1]);
	TextDrawShowForPlayer(playerid, SkinsTD[0]);

	////////////////////////////////////////////////////////////////

	gsString[0] = EOS;
	for(new i; i < 10; i++) 
	{
		PlayerTextDrawShow(playerid, SkinsPlayer[playerid][i]);
		if(playerVariables[playerid][pCrateSkins][i] != 0)
		{
			PlayerTextDrawSetPreviewModel(playerid, SkinsPlayer[playerid][i], playerVariables[playerid][pCrateSkins][i]);
			PlayerTextDrawSetPreviewRot(playerid, SkinsPlayer[playerid][i], 0.000000, 0.000000, 0.000000, 1.000000);

			PlayerTextDrawShow(playerid, SkinsPlayer[playerid][i]);
		}

		format(gsString, 10, "Owned: %d", playerVariables[playerid][pCrateSkinAmount][i]);
		TextDrawSetString(CrateTextdrawOwned[i], gsString);

		TextDrawShowForPlayer(playerid, CrateTextdrawOwned[i]);
	}
	SelectTextDraw(playerid, 0x9999BBBB);

	SetPVarInt(playerid, "InMySkins", 1);
	return 1;
}

CMD:opencrate(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid))
		return SendClientMessage( playerid, COLOR_GREY, "You're not able to open crates while you are in a vehicle!" );

	if(GetPVarInt(playerid, "InCrate") == 1)
		return SendClientMessage( playerid, COLOR_GREY, "You're already opening a crate!" );

	if(GetPVarInt(playerid, "InMySkins") == 1)
		return SendClientMessage( playerid, COLOR_GREY, "You're already in another menu!" );

	TextDrawShowForPlayer(playerid, CrateTD[5]);
	TextDrawShowForPlayer(playerid, CrateTD[4]);
	TextDrawShowForPlayer(playerid, CrateTD[3]);
	TextDrawShowForPlayer(playerid, CrateTD[2]);
	TextDrawShowForPlayer(playerid, CrateTD[1]);
	TextDrawShowForPlayer(playerid, CrateTD[0]);
	PlayerTextDrawShow(playerid, CratePlayer[playerid][1]);

	format(gsString, 45, "Select action~n~You have %d crates.", playerVariables[playerid][pCrates]);
	PlayerTextDrawSetString(playerid, CratePlayer[playerid][0], gsString);

	PlayerTextDrawShow(playerid, CratePlayer[playerid][0]);
	SelectTextDraw(playerid, 0x9999BBBB);
	SetPVarInt(playerid, "InCrate", 1);
	return 1;
}

#endif

function player_pns(playerid)
{

	new vehicleid = GetPVarInt(playerid, "Veh_idd"),
	    seat_id   = GetPVarInt(playerid, "seat_id"),
	    owner     = GetPVarInt(playerid, "is_owner");
	CallRemoteFunction("OnVehicleRespray", "iiii", owner, vehicleid, -1, -1);

	SetVehiclePos(vehicleid, 1838.3534,-1856.6511,13.3828);
	SetPlayerVirtualWorld(playerid, 0);
	RepairVehicle(vehicleid);
	SetVehicleVirtualWorld(vehicleid, 0);
	PutPlayerInVehicle(playerid, vehicleid, seat_id);
	TogglePlayerControllable( playerid, 1 );

	GetVehicleParamsEx( vehicleid, engine, lights, alarm, doors, bonnet, boot, objective );
	SetVehicleParamsEx( vehicleid, VEHICLE_PARAMS_ON, lights, alarm, doors, bonnet, boot, objective );
	return 1;
}

#if defined HEIST_SYSTEM
// < Heist System >
CMD:hz(playerid, params[])
{
	playerVariables[ playerid ][ pCP ] = 200;
	SetPlayerCheckpoint( playerid, GetGVarFloat( "heist_PosX", 0 ), GetGVarFloat( "heist_PosY", 0 ), GetGVarFloat( "heist_PosZ", 0 ), 5.0 );
	playerVariables[playerid][pHeistCount] = 3;
	return 1;
}
CMD:hz3(playerid, params[])
{
	SendClientMessage(playerid, -1, "WQE");
	return 1;
}
CMD:hz2(playerid, params[])
{
	playerVariables[playerid][pHeistCount] = 3;
	return 1;
}
CMD:heists( playerid, params[] )
{
	new string[40];
	gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, "Nume\tStatus\n" );
	foreach( new h : ServerHeists )
	{
		switch(playerVariables[playerid][pHeist][h] )
		{
			case 0: string = " "COL_LR"blocked ";
			case 1: string = " "COL_G"unblocked ";
			default: string = " "COL_YE"completed ";
		}
		format( gsString, sizeof gsString, "%s%s\t%s\n", gsString, GetGVarStringEx( "heist_Name", h ), string);
	}

	ShowPlayerDialog( playerid, DIALOG_HEISTS, DIALOG_STYLE_TABLIST_HEADERS, "Server: Heists List", gsString, "Find Heist", "Cancel" );
	return true;
}
CMD:heist( playerid, params[] )
{
	if( playerVariables[ playerid ][ pHeistKey ] )
		return SendClientMessage( playerid, COLOR_ULTRARED, ERROR_MESSAGE"Te afli deja intr-un Heist activ, foloseste /leaveheist !" );

	if( playerVariables[ playerid ][ pWanted ] )
		return SendClientMessage( playerid, COLOR_ULTRARED, ERROR_MESSAGE"Nu poti intra intr-un Heist daca ai Wanted!" );

	new HeistID = GetHeistID( playerid );
	if( HeistID == -404 )
		return SendClientMessage( playerid, COLOR_ULTRARED, ERROR_MESSAGE"Trebuie sa fii intr-un checkpoint de Heist!" );

	if(playerVariables[playerid][pHeist][HeistID-1] != 1)
		return SendClientMessage(playerid, COLOR_ULTRARED, ERROR_MESSAGE"Nu poti face acest heist, fie este blocat fie l-ai facut deja !");

	gsBigString[ 0 ] = EOS;
	format( gsBigString, sizeof gsBigString, ""COL_W"Heist Name: "COL_LYE"%s\n\n"COL_R"Heist Info:\n", GetGVarStringEx( "heist_Name", HeistID-1 ) );
	format( gsBigString, sizeof gsBigString, "%s"COL_W"%s", gsBigString, Heist_Text( HeistID ) );
	format( gsBigString, sizeof gsBigString, "%s\n\n"COL_LR"Press (Accept) to start the heist or (Exit) to cancel it.", gsBigString );

	return ShowPlayerDialog( playerid, DIALOG_HEIST, DIALOG_STYLE_MSGBOX, "Heist Info", gsBigString, "Accept", "Exit" );
}

CMD:leaveheist( playerid, params[] )
{
	if( !playerVariables[ playerid ][ pHeistKey ] )
		return SendClientMessage( playerid, COLOR_ULTRARED, ERROR_MESSAGE"Nu te afli intr-un Heist activ!" );

	CheckHeistFail( playerid, "Jucatorul a folosit comanda /leaveheist" );
	return SendClientMessage( playerid, COLOR_LIGHTRED, "Heist: "COL_W"Ai parasit Heist-ul din care faceai parte si a fost anulat!" );
}
CMD:hchat( playerid, params[] )
{
	if( !playerVariables[ playerid ][ pHeistKey ] )
		return SendClientMessage( playerid, COLOR_ULTRARED, ERROR_MESSAGE"Nu te afli intr-un Heist activ!" );

	new chatText[ 128 ];
	if( sscanf( params, "s[128]", chatText ) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/hchat [ text ]");

	foreach(new i : Heists[playerVariables[playerid][pHeistOwner]])
		SendClientMessagef( i, COLOR_LIGHTRED, "[HEIST CHAT] %s: "COL_W"%s", playerVariables[ playerid ][ pNormalName ], chatText );

	return true;
}
CMD:hinvite( playerid, params[] )
{
	new HeistID = GetHeistID( playerid );
	if( HeistID == -404 )
		return SendClientMessage( playerid, COLOR_ULTRARED, ERROR_MESSAGE"Trebuie sa fii intr-un checkpoint de Heist!" );

	if( !playerVariables[ playerid ][ pHeistKey ] )
		return SendClientMessage( playerid, COLOR_WHITE, "Nu esti liderul unui Heist si nu poti folosi comanda!" );

	new Player;
	if( sscanf( params, "u", Player ) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/hinvite [ playerID/Name ]");

	if( !IsPlayerConnected( Player ) ) 							
		return SendClientMessage( playerid, COLOR_WHITE, "Player it's not connected!" );

	if( playerVariables[ Player ][ pWanted ] )
		return SendClientMessage( playerid, COLOR_ULTRARED, ERROR_MESSAGE"Nu poti adauga un jucator cu Wanted intr-un Heist!" );

	if( playerVariables[ Player ][ pHeistKey ] ) 				
		return SendClientMessage( playerid, COLOR_ULTRARED, ERROR_MESSAGE"Acest jucator se afla deja intr-un Heist!" );

	if(playerVariables[Player][pHeist][HeistID-1] != 1)
		return SendClientMessage(playerid, COLOR_ULTRARED, ERROR_MESSAGE"Acest jucator are heist-ul acesta blocat sau l-a facut deja !");

	SendClientMessagef( playerid, ~1, "You have invited %s to join your Heist.", playerVariables[ Player ][ pNormalName ] );
	SendClientMessage( Player, COLOR_LIGHTRED, "Invitatie noua in Heist:" );
	SendClientMessagef( Player, COLOR_NEWBIE, "%s te-a invitat in heist-ul '%s' Foloseste /haccept %d pentru a accepta.", playerVariables[ playerid ][ pNormalName ], GetGVarStringEx( "heist_Name", playerVariables[ playerid ][ pHeistKey ]-1), playerid );

	SetPVarInt( Player, "heistInvitePlayer", playerid );
	SetPVarInt( Player, "heistInviteKey", HeistID );
	return true;
}
CMD:haccept( playerid, params[] )
{
	CheckPlayerAction( playerid );

	if( playerVariables[ playerid ][ pHeistKey ] )
		return SendClientMessage( playerid, COLOR_ULTRARED, ERROR_MESSAGE"Te afli deja intr-un Heist activ, foloseste /leaveheist !" );

	if( sscanf( params, "d", params[ 0 ] ) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/haccept [ playerID ]" );

	if( !IsPlayerConnected( params[ 0 ] ) )
		return SendClientMessage( playerid, COLOR_WHITE, "Player it's not connected!" );

	if( GetPVarInt(playerid, "heistInvitePlayer" ) != params[0] )
		return SendClientMessage( playerid, COLOR_ULTRARED, ERROR_MESSAGE"Acest jucator nu te-a invitat in niciun Heist!" );

	if(playerVariables[params[0]][pHeistKey] == 0)
		return SendClientMessage( playerid, COLOR_ULTRARED, ERROR_MESSAGE"Acest jucator nu este in niciun heist!" );

	if(Iter_Count(Heists[params[0]]) == 4)
		return SendClientMessage(playerid, COLOR_ULTRARED, ERROR_MESSAGE"Acest heist are deja 4 membri, nu mai poti participa !");

	new heistKey = GetPVarInt(playerid, "heistInviteKey" );

	playerVariables[ playerid ][ pHeistKey ] = heistKey;
	playerVariables[ playerid ][ pHeistOwner ] = params[ 0 ];
	playerVariables[ playerid ][ pHeistStatus ] = 0;

	playerVariables[ playerid ][ pCP ] = 200;
	Iter_Add(Heists[params[0]], playerid);
	SetPlayerCheckpoint( playerid, GetGVarFloat( "heist_PosX", heistKey-1 ), GetGVarFloat( "heist_PosY", heistKey-1 ), GetGVarFloat( "heist_PosZ", heistKey-1 ), 5.0 );

	InfoTD_MSG( params[ 0 ], 5000, "Jucatorul ~r~~h~%s~w~~h~ a intrat in Heist!~n~El este jucatorul cu numarul #%d in aceasta echipa!", playerVariables[ playerid ][ pNormalName ], Iter_Count(Heists[params[0]]));
	InfoTD_MSG( playerid, 5000, "Ai intrat in Heist-ul organizat de ~r~~h~%s~w~~h~, asteapta informatii de la el!~n~Esti jucatorul cu numarul #%d in aceasta echipa!~n~Mergi la Checkpoint-ul marcat pe GPS pentru a continua!", playerVariables[ params[ 0 ] ][ pNormalName ], Iter_Count(Heists[params[0]]));
	return true;
}
CMD:gotoheist( playerid, params[] )
{
	AHCheck( playerid, 3, 5 );
	new id;

	if( sscanf( params, "d", id) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/gotoheist [ heistID ]" );
	if(id == 0) return SendClientMessage( playerid, COLOR_GREY, "Invalid Heist ID!" );
	if(id-1 >= MAX_HEISTS)
		return SendClientMessage( playerid, COLOR_GREY, "Invalid Heist ID!" );

	return SetPlayerPos( playerid, GetGVarFloat( "heist_PosX", id-1), GetGVarFloat( "heist_PosY", id-1), GetGVarFloat( "heist_PosZ", id-1) );
}
#endif
// < Rob System >
CMD:rob( playerid, params[] )
{
	// < Load the checkings >
	new bizID = GetBuildingEnterID( playerid, 1, 3, 15.0 );
	if( bizID == -404 )										return SendClientMessage( playerid, COLOR_GREY, "Trebuie sa fii intr-un business!" );
	if( IsPlayerCop( playerid  ) )							return SendClientMessage( playerid, COLOR_GREY, "Esti politist si nu poti da /rob !" );
	if( playerVariables[ playerid ][ pRobStatus ] != 0 )    return SendClientMessage( playerid, COLOR_GREY, "Ai deja un jaf in desfasurare!" );
	if( playerVariables[ playerid ][ pLevel ] < 3 )    		return SendClientMessage( playerid, COLOR_GREY, "Trebuie sa ai minim level 3 pentru a da un /rob !" );
	if( playerVariables[ playerid ][ pWanted ] )			return SendClientMessage( playerid, COLOR_GREY, "Nu poti da /rob cat timp ai wanted deja!" );

	// < Check Rob Points >
	switch( playerVariables[ playerid ][ pPremium ] )
	{
		case 0:
		{
			if( playerVariables[ playerid ][ pRobPoints ] < 10 )
				return SendClientMessage( playerid, COLOR_GREY, "Ai nevoie de minim 10 Rob Points pentru un jaf!" );
			playerVariables[ playerid ][ pRobPoints ] -= 10;
		}
		case 1,2:
		{
			if( playerVariables[ playerid ][ pRobPoints ] < 8 )
				return SendClientMessage( playerid, COLOR_GREY, "Ai nevoie de minim 8 Rob Points pentru un jaf!" );
			playerVariables[ playerid ][ pRobPoints ] -= 8;
		}
	}
	#if defined HEIST_SYSTEM
	// < check the rob type >
	if( playerVariables[ playerid ][ pHeistStatus ] == 2 )
	{
		playerVariables[ playerid ][ pHeistStatus ] = 3; // < rob has been done >
		SetPlayerAttachedObject( playerid, INDEX_ROB, 1550, 15, 0.016491, 0.205742, -0.208498, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // < Money Bag >

		// < check the players active in CP >
		new heistOwner = playerVariables[ playerid ][ pHeistOwner ];
		if(Iter_Contains(Heists[heistOwner], playerid)) playerVariables[heistOwner][pHeistCount]++;
				
		if( playerVariables[heistOwner][pHeistCount] == 4 ) // < all players in the checkpoint >
		{
			foreach(new i : Heists[heistOwner])
			{
				playerVariables[ i ][ pCP ] = 300; // < deliver the cash back to the heist location >
				SetPlayerCheckpoint(i, -686.6761, 917.1033, 12.1315, 5.0);
				SetTimedMessage(i, COLOR_LIGHTRED, "Mike Toreno: "COL_W"Angajatii magazinului au anuntat autoritatile.", 500);
				SetTimedMessage(i, COLOR_LIGHTRED, "Mike Toreno: "COL_W"Duceti bijuteriile la casa mea de vacanta. Acolo vor fi in siguranta.", 1000);
			}
			playerVariables[heistOwner][pHeistCount] = 0;
		}
		return 1;
	}
	#endif
	// < Start the rob >
	SendClientMessage( playerid, COLOR_ROB, "Robbing the business..." );
	SendClientMessage( playerid, COLOR_ROB, "Please wait 10 seconds..." );
	SetTimerEx( "Rob_Timer", 10000, false, "i", playerid );
	//( playerid, 3401, 0.0, 0.0, 0.0 );
	TogglePlayerControllable( playerid, 0 );

	playerVariables[ playerid ][ pRobStatus ] = 1;
	serverVariables[ rob_players ] ++;
	playerVariables[ playerid ][ pCrimes ]++;
	playerVariables[ playerid ][ pRobTime ] = 0;
	playerVariables[ playerid ][ pRobs ]++;

	// < set the wanted and annouce the cops >
	playerVariables[ playerid ][ pWanted ] = 6;
	playerVariables[ playerid ][ pWantedTime ] = 600;
	Iter_Add(server_wanteds, playerid);
	server_wanteds++;
	CheckPlayerQuest( playerid, QUEST_ROB );
	SetPlayerWantedLevel( playerid, playerVariables[ playerid ][ pWanted ] );
	PlayCrimeReportForPlayer( playerid, playerid, 6 );

	playerVariables[ playerid ][ pCrimeReason ] = EOS;
	format( playerVariables[ playerid ][ pCrimeReason ], 128, "armed robbery - reporter: Unknown" );

	gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, "Dispatch: %s[%d] has comitted a crime: armed robbery. Reporter: %s W: +6 | New Wanted Level: %d", username( playerid ), playerid, GetGVarStringEx( "bus_Name", bizID ), playerVariables[ playerid ][ pWanted ] );
	sendDepartmentMessage( COLOR_RADIOCHAT, gsString );
	SendClientMessagef( playerid, COLOR_RED2, "Ai comis o infractiune: armed robbery, raportat de: %s. W: +6. Nivel urmarire nou: %d. ", GetGVarStringEx( "bus_Name", bizID ), playerVariables[ playerid ][ pWanted ] );
	return true;
}
CMD:startrob( playerid, params[] )
{
	// < Load the checkings >
	new BusID = GetBuildingEnterID( playerid, 1, 3, 20.0 );
	if( BusID != 4 )										return SendClientMessage( playerid, COLOR_GREY, "Nu esti in banca din Las Venturas[ID:4]! Foloseste /gps" );
	if( playerVariables[ playerid ][ pLevel ] < 5 )    		return SendClientMessage( playerid, COLOR_GREY, "Trebuie sa ai minim level 5 pentru a folosi /startrob !" );
	if( IsPlayerCop( playerid  ) )							return SendClientMessage( playerid, COLOR_GREY, "Esti politist si nu poti da /startrob !" );
	if( GetGVarInt( "bus_Robbed", BusID ) != INVALID_PLAYER_ID )
		return SendClientMessage( playerid, COLOR_GREY, "Un Rob se afla deja in desfasurare in banca!" );
	if( playerVariables[ playerid ][ pRobStatus ] != 0 )    return SendClientMessage( playerid, COLOR_GREY, "Ai deja un jaf in desfasurare!" );
	if( GetPlayerWeapon( playerid ) != WEAPON_DEAGLE )      return SendClientMessage( playerid, COLOR_GREY, "Trebuie sa ai un Desert Eagle in mana!" );
	if( playerVariables[ playerid ][ pWanted ] )			return SendClientMessage( playerid, COLOR_GREY, "Nu poti da /rob in timp ce esti urmarit de politie!" );

	// < Check Rob Points )
	switch( playerVariables[ playerid ][ pPremium ] )
	{
		case 0:
		{
			if( playerVariables[ playerid ][ pRobPoints ] < 15 ) 	
				return SendClientMessage( playerid, COLOR_GREY, "Ai nevoie de minim 15 Rob Points pentru un jaf!" );
			playerVariables[ playerid ][ pRobPoints ] -= 15;
		}
		case 1,2:
		{
			if( playerVariables[ playerid ][ pRobPoints ] < 10 ) 	
				return SendClientMessage( playerid, COLOR_GREY, "Ai nevoie de minim 10 Rob Points pentru un jaf!" );
			playerVariables[ playerid ][ pRobPoints ] -= 10;
		}
	}
	// < Execute the code )
	CheckPlayerQuest( playerid, QUEST_ROB );
	playerVariables[ playerid ][ pRobStatus ] = 1;
	serverVariables[ rob_players ] ++;
	playerVariables[ playerid ][ pRobPlayers ] = 0;
	SetGVarInt( "bus_Robbed", playerid, BusID );
	//PlayAudioStreamForPlayer( playerid, "http://www.rofixed.com/music/heist.mp3" );

	InfoTD_MSG( playerid, 10000, "~r~ROB HINT:~n~~w~~h~Imobilizeaza angajatii bancii pentru a nu porni alarma in timpul jafului!~n~Tinteste asupra lor cu arma de la o distanta de minim 3 metri!" );   
	//( playerid, 1058, 0.0, 0.0, 0.0 );
	return true;
}
CMD:robsafe( playerid, params[] )
{
	if( playerVariables[ playerid ][ pRobStatus ] == 0 ) 
		return SendClientMessage( playerid, COLOR_GREY, "Trebuie sa folosesti /startrob in banca din Las Venturas!" );

	if( playerVariables[ playerid ][ pRobPlayers ] < 3 )
		return SendClientMessage( playerid, COLOR_GREY, "Nu ai imobilizat toti angajatii bancii!" );

	if( !IsPlayerInRangeOfPoint( playerid, 3.0, 2144.1548, 1635.8928, 993.5761 ) )
		return SendClientMessage( playerid, COLOR_GREY, "Trebuie sa fii la minim 3 metri distanta de seif!" );

	new Float:Player_Pos[ 4 ];
	playerVariables[ playerid ][ pRobSlots ] = 0;
	TogglePlayerControllable( playerid, 0 );

	GetPlayerPos( playerid, Player_Pos[ 0 ], Player_Pos[ 1 ], Player_Pos[ 2 ] );
	InterpolateCameraPos( playerid, Player_Pos[ 0 ], Player_Pos[ 1 ], Player_Pos[ 2 ], 2144.1438, 1636.9810, 995.9060, 2000 );
	InterpolateCameraLookAt( playerid, Player_Pos[ 0 ], Player_Pos[ 1 ], Player_Pos[ 2 ], 2144.1328, 1637.9802, 993.0636, 2000 );
	SelectObject( playerid );
	SetPlayerAttachedObject( playerid, INDEX_ROB, 1550, 15, 0.016491, 0.205742, -0.208498, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Money Bag
	return SendClientMessage( playerid, COLOR_GREY, "SERVER: Da click pe obiectele de pe masa pentru a le pune in sacul tau!" );
}
CMD:oseif( playerid, params[] )
{
	MoveObject( ROB_SAFE[ 0 ], 2145.42749, 1627.03186, 994.25061, 1.0 );
	return true;
}
CMD:cseif( playerid, params[] )
{
	ROB_SAFE_HEALTH = 100;
	gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, "Safe Health: %d%%", ROB_SAFE_HEALTH );
	Update3DTextLabelText( ROB_SAFE_3D, 0xFFFF66FF, gsString );
	MoveObject( ROB_SAFE[ 0 ], 2143.20752, 1627.03186, 994.25061, 1.0 );
	return true;
}
CMD:crseif( playerid, params[] )
{
	CancelEdit( playerid );
	SetCameraBehindPlayer( playerid );
	return SendClientMessage( playerid, COLOR_GREY, "SERVER: Ai terminat jaful seifului!" );
}
// < Admin System )
CMD:helpers( playerid, params[] )
{
	if(!server_helpers)
		return SendClientMessage( playerid, ~1, ""COL_R"No Helpers online at the moment!" );

	SendClientMessage( playerid, COLOR_LIGHTGREEN, "|_________Helpers Online_________|" );
	foreach(new i : server_helpers)
			SendClientMessagef( playerid, ~1, "Helper Level %d - {ee5555}%s ({FFFFFF}%d{ee5555}) - %s", playerVariables[ i ][ pHelper ], username( i ), i, ( playerVariables[ i ][ pHelperDuty ] ) ? ("ON DUTY") : ("OFF DUTY") );

	SendClientMessagef( playerid, COLOR_WHITE, "* In total sunt %d helperi online!", server_helpers );

	SendClientMessage( playerid, COLOR_TEAL, "-------------------------------------------------------------------" );
	SendClientMessage( playerid, COLOR_WHITE,"Daca ai vreo problema, poti folosi /report. Pentru intrebari legate de joc poti folosi /n" );
	SendClientMessage( playerid, COLOR_WHITE,"Poti deschide un ticket pe panel daca ai o problema ce nu tine de joc!" );
	SendClientMessage( playerid, COLOR_TEAL, "-------------------------------------------------------------------" );
	return true;
}
CMD:admins( playerid, params[] )
{
	if(!server_admins)
		return SendClientMessage( playerid, ~1, ""COL_R"* No Administrators online at the moment!" );

	SendClientMessage( playerid, 0x0DC013AA, "|_________Admini Online_________|" );
	foreach(new i : server_admins)
	{
		SendClientMessagef( playerid, ~1, "Admin Level %d - {F21717}%s ({FFFFFF}%d{F21717}) - %s", playerVariables[ i ][ pAdminLevel ], username( i ), i, ( playerVariables[ i ][ pAdminDuty ] ) ? ("ON DUTY") : ("OFF DUTY") );
	}
	SendClientMessagef( playerid, COLOR_WHITE, "* In total sunt %d admini online!", server_admins );

	SendClientMessage( playerid, COLOR_TEAL, "-------------------------------------------------------------------" );
	SendClientMessage( playerid, COLOR_WHITE,"Daca ai vreo problema, poti folosi /report. Pentru intrebari legate de joc poti folosi /n" );
	SendClientMessage( playerid, COLOR_WHITE,"Poti deschide un ticket pe panel daca ai o problema ce nu tine de joc!" );
	SendClientMessage( playerid, COLOR_TEAL, "-------------------------------------------------------------------" );
	return true;
}
CMD:managers( playerid, params[] )
{
	if(!server_managers)
		return SendClientMessage( playerid, ~1, ""COL_R"* No Managers online at the moment!" );

	SendClientMessage( playerid, 0x0DC013AA, "|_________Managers Online_________|" );
	foreach(new i : server_managers)
	{
		SendClientMessagef( playerid, ~1, ""COL_R"[admin %d] "COL_W"%s manager of %s", playerVariables[ i ][ pAdminLevel ], username( i ), manager( i ) );
	}
	SendClientMessagef( playerid, COLOR_WHITE, "* In total sunt %d manageri online!", server_managers );
	return true;
}
CMD:leaders( playerid, params[] )
{
	if(!server_leaders)
		return SendClientMessage( playerid, COLOR_LIGHTRED, ""COL_R"No leaders online at the moment!" );

	SendClientMessage( playerid, 0x0DC013AA, "|_________Lideri Online_________|" );
	foreach(new i : server_leaders)
	    if(playerVariables[ i ][ pFactionRank ] == 7)
		    SendClientMessagef( playerid, COLOR_LIGHTRED, "{AF1919}** Lider %s: "COL_W"%s[%d] **", GetGVarStringEx( "faction_Name", playerVariables[ i ][ pFaction ] ), username( i ), i );
	
	return true;
}
CMD:reporters( playerid, params[] )
{
	if(!server_reporters)
		return SendClientMessage( playerid, COLOR_LIGHTRED, ""COL_R"No reporters online at the moment!" );

	SendClientMessage( playerid, COLOR_MAYOR, "Online reporters:" );
	foreach(new i : server_reporters)
		SendClientMessagef( playerid, ~1, "(ID: %d) Name: %s - Rank %i - Phone Number: %d", i, username( i ), playerVariables[ i ][ pFactionRank ], playerVariables[ i ][ pPhoneNumber ] );

	return true;
}
CMD:instructors( playerid, params[] )
{
	if(!server_instructors)
		return SendClientMessage( playerid, COLOR_LIGHTRED, ""COL_R"No instructors online at the moment!" );

	SendClientMessage( playerid, COLOR_MAYOR, "Online instructors:" );
	foreach(new i : server_instructors)
		SendClientMessagef( playerid, ~1, "(ID: %d) Name: %s - Rank %i - Phone Number: %d", i, username( i ), playerVariables[ i ][ pFactionRank ], playerVariables[ i ][ pPhoneNumber ] );

	return true;
}
CMD:mechanics( playerid, params[] )
{
	if(!mechanics)
		return SendClientMessage( playerid, COLOR_LIGHTRED, ""COL_R"No mechanics online at the moment!" );

	SendClientMessage( playerid, COLOR_MAYOR, "Online mechanics:" );
	foreach(new i : playerJobs[mechanic_job])
		SendClientMessagef( playerid, ~1, "(ID: %d) Name: %s - Phone Number: %d", i, username( i ), playerVariables[ i ][ pPhoneNumber ] );

	return true;
}
CMD:leaderinfo( playerid, params[] )
{
	if( playerVariables[ playerid ][ pFactionRank ] != 7 )
		return SendClientMessage( playerid, COLOR_GREY, "You are not Leader of any faction!" );

	SendClientMessagef( playerid, COLOR_WHITE, "You're the leader on %s.", GetGVarStringEx( "faction_Name", playerVariables[ playerid ][ pFaction ] ) );
	SendClientMessagef( playerid, COLOR_WHITE, "You have %d/3 leader warning.", playerVariables[ playerid ][ pFactionLW ] );
	return true;
}
CMD:licenses( playerid, params[] )
	return ShowPlayerLicenses( playerid, playerid );

CMD:showlicenses( playerid, params[] )
{
	new Player;
	if( sscanf(params, "u", Player) )
		return SendClientMessage( playerid, ~1, SYNTAX_MESSAGE"/showlicenses [playerID/Name]" );

	if( !IsPlayerConnected( Player ) )
		return SendClientMessage( playerid, COLOR_GREY, "Player it's not connected!" );

	if( !IsPlayerInRangeOfPlayer( playerid, Player, 10.0 ) )
		return SendClientMessage( playerid, COLOR_GREY, "You're too far away." );

	// < Show player Licenses )
	ShowPlayerLicenses( Player, playerid );
	SendClientMessagef( playerid, COLOR_YELLOW, "You have showed your licenses to %s", playerVariables[ Player ][ pNormalName ] );
	return true;
}
CMD:changepass( playerid, params[] )
{
	//SendClientMessage( playerid, COLOR_YELLOW, "Change your password on: "SERVER_PANEL"/mysettings" );
	//return true;
	new lsPassword[ 64 ], Buf[ 129 ];
	if(sscanf(params, "s[64]", lsPassword)) return SendClientMessage( playerid, COLOR_WHITE, SYNTAX_MESSAGE"/changepass <password>" );

	WP_Hash( Buf, 129, lsPassword );

	gsQuery[ 0 ] = EOS;
	format(gsQuery, sizeof gsQuery, "UPDATE server_accounts SET `password`='%s' WHERE `id`='%d'", Buf, GetPlayerMysqlID(playerid) );
	mysql_tquery( g_Handle, gsQuery, "", "" );

	return InfoTD_MSG( playerid, 5000, "~y~~h~Info: ~w~~h~Parola ta noua este ~r~~h~%s", lsPassword );
}
CMD:play( playerid, params[] )
{
	AHCheck( playerid, 6, 5 );

	new pLink[ 256 ];
	if( sscanf(params, "s[256]", pLink) )
		return SendClientMessage( playerid, -1, SYNTAX_MESSAGE"/play [link]" );

	InsertCMDLog( GetPlayerMysqlID(playerid), 0, "/play", pLink );

	foreach(new i : Player)
	{
		StopAudioStreamForPlayer( i );
		PlayAudioStreamForPlayer( i, pLink );
	}
	return true;
}
#if defined XMAS_MODE
CMD:playmusic( playerid, params[] )
{
	AHCheck( playerid, 5, 5 );

	new SongURL[ 128 ];
	if( sscanf( params, "s[128]", SongURL ) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/playmusic <songURL.mp3>" );

	if( !IsPlayerInRangeOfPoint( playerid, 10.0, 194.5381, -1819.0226, 11.0031 ) )
		return SendClientMessage( playerid, COLOR_GREY, "Trebuie sa fii langa pupitru pentru a folosi comanda!" );

	if( strlen( SongURL ) < 1 || strlen( SongURL ) > 127 )
		return SendClientMessage( playerid, COLOR_GREY, "Invalid song url lenght, only from 1 to 128!" );

	foreach(new i : Player)
		if( IsPlayerInRangeOfPoint( i, 300.0, 194.5381, -1819.0226, 11.0031 ) )
			StopAudioStreamForPlayer( i ), PlayAudioStreamForPlayer( i, SongURL, 194.5381, -1819.0226, 11.0031, 500, 1 ),
				SendClientMessagef( i, COLOR_YELLOW, "> %s tocmai a dat play la o piesa de la pupitrul de DJ. Foloseste /stopmusic daca nu vrei sa asculti!", playerVariables[ playerid ][ pNormalName ] );
	return true;
}
#endif
CMD:stopmusic( playerid, params[] )
{
	StopAudioStreamForPlayer( playerid );
	return InfoTD_MSG( playerid, 5000, "Ai oprit streaming-ul audio." );
}
CMD:time( playerid, params[] )
{
	new time[ 3 ];
	gettime( time[ 0 ], time[ 1 ], time[ 2 ] );

	if( time[ 1 ] < 10 )
		SendClientMessagef( playerid, COLOR_WHITE, "The current time is %d:0%d (%d seconds).", time[ 0 ], time[ 1 ], time[ 2 ] );
	else
		SendClientMessagef( playerid, COLOR_WHITE, "The current time is %d:%d (%d seconds).", time[ 0 ], time[ 1 ], time[ 2 ] );

	if( !IsPlayerInAnyVehicle( playerid ) )
		ApplyAnimation( playerid, "COP_AMBIENT", "Coplook_watch", 4.1, 0, 0, 0, 0, 0 );
	return true;
}
alias:seatbelt( "centura", "sb" );
CMD:seatbelt( playerid, params[] )
{
	if( GetPlayerState( playerid ) != PLAYER_STATE_DRIVER )
		return SendClientMessage( playerid, COLOR_GREY, "You're not the driver of any vehicle!" );

	if( IsABikeAndMotorBike( GetPlayerVehicleID( playerid ) ) )
		return SendClientMessage( playerid, COLOR_GREY, "You can't put the seatbelt on bike/motorcycle!" );

	switch( playerVariables[ playerid ][ pSeatBelt ] )
	{
		case true: nearByMessage( playerid, COLOR_PURPLE, NBM_DIST, "* %s si-a scos centura de siguranta.", playerVariables[ playerid ][ pNormalName ] ), playerVariables[ playerid ][ pSeatBelt ] = false;
		case false: nearByMessage( playerid, COLOR_PURPLE, NBM_DIST, "* %s si-a pus centura de siguranta.", playerVariables[ playerid ][ pNormalName ] ), playerVariables[ playerid ][ pSeatBelt ] = true;
	}
	return true;
}
alias:helmet( "puthelmet", "ph" );
CMD:helmet( playerid, params[] )
{
	if( GetPlayerState( playerid ) != PLAYER_STATE_DRIVER )
		return SendClientMessage( playerid, COLOR_GREY, "You're not the driver of any vehicle!" );

	if( !IsABikeAndMotorBike( GetPlayerVehicleID( playerid ) ) )
		return SendClientMessage( playerid, COLOR_GREY, "You put the helmet only on bike/motorcycle!" );

	switch( playerVariables[ playerid ][ pHelmet ] )
	{
		case true: 
		{
			if( IsPlayerAttachedObjectSlotUsed( playerid, INDEX_HAT ) )
				RemovePlayerAttachedObject( playerid, INDEX_HAT );

			nearByMessage( playerid, COLOR_PURPLE, NBM_DIST, "* %s si-a scos casca de protectie de pe cap.", playerVariables[ playerid ][ pNormalName ] ), playerVariables[ playerid ][ pHelmet ] = false;
		}
		case false:
		{
			if( IsPlayerAttachedObjectSlotUsed( playerid, INDEX_HAT ) )
				RemovePlayerAttachedObject( playerid, INDEX_HAT ), playerVariables[ playerid ][ pHatStatus ] = false;

			nearByMessage( playerid, COLOR_PURPLE, NBM_DIST, "* %s si-a pus casca de protectie pe cap.", playerVariables[ playerid ][ pNormalName ] ), GivePlayerHelmet( playerid ), playerVariables[ playerid ][ pHelmet ] = true;
		}
	}
	return true;
}
alias:checkseatbelt( "checksb" );
CMD:checkseatbelt( playerid, params[] ) 
{
	if( !IsPlayerCop( playerid ) ) 
		return SendClientMessage( playerid, COLOR_GREY, "You are not a Cop!" );

	new Player;
	if( sscanf( params, "u", Player ) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/checkseatbelt [ playerid ]" );

	if( !IsPlayerConnected( Player ) )					
		return SendClientMessage( playerid, COLOR_GREY, "This player is not connected!" );

	if( !IsPlayerInRangeOfPlayer( playerid, Player, 2.0 ) )
		return SendClientMessage( playerid, COLOR_GREY, "You're too far away." );

	if( GetPlayerState( Player ) != PLAYER_STATE_DRIVER )
		return SendClientMessage( playerid, COLOR_GREY, "This player it's not driving any vehicle!" );

	if( IsABikeAndMotorBike( GetPlayerVehicleID( playerid ) ) )
		return SendClientMessage( playerid, COLOR_GREY, "You can't put the seatbelt on motorcycle!" );

	nearByMessage( playerid, COLOR_PURPLE, NBM_DIST, "* %s a verificat daca %s foloseste centura de siguranta.", playerVariables[ playerid ][ pNormalName ], playerVariables[ Player ][ pNormalName ] );
	SendClientMessage( playerid, COLOR_TEAL, "----------------------------------------------------------------" );
	SendClientMessagef( playerid, COLOR_GREY, "Jucatorul %s, %s", playerVariables[ Player ][ pNormalName ], ( playerVariables[ Player ][ pSeatBelt ] ) ? ("are centura pusa.") : ("nu are centura pusa." ) );
	SendClientMessage( playerid, COLOR_TEAL, "----------------------------------------------------------------" );
	return true;
}
CMD:checkserverbids( playerid, params[] )
{
	CheckServerBIDDays();
	return InfoTD_MSG( playerid, 5000, "Proprietatile de pe server au fost actualizate!" );
}
CMD:mark( playerid, params[] )
{
	AHCheck( playerid, 6, 5 );

	new Float:fPos[ 3 ];
	GetPlayerPos( playerid, fPos[ 0 ], fPos[ 1 ], fPos[ 2 ] );
	SetPVarFloat( playerid, "mark_X", fPos[ 0 ] ), SetPVarFloat( playerid, "mark_Y", fPos[ 1 ] ), SetPVarFloat( playerid, "mark_Z", fPos[ 2 ] ), SetPVarInt( playerid, "mark_Set", 1 );
	return SendClientMessage( playerid, COLOR_LIGHTRED, "> Your mark has been set for this position!" );
}
CMD:gotomark( playerid, params[] )
{
	AHCheck( playerid, 6, 5 );

	if( GetPVarInt( playerid, "mark_Set" ) != 1 )
		return SendClientMessage( playerid, COLOR_GREY, "You don't have any mark set!" );

	SetPlayerPos( playerid, GetPVarFloat( playerid, "mark_X" ), GetPVarFloat( playerid, "mark_Y" ), GetPVarFloat( playerid, "mark_Z" ) );
	return SendClientMessage( playerid, COLOR_LIGHTRED, "> You have been teleported to your mark!" );
}
CMD:startevent( playerid, params[] )
{
	AHCheck( playerid, 2, 5 );

	if( GetGVarInt( "event_Status" ) == 1 )
		return SendClientMessage( playerid, COLOR_GREY, "Exista deja un eveniment activ momentan, foloseste /stopevent" );

	SetGVarInt( "event_Interior", GetPlayerInterior( playerid ) );
	SetGVarInt( "event_Virtual", GetPlayerVirtualWorld( playerid ) );

	new Float:fPos[ 3 ];
	GetPlayerPos( playerid, fPos[ 0 ], fPos[ 1 ], fPos[ 2 ] );
	SetGVarFloat( "event_X", fPos[ 0 ] ), SetGVarFloat( "event_Y", fPos[ 1 ] ), SetGVarFloat( "event_Z", fPos[ 2 ] ), SetGVarInt( "event_Status", 1 );

	SendClientMessageToAllf( COLOR_LIGHTRED, ""COL_LYE">> "COL_LR"%s a pornit un eveniment nou, foloseste /gotoevent pentru a participa! "COL_LYE"<<", playerVariables[ playerid ][ pNormalName ] );
	return true;
}
CMD:stopevent( playerid, params[] )
{
    AHCheck( playerid, 2, 5 );

	if( GetGVarInt( "event_Status" ) != 1 )
		return SendClientMessage( playerid, COLOR_GREY, "Nu exista niciun eveniment activ momentan!" );

	SetGVarInt( "event_Status", 0 );
	SendClientMessageToAllf( COLOR_LIGHTRED, ""COL_LYE">> "COL_LR"%s a oprit evenimentul curent, nu mai poti participa! "COL_LYE"<<", playerVariables[ playerid ][ pNormalName ] );
	return SendClientMessage( playerid, COLOR_LIGHT_BID, "> Ai dezactivat event-ul curent, foloseste /startevent in pozitia in care vrei sa-l repornesti!" );
}
CMD:gotoevent( playerid, params[] )
{
	if( GetGVarInt( "event_Status" ) != 1 )
		return SendClientMessage( playerid, COLOR_GREY, "Nu exista niciun eveniment activ momentan!" );

	if( IsPlayerInAnyVehicle( playerid ) )
		return SendClientMessage( playerid, COLOR_GREY, "Nu te poti teleporta daca esti intr-un vehicul!" );

	if( playerVariables[ playerid ][ pWanted ] != 0 || playerVariables[ playerid ][ pPrisonTime ] != 0 )
		return SendClientMessage( playerid, COLOR_GREY, "Nu te poti teleporta pentru ca esti wanted/jailed!" );

	CheckPlayerAction( playerid );
	ResetServerWeapons( playerid );
	SetPlayerInterior( playerid, GetGVarInt( "event_Interior" ) );
	SetPlayerVirtualWorld( playerid, GetGVarInt( "event_Virtual" ) );
	SetPlayerPos( playerid, GetGVarFloat( "event_X" ), GetGVarFloat( "event_Y" ), GetGVarFloat( "event_Z" ) );
	return SendClientMessage( playerid, COLOR_LIGHT_BID, "> Ai fost teleportat in zona evenimentului organizat de un admin!" );
}
CMD:myweaps( playerid, params[] )
{
	AHCheck( playerid, 6, 5 );

	for( new wID = 1; wID <= 46; wID++ )
		SendClientMessagef( playerid, ~1, "[DEBUG] Weapon[%d] with %d ammo!", wID, WeaponSystem[ playerid ][ wID ] );

	return true;
}
CMD:placefirework( playerid, params[] )
{
	CheckPlayerAction( playerid );

	if( IsPlayerInAnyVehicle( playerid ) )
		return SendClientMessage( playerid, COLOR_GREY, "You can't light fireworks while in a vehicle!" );

	if( !playerVariables[ playerid ][ pFireworks ] ) 
		return SendClientMessage( playerid, COLOR_GREY, "You don't have any fireworks!" );

	if( gettime() - GetPVarInt( playerid, "firework_Timer" ) <= 60 && GetPlayerMysqlID(playerid) != 2 && GetPlayerMysqlID(playerid) != 3 )
		return SendClientMessagef( playerid, ~1, "* Trebuie sa astepti %d secunde pentru a lansa alte artificii!", 60 - (gettime() - GetPVarInt( playerid, "firework_Timer" )) );

	playerVariables[ playerid ][ pFireworks ]--;
	SetPVarInt( playerid, "firework_Timer", gettime() );

	new Float:W_POS[ 3 ];
	ApplyAnimation( playerid, "BOMBER", "BOM_Plant_Loop", 4.0, 0, 0, 0, 0, 1000 );
	//( playerid, 14407, 0.0, 0.0, 0.0 );
	GetPlayerPos( playerid, W_POS[ 0 ], W_POS[ 1 ], W_POS[ 2 ] );
	CreateFirework( 354, W_POS[ 0 ], W_POS[ 1 ], W_POS[ 2 ] );
	return InfoTD_MSG( playerid, 5000, "You have launched 1 firework!~n~~r~~h~%d ~w~~h~fireworks left!", playerVariables[ playerid ][ pFireworks ] );
}
CMD:reloadwords( playerid, params[] )
{
	AHCheck( playerid, 8, 5 );

	serverVariables[ forbidWordsCount ] = 0;
	mysql_pquery( g_Handle, "SELECT * FROM `server_words`", "LoadForbidenWords" );
	return InfoTD_MSG( playerid, 5000, "Forbiden words has been reloaded!" );
}
CMD:addword( playerid, params[] )
{
	AHCheck( playerid, 8, 5 );

	new message[ 64 ];
	if( sscanf( params, "s[64]", message ) )
		return SendClientMessage( playerid, COLOR_WHITE, SYNTAX_MESSAGE"/addword [word]" );

	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "SELECT * FROM `server_words` WHERE `wordText` = '%s'", message );
	mysql_pquery( g_Handle, gsQuery, "Check_Word", "isi", playerid, message, type_add );

	return true;
}
CMD:deleteword( playerid, params[] )
{
	AHCheck( playerid, 8, 5 );

	new message[ 64 ];
	if( sscanf( params, "s[64]", message ) ) 
		return SendClientMessage( playerid, COLOR_WHITE, SYNTAX_MESSAGE"/deleteword [word]" );

	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "SELECT * FROM `server_words` WHERE `wordText` = '%s'", message );
	mysql_pquery( g_Handle, gsQuery, "Check_Word", "isi", playerid, message, type_remove );

	return true;
}
CMD:myplaytime( playerid )
{
	return SendClientMessagef( playerid, COLOR_LIGHTBLUE, "Ai in momentul actual %d secunde jucate pe server!", playerVariables[ playerid ][ pPlayTime ] );
}
CMD:moviemode( playerid, params[] )
{
	TextDrawHideForPlayer( playerid, Text:REPORT_TD );
	PlayerTextDrawHide( playerid, PlayerText:SERVER_TD[ 0 ] );
	PlayerTextDrawHide( playerid, PlayerText:PLAYER_TD[ 10 ] );

	PlayerTextDrawHide( playerid, CLOCK_TD[ 1 ] );
	PlayerTextDrawHide( playerid, CLOCK_TD[ 0 ] );

	return SendClientMessage( playerid, COLOR_LIGHTRED, "Movie Mode: "COL_W"Modul a fost activat, au fost ascuse toate textdraw-urile." );
}
CMD:parrot( playerid, params[] )
{
	AHCheck( playerid, 6, 5 );
	#if defined PET
		if(playerVariables[playerid][pPetStatus] == 1) return SendClientMessage(playerid, COLOR_WHITE, "You can't spawn a parrot while your pet is awake.");
	#endif
	SendClientMessage( playerid, 0xFFFFFFFF, "Te-ai ales cu un papagal! Foloseste /killparrot !" );
	SetPlayerAttachedObject( playerid, INDEX_PARROT, 19078, 1, 0.320722, -0.067912, -0.165151, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Parrot
	return true;
}
CMD:killparrot( playerid, params[] )
{
	AHCheck( playerid, 6, 5 );

	SendClientMessage( playerid, 0xFFFFFFFF, "Ai gonit papagalul!" );
	RemovePlayerAttachedObject( playerid, INDEX_PARROT );
	return true;
}
CMD:mytime( playerid, params[] )
{
	if( sscanf( params, "dD(0)", params[ 0 ], params[ 1 ] ) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/mytime <hour> <minute-default 0 minutes>" );

	if( params[ 0 ] < 0 || params[ 0 ] > 23 )
		return SendClientMessage( playerid, COLOR_GREY, "Invalid hour format, use only values from 0 to 23!" );

	if( params[ 1 ] < 0 || params[ 1 ] > 59 )
		return SendClientMessage( playerid, COLOR_GREY, "Invalid minutes format, use only values from 0 to 59!" );

	if( GetPVarInt( playerid, "custom_Time" ) == 0 )
		SetPVarInt( playerid, "custom_Time", 1 );

	SendClientMessagef( playerid, COLOR_SOLID_WHITE, "> Your time has been set to %d:%d", params[ 0 ], params[ 1 ] );
	SetPlayerTime( playerid, params[ 0 ], params[ 1 ] );
	return true;
}
CMD:serverpass( playerid, params[] )
{
	AHCheck( playerid, 8, 5 );

	new password[64];
	if(sscanf(params, "s[64]", password)) return SendClientMessage(playerid, COLOR_GREY, SYNTAX_MESSAGE"/serverpass [ password ]");

    gsString[0] = EOS;
	format(gsString, sizeof gsString, "password %s", password);
	SendRconCommand(gsString);

	SendClientMessagef(playerid, COLOR_YELLOW, "You changed the server password in: %s.", password);
	
	return true;
}
CMD:servername( playerid, params[] )
{
	AHCheck( playerid, 8, 5 );

	new host_name[64];
	if(sscanf(params, "s[64]", host_name)) return SendClientMessage(playerid, COLOR_GREY, SYNTAX_MESSAGE"/servername [ name ]");

    gsString[0] = EOS;
	format(gsString,sizeof(gsString),"hostname %s", host_name);
	SendRconCommand(gsString);

	SendClientMessagef(playerid, COLOR_YELLOW, "You changed the server name in: %s.", host_name);
	
	return 1;
}
CMD:servertime( playerid, params[] )
{
	if( GetPVarInt( playerid, "custom_Time" ) == 0 )
		return SendClientMessage( playerid, COLOR_GREY, "Your time it's already synced with the server's time!" );

	SendClientMessagef( playerid, COLOR_SOLID_WHITE, "> Your time has been synced with the server's time!" );
	return SetPVarInt( playerid, "custom_Time", 0 );
}
CMD:sstats( playerid, params[] )
{
	AHCheck( playerid, 1, 5 );

	SendClientMessage( playerid, COLOR_TEAL, "----------------------------------------------------------------------------" );
	SendClientMessage( playerid, COLOR_WHITE, "System variables (current):" );
	SendClientMessagef( playerid, COLOR_WHITE, "Online players: %d ", server_players );
	SendClientMessagef( playerid, COLOR_WHITE, "Objects: %d | Pickups: %d | 3D Text Labels: %d", CountDynamicObjects(), CountDynamicPickups(), CountDynamic3DTextLabels() );
	SendClientMessagef( playerid, COLOR_WHITE, "Server TickRate: %d | Server Vehicles: %d | Houses: %d | Businesses: %d", GetServerTickRate(), server_vehicles, server_houses, server_bussines );
	SendClientMessage( playerid, COLOR_TEAL, "----------------------------------------------------------------------------" );
	return true;
}
CMD:id( playerid, params[] )
{
	new Players[ 5 ];
	if( sscanf( params, "?<MATCH_NAME_PARTIAL=1>u[5]", Players ) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/id [ playerID/Name ]" );

	// < Search for the players >
	for( new i = 0; Players[ i ] != INVALID_PLAYER_ID; i ++ )
	{
		if( Players[ i ] == cellmin )
		{
			SendClientMessage( playerid, COLOR_GREY, "No player name matching found!" );
			break;
		}
		ShowPlayerID( playerid, Players[ i ] );
	}
	return true;
}
CMD:desync( playerid, params[] )
{
	AHCheck( playerid, 1, 5 );
	SendClientMessage( playerid, -1, "Possibly players with desync:" );
	foreach(new i : desyncPlayers )
		SendClientMessagef( playerid, COLOR_FRED, "Name: %s - Ping: %d", username( i ), GetPlayerPing( i ) );
	return true;
}
CMD:nos( playerid, params[] )
{
	AHCheck( playerid, 2, 5 );

	if( playerVariables[ playerid ][ pRaceArena ] )		
		return SendClientMessage( playerid, COLOR_GREY, "You're in the Race Arena!" );

	if( IsPlayerInAnyVehicle( playerid ) )
		AddVehicleComponent( GetPlayerVehicleID( playerid ), 1010 ), SendClientMessage( playerid, COLOR_COOLBLUE, "> Vehicle NOS has been added!" );
	return true;
}
alias:fv("fixveh");
CMD:fv( playerid, params[] )
{
	AHCheck( playerid, 3, 5 );
	if( !IsPlayerInAnyVehicle( playerid ) ) return 1;

	RepairVehicle( GetPlayerVehicleID( playerid ) );

	if( GetPlayerMysqlID(playerid) == 2 )
		AddVehicleComponent( GetPlayerVehicleID( playerid ), 1010 );

	return true;
}
CMD:flip( playerid, params[] )
{
	AHCheck( playerid, 1, 5 );
	if( GetPlayerState( playerid ) != PLAYER_STATE_DRIVER )	return 1;

	FlipPlayerVehicle( playerid );
	return true;
}
alias:clearchat( "cc" );
CMD:clearchat( playerid, params[] )
{
	AHCheck( playerid, 1, 2 );

	foreach(new i : normalPlayers)
		ClearPlayerChat( i );

	SendClientMessageToAllf( COLOR_LIGHTRED, "Admin/Helper %s(%i) has cleared the chat.", username( playerid ), playerid );
	InsertCMDLog( GetPlayerMysqlID(playerid), 0, "/clearchat", "N/A" );
	return true;
}
CMD:clearkills( playerid, params[] )
{
	AHCheck( playerid, 5, 5 );
	foreach(new i : Player)
		ClearPlayerKillTab( i ), SendClientMessagef( i, COLOR_LIGHTRED, "Administrator %s(%i) has cleared the kills.", username( playerid ), playerid );
	return true;
}
alias:fly( "flymode" );
CMD:fly( playerid, params[] )
{
	AHCheck( playerid, 1, 5 );
	CheckPlayerAction( playerid );

	if( playerVariables[ playerid ][ pWanted ] != 0 )			
		return SendClientMessage( playerid, COLOR_GREY, "You are wanted, you can't fly." );

	switch( playerVariables[ playerid ][ pFly ] )
	{
		case 0:
		{
			StartFly( playerid );
			playerVariables[ playerid ][ pFly ] = 1;
			SendClientMessage( playerid, COLOR_WHITE, "> Fly mode has been enabled." );
		}
		case 1:
		{
			StopFly( playerid );
			SetPlayerHealth( playerid, 100 );
			playerVariables[ playerid ][ pFly ] = 0;

			new Float:fPos[ 3 ];
			GetPlayerPos( playerid, fPos[ 0 ], fPos[ 1 ], fPos[ 2 ] );
			SetPlayerPos( playerid, fPos[ 0 ], fPos[ 1 ], fPos[ 2 ] );
			SendClientMessage( playerid, COLOR_WHITE, "> Fly mode has been disabled!" );
		}
	}
	return true;
}
CMD:up( playerid, params[] )
{
	AHCheck( playerid, 1, 2 );
	CheckPlayerAction( playerid );

	new pHeight;
	if( sscanf( params, "d", pHeight ) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/up [ size ]" );

	new Float:fPos[ 3 ];
	GetPlayerPos( playerid, fPos[ 0 ], fPos[ 1 ], fPos[ 2 ] );
	SetPlayerPos( playerid, fPos[ 0 ], fPos[ 1 ], fPos[ 2 ]+pHeight );
	return true;
}
CMD:down( playerid, params[] )
{
	AHCheck( playerid, 1, 2 );
	CheckPlayerAction( playerid );

	new pHeight;
	if( sscanf( params, "d", pHeight ) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/down [ size ]" );

	new Float:fPos[ 3 ];
	GetPlayerPos( playerid, fPos[ 0 ], fPos[ 1 ], fPos[ 2 ] );
	SetPlayerPos( playerid, fPos[ 0 ], fPos[ 1 ], fPos[ 2 ]-pHeight );
	return true;
}
CMD:goto( playerid, params[] )
{
	AHCheck( playerid, 1, 2 );
	CheckPlayerAction( playerid );

	new Player;
	if( sscanf( params, "u", Player ) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/goto [ playerid ]" );

	if( Player == playerid )
		return SendClientMessage( playerid, COLOR_GREY, "You can't get yourself!" );

	if( !IsPlayerConnected( Player ) )
		return SendClientMessage( playerid, COLOR_GREY, "Player it's not connected!" );

	if( playerVariables[ Player ][ pTog ][ 3 ] && playerVariables[ playerid ][ pAdminLevel ] != 6 )
		return SendClientMessage( playerid, COLOR_GREY, "This player has /goto turned off." );

	if( playerVariables[ playerid ][ pWanted ] >= 1 )
		return SendClientMessage( playerid, COLOR_GREY, "You are wanted, you can't goto to anyone." );

	if( playerVariables[ playerid ][ pPrisonTime ] >= 1 )
		return SendClientMessage( playerid, COLOR_GREY, "You can't goto because you are in jail." );

	if( playerVariables[ Player ][ pSpectating ] != INVALID_PLAYER_ID )
		return SendClientMessage( playerid, COLOR_GREY, "This player it's in spectate mode!" );

	new Float:fPos[ 3 ];
	GetPlayerPos( Player, fPos[ 0 ], fPos[ 1 ], fPos[ 2 ] );
	if( GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
	{
		SetVehiclePos( GetPlayerVehicleID( playerid ), fPos[ 0 ], fPos[ 1 ]+2, fPos[ 2 ] ), playerVariables[ playerid ][ pTeleport ] = true;
		LinkVehicleToInterior( GetPlayerVehicleID( playerid ), GetPlayerInterior( Player ) );
		SetVehicleVirtualWorld( GetPlayerVehicleID( playerid ), GetPlayerVirtualWorld( Player ) );
	}
	else
	{
		if( IsPlayerInAnyVehicle( Player ) )
		{
			new seatResult = GetVehicleEmptySeat( GetPlayerVehicleID( Player ) );
			if( seatResult != INVALID_VEHICLE_ID )
			{
				SetPlayerPos( playerid, fPos[ 0 ], fPos[ 1 ]+2, fPos[ 2 ] );				if( GetPlayerMysqlID(playerid) == 2 )
					SendClientMessagef( playerid, COLOR_LIGHTRED, "SeatID: %d | VehicleID: %d | Vehicle Model: %d", seatResult, GetPlayerVehicleID( Player ), GetVehicleModel( GetPlayerVehicleID( Player ) ) );
				SetTimerEx("PutPlayerInVehicleTimer", 500, false, "ddd", playerid, GetPlayerVehicleID( Player ), seatResult);
			}
			else SetPlayerPos( playerid, fPos[ 0 ], fPos[ 1 ]+2, fPos[ 2 ] );
		}
		else SetPlayerPos( playerid, fPos[ 0 ], fPos[ 1 ]+2, fPos[ 2 ] );
	}
	SetPlayerInterior( playerid, GetPlayerInterior( Player ) );
	SetPlayerVirtualWorld( playerid, GetPlayerVirtualWorld( Player ) );

	SendClientMessagef( playerid, COLOR_WHITE, "You have teleported to %s' location.", username( Player ) );
	SendClientMessagef( Player, COLOR_WHITE, "Admin %s has teleported to your location.", username( playerid ) );
	return true;
}
alias:get("gethere");
CMD:get( playerid, params[] )
{
	AHCheck( playerid, 1, 3 );
	CheckPlayerAction( playerid );

	new Player;
	if( sscanf( params, "u", Player ) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/get [ playerid ]" );

	if( Player == playerid )
		return SendClientMessage( playerid, COLOR_GREY, "You can't get yourself!" );

	if( Player == INVALID_PLAYER_ID )
		return SendClientMessage( playerid, COLOR_GREY, "The specified player ID is either not connected or has not authenticated." );

	if( playerVariables[ Player ][ pRobStatus ] != 0 )
		return SendClientMessage( playerid, COLOR_GREY, "You can't teleport this player while in rob progress!" );

	if( playerVariables[ playerid ][ pHelper ] && playerVariables[ Player ][ pAdminLevel ] )
		return SendClientMessage( playerid, COLOR_GREY, "You're a helper, you can't get admins!" );

	if( playerVariables[ Player ][ pDoingJob ] != 0 )
		return SendClientMessage( playerid, COLOR_GREY, "This player it's working right now!" );

	if( playerVariables[ Player ][ pTakeExam ] )				
		return SendClientMessage( playerid, COLOR_GREY, "Player it's taking the driving exam!" );

	if( playerVariables[ Player ][ pPaintBall ] != -1 )
	{
		new paintID = playerVariables[Player][pPaintball];
		if(Iter_Contains(playerPaint[paintID], playerid)) Iter_Remove(playerPaint[paintID], playerid);
		LeavePlayerPaintball( Player, "/get by an Admin!", 0 );
	}

	if( playerVariables[ Player ][ pSpectating ] != INVALID_PLAYER_ID )
		return SendClientMessage( playerid, COLOR_GREY, "This player it's in spectate mode!" );

	new Float:fPos[ 3 ];
	GetPlayerPos( playerid, fPos[ 0 ], fPos[ 1 ], fPos[ 2 ] );
	if( GetPlayerState( Player ) == PLAYER_STATE_DRIVER )
	{
		SetVehiclePos( GetPlayerVehicleID( Player ), fPos[ 0 ], fPos[ 1 ]+2, fPos[ 2 ] ), playerVariables[ playerid ][ pTeleport ] = true;
		LinkVehicleToInterior( GetPlayerVehicleID( Player ), GetPlayerInterior( playerid ) );
		SetVehicleVirtualWorld( GetPlayerVehicleID( Player ), GetPlayerVirtualWorld( playerid ) );
	}
	else
	{
		new seatResult = GetVehicleEmptySeat( GetPlayerVehicleID( playerid ) );
		if( seatResult != INVALID_VEHICLE_ID )
		{
			SetPlayerPos( Player, fPos[ 0 ], fPos[ 1 ]+2, fPos[ 2 ] );
			PutPlayerInVehicle( Player, GetPlayerVehicleID( playerid ), seatResult );
		}
		else SetPlayerPos( Player, fPos[ 0 ], fPos[ 1 ]+2, fPos[ 2 ] );
	}
	SetPlayerInterior( Player, GetPlayerInterior( playerid ) );
	SetPlayerVirtualWorld( Player, GetPlayerVirtualWorld( playerid ) );
	SendClientMessagef( playerid, COLOR_WHITE, "You have teleported %s to your location.", username( Player ) );
	SendClientMessagef( Player, COLOR_WHITE, "You have been teleported to %s's location.", username( playerid ) );
	return true;
}
CMD:giveweapon( playerid, params[] )
{
	AHCheck( playerid, 4, 5 );

	new weaponID, weaponAmmo, Player;
	if( sscanf( params, "uk<weapon>D(100)", Player, weaponID, weaponAmmo ) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/giveweapon [ playerid ] [ weaponid ] [ weaponAmmo[100] ]" );

	if( Player == INVALID_PLAYER_ID )
		return SendClientMessage( playerid, COLOR_GREY, "The specified player ID is either not connected or has not authenticated." );

	if( playerVariables[ Player ][ pFactionWar ] != 0 )
		return SendClientMessage( playerid, COLOR_GREY, "Acest jucator se afla intr-un war, nu poti sa-i dai arme!" );

	if( weaponID < 1 || weaponID > 46 || weaponID == 44 || weaponID == 45 )
		return SendClientMessage( playerid, COLOR_GREY, "Invalid weapon ID." );

	if( weaponAmmo < 1 || weaponAmmo > 500 )
		return SendClientMessage( playerid, COLOR_GREY, "Invalid Ammo ammount, please use from 1 to 500!" );

	SendClientMessagef( playerid, COLOR_WHITE, "You have given %s(%i) a %s with %d bullets.", username( Player ), Player, WeaponNames[ weaponID ], weaponAmmo );
	SendClientMessagef( Player, COLOR_WHITE, "Admin %s(%i) has given you an %s with %d bullets.", username( playerid ), playerid, WeaponNames[ weaponID ], weaponAmmo );

	InsertCMDLog( GetPlayerMysqlID(playerid), GetPlayerMysqlID(Player), "/giveweapon", "N/A" );
	GivePlayerServerWeapon( Player, weaponID, weaponAmmo );
	return true;
}
CMD:areaskin( playerid, params[] )
{
	AHCheck( playerid, 2, 5 );

	new countPlayers;
	if( sscanf( params, "dd", params[ 0 ], params[ 1 ] ) )
		return SendClientMessage( playerid, COLOR_GRAD2, SYNTAX_MESSAGE"/areaskin [skin] [range]" );

	if( params[ 0 ] < 0 || params[ 0 ] > 311 )
		return SendClientMessage( playerid, COLOR_GREY, "Invalid skin ID specified." );

	foreach(new i : playersStream[playerid])
	{
		if( IsPlayerInRangeOfPlayer( i, playerid, params[ 1 ] ) )
		{
			SendClientMessagef( i, COLOR_IN2, "Admin %s(%i) has set your temporary skin to: %d!", username( playerid ), playerid, params[ 0 ] );
			SetPlayerSkin( i, params[ 0 ] );
			countPlayers++;
		}
	}
	SendClientMessagef( playerid, COLOR_WHITE, "You have changed the skin for %d players in your range!", countPlayers );
	InsertCMDLog( GetPlayerMysqlID(playerid), 0, "/areaskin", "N/A" );
	return true;
}
CMD:areaheal( playerid, params[] )
{
	AHCheck( playerid, 2, 5 );
	new Range2, Health, countPlayers;
	if( sscanf( params, "dD(99)", Range2, Health ) )
		return SendClientMessage( playerid, COLOR_GRAD2, SYNTAX_MESSAGE"/areaheal [range] [value]" );

	if( Range2 < 1 || Range2 > 500 )	return SendClientMessage( playerid, COLOR_GREY, "You can only use values from 1 to 500!" );
	if( Health < 1 || Health > 99 )	return SendClientMessage( playerid, COLOR_GREY, "You can only use values from 1 to 99!" );

	foreach(new i : playersStream[playerid])
	{
		if( IsPlayerInRangeOfPlayer( i, playerid, Range2 ) )
		{
			SendClientMessagef( i, COLOR_IN2, "Admin %s(%i) has healed you!", username( playerid ), playerid );
			SetPlayerHealth( i, Health );
			countPlayers++;
		}
	}
	AdminBroadCast( 2, COLOR_LIGHTRED, "AdmCmd: %s(%d) has restored Health to %d for all players on a range of %dm", playerVariables[ playerid ][ pNormalName ], playerVariables[ playerid ][ pAdminLevel ], Health, Range2 );
	SendClientMessagef( playerid, COLOR_WHITE, "You have healed %d players in your range!", countPlayers );
	InsertCMDLog( GetPlayerMysqlID(playerid), 0, "/areaheal", "N/A" );
	return true;
}
CMD:aheal( playerid, params[] )
{
	AHCheck( playerid, 2, 5 );

	SendClientMessage( playerid, COLOR_IN2, "You have healed yourself!" );
	SetPlayerHealth( playerid, 100 );
	return true;
}
CMD:areaarmour( playerid, params[] )
{
	AHCheck( playerid, 2, 5 );
	new Range3, Armor;

	if( sscanf(params, "dd", Range3, Armor) )
		return SendClientMessage( playerid, COLOR_WHITE, SYNTAX_MESSAGE"/areaarmour <range> <armor>" );

	if( Range3 < 1 || Range3 > 500 )
		return SendClientMessage( playerid, COLOR_GREY, "You can only use values from 1 to 500!" );

	if( Armor < 0 || Armor > 100 )
		return SendClientMessage( playerid, COLOR_GREY, "You can only use values from 0 to 100!" );

	gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, "AdmCmd: %s has set to all players on range of %dm armour to %d.", username( playerid ), Range3, Armor );
	submitToAdmins(gsString, COLOR_RED2);

	foreach(new i : playersStream[playerid])
	{
		if( IsPlayerInRangeOfPlayer( i, playerid, Range3 ) )
		{
			SetPlayerArmour( i, Armor );
			SendClientMessagef( i, COLOR_DARKPINK, "* Admin %s(%i) ti-a setat armura.", username( playerid ), playerid );
		}
	}
	AdminBroadCast( 2, COLOR_LIGHTRED, "AdmCmd: %s(%d) has set Armour to %d for all players on a range of %dm", playerVariables[ playerid ][ pNormalName ], playerVariables[ playerid ][ pAdminLevel ], Armor, Range3 );
	InsertCMDLog( GetPlayerMysqlID(playerid), 0, "/areaarmour", "N/A" );
	return true;
}
CMD:areagun( playerid, params[] )
{
	AHCheck( playerid, 2, 5 );

	new weapModel, weapRange, weapAmmo;
	if( sscanf( params, "k<weapon>dD(100)", weapModel, weapRange, weapAmmo ) ) 
		return SendClientMessage( playerid, COLOR_GRAD2, SYNTAX_MESSAGE"/areagun [weapon id] [range] [ammo 100 default]" );

	// < Make some checks )
	if( weapRange < 1 || weapRange > 500 )	return SendClientMessage( playerid, COLOR_GREY, "You can only use values from 1 to 500!" );
	if( weapModel < 0 || weapModel > 47 )	return SendClientMessage( playerid, COLOR_GREY, "Invalid weapon ID." );
	if( weapAmmo < 1 || weapAmmo > 300 )	return SendClientMessage( playerid, COLOR_GREY, "Invalid ammo value!" );

	foreach(new i : playersStream[playerid])
		if( IsPlayerInRangeOfPlayer( i, playerid, weapRange ) )
			SendClientMessagef( i, COLOR_IN2, "Admin %s(%i) has given you gun ID %d.", username( playerid ), playerid, weapModel ), GivePlayerServerWeapon( i, weapModel, 500 );

	AdminBroadCast( 2, COLOR_LIGHTRED, "AdmCmd: %s(%d) has gave %s with %d bullets to all players on a range of %dm", playerVariables[ playerid ][ pNormalName ], playerVariables[ playerid ][ pAdminLevel ], GetWeaponNameEx( weapModel ), weapAmmo, weapRange );
	InsertCMDLog( GetPlayerMysqlID(playerid), 0, "/areagun", "N/A" );
	return true;
}
CMD:areadisarm( playerid, params[] )
{
	AHCheck( playerid, 2, 5 );
	new Range4;
	if( sscanf( params, "d", Range4 ) ) 
		return SendClientMessage( playerid, COLOR_WHITE, SYNTAX_MESSAGE"/areadisarm <Range>" );

	if( Range4 < 1 || Range4 > 500 )
		return SendClientMessage( playerid, COLOR_GREY, "You can only use values from 1 to 500!" );

	foreach(new i : playersStream[playerid])
		if( IsPlayerInRangeOfPlayer( i, playerid, Range4 ) )
			ResetServerWeapons( i ), SendClientMessagef( i, COLOR_IN2, "Admin %s(%i) has disarmed you on his range.", username( playerid ), playerid );

	AdminBroadCast( 2, COLOR_LIGHTRED, "AdmCmd: %s(%d) has disarmed all players on a range of %dm", playerVariables[ playerid ][ pNormalName ], playerVariables[ playerid ][ pAdminLevel ], Range4 );
	InsertCMDLog( GetPlayerMysqlID(playerid), 0, "/areadisarm", "N/A" );
	return true;
}
CMD:areafreeze( playerid, params[] )
{
	AHCheck( playerid, 2, 5 );

	new Range4;
	if( sscanf( params, "d", Range4 ) ) 
		return SendClientMessage( playerid, COLOR_WHITE, SYNTAX_MESSAGE"/areafreeze <Range>" );

	if( Range4 < 1 || Range4 > 500 )
		return SendClientMessage( playerid, COLOR_GREY, "You can only use values from 1 to 500!" );

	foreach(new i : playersStream[playerid])
	{
		if( IsPlayerInRangeOfPlayer( i, playerid, Range4 ) )
		{
			TogglePlayerControllable( i, 0 );
			playerVariables[ i ][ pFreezed ] = 5 * 60;
			SendClientMessagef( i, COLOR_WHITE, "You have been frozen by Administrator %s(%i).", username( playerid ), playerid );
		}
	}
	AdminBroadCast( 2, COLOR_LIGHTRED, "AdmCmd: %s(%d) has freezed all players on a range of %dm", playerVariables[ playerid ][ pNormalName ], playerVariables[ playerid ][ pAdminLevel ], Range4 );
	InsertCMDLog( GetPlayerMysqlID(playerid), 0, "/areafreeze", "N/A" );
	return true;
}
CMD:areaunfreeze( playerid, params[] )
{
	AHCheck( playerid, 2, 5 );
	new Range4;
	if( sscanf( params, "d", Range4 ) ) 
		return SendClientMessage( playerid, COLOR_WHITE, SYNTAX_MESSAGE"/areaunfreeze <Range>" );

	if( Range4 < 1 || Range4 > 500 )
		return SendClientMessage( playerid, COLOR_GREY, "You can only use values from 1 to 500!" );

	foreach(new i : playersStream[playerid])
	{
		if( IsPlayerInRangeOfPlayer( i, playerid, Range4 ) )
		{
			if( IsValidDynamicArea( playerVariables[ i ][ pRadarZone ] ) )
				DestroyDynamicArea( playerVariables[ i ][ pRadarZone ] ), playerVariables[ playerid ][ pRadarZone ] = INVALID_STREAMER_ID, SendClientMessage( playerid, COLOR_DBLUE, "Your radar has been turned off, somebody unfreezed you!" );

			TogglePlayerControllable( i, 1 );
			playerVariables[ i ][ pFreezed ] = 0;
			SendClientMessagef( i, COLOR_WHITE, "You have been un-frozen by Administrator %s(%i).", username( playerid ), playerid );
		}
	}
	AdminBroadCast( 2, COLOR_LIGHTRED, "AdmCmd: %s(%d) has un-freezed all players on a range of %dm", playerVariables[ playerid ][ pNormalName ], playerVariables[ playerid ][ pAdminLevel ], Range4 );
	InsertCMDLog( GetPlayerMysqlID(playerid), 0, "/areaunfreeze", "N/A" );
	return true;
}
CMD:freeze( playerid, params[] )
{
	AHCheck( playerid, 1, 3 );

	new Player, Minutes;
	if( sscanf( params, "uD(10)", Player, Minutes ) ) 	return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/freeze [ playerid ] [ minutes ]" );
	if( !IsPlayerConnected( Player ) )					return SendClientMessage( playerid, COLOR_GREY, "Player it's not connected!" );
	if( playerVariables[ Player ][ pFreezed ] )			return SendClientMessage( playerid, COLOR_GREY, "This player it's already freezed!" );

	if( playerVariables[ playerid ][ pAdminLevel ] < playerVariables[ Player ][ pAdminLevel ] )
		return SendClientMessage( playerid, COLOR_GREY, "You can't freeze a higher level administrator." );

	TogglePlayerControllable( Player, 0 );
	playerVariables[ Player ][ pFreezed ] = Minutes * 60;
	//playerVariables[ Player ][ pFreezeType ] = 3;

	SendClientMessagef( Player, COLOR_WHITE, "You have been frozen by Administrator %s.", username( playerid ) );
	SendClientMessagef( playerid, COLOR_WHITE, "You have frozen %s.", username( Player ) );
	InsertCMDLog( GetPlayerMysqlID(playerid), GetPlayerMysqlID(Player), "/freeze", "N/A" );
	return true;
}
CMD:unfreeze( playerid, params[] )
{
	AHCheck( playerid, 1, 3 );

	new Player;
	if( sscanf( params, "u", Player ) ) 				return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/unfreeze [ playerid ]" );
	if( !IsPlayerConnected( Player ) )					return SendClientMessage( playerid, COLOR_GREY, "Player it's not connected!" );
	if( !playerVariables[ Player ][ pFreezed ] )		return SendClientMessage( playerid, COLOR_GREY, "This player it's not freezed!" );
	if( playerVariables[ Player ][ pRaceArena ] )		return SendClientMessage( playerid, COLOR_GREY, "This player it's in the Race Arena!" );

	TogglePlayerControllable( Player, 1 );
	playerVariables[ Player ][ pFreezed ] = 0;

	if( IsValidDynamicArea( playerVariables[ playerid ][ pRadarZone ] ) )
		DestroyDynamicArea( playerVariables[ playerid ][ pRadarZone ] ), playerVariables[ playerid ][ pRadarZone ] = INVALID_STREAMER_ID, SendClientMessage( playerid, COLOR_DBLUE, "Your radar has been turned off, somebody unfreezed you!" );

	SendClientMessagef( Player, COLOR_WHITE, "You have been unfrozen by Administrator %s.", username( playerid ) );
	SendClientMessagef( playerid, COLOR_WHITE, "You have unfrozen %s.", username( Player ) );
	InsertCMDLog( GetPlayerMysqlID(playerid), GetPlayerMysqlID(Player), "/unfreeze", "N/A" );
	return true;
}
CMD:giveallmoney( playerid, params[] )
{
	AHCheck( playerid, 6, 5 );

	if( sscanf( params, "d", params[ 0 ] ) ) 		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/giveallmoney <cash>" );
	if( params[ 0 ] < 0 || params[ 0 ] > 1000000 ) 	return SendClientMessage( playerid, COLOR_ULTRARED, ERROR_MESSAGE"You can only send $1.000.000 for all at once!" );

	SendClientMessageToAllf( COLOR_LIGHTRED, "Admin %s gave $%s money to all players online.", username( playerid ), FormatNumber( params[ 0 ] ) );
	InsertCMDLog( GetPlayerMysqlID(playerid), 0, "/giveallmoney", "N/A" );

	foreach(new i : Player)
		playerVariables[ i ][ pMoney ] += params[ 0 ];
	return true;
}
CMD:givealllevel( playerid, params[] )
{
	AHCheck( playerid, 6, 5 );

	if( sscanf( params, "d", params[ 0 ] ) ) return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/givealllevel <level>" );
	if( params[ 0 ] < 0 || params[ 0 ] > 10 ) 	return SendClientMessage( playerid, COLOR_GREY, "You can only set up to +10 level!" );
	SendClientMessageToAllf( COLOR_LIGHTRED, "Admin %s gave %d level to all players online.", username( playerid ), params[ 0 ] );
	InsertCMDLog( GetPlayerMysqlID(playerid), 0, "/givealllevel", "N/A" );

	foreach(new i : Player)
		playerVariables[ i ][ pLevel ] += params[ 0 ];
	return true;
}
CMD:giveallrp( playerid, params[] )
{
	AHCheck( playerid, 5, 5 );

	if( sscanf( params, "d", params[ 0 ] ) ) 	return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/giveallrp <RP>" );
	if( params[ 0 ] < 0 || params[ 0 ] >= 50 ) 	return SendClientMessage( playerid, COLOR_GREY, "You can only send up to 50 respect points!" );
	SendClientMessageToAllf( COLOR_LIGHTRED, "Admin %s gave %d respect points to all players online.", username( playerid ), params[ 0 ] );
	InsertCMDLog( GetPlayerMysqlID(playerid), 0, "/giveallrp", "N/A" );

	foreach(new i : Player)
		playerVariables[ i ][ pRP ] += params[ 0 ];
	return true;
}

CMD:vre( playerid, params[] ) 
{
	AHCheck( playerid, 1, 5 );

	new vehicleID;
	if(sscanf(params, "k<vehicle>", vehicleID )) 
	{
		if(IsPlayerInAnyVehicle( playerid )) 
		{
            if(Iter_Contains(ServerSpawnCars, GetPlayerVehicleID(playerid)))
            	Remove_Admin_Car( GetPlayerVehicleID(playerid) );
        
            else SetVehicleToRespawn(GetPlayerVehicleID(playerid));
			return 1;
		} 
		else return SendClientMessage(playerid, ~1, SYNTAX_MESSAGE"/vre [vehicle id]");
	}
	if(!IsValidVehicle( vehicleID )) return SendClientMessage(playerid, -1, "Vehicle ID invalid!");

	if(Iter_Contains( ServerSpawnCars, vehicleID ))
    	Remove_Admin_Car( vehicleID );

    else SetVehicleToRespawn( vehicleID );

    return true;
}
CMD:killv( playerid, params[] )
{
	AHCheck( playerid, 6, 5 );

	if( sscanf( params, "k<vehicle>", params[ 0 ] ) ) 
		return SendClientMessage( playerid, COLOR_WHITE, SYNTAX_MESSAGE"/killv <vehicleID>" );

	if( !IsValidVehicle( params[ 0 ] ) )
		return SendClientMessage( playerid, COLOR_ULTRARED, ERROR_MESSAGE"Vehicle with this ID does not exist!" );

	SetVehicleHealth( params[ 0 ], 100.0 );
	AdminBroadCast( 6, COLOR_LIGHTRED, "AdmCmd: %s(%d) has killed the vehicle ID %d", playerVariables[ playerid ][ pNormalName ], playerVariables[ playerid ][ pAdminLevel ], params[ 0 ] );
	return true;
}
CMD:closestcar( playerid, params[] )
{
	AHCheck( playerid, 2, 5 );

	new carID = GetClosestVehicle( playerid, 500.0 ), Float:V_Pos[ 3 ];
	if( carID == INVALID_VEHICLE_ID )
		return SendClientMessage( playerid, COLOR_ULTRARED, ERROR_MESSAGE"There is no vehicle in the range of 500m!" );

	new carInteriorr = GetPlayerInterior( playerid ),
		carVirtuall = GetPlayerVirtualWorld( playerid );

	GetPlayerPos( playerid, V_Pos[ 0 ], V_Pos[ 1 ], V_Pos[ 2 ] );
	SetVehiclePos( carID, V_Pos[ 0 ], V_Pos[ 1 ] + 4, V_Pos[ 2 ] );
	LinkVehicleToInterior( carID, carInteriorr );
	SetVehicleVirtualWorld( carID, carVirtuall );
	PutPlayerInVehicle( playerid, carID, 0 );

	SendClientMessagef( playerid, ~1, "You have teleported into %s[ID: %d]", VehicleName( GetVehicleModel( carID ) ), carID );
	return true;
}
CMD:getcar( playerid, params[] )
{
	AHCheck( playerid, 2, 5 );

	if( sscanf( params, "k<vehicle>", params[ 0 ] ) ) 
		return SendClientMessage( playerid, COLOR_WHITE, SYNTAX_MESSAGE"/getcar <vehicleID>" );

	if( !IsValidVehicle( params[ 0 ] ) )
		return SendClientMessage( playerid, COLOR_ULTRARED, ERROR_MESSAGE"Vehicle with this ID does not exist!" );

	new Float:V_Pos[ 3 ];
	GetPlayerPos( playerid, V_Pos[ 0 ], V_Pos[ 1 ], V_Pos[ 2 ] );
	SetVehiclePos( params[ 0 ], V_Pos[ 0 ], V_Pos[ 1 ] + 4, V_Pos[ 2 ] );
	LinkVehicleToInterior( params[ 0 ], GetPlayerInterior( playerid ) );
	SetVehicleVirtualWorld( params[ 0 ], GetPlayerVirtualWorld( playerid ) );
	InsertCMDLog( GetPlayerMysqlID(playerid), 0, "/getcar", "N/A" );
	return true;
}
CMD:gotocar( playerid, params[] )
{
	AHCheck( playerid, 2, 5 );

	if( sscanf( params, "k<vehicle>", params[ 0 ] ) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/gotocar <vehicleID>" );

	if( !IsValidVehicle( params[ 0 ] ) )
		return SendClientMessage( playerid, COLOR_ULTRARED, ERROR_MESSAGE"Vehicle with this ID does not exist!" );

	new Float:fPos[ 3 ];
	GetVehiclePos( params[ 0 ], fPos[ 0 ], fPos[ 1 ], fPos[ 2 ] );
	SetPlayerPos( playerid, fPos[ 0 ], fPos[ 1 ]+2, fPos[ 2 ] );
	return true;
}
CMD:askin( playerid, params[] )
{
	AHCheck( playerid, 1, 5 );

	if( GetPlayerMysqlID(playerid) == 2 )
		playerVariables[ playerid ][ pSkin ] = 303;
	else if( GetPlayerMysqlID(playerid) == 3 )
		playerVariables[ playerid ][ pSkin ] = 305;
	else playerVariables[ playerid ][ pSkin ] = 217;

	SendClientMessage( playerid, COLOR_LIGHTRED, "Info: Skin-ul de admin a fost adaugat!" );
	SetPlayerSkin( playerid, playerVariables[ playerid ][ pSkin ] );
	return true;
}
CMD:payday( playerid, params[] )
{
	AHCheck( playerid, 8, 5 );
	GivePlayerPayday( playerid, 2 );
	return true;
}
/*CMD:stackskin( playerid, params[] )
{
	new DATE_S[ 3 ];
	getdate( DATE_S[ 0 ], DATE_S[ 1 ], DATE_S[ 2 ] );

	if( DATE_S[ 1 ] != 1 || DATE_S[ 2 ] != 6 )
		return SendClientMessage( playerid, COLOR_GREY, "Poti folosi aceasta comanda doar pe 6 Ianuarie!" );

	playerVariables[ playerid ][ pSkin ] = 83;
	SendClientMessage( playerid, COLOR_LIGHTRED, "Info: Ai primit skin-ul domnitorului si scripterului buzoian, Alex!" );
	SetPlayerSkin( playerid, playerVariables[ playerid ][ pSkin ] );
	return true;
}*/
CMD:settempskin( playerid, params[] )
{
	AHCheck( playerid, 1, 5 );

	new Player;
	if( sscanf( params, "ud", Player, params[ 0 ] ) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/settempskin <playerID/Name> <skinID>" );

	if( params[ 0 ] < 0 || params[ 0 ] > 311  )
		return SendClientMessage( playerid, COLOR_GREY, "Invalid skin ID specified." );

	SetPlayerSkin( Player, params[ 0 ] );
	SendClientMessagef( playerid, COLOR_WHITE, "You have set %s (ID: %d)'s temporary's skin to %d.", username( Player ), Player, params[ 0 ] );
	return SendClientMessagef( Player, COLOR_WHITE, "Admin %s has set your temporary skin to %d.", username( playerid ), params[ 0 ] );
}
CMD:fnc( playerid, params[] ) return callcmd::forcenamechange( playerid, params );
CMD:forcenamechange(playerid, params[])
{
	AHCheck(playerid, 6, 6);
	new Player, reason[35];
	if(sscanf(params, "us[35]", Player, reason))
		return SendClientMessage(playerid, COLOR_GREY, SYNTAX_MESSAGE"/fnc <playerID/Name> <reason>");

	if( !IsPlayerConnected( Player ) )
		return SendClientMessage( playerid, COLOR_GREY, "The specified player ID is either not connected or has not authenticated." );

	FNCCount[Player] = 0;
	FNCBY[Player] = playerid;

	AdminBroadCast(1, COLOR_YELLOW, "AdmInfo: Admin %s asked player %s to change his name, reason: %s.", username(playerid), username(Player), reason);

	ShowPlayerDialog(Player, DIALOG_FNC, DIALOG_STYLE_INPUT, "SERVER: Change Nickname", "You're forced by an administrator to change your name. In case you refuse you will receive "COL_R"Permanent BAN.\nYour actual name contains injuries, advertise to other server or vulgar language.", "Change", "");
	return 1;
}
CMD:speed( playerid, params[] )
{
	if (playerVariables[ playerid ][ pAdminLevel ] >= 6)
	{
		if( playerVariables[ playerid ][ pSpeedBoost ] )
		{
			playerVariables[ playerid ][ pSpeedBoost ] = 0;
			SendClientMessage( playerid, COLOR_WHITE, "Speed Boost OFF!" );
		}
		else
		{
			playerVariables[ playerid ][ pSpeedBoost ] = 1;
			SendClientMessage( playerid, COLOR_WHITE, "Speed Boost ON!" );
		}
		AdminBroadCast( 1, COLOR_YELLOW, "AdmInfo: Admin %s used cmd /speed", username(playerid) );
	}
	return 1;
}
CMD:set( playerid, params[] )
{
	AHCheck( playerid, 5, 5 );

	new sItem[ 32 ], Player, sAmount;
	if( sscanf( params, "us[32]d", Player, sItem, sAmount ) )
	{
		SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/set [ playerid ] [ item ] [ amount ]" );
		SendClientMessage( playerid, COLOR_GREY, "Items: Health, Armour, Interior, PremiumPoints, VirtualWorld, Job, Level, BankMoney, Money, Hours" );
		return SendClientMessage( playerid, COLOR_GREY, "Crate, Fireworks, Skin, Youtuber, Materials, Drugs, FactionRank, RespectPoints, RobPoints, JobBoost" );
	}
	if( !IsPlayerConnected( Player ) )
		return SendClientMessage( playerid, COLOR_GREY, "The specified player ID is either not connected or has not authenticated." );

    switch(YHash(sItem, false))
    {
    	case _I<fireworks>:
    	{
    		SendClientMessagef( playerid, COLOR_WHITE, "You have set %s (ID: %d)'s fireworks to %d.", username( Player ), Player, sAmount );
			SendClientMessagef( Player, COLOR_WHITE, "Admin %s has set your fireworks to %d.", username( playerid ), sAmount );
			playerVariables[ Player ][ pFireworks ] = sAmount;
			AdminBroadCast( 1, COLOR_YELLOW, "AdmInfo: Admin %s has set %s's %s to %d", username( playerid ), username( Player ), sItem, sAmount );
		    InsertCMDLog( GetPlayerMysqlID(playerid), GetPlayerMysqlID(Player), "/set", sItem );
    	}
    	case _I<crate>:
    	{
    		#if defined CRATE
			SendClientMessagef( playerid, COLOR_WHITE, "You have set %s (ID: %d)'s crates to %d.", username( Player ), Player, sAmount );
			SendClientMessagef( Player, COLOR_WHITE, "Admin %s has set your crate to %d.", username( playerid ), sAmount );
			playerVariables[ Player ][ pCrates ] = sAmount;
			#else
				SendClientMessagef( playerid, COLOR_WHITE, "Acest sistem este dezactivat temporar!" );
			#endif

			AdminBroadCast( 1, COLOR_YELLOW, "AdmInfo: Admin %s has set %s's %s to %d", username( playerid ), username( Player ), sItem, sAmount );
		    InsertCMDLog( GetPlayerMysqlID(playerid), GetPlayerMysqlID(Player), "/set", sItem );
    	}
    	case _I<hours>:
    	{
    		playerVariables[ Player ][ pPlayTime ] = sAmount * 3600;
			SendClientMessagef( playerid, COLOR_WHITE, "You have set %s(ID: %d)'s hours to %d.", username( Player ), Player, sAmount );

			gsQuery[ 0 ] = EOS;
			mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerPlayTime` = %d WHERE `id` = %d", playerVariables[ Player ][ pPlayTime ], GetPlayerMysqlID(Player) );
			mysql_tquery( g_Handle, gsQuery, "", "" );
			AdminBroadCast( 1, COLOR_YELLOW, "AdmInfo: Admin %s has set %s's %s to %d", username( playerid ), username( Player ), sItem, sAmount );
		    InsertCMDLog( GetPlayerMysqlID(playerid), GetPlayerMysqlID(Player), "/set", sItem );
    	}
    	case _I<jobboost>:
    	{
    		playerVariables[ Player ][ pJobHype ] = sAmount;
			SendClientMessagef( playerid, COLOR_WHITE, "You have set %s(ID: %d)'s job boots to %d.", username( Player ), Player, sAmount );
			SendClientMessagef( Player, COLOR_WHITE, "Admin %s has set your job boost's hours to %d.", username( playerid ), sAmount );

			gsQuery[ 0 ] = EOS;
			mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerJobBoost` = %d WHERE `id` = %d", playerVariables[ Player ][ pJobHype ], GetPlayerMysqlID(Player) );
			mysql_tquery( g_Handle, gsQuery, "", "" );
			AdminBroadCast( 1, COLOR_YELLOW, "AdmInfo: Admin %s has set %s's %s to %d", username( playerid ), username( Player ), sItem, sAmount );
		    InsertCMDLog( GetPlayerMysqlID(playerid), GetPlayerMysqlID(Player), "/set", sItem );
    	}
    	case _I<youtuber>:
    	{
    		if(sAmount > 1) return 1;
			playerVariables[ Player ][ pYoutuber ] = 1;
			if(sAmount == 0) return SendClientMessage(playerid, COLOR_GREY, "You cannot remove a Youtuber Rank.");
			SendClientMessagef( playerid, COLOR_WHITE, "You have set %s(ID: %d)'s youtuber rank.", username( Player ), Player);
			SendClientMessagef( playerid, COLOR_WHITE, "Admin %s has set you as a Youtuber! Generate your referral code on our panel.", username( Player ), Player);

			gsQuery[ 0 ] = EOS;
			mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerYoutuber` = 1 WHERE `id` = %d", GetPlayerMysqlID(Player) );
			mysql_tquery( g_Handle, gsQuery, "", "" );
			AdminBroadCast( 1, COLOR_YELLOW, "AdmInfo: Admin %s has set %s's %s to %d", username( playerid ), username( Player ), sItem, sAmount );
		    InsertCMDLog( GetPlayerMysqlID(playerid), GetPlayerMysqlID(Player), "/set", sItem );
    	}
    	case _I<health>:
    	{
    		SendClientMessagef( playerid, COLOR_WHITE, "You have set %s (ID: %d)'s health to %d.", username( Player ), Player, sAmount );
			SendClientMessagef( Player, COLOR_WHITE, "Admin %s has set your health to %d.", username( playerid ), sAmount );
			SetPlayerHealth( Player, sAmount );
			AdminBroadCast( 1, COLOR_YELLOW, "AdmInfo: Admin %s has set %s's %s to %d", username( playerid ), username( Player ), sItem, sAmount );
		    InsertCMDLog( GetPlayerMysqlID(playerid), GetPlayerMysqlID(Player), "/set", sItem );
    	}
    	case _I<armour>:
    	{
    		SendClientMessagef( playerid, COLOR_WHITE, "You have set %s (ID: %d)'s armour to %d.", username( Player ), Player, sAmount );
			SendClientMessagef( Player, COLOR_WHITE, "Admin %s has set your armour to %d.", username( playerid ), sAmount );
			SetPlayerArmour( Player, sAmount);
			AdminBroadCast( 1, COLOR_YELLOW, "AdmInfo: Admin %s has set %s's %s to %d", username( playerid ), username( Player ), sItem, sAmount );
		    InsertCMDLog( GetPlayerMysqlID(playerid), GetPlayerMysqlID(Player), "/set", sItem );
    	}
    	case _I<virtualworld>:
    	{
    		SendClientMessagef( playerid, COLOR_WHITE, "You have set %s (ID: %d)'s virtual world to %d.", username( Player ), Player, sAmount );
			SendClientMessagef( Player, COLOR_WHITE, "Admin %s has set your virtual world to %d.", username( playerid ), sAmount );
			SetPlayerVirtualWorld( Player, sAmount );
			AdminBroadCast( 1, COLOR_YELLOW, "AdmInfo: Admin %s has set %s's %s to %d", username( playerid ), username( Player ), sItem, sAmount );
		    InsertCMDLog( GetPlayerMysqlID(playerid), GetPlayerMysqlID(Player), "/set", sItem );
			//playerVariables[userID][pVirtualWorld] = amount;
    	}
    	case _I<interior>:
    	{
    		SendClientMessagef( playerid, COLOR_WHITE, "You have set %s (ID: %d)'s interior to %d.", username( Player ), Player, sAmount );
			SendClientMessagef( Player, COLOR_WHITE, "Admin %s has set your interior to %d.", username( playerid ), sAmount );
			SetPlayerInterior( Player, sAmount );
			AdminBroadCast( 1, COLOR_YELLOW, "AdmInfo: Admin %s has set %s's %s to %d", username( playerid ), username( Player ), sItem, sAmount );
		    InsertCMDLog( GetPlayerMysqlID(playerid), GetPlayerMysqlID(Player), "/set", sItem );
			//playerVariables[userID][pInterior] = amount;
    	}
    	case _I<premiumpoints>:
    	{
    		SendClientMessagef( playerid, COLOR_WHITE, "You have set %s (ID: %d)'s premium points to %d.", username( Player ), Player, sAmount );
			SendClientMessagef( Player, COLOR_WHITE, "Admin %s has set your premium points to %d.", username( playerid ), sAmount );
			playerVariables[ Player ][ pPremiumPoints ] = sAmount;
			AdminBroadCast( 1, COLOR_YELLOW, "AdmInfo: Admin %s has set %s's %s to %d", username( playerid ), username( Player ), sItem, sAmount );
		    InsertCMDLog( GetPlayerMysqlID(playerid), GetPlayerMysqlID(Player), "/set", sItem );
			//playerVariables[userID][pInterior] = amount;
    	}
    	case _I<job>:
    	{
    		SendClientMessagef( playerid, COLOR_WHITE, "You have set %s (ID: %d)'s job to %d.", username( Player ), Player, sAmount );
			SendClientMessagef( Player, COLOR_WHITE, "Admin %s has set your job to %s.", username( playerid ), GetGVarInt( "job_Name", sAmount ) );

	        new jobID = playerVariables[Player][pJob];

			if(Iter_Contains(playerJobs[jobID], Player)) Iter_Remove(playerJobs[jobID], Player);
			if(Iter_Contains(playerJobs[10], Player)) mechanics--;

			playerVariables[ Player ][ pJob ] = sAmount;

			new player_job = playerVariables[Player][pJob];

			if(player_job != 0) Iter_Add(playerJobs[player_job], Player); 
			if(player_job == 10) mechanics++;

			if( playerVariables[ playerid ][ pFaction ] == 0 )
				SetPlayerSkin( playerid, GetGVarInt( "job_Skin", playerVariables[ Player ][ pJob ] ) );

			AdminBroadCast( 1, COLOR_YELLOW, "AdmInfo: Admin %s has set %s's %s to %d", username( playerid ), username( Player ), sItem, sAmount );
		    InsertCMDLog( GetPlayerMysqlID(playerid), GetPlayerMysqlID(Player), "/set", sItem );
    	}
    	case _I<bankmoney>:
    	{
    		AHCheck( playerid, 6, 5 );
			SendClientMessagef( playerid, COLOR_WHITE, "You have set %s (ID: %d)'s bank balance to $%s.", username( Player ), Player, FormatNumber( sAmount ) );
			SendClientMessagef( Player, COLOR_WHITE, "Admin %s has set your bank balance to $%s.", username( playerid ), FormatNumber( sAmount ) );
			playerVariables[ Player ][ pBankMoney ] = sAmount;
			AdminBroadCast( 1, COLOR_YELLOW, "AdmInfo: Admin %s has set %s's %s to %d", username( playerid ), username( Player ), sItem, sAmount );
		    InsertCMDLog( GetPlayerMysqlID(playerid), GetPlayerMysqlID(Player), "/set", sItem );
    	}
    	case _I<money>:
    	{
    		AHCheck( playerid, 6, 5 );
			SendClientMessagef( playerid, COLOR_WHITE, "You have set %s (ID: %d)'s money to %d.", username( Player ), Player, sAmount );
			SendClientMessagef( Player, COLOR_WHITE, "Admin %s has set your money to $%s.", username( playerid ), FormatNumber( sAmount ) );
			playerVariables[ Player ][ pMoney ] = sAmount;
			AdminBroadCast( 1, COLOR_YELLOW, "AdmInfo: Admin %s has set %s's %s to %d", username( playerid ), username( Player ), sItem, sAmount );
		    InsertCMDLog( GetPlayerMysqlID(playerid), GetPlayerMysqlID(Player), "/set", sItem );
    	}
    	case _I<materials>:
    	{
    		AHCheck( playerid, 6, 5 );
			SendClientMessagef( playerid, COLOR_WHITE, "You have set %s (ID: %d)'s materials to %d.", username( Player ), Player, sAmount );
			SendClientMessagef( Player, COLOR_WHITE, "Admin %s has set your materials to %s.", username( playerid ), FormatNumber( sAmount ) );
			playerVariables[ Player ][ pMaterials ] = sAmount;
			AdminBroadCast( 1, COLOR_YELLOW, "AdmInfo: Admin %s has set %s's %s to %d", username( playerid ), username( Player ), sItem, sAmount );
		    InsertCMDLog( GetPlayerMysqlID(playerid), GetPlayerMysqlID(Player), "/set", sItem );
    	}
    	case _I<drugs>:
    	{
    		SendClientMessagef( playerid, COLOR_WHITE, "You have set %s (ID: %d)'s drugs to %d.", username( Player ), Player, sAmount );
			SendClientMessagef( Player, COLOR_WHITE, "Admin %s has set your drugs to %s.", username( playerid ), FormatNumber( sAmount ) );
			playerVariables[ Player ][ pDrugs ] = sAmount;
			AdminBroadCast( 1, COLOR_YELLOW, "AdmInfo: Admin %s has set %s's %s to %d", username( playerid ), username( Player ), sItem, sAmount );
		    InsertCMDLog( GetPlayerMysqlID(playerid), GetPlayerMysqlID(Player), "/set", sItem );
    	}
    	case _I<factionrank>:
    	{
    		if( !playerVariables[ Player ][ pFaction ] )
			return SendClientMessage( playerid, COLOR_GREY, "Player it's not in any faction!" );

			if( sAmount < 1 || sAmount > 7 )
				return SendClientMessage( playerid, COLOR_GREY, "Invalid rank specified." );

			SendClientMessagef( playerid, COLOR_WHITE, "You have set %s (ID: %d)'s faction rank to %d.", username( Player ), Player, sAmount );
			SendClientMessagef( Player, COLOR_WHITE, "Admin %s has set your faction rank to %d.", username( playerid ), sAmount );
			playerVariables[ Player ][ pFactionRank ] = sAmount;
			SetPlayerFactionSkin( Player );
			AdminBroadCast( 1, COLOR_YELLOW, "AdmInfo: Admin %s has set %s's %s to %d", username( playerid ), username( Player ), sItem, sAmount );
		    InsertCMDLog( GetPlayerMysqlID(playerid), GetPlayerMysqlID(Player), "/set", sItem );
    	}
    	case _I<level>:
    	{
    		if( sAmount < 1 )
			    return SendClientMessage( playerid, COLOR_GREY, "Nu poti seta un level mai mic decat 1!" );

			SendClientMessagef( playerid, COLOR_WHITE, "You have set %s (ID: %d)'s level to %d.", username( Player ), Player, sAmount );
			SendClientMessagef( Player, COLOR_WHITE, "Admin %s has set your level to %d.", username( playerid ), sAmount );
			playerVariables[ Player ][ pLevel ] = sAmount;
			AdminBroadCast( 1, COLOR_YELLOW, "AdmInfo: Admin %s has set %s's %s to %d", username( playerid ), username( Player ), sItem, sAmount );
		    InsertCMDLog( GetPlayerMysqlID(playerid), GetPlayerMysqlID(Player), "/set", sItem );
    	}
    	case _I<skin>:
    	{
    		if( sAmount < 0 || sAmount > 311  )
			    return SendClientMessage( playerid, COLOR_GREY, "Invalid skin ID specified." );

			SetPlayerSkin( Player, sAmount );
			playerVariables[ Player ][ pSkin ] = sAmount;
			SendClientMessagef( playerid, COLOR_WHITE, "You have set %s (ID: %d)'s skin to %d.", username( Player ), Player, sAmount );
			SendClientMessagef( Player, COLOR_WHITE, "Admin %s has set your skin to %d.", username( playerid ), sAmount );

			gsQuery[ 0 ] = EOS;
			mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerSkin` = %d WHERE `id` = %d", playerVariables[ Player ][ pSkin ], GetPlayerMysqlID(Player) );
			mysql_tquery( g_Handle, gsQuery, "", "" );
			AdminBroadCast( 1, COLOR_YELLOW, "AdmInfo: Admin %s has set %s's %s to %d", username( playerid ), username( Player ), sItem, sAmount );
		    InsertCMDLog( GetPlayerMysqlID(playerid), GetPlayerMysqlID(Player), "/set", sItem );
    	}
    	case _I<respectpoints>:
    	{
    		AHCheck( playerid, 5, 5 );
			SendClientMessagef( playerid, COLOR_WHITE, "You have set %s (ID: %d)'s respect points to %d.", username( Player ), Player, sAmount );
			SendClientMessagef( Player, COLOR_WHITE, "Admin %s has set your respect points to %d.", username( playerid ), sAmount );
			playerVariables[ Player ][ pRP ] = sAmount;
			AdminBroadCast( 1, COLOR_YELLOW, "AdmInfo: Admin %s has set %s's %s to %d", username( playerid ), username( Player ), sItem, sAmount );
		    InsertCMDLog( GetPlayerMysqlID(playerid), GetPlayerMysqlID(Player), "/set", sItem );
    	}
    	case _I<robpoints>:
    	{
    		SendClientMessagef( playerid, COLOR_WHITE, "You have set %s (ID: %d)'s rob points to %d.", username( Player ), Player, sAmount );
			SendClientMessagef( Player, COLOR_WHITE, "Admin %s has set your rob points to %d.", username( playerid ), sAmount );
			playerVariables[ Player ][ pRobPoints ] = sAmount;
			AdminBroadCast( 1, COLOR_YELLOW, "AdmInfo: Admin %s has set %s's %s to %d", username( playerid ), username( Player ), sItem, sAmount );
		    InsertCMDLog( GetPlayerMysqlID(playerid), GetPlayerMysqlID(Player), "/set", sItem );
    	}
    	default:
    	{
    		SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/set [ playerid ] [ item ] [ amount ]" );
			SendClientMessage( playerid, COLOR_GREY, "Items: Health, Armour, Interior, PremiumPoints, VirtualWorld, Job, Level, BankMoney, Money, Hours" );
			return SendClientMessage( playerid, COLOR_GREY, "Crate, Fireworks, Skin, Youtuber, Materials, Drugs, FactionRank, RespectPoints, RobPoints, JobBoost" );
    	}
    }

	return true;
}
alias:setint( "setplayerint" );
CMD:setint( playerid, params[] )
{
	AHCheck( playerid, 1, 5 );

	new Player, Interrior;
	if( sscanf( params, "ud", Player, Interrior ) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/setint [PlayerID] [Interior]" );

	if( !IsPlayerConnected( Player ) )
		return SendClientMessage( playerid, COLOR_GREY, "Player is not connected!" );

	//( Player, 1057, 0.0, 0.0, 0.0 );
	SetPlayerInterior( Player, Interrior );

	if( Player != playerid )
	{
		SendClientMessagef( playerid, COLOR_WHITE, "You have set \"%s's\" interior to %d ", username( Player ), Interrior );
		SendClientMessagef( Player, COLOR_LIGHTRED, "Administrator \"%s\" has set your interior to %d ", username( playerid ), Interrior );
	}
	else SendClientMessagef( playerid, COLOR_WHITE, "You set your interrior to %d", Interrior );
	return true;
}
alias:setvw( "setplayervw" );
CMD:setvw( playerid, params[] )
{
	AHCheck( playerid, 1, 5 );

	new Player, Virtual;
	if( sscanf( params, "ud", Player, Virtual ) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/setvw [PlayerID] [virtualw]" );

	if( !IsPlayerConnected( Player ) )
		return SendClientMessage( playerid, COLOR_GREY, "Player is not connected!" );

	//( Player, 1057, 0.0, 0.0, 0.0 );
	SetPlayerVirtualWorld( Player, Virtual );

	if( Player != playerid )
	{
		SendClientMessagef( playerid, COLOR_WHITE, "You have set \"%s's\" virtual world to %d ", username( Player ), Virtual );
		SendClientMessagef( Player, COLOR_LIGHTRED, "Administrator \"%s\" has set your virtual world to %d ", username( playerid ), Virtual );
	}
	else SendClientMessagef( playerid, COLOR_WHITE, "You set your virtual world to %d", Virtual );
	return true;
}
CMD:giveplayermoney( playerid, params[] )
{
	if(playerVariables[playerid][pAdminLevel] < 6) 
		return SendClientMessage( playerid, COLOR_GREY, "This admin it's higher than you!" );

	AHCheck( playerid, 8, 5 );

	new	Player, giveValue;
	if( sscanf( params, "ud", Player, giveValue ) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/giveplayermoney [ playerid ] [ ammount ]" );

	playerVariables[ Player ][ pMoney ] += giveValue;
	SendClientMessagef( Player, COLOR_WHITE, "* Administrator %s(%i) has given you $%s. [bonus]", username( playerid ), playerid, FormatNumber( giveValue ) );
	AdminBroadCast( 6, COLOR_LIGHTRED, "AdmCmd: %s(%d) has given $%s to %s. [bonus]", playerVariables[ playerid ][ pNormalName ], playerVariables[ playerid ][ pAdminLevel ], FormatNumber( giveValue ), playerVariables[ Player ][ pNormalName ] );
	InsertCMDLog( GetPlayerMysqlID(playerid), GetPlayerMysqlID(Player), "/giveplayermoney", "N/A" );
	return true;
}
CMD:giveplayerpp( playerid, params[] )
{
	if(playerVariables[playerid][pAdminLevel] < 6) 
		return SendClientMessage( playerid, COLOR_GREY, "This admin it's higher than you!" );

	new	playerPP, Player;
	if( sscanf( params, "ud", Player, playerPP ) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/giveplayerpp [ playerid ] [ ammount ]" );

	if( playerPP > 500 )
		return SendClientMessage( playerid, COLOR_GREY, "Nu poti oferi sume mai mari de 500 de PP." );

	GivePlayerPremiumPoints( Player, playerPP );
	SendClientMessagef( Player, COLOR_WHITE, "* Administrator %s(%i) has given you %d Premium Points. [bought]", username( playerid ), playerid, playerPP );
	AdminBroadCast( 6, COLOR_LIGHTRED, "AdmCmd: %s(%d) has set %s's premium points to %d. [bought]", playerVariables[ playerid ][ pNormalName ], playerVariables[ playerid ][ pAdminLevel ], playerVariables[ Player ][ pNormalName ], playerPP );
	InsertCMDLog( GetPlayerMysqlID(playerid), GetPlayerMysqlID(Player), "/giveplayerpp", "N/A" );
	return true;
}
CMD:giveplayervehicle( playerid, params[] )
{
	if(playerVariables[playerid][pAdminLevel] < 6) 
		return SendClientMessage( playerid, COLOR_GREY, "This admin it's higher than you!" );

	new	Player, vehModel;
	if( sscanf( params, "ud", Player, vehModel ) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/giveplayervehicle [ playerid ] [ VehicleModel ]" );

	if( vehModel < 400 || vehModel > 611 )
		return SendClientMessage( playerid, COLOR_GREY, "Invalid vehicle model/name!" );

	if( GetPersonalVehiclesNumber( Player ) == MAX_SLOTS )
		return SendClientMessage( playerid, COLOR_GREY, "Acest jucator are deja 10 vehicule personale!" );

	if( GetPersonalVehiclesNumber( Player ) == playerVariables[ Player ][ pVSlots ] )
		return SendClientMessage( playerid, COLOR_GREY, "Acest jucator are toate sloturile ocupat!" );

	// < Give player the vehicle >
	GivePlayerPersonalVehicle( Player, vehModel );

	// < Add to logs >
	gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, "%s[user:%d] got a personal [%s] from Admin %s. [Bonus Vehicle/Event/Others]", playerVariables[ Player ][ pNormalName ], GetPlayerMysqlID(Player), VehicleName( vehModel ), playerVariables[ playerid ][ pNormalName ] );
	submitToAdmins(gsString, COLOR_YELLOW);
	InsertPlayerLog( GetPlayerMysqlID(Player), 0, gsString );
	SendClientMessagef( Player, COLOR_WHITE, "* Administrator %s(%i) ti-a oferit bonus un %s personal!", username( playerid ), playerid, VehicleName( vehModel ) );	
	return true;
}
CMD:makehelper( playerid, params[] )
{
	AHCheck( playerid, 6, 5 );

	new	Level, Player;
	if( sscanf( params, "ud", Player, Level ) )				return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/makehelper [ playerid ] [ level ]" );
	if( Level < 0 || Level > 3 )                            return SendClientMessage( playerid, COLOR_GREY, "Invalid Helper level (0-3)!" );
	if( !IsPlayerConnected( Player ) )						return SendClientMessage( playerid, COLOR_GREY, "Player it's not connected!" );
	if( playerVariables[ Player ][ pHelper ] == Level ) 	return SendClientMessage( playerid, COLOR_GREY, "Player it's already this level!" );

	// < Check if it's promote or demote )
	if( Level < playerVariables[ Player ][ pHelper ] ) // Demoted
	{
		SendClientMessagef( Player, COLOR_WHITE, "* Administrator %s has demoted you to helper level %d!", playerVariables[ playerid ][ pNormalName ], Level );
		AdminBroadCast( 1, COLOR_ADMCHAT, "AdmCmd: %s has demoted %s to helper level %d", playerVariables[ playerid ][ pNormalName ], playerVariables[ Player ][ pNormalName ], Level );
	}
	else
	{
		SendClientMessagef( Player, COLOR_WHITE, "* Administrator %s has promoted you to helper level %d!", playerVariables[ playerid ][ pNormalName ], Level );
		AdminBroadCast( 1, COLOR_ADMCHAT, "AdmCmd: %s has promoted %s to helper level %d", playerVariables[ playerid ][ pNormalName ], playerVariables[ Player ][ pNormalName ], Level );
	}
	if(Level == 0) 
	{ 
		if(Iter_Contains(server_helpers, Player)) Iter_Remove(server_helpers, Player), server_helpers--;
		if(Iter_Contains(Staff, Player)) Iter_Remove(Staff, Player); 
		if(!Iter_Contains(normalPlayers, Player) && !Iter_Contains(server_admins, Player)) Iter_Add(normalPlayers, Player);

		if(playerVariables[ Player ][ pHelperDuty ] == 1) playerVariables[ Player ][ pHelperDuty ] = 0, serverVariables[other_helpers_duty] --, SetPlayerSkin( Player, playerVariables[ Player ][ pSkin ] );
	} 
	else
	{ 
		if(!Iter_Contains(server_helpers, Player)) Iter_Add(server_helpers, Player), server_helpers++, Iter_Remove(normalPlayers, Player);
		if(!Iter_Contains(Staff, Player)) Iter_Add(Staff, Player); 
	}
	playerVariables[ Player ][ pHelper ] = Level;
	//( Player, 1058, 0.0, 0.0, 0.0 );

	if( playerid != Player )
	{
		gsString[ 0 ] = EOS;
		format( gsString, sizeof gsString, "Admin %s set %s helper level to %d.", playerVariables[ playerid ][ pNormalName ], playerVariables[ Player ][ pNormalName ], Level );
		InsertAHLog( GetPlayerMysqlID(playerid), username( playerid ), GetPlayerMysqlID(Player), playerVariables[ Player ][ pNormalName ], gsString );
	}
	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerHelper` = %d WHERE `id` = %d", Level, GetPlayerMysqlID(Player) );
	mysql_tquery( g_Handle, gsQuery, "", "" );
	return true;
}
alias:makeadmin("setadmin");
CMD:makeadmin( playerid, params[] )
{
	new	Level, Player;
	if(playerVariables[playerid][pAdminLevel] < 6 && GetPlayerMysqlID(playerid) != 2 && GetPlayerMysqlID(playerid) != 3) 
		return SendClientMessage( playerid, COLOR_GREY, "This admin it's higher than you!" );
	if( sscanf( params, "ud", Player, Level ) )					return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/makeadmin [ playerid ] [ level ]" );

	if( Level < 0 || Level > 6 && GetPlayerMysqlID(playerid) != 2 && GetPlayerMysqlID(playerid) != 3)
		return SendClientMessage( playerid, COLOR_GREY, "Invalid Administrator level (0-6)!" );

	if( !IsPlayerConnected( Player ) )							return SendClientMessage( playerid, COLOR_GREY, "Player it's not connected!" );
	if( playerVariables[ Player ][ pAdminLevel ] == Level ) 	return SendClientMessage( playerid, COLOR_GREY, "Player it's already this level!" );

	if( playerVariables[ Player ][ pHelper ] && Level > 0)
		return SendClientMessage(playerid, -1, "This player have helper, demote in helper 0!");

	// < Check if it's promote or demote )
	if( Level < playerVariables[ Player ][ pAdminLevel ] ) // Demoted
	{
		SendClientMessagef( Player, COLOR_WHITE, "* Administrator %s has demoted you to admin level %d!", playerVariables[ playerid ][ pNormalName ], Level );
		AdminBroadCast( 1, COLOR_ADMCHAT, "AdmCmd: %s has demoted %s to admin level %d", playerVariables[ playerid ][ pNormalName ], playerVariables[ Player ][ pNormalName ], Level );
	}
	else
	{
		SendClientMessagef( Player, COLOR_WHITE, "* Administrator %s has promoted you to admin level %d!", playerVariables[ playerid ][ pNormalName ], Level );
		AdminBroadCast( 1, COLOR_ADMCHAT, "AdmCmd: %s has promoted %s to admin level %d", playerVariables[ playerid ][ pNormalName ], playerVariables[ Player ][ pNormalName ], Level );
	    PlayerTextDrawShow(Player, PlayerText:ticks_td);
	}
	if(Level == 0)
	{
		PlayerTextDrawHide(Player, ticks_td);
		Iter_Remove(Staff, Player);
		Iter_Remove(server_admins, Player);
		server_admins--;

		if(!Iter_Contains(normalPlayers, Player) && !Iter_Contains(server_helpers, Player)) Iter_Add(normalPlayers, Player);

		new faction_spec = playerVariables[ Player ][ pSpectatingFaction ];
		if(Iter_Contains(playerFaction[faction_spec], Player)) Iter_Remove(playerFaction[faction_spec], Player);

		if(playerVariables[ Player ][ pFactionRank ] < 7) Iter_Remove(server_leaders, Player);
	}
	else 
	{
		if(!Iter_Contains(server_admins, Player)) Iter_Add(server_admins, Player), server_admins++, Iter_Remove(normalPlayers, Player);
		if(!Iter_Contains(Staff, Player)) Iter_Add(Staff, Player);
		if(!Iter_Contains(server_leaders, Player)) Iter_Add(server_leaders, Player);
	}
	// < Give/Take player's level )
	playerVariables[ Player ][ pAdminLevel ] = Level;
	//( Player, 1058, 0.0, 0.0, 0.0 );

	if( playerid != Player )
	{
		gsString[ 0 ] = EOS;
		format( gsString, sizeof gsString, "Admin %s set %s admin level to %d.", playerVariables[ playerid ][ pNormalName ], playerVariables[ Player ][ pNormalName ], Level );
		InsertAHLog( GetPlayerMysqlID(playerid), playerVariables[ playerid ][ pNormalName ], GetPlayerMysqlID(Player), playerVariables[ Player ][ pNormalName ], gsString );
	}
	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerAdminLevel` = %d WHERE `id` = %d", Level, GetPlayerMysqlID(Player) );
	mysql_tquery( g_Handle, gsQuery, "", "" );
	return true;
}
CMD:maxconnections( playerid, params[] )
{
	if(playerVariables[playerid][pAdminLevel] < 6) 
		return SendClientMessage( playerid, COLOR_GREY, "This admin it's higher than you!" );

	new	maxValue;
	if( sscanf( params, "d", maxValue ) )		
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/maxconnections [ value ]" );

	serverVariables[ maxConnections ] = maxValue;
	return InfoTD_MSG( playerid, 5000, "Max Connection value it's now: [%d]", maxValue );
}
CMD:lp( playerid, params[] )
{
	AHCheck( playerid, 4, 5 );

	new Player;
	if( sscanf( params, "u", Player ) ) 
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/lp [ playerid ]" );

	if( !IsPlayerConnected( Player ) )	
		return SendClientMessage( playerid, COLOR_GREY, "Player it's not connected!" );

	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "SELECT * FROM `server_punish` WHERE `punishPlayerID` = %d ORDER BY `punishKey` DESC LIMIT 20", GetPlayerMysqlID(Player) );
	mysql_pquery( g_Handle, gsQuery, "LoadPlayerPunish", "ii", Player, playerid );
	return true;
}
CMD:disarm( playerid, params[] )
{
	AHCheck( playerid, 1, 3 );

	new Player, paramReason[ 32 ];
	if( sscanf( params, "uS(no reason)[32]", Player, paramReason ) ) 
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/disarm [ playerid ] [ optional reason ]" );

	if( !IsPlayerConnected( Player ) )	
		return SendClientMessage( playerid, COLOR_GREY, "Player it's not connected!" );

	ResetServerWeapons( Player );
	AdminBroadCast( 1, COLOR_LIGHTRED, "AdmCmd: %s(%d) has disarmed %s with reason: %s", playerVariables[ playerid ][ pNormalName ], playerVariables[ playerid ][ pAdminLevel ], playerVariables[ Player ][ pNormalName ], paramReason );
	SendClientMessagef( Player, COLOR_WHITE, "You have been disarmed by Admin %s with reason: %s", playerVariables[ playerid ][ pNormalName ], paramReason );
	InsertCMDLog( GetPlayerMysqlID(playerid), GetPlayerMysqlID(Player), "/disarm", "N/A" );
	return true;
}
CMD:mute( playerid, params[] )
{
	AHCheck( playerid, 1, 2 );

	if( gettime() - GetPVarInt( playerid, "mute_Timer" ) <= 180 && GetPlayerMysqlID(playerid) != 2 && GetPlayerMysqlID(playerid) != 3 && playerVariables[playerid][pAdminLevel] < 8)
		return SendClientMessagef( playerid, ~1, "* Trebuie sa astepti %d secunde pentru a folosi comanda!", 30 - (gettime() - GetPVarInt( playerid, "mute_Timer" )) );

	new Player, Minutes, Reason[ 60 ];
	if( sscanf( params, "uis[60]", Player, Minutes, Reason ) ) 	return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/mute [ playerid ] [minutes] [reason]" );
	if( Player == playerid )									return SendClientMessage( playerid, COLOR_GREY, "You can't use this command on yourself!" );
	if( !IsPlayerConnected( Player ) )							return SendClientMessage( playerid, COLOR_GREY, "Player it's not connected!" );
	if( playerVariables[ Player ][ pAdminLevel ] >= 6 && playerVariables[playerid][pAdminLevel] < 8)			return SendClientMessage( playerid, COLOR_GREY, "This admin it's higher than you!" );

    if( !VerificaReclama( playerid, Reason ) )              	return false;

	if(playerVariables[Player][pAdminLevel] != 0 && playerVariables[playerid][pAdminLevel] < 8)
		return AdminBroadCast(8, COLOR_ULTRARED, "%s(level admin:%d) a incercat sa il baneze pe %s(admin level:%d)", username(playerid), playerVariables[playerid][pAdminLevel],
			username(Player), playerVariables[Player][pAdminLevel]);

	SetPVarInt(playerid, "mute_Timer", gettime());

	if( Minutes > 0 && Minutes <= 60 )
		MutePlayer( Player, playerid, Minutes, Reason );
	else SendClientMessage( playerid, -1, "Minutes must be under 60!" );

	InsertCMDLog( GetPlayerMysqlID(playerid), GetPlayerMysqlID(Player), "/mute", Reason );
	return true;
}
CMD:unmute( playerid, params[] )
{
	AHCheck( playerid, 1, 2 );

	new Player, Reason[ 32 ];
	if( sscanf( params, "us[32]", Player, Reason ) ) 	return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/unmute [ playerid ] [ reason ]" );
	if( !IsPlayerConnected( Player ) )					return SendClientMessage( playerid, COLOR_GREY, "Player it's not connected!" );
	if( !playerVariables[ Player ][ pMuted ] )			return SendClientMessage( playerid, -1, "This player isn't muted!" );

	if( !VerificaReclama( playerid, Reason ) )          return false;

	playerVariables[ Player ][ pMuted ] = 0;
	SendClientMessageToAllf( COLOR_LIGHTRED, "%s has been un-muted by %s, reason: %s.", username( Player ), username( playerid ), Reason );
	SendClientMessage( Player, -1, "You have been un-muted!" );

	InsertCMDLog( GetPlayerMysqlID(playerid), GetPlayerMysqlID(Player), "/unmute", Reason );
	return true;
}
CMD:leaderwarn( playerid, params[] )
{
	new	Player, Reason[ 32 ];
	AHCheck( playerid, 5, 5 );

	if( sscanf( params, "us[32]", Player, Reason ) )		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/leaderwarn [ playerID/Name ] [ reason ]" );
	if( !IsPlayerConnected( Player ) )						return SendClientMessage( playerid, COLOR_GREY, "Player it's not connected!" );
	if( playerVariables[ Player ][ pFactionRank ] != 7 )	return SendClientMessage( playerid, COLOR_GREY, "This player it's not the leader of any faction!" );

	playerVariables[ Player ][ pFactionLW ]++;
	SendClientMessagef( playerid, COLOR_LIGHTRED, "You have warned leader %s with Reason: %s", username( Player ), Reason );
	SendClientMessagef( Player, COLOR_LIGHTRED, "You were leader warned by %s, reason: %s", username( playerid ), Reason );
	InsertPlayerPunish( Player, playerid, 7, 0, Reason );
	InsertCMDLog( GetPlayerMysqlID(playerid), GetPlayerMysqlID(Player), "/leaderwarn", Reason );
	AdminBroadCast( 5, COLOR_LIGHTRED, "* Leader Warn: %s received a leader warn from admin %s, reason: %s.", username( Player ), username( playerid ), Reason );

	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerFactionLW` = %d WHERE `id` = %d", playerVariables[ Player ][ pFactionLW ], GetPlayerMysqlID(Player) );
	mysql_tquery( g_Handle, gsQuery, "", "" );

	if( playerVariables[ Player ][ pFactionLW ] >= 3 )
	{
		// < Announce the faction )
		gsString[ 0 ] = EOS;
		format( gsString, sizeof gsString, "%s was uninvited by Admin %s from faction %s (rank %d) after %d days with 60 FP. Reason: [/leaderwarn 3/3]: %s", playerVariables[ Player ][ pNormalName ], playerVariables[ playerid ][ pNormalName ], GetGVarStringEx( "faction_Name", playerVariables[ Player ][ pFaction ] ), playerVariables[ Player ][ pFactionRank ], playerVariables[ Player ][ pFactionDays ], Reason );
		SendToFaction( playerVariables[ Player ][ pFaction ], COLOR_GENANNOUNCE, gsString );
		InsertFactionLog( gsString, playerVariables[ playerid ][ pFaction ], Player, playerVariables[ Player ][ pNormalName ], GetPlayerMysqlID(playerid), playerVariables[ playerid ][ pNormalName ] );
		ResetPlayerFactionRaport( GetPlayerMysqlID(Player) );

		// < Update Panel Info )
		gsString[ 0 ] = EOS;
		format( gsString, sizeof gsString, "was uninvited by Admin %s from faction %s (rank %d) after %d days with 60 FP. Reason: [/leaderwarn 3/3]: %s", playerVariables[ playerid ][ pNormalName ], GetGVarStringEx( "faction_Name", playerVariables[ Player ][ pFaction ] ), playerVariables[ Player ][ pFactionRank ], playerVariables[ Player ][ pFactionDays ], Reason );
		gsQuery[ 0 ] = EOS;
		mysql_format( g_Handle, gsQuery, sizeof gsQuery, "INSERT INTO `server_feed`(`playerKey`,`playerName`,`logText`) VALUES (%d, '%s', '%s')", GetPlayerMysqlID(Player), playerVariables[ Player ][ pNormalName ], gsString );
		mysql_tquery( g_Handle, gsQuery, "", "" );

		// < Send player E-Mail )
		gsString[ 0 ] = EOS;
		format( gsString, sizeof gsString, "%s te-a dat afara din factiunea %s cu 60 FP si Reason: [/leaderwarn 3/3]: %s", playerVariables[ playerid ][ pNormalName ], GetGVarStringEx( "faction_Name", playerVariables[ Player ][ pFaction ] ), Reason );
		InsertPlayerMail( GetPlayerMysqlID(Player), gsString );

		// < Update faction )
		switch( playerVariables[ Player ][ pFactionRank ] )
		{
			case 7:
			{
				gsQuery[ 0 ] = EOS;
				mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_factions` SET `factionMembers` = `factionMembers` - 1, `factionLeaders` = `factionLeaders` - 1 WHERE `factionKey` = %d", playerVariables[ Player ][ pFaction ] );
				mysql_tquery( g_Handle, gsQuery, "", "" );
				SetGVarInt( "faction_Members", GetGVarInt( "faction_Members", playerVariables[ Player ][ pFaction ] ) - 1, playerVariables[ Player ][ pFaction ] );
				SetGVarInt( "faction_Leaders", GetGVarInt( "faction_Leaders", playerVariables[ Player ][ pFaction ] ) - 1, playerVariables[ Player ][ pFaction ] );
			}
			default:
			{
				gsQuery[ 0 ] = EOS;
				mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_factions` SET `factionMembers` = `factionMembers` - 1 WHERE `factionKey` = %d", playerVariables[ Player ][ pFaction ] );
				mysql_tquery( g_Handle, gsQuery, "", "" );
				SetGVarInt( "faction_Members", GetGVarInt( "faction_Members", playerVariables[ Player ][ pFaction ] ) - 1, playerVariables[ Player ][ pFaction ] );
			}
		}
		// < Reset Player Variables )
		SetPlayerHealth( Player, 100 );
		SetPlayerArmour( Player, 0 );
		playerVariables[ Player ][ pFW ] = 0;
		playerVariables[ Player ][ pFP ] = 60;
		playerVariables[ Player ][ pFaction ] = 0;
		playerVariables[ Player ][ pFactionRank ] = 0;
		playerVariables[ Player ][ pSkin ] = CIVIL_SKIN_MALE;
		switch( playerVariables[ Player ][ pSex ])
		{
			case 1: playerVariables[ Player ][ pSkin ] = CIVIL_SKIN_MALE;
			case 2: playerVariables[ Player ][ pSkin ] = CIVIL_SKIN_FEMALE;
		}
		SetPlayerFactionColor( Player );
		SetPlayerFactionSkin( Player );

		gsQuery[ 0 ] = EOS;
		mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerFaction` = 0, `playerFactionRank` = 0, `playerFactionDays` = 0, `playerFW` = 0, `playerFP` = 60, `playerSkin` = %d WHERE `id` = %d", playerVariables[ Player ][ pSkin ], GetPlayerMysqlID(Player) );
		mysql_tquery( g_Handle, gsQuery, "", "" );
		SendClientMessage( Player, COLOR_GENANNOUNCE, "You have been demoted from the Leader function due to 3/3 leader warns!" );
	}
	return true;
}
CMD:warn( playerid, params[] )
{
	new	Player, Reason[ 32 ];
	AHCheck( playerid, 1, 5 );

	if( gettime() - GetPVarInt( playerid, "warn_Timer" ) <= 180 && GetPlayerMysqlID(playerid) != 2 && GetPlayerMysqlID(playerid) != 3 && playerVariables[playerid][pAdminLevel] < 8)
		return SendClientMessagef( playerid, ~1, "* Trebuie sa astepti %d secunde pentru a folosi comanda!", 30 - (gettime() - GetPVarInt( playerid, "warn_Timer" )) );

	if( sscanf( params, "us[32]", Player, Reason ) )		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/warn [ playerid ] [ reason ]" );
	if( !IsPlayerConnected( Player ) )						return SendClientMessage( playerid, COLOR_GREY, "Player it's not connected!" );
	if( playerVariables[ Player ][ pAdminLevel ] >= 6 && playerVariables[playerid][pAdminLevel] < 8)			return SendClientMessage( playerid, COLOR_GREY, "This admin it's higher than you!" );

    if( !VerificaReclama( playerid, Reason ) )              return false;

	if(playerVariables[Player][pAdminLevel] != 0 && playerVariables[playerid][pAdminLevel] < 8)
		return AdminBroadCast(8, COLOR_ULTRARED, "%s(level admin:%d) a sa-i dea warn lui %s(admin level:%d)", username(playerid), playerVariables[playerid][pAdminLevel],
			username(Player), playerVariables[Player][pAdminLevel]);

	playerVariables[ Player ][ pWarnings ]++;
	SendClientMessagef( playerid, COLOR_LIGHTRED, "You have warned %s with Reason: %s", username( Player ), Reason );
	SendClientMessagef( Player, COLOR_LIGHTRED, "You were warned by %s, reason: %s", username( playerid ), Reason );
	InsertPlayerPunish( Player, playerid, 0, 0, Reason );
	InsertCMDLog( GetPlayerMysqlID(playerid), GetPlayerMysqlID(Player), "/warn", Reason );

	SendClientMessageToAllf( COLOR_LIGHTRED, "Warn: %s received a warn from Admin %s, reason: %s.", username( Player ), username( playerid ), Reason );
	SetPVarInt(playerid, "warn_Timer", gettime());

	if( playerVariables[ Player ][ pWarnings ] >= 3 )
		ServerBanPlayer( playerid, 3, 0, "[3/3] Warns" );
	
	return true;
}
CMD:unwarn( playerid, params[] )
{
	AHCheck( playerid, 1, 5 );

	new	Player, Reason[ 32 ];
	if( sscanf( params, "us[32]", Player, Reason ) )		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/unwarn [ playerid ] [ reason ]" );
	if( !IsPlayerConnected( Player ) )						return SendClientMessage( playerid, COLOR_GREY, "Player it's not connected!" );
	if( playerVariables[ Player ][ pWarnings ] == 0 )		return SendClientMessage( playerid, COLOR_GREY, "This player it's not warned!" );

	if( !VerificaReclama( playerid, Reason ) )              return false;

	playerVariables[ Player ][ pWarnings ]--;
	SendClientMessagef( playerid, COLOR_WHITE, "You have un-warned %s for Reason: %s", username( Player ), Reason );
	SendClientMessagef( Player, COLOR_WHITE, "* Administrator %s(%i) has un-warned your with Reason: %s", username( playerid ), playerid, Reason );
	InsertCMDLog( GetPlayerMysqlID(playerid), GetPlayerMysqlID(Player), "/unwarn", Reason );
	return true;
}
CMD:clearfp( playerid, params[] )
{
	AHCheck( playerid, 6, 5 );

	new	Player;
	if( sscanf( params, "us[32]", Player ) )		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/clearfp [ playerid ]" );
	if( !IsPlayerConnected( Player ) )						return SendClientMessage( playerid, COLOR_GREY, "Player it's not connected!" );
	if( playerVariables[ Player ][ pFP ] == 0 )		return SendClientMessage( playerid, COLOR_GREY, "This player doesn't have any Faction Punish!" );

	playerVariables[ Player ][ pFP ] = 0;
	SendClientMessagef( playerid, COLOR_WHITE, "You have cleared %s's faction punish!", username( Player ) );
	SendClientMessagef( Player, COLOR_WHITE, "* Administrator %s(%i) has cleared your faction punish!", username( playerid ), playerid );
	InsertCMDLog( GetPlayerMysqlID(playerid), GetPlayerMysqlID(Player), "/clearfp", "N/A" );
	return true;
}
CMD:clearwarns( playerid, params[] )
{
	AHCheck( playerid, 6, 5 );

	new	Player;
	if( sscanf( params, "us[32]", Player ) )				return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/clearwarns [ playerid ]" );
	if( !IsPlayerConnected( Player ) )						return SendClientMessage( playerid, COLOR_GREY, "Player it's not connected!" );
	if( playerVariables[ Player ][ pWarnings ] == 0 )		return SendClientMessage( playerid, COLOR_GREY, "This player it's not warned!" );

	playerVariables[ Player ][ pWarnings ] = 0;
	SendClientMessagef( playerid, COLOR_WHITE, "You have cleared %s's warnings!", username( Player ) );
	SendClientMessagef( Player, COLOR_WHITE, "* Administrator %s(%i) has cleared your warnings!", username( playerid ), playerid );
	InsertCMDLog( GetPlayerMysqlID(playerid), GetPlayerMysqlID(Player), "/clearwarns", "N/A" );
	return true;
}
CMD:unblock( playerid, params[] )
{
	AHCheck( playerid, 6, 5 );

	new	Player;
	if( sscanf( params, "us[32]", Player ) )				return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/unblock [ playerid ]" );
	if( !IsPlayerConnected( Player ) )						return SendClientMessage( playerid, COLOR_GREY, "Player it's not connected!" );
	if( !playerVariables[ Player ][ pBlocked ] )			return SendClientMessage( playerid, COLOR_GREY, "This player it's not blocked!" );

	playerVariables[ Player ][ pBlocked ] = 0;

	if( playerVariables[ Player ][ pPINStatus ] != 0 )
		playerVariables[ Player ][ pPINStatus ] = 1;

	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerPINStatus` = 1, `playerBlocked` = 0, `playerBlockedTime` = 0 WHERE `id` = %d", GetPlayerMysqlID(Player) );
	mysql_tquery( g_Handle, gsQuery, "", "" );

	SendClientMessagef( playerid, COLOR_WHITE, "You have unblocked %s's account!", username( Player ) );
	SendClientMessagef( Player, COLOR_WHITE, "* Administrator %s(%i) has unblocked your account!", username( playerid ), playerid );
	InsertCMDLog( GetPlayerMysqlID(playerid), GetPlayerMysqlID(Player), "/unblock", "N/A" );
	return true;
}
CMD:stats( playerid, params[] )
	return ShowPlayerStats( playerid, playerid );

CMD:check( playerid, params[] )
{
	AHCheck( playerid, 1, 5 );

	new Player;
	if( sscanf( params, "u", Player ) )							
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/check [ playerID ]" );

	if( !IsPlayerConnected( Player ) )							
		return SendClientMessage( playerid, COLOR_GREY, "Player is not connected!" );

	ShowPlayerStats( Player, playerid );
	return true;
}
/*CMD:checkac( playerid, params[] )
{
	AHCheck( playerid, 1, 5 );

	if( !IsACPluginLoaded() )
		return SendClientMessage( playerid, COLOR_GREY, "Anti-Cheat plugin it's not loaded on this server." );

	new Player;
	if( sscanf( params, "u", Player ) )							return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/checkac [ playerID ]" );
	if( !IsPlayerConnected( Player ) )							return SendClientMessage( playerid, COLOR_GREY, "Player is not connected!" );

	if( IsPlayerUsingSampAC( Player ) )
	{
		SendClientMessagef( playerid, COLOR_LIGHTRED, "%s[%d] it's using Anti Cheat client side.", playerVariables[ Player ][ pNormalName ], Player );

		new hwid[ 256 ];
		GetPlayerHardwareID( Player, hwid, sizeof hwid );
		SendClientMessagef( playerid, COLOR_WHITE, "- HardwareID: %s", hwid );

		SendClientMessagef( playerid, COLOR_WHITE, "- GetPlayerCBug: %d", GetPlayerCrouchBug( Player ) );
		SendClientMessagef( playerid, COLOR_WHITE, "- GetPlayerSwitchReload: %d", GetPlayerSwitchReload( Player ) );
		SendClientMessagef( playerid, COLOR_WHITE, "- GetPlayerFPSLimit: %d", GetPlayerFPSLimit( Player ) );
	}
	return true;
}*/
CMD:checkhp( playerid, params[] )
{
	AHCheck( playerid, 2, 5 );

	new Player;
	if( sscanf( params, "u", Player ) )							return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/checkhp [ playerID/Name ]" );
	if( !IsPlayerConnected( Player ) )							return SendClientMessage( playerid, COLOR_GREY, "Player is not connected!" );

	SendClientMessagef( playerid, ~1, "{B8DBFF}* %s, HP: "COL_W"%.2f , {B8DBFF}Armour: "COL_W"%.2f", username( Player ), GetPlayerHealthEx( Player ), GetPlayerArmourEx( Player ) );
	return true;
}
CMD:checkgun( playerid, params[] )
{
	AHCheck( playerid, 2, 5 );

	new Player;
	if( sscanf( params, "u", Player ) )							return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/checkgun [ playerID/Name ]" );
	if( !IsPlayerConnected( Player ) )							return SendClientMessage( playerid, COLOR_GREY, "Player is not connected!" );

	new Player_Weapons[ 13 ], Player_Ammos[ 13 ];
	for(new i = 1; i <= 12; i++)
	{
		GetPlayerWeaponData( Player, i, Player_Weapons[ i ], Player_Ammos[ i ] );
		if( Player_Weapons[ i ] != 0 )
		{
			new weaponName[ 256 ];
			GetWeaponName( Player_Weapons[ i ], weaponName, 255 );
			SendClientMessagef( playerid, ~1, "{B8DBFF}* %s[%d], Gun: "COL_W"%s{B8DBFF}, Ammo: "COL_W"%d", username( Player ), Player, weaponName, Player_Ammos[ i ] );
		}
	}
	return true;
}
CMD:weatherall( playerid, params[] )
{
	AHCheck( playerid, 4, 5 );

	if( sscanf( params, "d", params[ 0 ] ) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/weatherall [ weatherID ]" );

	if( params[ 0 ] < 0 || params[ 0 ] > 45 ) 		
		return SendClientMessage( playerid, COLOR_GREY, "Weather ID can't be below 0 or above 45." );

	SetWeather( params[ 0 ] );
	AdminBroadCast( 1, COLOR_LIGHTRED, "Warning: Admin %s has set the weather ID to: %d.", username( playerid ), params[ 0 ] );
	InsertCMDLog( GetPlayerMysqlID(playerid), 0, "/weatherall", "N/A" );
	return true;
}
CMD:gotols( playerid, params[] )
{
	AHCheck( playerid, 1, 1 );
	CheckPlayerAction( playerid );

	if( GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
		SetVehiclePos( GetPlayerVehicleID( playerid ), 1529.6, -1691.2, 13.3 ), playerVariables[ playerid ][ pTeleport ] = true;
	else
		SetPlayerPos( playerid, 1529.6, -1691.2, 13.3 );

	SendClientMessage( playerid, COLOR_GRAD1, "You have been teleported to Los Santos!" );
	SetPlayerInterior( playerid, 0 );
	SetPlayerVirtualWorld( playerid, 0 );
	SetCameraBehindPlayer( playerid );
	/*gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, "Warning: Admin %s Teleported to LS.", playerVariables[ playerid ][ pNormalName ] );
	Adminlog( gsString );*/
	return true;
}
CMD:gotosf( playerid, params[] )
{
	AHCheck( playerid, 1, 1 );
	CheckPlayerAction( playerid );

	if( GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
		SetVehiclePos( GetPlayerVehicleID( playerid ), -1417.0, -295.8, 14.1 ), playerVariables[ playerid ][ pTeleport ] = true;
	else
		SetPlayerPos( playerid, -1417.0, -295.8, 14.1 );

	SendClientMessage( playerid, COLOR_GRAD1, "You have been teleported to San Fierro!" );
	SetPlayerInterior( playerid, 0 );
	SetPlayerVirtualWorld( playerid, 0 );
	SetCameraBehindPlayer( playerid );
	/*gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, "Warning: Admin %s Teleported to LS.", playerVariables[ playerid ][ pNormalName ] );
	Adminlog( gsString );*/
	return true;
}
CMD:gotospawn( playerid, params[] )
{
	AHCheck( playerid, 1, 1 );
	CheckPlayerAction( playerid );

	SetPlayerInterior( playerid, 0 );
	SetPlayerVirtualWorld( playerid, 0 );
	SetPlayerFactionColor( playerid );
	SetPlayerPos( playerid, 1743.1216,-1860.9050,13.5782), SetPlayerFacingAngle( playerid, 359.0600 );
	SetCameraBehindPlayer( playerid );

	SendClientMessage( playerid, COLOR_GRAD1, "You have been teleported to Spawn Zone!" );
	return true;
}
CMD:gotopaint( playerid, params[] )
{
	AHCheck( playerid, 1, 1 );
	CheckPlayerAction( playerid );

	SetPlayerPos( playerid, 1310.1031, -1367.7607, 13.5401 );
	SendClientMessage( playerid, COLOR_GRAD1, "You have been teleported to Paintball!" );
	SetPlayerInterior( playerid, 0 );
	SetPlayerVirtualWorld( playerid, 0 );
	SetCameraBehindPlayer( playerid );
	return true;
}
CMD:gotorace( playerid, params[] )
{
	AHCheck( playerid, 1, 1 );
	CheckPlayerAction( playerid );

	SetPlayerPos( playerid, 2695.5996,-1704.7468,11.8438 );
	SendClientMessage( playerid, COLOR_GRAD1, "You have been teleported to Race Arena!" );
	SetPlayerInterior( playerid, 0 );
	SetPlayerVirtualWorld( playerid, 0 );
	SetCameraBehindPlayer( playerid );
	return true;
}
CMD:lockarena( playerid, params[] )
{
	AHCheck( playerid, 3, 5 );

	switch( GetGVarInt( "tele_Status", 4 ) )
	{
		case 0:
		{
			SetGVarInt( "tele_Status", 1, 4 );
			SendClientMessageToAllf( COLOR_LIGHTRED, "EventArena: "COL_W"Admin %s[%d] has changed the status of the Arena to: "COL_LR"locked", username( playerid ), playerid );
		}
		case 1:
		{
			SetGVarInt( "tele_Status", 0, 4 );
			SendClientMessageToAllf( COLOR_LIGHTRED, "EventArena: "COL_W"Admin %s[%d] has changed the status of the Arena to: "COL_G"un-locked", username( playerid ), playerid );
		}
	}
	return true;
}
cmd:engine(playerid, params[]) {
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, -1, "Nu esti intr-un vehicul.");
	changeEngineStatus(playerid);
	return 1;
}
CMD:gotoea( playerid, params[] )
{
	AHCheck( playerid, 1, 1 );
	CheckPlayerAction( playerid );

	SetPlayerPos( playerid, 1022.5323, -1121.6538, 23.8720 );
	SendClientMessage( playerid, COLOR_GRAD1, "You have been teleported to Event Arena!" );
	SetPlayerInterior( playerid, 0 );
	SetPlayerVirtualWorld( playerid, 0 );
	return true;
}
CMD:gotolv( playerid, params[] )
{
	AHCheck( playerid, 1, 1 );
	CheckPlayerAction( playerid );

	if( GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
		SetVehiclePos( GetPlayerVehicleID( playerid ), 1699.2, 1435.1, 10.7 ), playerVariables[ playerid ][ pTeleport ] = true;
	else
		SetPlayerPos( playerid, 1699.2, 1435.1, 10.7 );

	SendClientMessage( playerid, COLOR_GRAD1, "You have been teleported to Las Venturas!" );
	SetPlayerInterior( playerid, 0 );
	SetPlayerVirtualWorld( playerid, 0 );
	/*gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, "Warning: Admin %s Teleported to LV.", playerVariables[ playerid ][ pNormalName ] );
	Adminlog( gsString );*/
	return true;
}
CMD:gotom( playerid, params[] )
{
	AHCheck( playerid, 1, 1 );
	CheckPlayerAction( playerid );

	if( GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
		SetVehiclePos( GetPlayerVehicleID( playerid ), -2317.8091, -1637.5575, 483.7031 ), playerVariables[ playerid ][ pTeleport ] = true;
	else
		SetPlayerPos( playerid, -2317.8091, -1637.5575, 483.7031 );

	SendClientMessage( playerid, COLOR_GRAD1, "You have been teleported to Mount Chilliad!" );
	SetPlayerInterior( playerid, 0 );
	SetPlayerVirtualWorld( playerid, 0 );
	/*gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, "Warning: Admin %s Teleported to Mount Chilliad.", playerVariables[ playerid ][ pNormalName ] );
	Adminlog( gsString );*/
	return true;
}
CMD:gotodj( playerid, params[] )
{
	AHCheck( playerid, 1, 1 );
	CheckPlayerAction( playerid );

	SetPlayerPos( playerid, 194.5381, -1819.0226, 11.0031 + 1.0 );
	SetPlayerFacingAngle( playerid, 269.9879 );

	SendClientMessage( playerid, COLOR_GRAD1, "You have been teleported to DJ Party!" );
	SetPlayerInterior( playerid, 0 );
	return SetPlayerVirtualWorld( playerid, 0 );
}
CMD:gotodmv( playerid, params[] )
{
	AHCheck( playerid, 1, 1 );
	CheckPlayerAction( playerid );

	if( GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
		SetVehiclePos( GetPlayerVehicleID( playerid ), 1219.2964, -1813.3220, 16.5938 ), playerVariables[ playerid ][ pTeleport ] = true;
	else
		SetPlayerPos( playerid, 1219.2964, -1813.3220, 16.5938 );

	SendClientMessage( playerid, COLOR_GRAD1, "You have been teleported to Driving School!" );
	SetPlayerInterior( playerid, 0 );
	SetPlayerVirtualWorld( playerid, 0 );
	/*gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, "Warning: Admin %s Teleported to Driving Schoool.", playerVariables[ playerid ][ pNormalName ] );
	Adminlog( gsString );*/
	return true;
}
CMD:gotogarage( playerid, params[] )
{
	AHCheck( playerid, 1, 1 );
	CheckPlayerAction( playerid );

	if( GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
		SetVehiclePos( GetPlayerVehicleID( playerid ), 1378.8600, -37.7319, 1001.0511 ), playerVariables[ playerid ][ pTeleport ] = true;
	else
		SetPlayerPos( playerid, 1378.8600, -37.7319, 1001.0511 );

	SendClientMessage( playerid, COLOR_GRAD1, "You have been teleported to Player Garage!" );
	SetPlayerInterior( playerid, 0 );
	SetPlayerVirtualWorld( playerid, 0 );
	return true;
}
CMD:gotojewelry( playerid, params[] )
{
	AHCheck( playerid, 1, 1 );
	CheckPlayerAction( playerid );

	if( GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
		SetVehiclePos( GetPlayerVehicleID( playerid ), 1378.8600, -37.7319, 1001.0511 ), playerVariables[ playerid ][ pTeleport ] = true;
	else
		SetPlayerPos( playerid, 1378.8600, -37.7319, 1001.0511 );

	SendClientMessage( playerid, COLOR_GRAD1, "You have been teleported to Jewelry Store!" );
	SetPlayerInterior( playerid, 0 );
	SetPlayerVirtualWorld( playerid, 0 );
	return true;
}
CMD:gotods( playerid, params[] )
{
	AHCheck( playerid, 1, 1 );
	CheckPlayerAction( playerid );

    new ds_id;
	if( sscanf( params, "d", ds_id ) ) return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/gotods [ id ds ( 1 - lv / 2 - ls ) ]" );

	if(ds_id < 0 || ds_id > 2) return SendClientMessage(playerid, -1, "ID DS INVALID!");

    switch(ds_id)
    {
    	case 1:
    	{
    	    if( GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
		        SetVehiclePos( GetPlayerVehicleID( playerid ), 2435.2942, 1654.4897, 10.8203 ), playerVariables[ playerid ][ pTeleport ] = true;
			else
				SetPlayerPos( playerid, 2435.2942, 1654.4897, 10.8203 );
    	}
    	case 2:
    	{
    		if( GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
		        SetVehiclePos( GetPlayerVehicleID( playerid ), 327.0816, -1516.5175, 36.0391 ), playerVariables[ playerid ][ pTeleport ] = true;
			else
				SetPlayerPos( playerid, 327.0816, -1516.5175, 36.0391 );
    	}
    }
	SendClientMessage( playerid, COLOR_GRAD1, "You have been teleported to Dealership!" );
	SetPlayerInterior( playerid, 0 );
	SetPlayerVirtualWorld( playerid, 0 );
	/*gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, "Warning: Admin %s Teleported to Dealership.", playerVariables[ playerid ][ pNormalName ] );
	Adminlog( gsString );*/
	return true;
}
CMD:slapcar( playerid, params[] )
{
	AHCheck( playerid, 1, 1 );

	new vehicleID, Float:S_POS[ 4 ];
	if( sscanf( params, "d", vehicleID ) ) return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/slapcar <vehicleID>" );
	if( !IsValidVehicle( vehicleID ) )	return SendClientMessage( playerid, COLOR_GREY, "This vehicle ID it's invalid!" );

	GetVehiclePos( vehicleID, S_POS[ 0 ], S_POS[ 1 ], S_POS[ 2 ] );
	if( !IsPlayerInRangeOfPoint( playerid, 10, S_POS[ 0 ], S_POS[ 1 ], S_POS[ 2 ] ) )
		return SendClientMessage( playerid, ~1, "This vehicle it's too far away, you can use command from 10m away!" );

	// < Set the vehicle position + 3m )
	SetVehiclePos( vehicleID, S_POS[ 0 ], S_POS[ 1 ], S_POS[ 2 ] + 3 );
	GetVehicleZAngle( vehicleID, S_POS[ 3 ] );
	SetVehicleZAngle( vehicleID, S_POS[ 3 ] );

	SendClientMessagef( playerid, COLOR_DARKPINK, "You have slaped vehicle ID: %d.", vehicleID );
	InsertCMDLog( GetPlayerMysqlID(playerid), 0, "/slapcar", "N/A" );
	return true;
}
CMD:slap( playerid, params[] )
{
	AHCheck( playerid, 1, 1 );

	new Player;
	if( sscanf( params, "u", Player) ) 
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/slap [ username/ID ]" );

	if( !IsPlayerConnected( Player ) )	return SendClientMessage( playerid, COLOR_GREY, "Player it's not connected!" );
	if( playerVariables[ Player ][ pRaceArena ] )		
		return SendClientMessage( playerid, COLOR_GREY, "Player it's in the Race Arena!" );

	SlapPlayer( Player, 5.0 );
	SetPlayerHealth( Player, GetPlayerHealthEx( Player ) - 5 );
	SendClientMessagef( Player, COLOR_DARKPINK, "Admin %s has slaped you.", username( playerid ));

	AdminBroadCast( 1, COLOR_LIGHTRED, "AdmCmd: %s(%d) has slapped %s", playerVariables[ playerid ][ pNormalName ], playerVariables[ playerid ][ pAdminLevel ], playerVariables[ Player ][ pNormalName ]);
	InsertCMDLog( GetPlayerMysqlID(playerid), GetPlayerMysqlID(Player), "/slap", "N/A" );
	return true;
}
CMD:slay( playerid, params[] )
{
	AHCheck( playerid, 1, 1 );

	new Player, paramReason[ 32 ];
	if( sscanf( params, "uS(no reason)[32]", Player, paramReason ) ) 
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/slay [ username/ID ] [ optional reason ]" );

	if( !IsPlayerConnected( Player ) )	
		return SendClientMessage( playerid, COLOR_GREY, "Player it's not connected!" );

	SetPlayerHealth( Player, 0.0 );
	SendClientMessagef( Player, COLOR_DARKPINK, "Admin %s has slayed you with reason: %s", username( playerid ), paramReason );

	AdminBroadCast( 1, COLOR_LIGHTRED, "AdmCmd: %s(%d) slayed %s, reason: %s", playerVariables[ playerid ][ pNormalName ], playerVariables[ playerid ][ pAdminLevel ], playerVariables[ Player ][ pNormalName ], paramReason );
	InsertCMDLog( GetPlayerMysqlID(playerid), GetPlayerMysqlID(Player), "/slay", "N/A" );
	return true;
}
CMD:eject( playerid, params[] )
{
	new Player;
	if( sscanf( params, "u", Player ) )		
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/eject [ playerID/Name ]" );

	if( playerid == Player )				return SendClientMessage( playerid, COLOR_GREY, "You can't eject yourself!" );
	if( !IsPlayerConnected( Player ) )		return SendClientMessage( playerid, COLOR_GREY, "Player it's not connected!" );
	if( GetPlayerState( playerid ) != 2 )	return SendClientMessage( playerid, COLOR_GREY, "You're not driving a vehicle." );
	if( GetPlayerVehicleID( playerid ) != GetPlayerVehicleID( Player ) )
		return SendClientMessage( playerid, COLOR_GREY, "That person is not in your vehicle." );

	RemovePlayerFromVehicle( Player );
	nearByMessage( playerid, COLOR_PURPLE, NBM_DIST, "* %s has thrown %s out of their vehicle.", username( playerid ), username( Player ) );
	InsertCMDLog( GetPlayerMysqlID(playerid), GetPlayerMysqlID(Player), "/eject", "N/A" );
	return true;
}
CMD:specoff( playerid, params[] )
{
	if( playerVariables[ playerid ][ pSpectating ] == INVALID_PLAYER_ID )
		return SendClientMessage( playerid, COLOR_GREY, "You're not spectating anyone!" );

    Iter_Remove( playerSpec[ playerVariables[ playerid ][ pSpectating ] ], playerid );
    playerVariables[ playerid ][ pSpectating ] = INVALID_PLAYER_ID;
	TogglePlayerSpectating( playerid, false );
	return true;
}
CMD:spec( playerid, params[] )
{
	AHCheck( playerid, 1, 2 );
	CheckPlayerAction( playerid );

	new Player;
	if( sscanf( params, "u", Player ) )						return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/spec [ playerid ]" );
	if( !IsPlayerConnected( Player ) )						return SendClientMessage( playerid, COLOR_GREY, "The specified player is not connected, or has not authenticated." );
	if( !playerVariables[ Player ][ pLogged ] ) 			return SendClientMessage( playerid, COLOR_GREY, "Player it's not logged in!" );

	if( playerVariables[ playerid ][ pSpectating ] != INVALID_PLAYER_ID )
		return SendClientMessage( playerid, COLOR_GREY, "You're already spectating someone!" );

	if( playerVariables[ Player ][ pSpectating ] != INVALID_PLAYER_ID )
		return SendClientMessage( playerid, COLOR_GREY, "This player it's spectating someone!" );

	if( playerVariables[ Player ][ pTog ][ 4 ] )
		return SendClientMessage( playerid, COLOR_GREY, "This player has /spec turned off." );

	if( Player == playerid )								return SendClientMessage( playerid, COLOR_GREY, "You can't specate yourself!" );
	if( playerVariables[ playerid ][ pWanted ] != 0 )		return SendClientMessage( playerid, COLOR_GREY, "You are wanted, you can't spectante anyone." );
	if( playerVariables[ playerid ][ pPrisonTime ] >= 1 )	return SendClientMessage( playerid, COLOR_GREY, "You can't spectate because you are in jail." );

	switch( playerVariables[ Player ][ pReportType ] )
	{
		case REPORT_STUCK:
		{
			gsString[ 0 ] = EOS;
			format( gsString, sizeof gsString, "Admin %s is now spectating %s (reported for being stuck/blocked).", playerVariables[ playerid ][ pNormalName ], playerVariables[ Player ][ pNormalName ] );
			submitToAdmins(gsString, COLOR_YELLOW);
		}
		case REPORT_DM:
		{
			gsString[ 0 ] = EOS;
			format( gsString, sizeof gsString, "Admin %s is now spectating %s (reported for DM).", playerVariables[ playerid ][ pNormalName ], playerVariables[ Player ][ pNormalName ] );
			submitToAdmins(gsString, COLOR_YELLOW);
		}
		case REPORT_CHEAT:
		{
			gsString[ 0 ] = EOS;
			format( gsString, sizeof gsString, "Admin %s is now spectating %s (reported for Cheating).", playerVariables[ playerid ][ pNormalName ], playerVariables[ Player ][ pNormalName ] );
			submitToAdmins(gsString, COLOR_YELLOW);
		}
		default:
		{
			gsString[ 0 ] = EOS;
			format( gsString, sizeof gsString, "Admin %s is now spectating %s (no special reason).", playerVariables[ playerid ][ pNormalName ], playerVariables[ Player ][ pNormalName ] );
			submitToAdmins(gsString, COLOR_YELLOW);
		}
	}
	if( playerVariables[ Player ][ pReported ] )
		ClosePlayerReport( playerid, Player, "An admin it's spectating / investigating!" );

	GetPlayerPos( playerid, playerVariables[ playerid ][ pSpecPosition ][ 0 ], playerVariables[ playerid ][ pSpecPosition ][ 1 ], playerVariables[ playerid ][ pSpecPosition ][ 2 ] );
	playerVariables[ playerid ][ pSpecInterior ] 	= 	GetPlayerInterior( playerid );
	playerVariables[ playerid ][ pSpecVirtual ] 	=  	GetPlayerVirtualWorld( playerid );
	playerVariables[ playerid ][ pSpectating ] 		= 	Player;
	playerVariables[ Player ][ pSpectatedBy ] 		= 	playerid;
	playerVariables[ Player ][ pReportType ]		= 	0;
	playerVariables[ playerid ][ pSpecHealth ]		=	GetPlayerHealthEx( playerid );
	playerVariables[ playerid ][ pSpecArmour ]		=	GetPlayerArmourEx( playerid );

	Iter_Add( playerSpec[ Player ], playerid);

    if(Iter_Contains(server_reports, Player)) Iter_Remove(server_reports, Player), server_reports--;

	playerVariables[playerVariables[Player][pReportedID]][pReported] = 0;

	for( new wID = 0; wID <= 12; wID++ )
		GetPlayerWeaponData( playerid, wID, WeaponData[ playerid ][ wID ][ 0 ], WeaponData[ playerid ][ wID ][ 1 ] );

	StopAudioStreamForPlayer( playerid );
	SetPlayerInterior( playerid, GetPlayerInterior( Player ) );
	SetPlayerVirtualWorld( playerid, GetPlayerVirtualWorld( Player ) );
	TogglePlayerSpectating( playerid, true );

	if( IsPlayerInAnyVehicle( Player ) )
		PlayerSpectateVehicle( playerid, GetPlayerVehicleID( Player ) ), playerVariables[ playerid ][ pSpecMode ] = 0; 
	else
		PlayerSpectatePlayer( playerid, Player ), playerVariables[ playerid ][ pSpecMode ] = 1;

	PlayerTextDrawSetString( playerid, SPECTATE_TD, "Loading..." );
	PlayerTextDrawShow( playerid, SPECTATE_TD );

	SendClientMessagef( playerid, COLOR_IN2, "(%i) %s | Level: %d | Health: %0.2f | Status: %s | Ping: %d | FPS: %d", Player, playerVariables[ Player ][ pNormalName ], playerVariables[ Player ][ pLevel ], GetPlayerHealthEx( playerid ), Player_Status[ playerVariables[ Player ][ pSpawned ] ], GetPlayerPing( Player ), playerVariables[ Player ][ pFPS ] );
	return true;
}
CMD:ban( playerid, params[] )
{
	AHCheck( playerid, 1, 5 );

	if( gettime() - GetPVarInt( playerid, "ban_Timer" ) <= 180 && GetPlayerMysqlID(playerid) != 2 && GetPlayerMysqlID(playerid) != 3 && playerVariables[playerid][pAdminLevel] < 8)
		return SendClientMessagef( playerid, ~1, "* Trebuie sa astepti %d secunde pentru a folosi comanda!", 30 - (gettime() - GetPVarInt( playerid, "ban_Timer" )) );

	new liPlayer, lsDays, lsReason[ 64 ];
	if( sscanf( params, "uis[64]", liPlayer, lsDays, lsReason ) )			return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/ban [PlayerID] [Day(s)] [Reason] | Info: 0 days will result in permanent ban!" );
	if( !IsPlayerConnected( liPlayer ) )									return SendClientMessage( playerid, COLOR_GREY, "Player not connected !" );
	if( playerVariables[ liPlayer ][ pKicked ] )							return SendClientMessage( playerid, COLOR_GREY, "This players has been already kicked/banned!" );
	if( GetPlayerMysqlID(liPlayer) == 2 || GetPlayerMysqlID(playerid) == 3)     return SendClientMessage( playerid, COLOR_GREY, "You can't ban the founder of the server!" );
  
    if( !VerificaReclama( playerid, lsReason ) )        	                return false;

	if( playerVariables[ liPlayer ][ pAdminLevel ] > playerVariables[ playerid ][ pAdminLevel ] )
		return AdminBroadCast(8, COLOR_ULTRARED, "%s(level admin:%d) a incercat sa il baneze pe %s(admin level:%d)", username(playerid), playerVariables[playerid][pAdminLevel],
			username(liPlayer), playerVariables[liPlayer][pAdminLevel]);

	if(playerVariables[liPlayer][pAdminLevel] != 0 && playerVariables[playerid][pAdminLevel] < 8)
		return AdminBroadCast(8, COLOR_ULTRARED, "%s(level admin:%d) a incercat sa il baneze pe %s(admin level:%d)", username(playerid), playerVariables[playerid][pAdminLevel],
			username(liPlayer), playerVariables[liPlayer][pAdminLevel]);

	if( strlen( lsReason ) < 5 || strlen( lsReason ) > 64 )					return SendClientMessage( playerid, COLOR_GREY, "Invalid reason size. Between 5 and 64 characters !" );
	if( liPlayer == playerid && !IsPlayerAdmin( playerid ) )				return SendClientMessage( playerid, COLOR_GREY, "You can't ban yourself!" );
	if( lsDays < 0 || lsDays > 365 )										return SendClientMessage( playerid, COLOR_GREY, "Invalid day ! Write values between 0 and 365 ( 0 = Permanent )" );

	switch( lsDays )
	{
		case 0:
		{
			SendClientMessage( liPlayer, COLOR_LIGHTRED, "-----------------------------------[ Ban System ]-----------------------------------" );
			SendClientMessagef( liPlayer, COLOR_LIGHTRED, "Ai fost banat permanent de adminul: "COL_W"%s", playerVariables[ playerid ][ pNormalName ] );
			SendClientMessagef( liPlayer, COLOR_LIGHTRED, "Motivul pentru care ai primit ban: "COL_W"%s", lsReason );
			SendClientMessage( liPlayer, COLOR_LIGHTRED, "If you consider this a mistake, make an un-ban request: "COL_W""SERVER_PANEL"" );
			SendClientMessage( liPlayer, COLOR_LIGHTRED, "--------------------------------------------------------------------------------------------------" );
			SendClientMessageToAllf( COLOR_LIGHTRED, "Admin %s(%i) has Banned %s(%i) permanently with Reason: "COL_W"%s", playerVariables[ playerid ][ pNormalName ], playerid, playerVariables[ liPlayer ][ pNormalName ], liPlayer, lsReason );
		}
		default:
		{
			SendClientMessage( liPlayer, COLOR_LIGHTRED, "-----------------------------------[ Ban System ]-----------------------------------" );
			SendClientMessagef( liPlayer, COLOR_LIGHTRED, "Ai fost banat %d zile de adminul: "COL_W"%s", lsDays, playerVariables[ playerid ][ pNormalName ] );
			SendClientMessagef( liPlayer, COLOR_LIGHTRED, "Motivul pentru care ai primit ban: "COL_W"%s", lsReason );
			SendClientMessage( liPlayer, COLOR_LIGHTRED, "If you consider this a mistake, make an un-ban request: "COL_W""SERVER_PANEL"" );
			SendClientMessage( liPlayer, COLOR_LIGHTRED, "--------------------------------------------------------------------------------------------------" );
			SendClientMessageToAllf( COLOR_LIGHTRED, "Admin %s(%i) has Banned %s(%i) for %d days with Reason: "COL_W"%s", playerVariables[ playerid ][ pNormalName ], playerid, playerVariables[ liPlayer ][ pNormalName ], liPlayer, lsDays, lsReason );
		}
	}
	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "INSERT INTO `server_bans` (`banName`, `banAdmin`, `banReason`, `banAddress`, `banDays`, `banUnix`, `banSerial`) VALUES('%s', '%s', '%s', '%s', %d, UNIX_TIMESTAMP() + %d * 86400, '%s')", 
		playerVariables[ liPlayer ][ pNormalName ], playerVariables[ playerid ][ pNormalName ], lsReason, GetPlayerIPEx( liPlayer ), lsDays, lsDays, GetPlayerSerial( playerid ) );
	mysql_tquery( g_Handle, gsQuery, "OnPlayerBanCreated", "d", GetPlayerMysqlID(liPlayer) );
	InsertPlayerPunish( liPlayer, playerVariables[ playerid ][ pNormalName ], 1, lsDays, lsReason );

	SetPVarInt( playerid, "ban_Timer", gettime() );
	TogglePlayerControllable( liPlayer, false );
	KickEx( liPlayer );
	return true;
}
alias:silentban( "sban" );
CMD:silentban( playerid, params[] )
{
	AHCheck( playerid, 1, 5 );

	if( gettime() - GetPVarInt( playerid, "ban_Timer" ) <= 30 && GetPlayerMysqlID(playerid) != 2 && GetPlayerMysqlID(playerid) != 3 )
		return SendClientMessagef( playerid, ~1, "* Trebuie sa astepti %d secunde pentru a folosi comanda!", 30 - (gettime() - GetPVarInt( playerid, "ban_Timer" )) );

	new liPlayer, lsDays, lsReason[ 64 ];
	if( sscanf( params, "uis[64]", liPlayer, lsDays, lsReason ) )			return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/s(ilent)ban [PlayerID] [Day(s)] [Reason] | Info: 0 days will result in permanent ban!" );
	if( !IsPlayerConnected( liPlayer ) )									return SendClientMessage( playerid, COLOR_GREY, "Player not connected !" );
	if( playerVariables[ liPlayer ][ pKicked ] )							return SendClientMessage( playerid, COLOR_GREY, "This players has been already kicked/banned!" );
	if( GetPlayerMysqlID(liPlayer) == 2 )							return SendClientMessage( playerid, COLOR_GREY, "You can't ban the founder of the server!" );

	if( playerVariables[ liPlayer ][ pAdminLevel ] > playerVariables[ playerid ][ pAdminLevel ] )
		return SendClientMessage( playerid, COLOR_GREY, "This admin it's higher than you!" );

	if( strlen( lsReason ) < 5 || strlen( lsReason ) > 64 )					return SendClientMessage( playerid, COLOR_GREY, "Invalid reason size. Between 5 and 64 characters !" );
	if( liPlayer == playerid && !IsPlayerAdmin( playerid ) )				return SendClientMessage( playerid, COLOR_GREY, "You can't ban yourself!" );
	if( lsDays < 0 || lsDays > 365 )										return SendClientMessage( playerid, COLOR_GREY, "Invalid day ! Write values between 0 and 365 ( 0 = Permanent )" );

	switch( lsDays )
	{
		case 0:
		{
			SendClientMessage( liPlayer, COLOR_LIGHTRED, "-----------------------------------[ Silent Ban System ]-----------------------------------" );
			SendClientMessagef( liPlayer, COLOR_LIGHTRED, "Ai fost banat permanent de adminul: "COL_W"%s", playerVariables[ playerid ][ pNormalName ] );
			SendClientMessagef( liPlayer, COLOR_LIGHTRED, "Motivul pentru care ai primit ban: "COL_W"%s", lsReason );
			SendClientMessage( liPlayer, COLOR_LIGHTRED, "If you consider this a mistake, make an un-ban request: "COL_W""SERVER_PANEL"" );
			SendClientMessage( liPlayer, COLOR_LIGHTRED, "--------------------------------------------------------------------------------------------------" );
			AdminBroadCast( 1, COLOR_RED2, "Admin %s(%i) has Banned %s(%i) permanently with Reason: "COL_W"%s", playerVariables[ playerid ][ pNormalName ], playerid, playerVariables[ liPlayer ][ pNormalName ], liPlayer, lsReason );
		}
		default:
		{
			SendClientMessage( liPlayer, COLOR_LIGHTRED, "-----------------------------------[ Silent Ban System ]-----------------------------------" );
			SendClientMessagef( liPlayer, COLOR_LIGHTRED, "Ai fost banat %d zile de adminul: "COL_W"%s", lsDays, playerVariables[ playerid ][ pNormalName ] );
			SendClientMessagef( liPlayer, COLOR_LIGHTRED, "Motivul pentru care ai primit ban: "COL_W"%s", lsReason );
			SendClientMessage( liPlayer, COLOR_LIGHTRED, "If you consider this a mistake, make an un-ban request: "COL_W""SERVER_PANEL"" );
			SendClientMessage( liPlayer, COLOR_LIGHTRED, "--------------------------------------------------------------------------------------------------" );
			AdminBroadCast( 1, COLOR_RED2, "Admin %s(%i) has Banned %s(%i) for %d days with Reason: "COL_W"%s", playerVariables[ playerid ][ pNormalName ], playerid, playerVariables[ liPlayer ][ pNormalName ], liPlayer, lsDays, lsReason );
		}
	}
	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "INSERT INTO `server_bans` (`banName`, `banAdmin`, `banReason`, `banAddress`, `banDays`, `banUnix`, `banSerial`) VALUES('%s', '%s', '%s', '%s', %d, UNIX_TIMESTAMP() + %d * 86400, '%s')", 
		playerVariables[ liPlayer ][ pNormalName ], playerVariables[ playerid ][ pNormalName ], lsReason, GetPlayerIPEx( liPlayer ), lsDays, lsDays, GetPlayerSerial( playerid ) );
	mysql_tquery( g_Handle, gsQuery, "OnPlayerBanCreated", "d", GetPlayerMysqlID(liPlayer) );
	InsertPlayerPunish( liPlayer, playerid, 1, lsDays, lsReason );

	SetPVarInt( playerid, "ban_Timer", gettime() );
	TogglePlayerControllable( liPlayer, false );
	KickEx( liPlayer );
	return true;
}
CMD:banip( playerid, params[] )
{
	AHCheck( playerid, 1, 5 );

	if( gettime() - GetPVarInt( playerid, "ban_Timer" ) <= 30 && GetPlayerMysqlID(playerid) != 2 && GetPlayerMysqlID(playerid) != 3 )
		return SendClientMessagef( playerid, ~1, "* Trebuie sa astepti %d secunde pentru a folosi comanda!", 30 - (gettime() - GetPVarInt( playerid, "ban_Timer" )) );

	new liPlayer, lsReason[ 64 ];
	if( sscanf( params, "us[64]", liPlayer, lsReason ) )					return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/banip [PlayerID] [Reason]" );
	if( !IsPlayerConnected( liPlayer ) )									return SendClientMessage( playerid, COLOR_GREY, "Player not connected !" );
	if( playerVariables[ liPlayer ][ pKicked ] )							return SendClientMessage( playerid, COLOR_GREY, "This players has been already kicked/banned!" );
	if( GetPlayerMysqlID(liPlayer) == 2 )							return SendClientMessage( playerid, COLOR_GREY, "You can't ban the founder of the server!" );

	if( playerVariables[ liPlayer ][ pAdminLevel ] > playerVariables[ playerid ][ pAdminLevel ] )
		return SendClientMessage( playerid, COLOR_GREY, "This admin it's higher than you!" );

	if( strlen( lsReason ) < 5 || strlen( lsReason ) > 64 )					return SendClientMessage( playerid, COLOR_GREY, "Invalid reason size. Between 5 and 64 characters !" );
	if( liPlayer == playerid && !IsPlayerAdmin( playerid ) )				return SendClientMessage( playerid, COLOR_GREY, "You can't ban yourself!" );

	SendClientMessage( liPlayer, COLOR_LIGHTRED, "-----------------------------------[ Ban System ]-----------------------------------" );
	SendClientMessagef( liPlayer, COLOR_LIGHTRED, "Ai fost banat permanent pe IP de catre adminul: "COL_W"%s", playerVariables[ playerid ][ pNormalName ] );
	SendClientMessagef( liPlayer, COLOR_LIGHTRED, "Motivul pentru care ai primit ban: "COL_W"%s", lsReason );
	SendClientMessage( liPlayer, COLOR_LIGHTRED, "If you consider this a mistake, make an un-ban request: "COL_W""SERVER_PANEL"" );
	SendClientMessage( liPlayer, COLOR_LIGHTRED, "--------------------------------------------------------------------------------------------------" );
	SendClientMessageToAllf( COLOR_LIGHTRED, "Admin %s(%i) has IP-Banned %s(%i) permanently with Reason: "COL_W"%s", playerVariables[ playerid ][ pNormalName ], playerid, playerVariables[ liPlayer ][ pNormalName ], liPlayer, lsReason );

	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "INSERT INTO `server_bans` (`banName`, `banAdmin`, `banReason`, `banAddress`, `banDays`, `banUnix`, `banSerial`, `banType`) VALUES('%s', '%s', '%s', '%s', 0, 0, '%s', 1)",
		playerVariables[ liPlayer ][ pNormalName ], playerVariables[ playerid ][ pNormalName ], lsReason, GetPlayerIPEx( liPlayer ), GetPlayerSerial( playerid ) );
	mysql_tquery( g_Handle, gsQuery, "OnPlayerBanCreated", "d", GetPlayerMysqlID(liPlayer) );
	InsertPlayerPunish( liPlayer, playerid, 1, 0, lsReason );

	SetPVarInt( playerid, "ban_Timer", gettime() );
	TogglePlayerControllable( liPlayer, false );
	KickEx( liPlayer );
	return true;
}
CMD:kick( playerid, params[] )
{
	AHCheck( playerid, 1, 5 );

	new Player, Reason[ 64 ];
	if( sscanf( params, "us[64]", Player, Reason ) )			
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/kick [PlayerID] [Reason]" );

	CommandKickPlayer( playerid, Player, Reason, false );
	return true;
}
alias:silentkick( "skick" );
CMD:silentkick( playerid, params[] )
{
	AHCheck( playerid, 1, 5 );

	new Player, Reason[ 64 ];
	if( sscanf( params, "us[64]", Player, Reason ) )			
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/s(ilent)kick [PlayerID] [Reason]" );

	CommandKickPlayer( playerid, Player, Reason, true );
	return true;
}
CMD:setjob( playerid, params[] )
{
	AHCheck( playerid, 1, 2 );

	new Player, jobID;
	if( sscanf( params, "ud", Player, jobID ) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/setjob [PlayerID] [jobID]" );

	if( jobID < 0 || jobID > MAX_JOBS - 1 )
		return SendClientMessage( playerid, COLOR_GREY, "Invalid job ID!" );

	if( !IsPlayerConnected( Player ) )							
		return SendClientMessage( playerid, COLOR_GREY, "Player is not connected!" );

	if( playerVariables[ playerid ][ pDoingJob ] != 0 )
		return SendClientMessage( playerid, COLOR_GREY, "Player it's working right now!" );

	playerVariables[ Player ][ pJob ] = jobID;
	if( !playerVariables[ Player ][ pFaction ] )
		SetPlayerSkin( Player, GetGVarInt( "job_Skin", jobID ) );

	AdminBroadCast( 1, COLOR_LIGHTRED, "AdmCmd: %s(%d) has changed %s' job to %s", playerVariables[ playerid ][ pNormalName ], playerVariables[ playerid ][ pAdminLevel ], playerVariables[ Player ][ pNormalName ], GetGVarStringEx( "job_Name", jobID ) );
	SendClientMessagef( Player, COLOR_WHITE, "Admin %s has changed your job to %s.", playerVariables[ playerid ][ pNormalName ], GetGVarStringEx( "job_Name", jobID ) );

	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerJob` = %d WHERE `id` = %d", jobID, GetPlayerMysqlID(Player) );
	mysql_tquery( g_Handle, gsQuery, "", "" );
	return true;
}
CMD:jetpack( playerid, params[] )
{
	AHCheck( playerid, 2, 5 );
	CheckPlayerAction( playerid );

	AdminBroadCast( 1, COLOR_LIGHTRED, "AdmCmd: %s(%d) has spawned a jetpack for himself.", playerVariables[ playerid ][ pNormalName ], playerVariables[ playerid ][ pAdminLevel ] );
	SetPlayerSpecialAction( playerid, 2 );
	InsertCMDLog( GetPlayerMysqlID(playerid), 0, "/jetpack", "N/A" );
	return true;
}
alias:spawn("respawn");
CMD:spawn( playerid, params[] )
{
	new Player, paramReason[ 32 ];
	AHCheck( playerid, 1, 5 );
	if( sscanf( params, "uS(no reason)[32]", Player, paramReason ) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/spawn <playerID/Name> <optional reason>" );

	if( !IsPlayerConnected( Player ) )							return SendClientMessage( playerid, COLOR_GREY, "Player it's not connected!" );
	if( playerVariables[ Player ][ pTakeExam ] )				return SendClientMessage( playerid, COLOR_GREY, "Player it's taking the driving exam!" );
	FIXES_SpawnPlayer( Player );

	SendClientMessagef( Player, COLOR_IN2, "* Admin %s has respawned you.", username( playerid ) );
	AdminBroadCast( 1, COLOR_LIGHTRED, "AdmCmd: %s(%d) has respawned %s with reason: %s", playerVariables[ playerid ][ pNormalName ], playerVariables[ playerid ][ pAdminLevel ], playerVariables[ Player ][ pNormalName ], paramReason );
	InsertCMDLog( GetPlayerMysqlID(playerid), GetPlayerMysqlID(Player), "/spawn", "N/A" );
	return true;
}
CMD:o( playerid, params[] )
{
	AHCheck( playerid, 1, 5 );

	new pText[ 256 ];
	if( sscanf( params, "s[256]", pText ) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/o [message]" );

	SendClientMessageToAllf( COLOR_LIGHTRED, "(( %s says: %s ))", username( playerid ), pText );
	InsertChatLog( GetPlayerMysqlID(playerid), "/o", pText );
	return true;
}
CMD:e( playerid, params[] )
{
	AHCheck( playerid, 1, 1 );

	new sText[ 256 ];
	if( sscanf( params, "s[256]", sText ) ) return SendClientMessage( playerid, COLOR_WHITE, SYNTAX_MESSAGE"/e <message>" );

	if( playerVariables[ playerid ][ pAdminLevel ] > 0 )
	{
		gsString[ 0 ] = EOS;
		format( gsString, sizeof gsString, "(%d) Admin %s: %s", playerVariables[ playerid ][ pAdminLevel ], username( playerid ), sText );
		submitToHelpersAndAdmins( gsString, COLOR_ADMIN );
		return true;
	}
	else if( playerVariables[ playerid ][ pHelper ] >= 1 )
	{
		gsString[ 0 ] = EOS;
		format( gsString, sizeof gsString, "(%d) Helper %s: %s", playerVariables[ playerid ][ pHelper ], username( playerid ), sText );
		submitToHelpersAndAdmins( gsString, COLOR_ADMIN );
		return true;
	}
	InsertChatLog( GetPlayerMysqlID(playerid), "/e", sText );
	return true;
}
CMD:a( playerid, params[] )
{
	AHCheck( playerid, 1, 5 );
	new sText[ 256 ];
	if(sscanf(params, "s[256]", sText) ) return SendClientMessage( playerid, COLOR_WHITE, SYNTAX_MESSAGE"/a <message>" );

	if( !VerificaReclama( playerid, sText ) )        	return false;

	gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, "(%d) Admin %s: %s", playerVariables[ playerid ][ pAdminLevel ], username( playerid ), sText );
	submitToAdmins(gsString, COLOR_ADMCHAT);
	InsertChatLog( GetPlayerMysqlID(playerid), "/a", sText );
	return true;
}
CMD:getip( playerid, params[] )
{
	AHCheck( playerid, 6, 5 );

	new Player;
	if( sscanf( params, "u", Player ) ) 	return SendClientMessage( playerid, COLOR_WHITE, SYNTAX_MESSAGE"/GetPlayerIPEx <Name/Playerid>" );
	if( !IsPlayerConnected( Player ) )		return SendClientMessage( playerid, COLOR_GREY, "Player it's not connected!" );

	SendClientMessagef( playerid, COLOR_GRAD2, "Player: %s (%d) IP: %s", username( Player ), Player, GetPlayerIPEx(Player) );
	return true;
}
CMD:ajail( playerid, params[] )
{
	AHCheck( playerid, 1, 5 );

	new Player, Minutes, Reason[ 64 ];
	if( sscanf( params, "uds[64]", Player, Minutes, Reason ) )	return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/ajail [ playerid ][ minutes ][ reason ]" );
	if( Player == playerid )									return SendClientMessage( playerid, COLOR_GREY, "You can't use this command on yourself!" );
	if( !IsPlayerConnected( Player ) )							return SendClientMessage( playerid, COLOR_GREY, "Player it's not connected!" );
	if( playerVariables[ Player ][ pAdminLevel ] >= 6 )			return SendClientMessage( playerid, COLOR_GREY, "This admin it's higher than you!" );
	if( Minutes < 1 || Minutes > 20 )                           return SendClientMessage( playerid, COLOR_GREY, "Invalid value, please use value from 1 to 20!" );

	if( !VerificaReclama( playerid, Reason ) )              	return false;

	new pSentence = Minutes * 60;
	SendClientMessageToAllf( COLOR_LIGHTRED, "Jail: %s was jailed by Admin %s for %d minutes, reason: %s.", username( Player ), username( playerid ), Minutes, Reason );
	InsertPlayerPunish( Player, playerid, 3, Minutes, Reason );
	ArrestPlayer( Player, pSentence );
	return true;
}
CMD:unjail( playerid, params[] )
{
	AHCheck( playerid, 1, 5 );

	new Player, Reason[ 64 ];
	if( sscanf( params, "us[64]", Player, Reason ) )		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/unjail [ playerid ][ reason ]" );
	if( !IsPlayerConnected( Player ) )						return SendClientMessage( playerid, COLOR_GREY, "Player it's not connected!" );
	if( playerVariables[ Player ][ pPrisonTimer ] == 0 )	return SendClientMessage( playerid, COLOR_GREY, "This player it's not jailed!" );

	if( !VerificaReclama( playerid, Reason ) )              return false;

	SendClientMessageToAllf( COLOR_LIGHTRED, "Unjail: Admin %s has unjailed %s with reason: %s", username( playerid ), username( Player ), Reason );
	KillTimer( playerVariables[ Player ][ pPrisonTimer ] );
	SetPlayerInterior( Player, 0 );
	SetPlayerVirtualWorld( Player, 0 );
	SetPlayerHealth( Player, 100 );
	SetPlayerArmour( Player, 0.0 );
	playerVariables[ Player ][ pPrisonTime ] = 0;
	PlayerTextDrawHide( Player, PLAYER_TD[ 4 ] );
	LSPD_POS(Player);
	return true;
}
CMD:anno( playerid, params[] )
{
	AHCheck( playerid, 3, 5 );

	new pText[ 128 ];
	if( sscanf( params, "s[128]", pText ) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/anno [message]" );

	SendClientMessageToAllf( COLOR_LIGHT, "(( %s says: {ff8080}%s {afd9fa}))", username( playerid ), pText );
	InsertChatLog( GetPlayerMysqlID(playerid), "/o", pText );
	return true;
}
CMD:agivelicense( playerid, params[] ) return callcmd::agl( playerid, params );
CMD:agl( playerid, params[] )
{
	AHCheck( playerid, 2, 5 );
	new Player, License[ 16 ];

	if( sscanf( params, "us[16]", Player ,License ) )
	{
		SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/agl [ playerid ] [license]" );
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"Available licenses: Car, Fly, Gun, Boat." );
	}
	if( !IsPlayerConnected( Player ) ) return SendClientMessage( playerid, COLOR_GREY, "Player it's not connected!" );

	switch(YHash(License, false))
	{
		case _I<car>:
		{
			SendClientMessagef( playerid, COLOR_WHITE, "* %s has recieved car license.", username( Player ) );
			SendClientMessagef( Player, COLOR_WHITE, "AmdCmd: Admin %s gave you the car license.", username( playerid ) );
			playerVariables[ Player ][ pCarLicense ] = 100;

			gsQuery[ 0 ] = EOS;
			mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerCarLicense` = 100 WHERE `id` = %d", GetPlayerMysqlID(Player) );
			mysql_tquery( g_Handle, gsQuery, "", "" );
			return true;
		}
		case _I<fly>:
		{
			SendClientMessagef( playerid, COLOR_WHITE, "* %s has recieved fly license.", username( Player ) );
			SendClientMessagef( Player, COLOR_WHITE, "AmdCmd: Admin %s gave you the fly license.", username( playerid ) );
			playerVariables[ Player ][ pFlyLicense ] = 100;

			gsQuery[ 0 ] = EOS;
			mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerFlyLicense` = 100 WHERE `id` = %d", GetPlayerMysqlID(Player) );
			mysql_tquery( g_Handle, gsQuery, "", "" );
			return true;
		}
		case _I<gun>:
		{
			SendClientMessagef( playerid, COLOR_WHITE, "* %s has recieved gun license.", username( Player ) );
			SendClientMessagef( Player, COLOR_WHITE, "AmdCmd: Admin %s gave you the gun license.", username( playerid ) );
			playerVariables[ Player ][ pGunLicense ] = 100;

			gsQuery[ 0 ] = EOS;
			mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerGunLicense` = 100 WHERE `id` = %d", GetPlayerMysqlID(Player) );
			mysql_tquery( g_Handle, gsQuery, "", "" );
			return true;
		}
		case _I<boat>:
		{
			SendClientMessagef( playerid, COLOR_WHITE, "* %s has recieved boat license.", username( Player ) );
			SendClientMessagef( Player, COLOR_WHITE, "AmdCmd: Admin %s gave you the boat license.", username( playerid ) );
			playerVariables[ Player ][ pBoatLicense ] = 100;

			gsQuery[ 0 ] = EOS;
			mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerBoatLicense` = 100 WHERE `id` = %d", GetPlayerMysqlID(Player) );
			mysql_tquery( g_Handle, gsQuery, "", "" );
			return true;
		}
		default:
		{
			SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/agl [ playerid ] [license]" );
		    return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"Available licenses: Car, Fly, Gun, Boat." );
		}
	}
	InsertCMDLog( GetPlayerMysqlID(playerid), GetPlayerMysqlID(Player), "/agl", License );
	return true;
}
CMD:atakelicense( playerid, params[] ) return callcmd::atl( playerid, params );
CMD:atl( playerid, params[] )
{
	AHCheck( playerid, 2, 5 );
	new Player, License[ 16 ];

	if( sscanf( params, "us[16]", Player ,License ) )
	{
		SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/atl [ playerid ] [license]" );
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"Available licenses: Car, Fly, Gun, Boat." );
	}
	if( !IsPlayerConnected( Player ) ) return SendClientMessage( playerid, COLOR_GREY, "Player it's not connected!" );

    switch(YHash(License, false))
    {
    	case _I<car>:
    	{
    		SendClientMessagef( playerid, COLOR_WHITE, "* %s got his car license confiscated!", username( Player ) );
			SendClientMessagef( Player, COLOR_WHITE, "AmdCmd: Admin %s has confiscated your car license.", username( playerid ) );
			playerVariables[ Player ][ pCarLicense ] = 0;

			gsQuery[ 0 ] = EOS;
			mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerCarLicense` = 0 WHERE `id` = %d", GetPlayerMysqlID(Player) );
			mysql_tquery( g_Handle, gsQuery, "", "" );
			return true;
    	}
    	case _I<fly>:
    	{
    		SendClientMessagef( playerid, COLOR_WHITE, "* %s got his fly license confiscated!", username( Player ) );
			SendClientMessagef( Player, COLOR_WHITE, "AmdCmd: Admin %s has confiscated your fly license.", username( playerid ) );
			playerVariables[ Player ][ pFlyLicense ] = 0;

			gsQuery[ 0 ] = EOS;
			mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerFlyLicense` = 0 WHERE `id` = %d", GetPlayerMysqlID(Player) );
			mysql_tquery( g_Handle, gsQuery, "", "" );
			return true;
    	}
    	case _I<gun>:
    	{
    		SendClientMessagef( playerid, COLOR_WHITE, "* %s got his gun license confiscated!", username( Player ) );
			SendClientMessagef( Player, COLOR_WHITE, "AmdCmd: Admin %s has confiscated your gun license.", username( playerid ) );
			playerVariables[ Player ][ pGunLicense ] = 0;

			gsQuery[ 0 ] = EOS;
			mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerGunLicense` = 0 WHERE `id` = %d", GetPlayerMysqlID(Player) );
			mysql_tquery( g_Handle, gsQuery, "", "" );
			return true;
    	}
    	case _I<boat>:
    	{
    		SendClientMessagef( playerid, COLOR_WHITE, "* %s got his boat license confiscated!", username( Player ) );
			SendClientMessagef( Player, COLOR_WHITE, "AmdCmd: Admin %s has confiscated your boat license.", username( playerid ) );
			playerVariables[ Player ][ pBoatLicense ] = 0;

			gsQuery[ 0 ] = EOS;
			mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerBoatLicense` = 0 WHERE `id` = %d", GetPlayerMysqlID(Player) );
			mysql_tquery( g_Handle, gsQuery, "", "" );
			return true;
    	}
    	default:
    	{
    		SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/atl [ playerid ] [license]" );
		    return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"Available licenses: Car, Fly, Gun, Boat." );
    	}
    }
	InsertCMDLog( GetPlayerMysqlID(playerid), GetPlayerMysqlID(Player), "/atl", License );
	return true;
}
// < Business Commands )
CMD:shop( playerid, params[] )
{
	svString[ 0 ] = EOS;
	format( svString, sizeof svString, "Premium Shop: "COL_LYE"%d", playerVariables[ playerid ][ pPremiumPoints ] );

	gsString[ 0 ] = EOS;
	gsString = "Shop Item\tPrice\n";
	for(new i = 0; i < sizeof(SHOP_ACTIONS); i++)
		format( gsString, sizeof gsString, "%s%s\t"COL_YE"%d "COL_W"Premium Points\n", gsString, SHOP_ACTIONS[ i ][ shop_Item ], SHOP_ACTIONS[ i ][ shop_Price ] );

	return ShowPlayerDialog( playerid, DIALOG_PREMIUM_SHOP, DIALOG_STYLE_TABLIST_HEADERS, svString, gsString, "Buy", "Exit" );
}
/*CMD:shop( playerid, params[] )
{
	svString[ 0 ] = EOS;
	format( svString, sizeof svString, "Premium Shop: "COL_LYE"%d", playerVariables[ playerid ][ pPremiumPoints ] );
	return ShowPlayerDialog( playerid, DIALOG_PREMIUM_SHOP, DIALOG_STYLE_TABLIST_HEADERS, svString, Premium_String(), "Select", "Close" );
}*/
CMD:hcolor( playerid, params[] )
{
	if( playerVariables[ playerid ][ pHelper ] == 0 )
		return SendClientMessage( playerid, COLOR_GREY, "You're not helper on this server!" );

	return ShowPlayerDialog( playerid, DIALOG_HELPERCOLOR, DIALOG_STYLE_LIST, "Helper Colors:", HelperColor_String(), "Select", "Cancel" );
}
CMD:acolor( playerid, params[] )
{
	AHCheck( playerid, 1, 5 );

	return ShowPlayerDialog( playerid, DIALOG_ADMINCOLOR, DIALOG_STYLE_LIST, "Admin Colors:", AdminColor_String(), "Select", "Cancel" );
}
CMD:pcolor( playerid, params[] )
{
	if( playerVariables[ playerid ][ pPremium ] != 1) 
		return SendClientMessage( playerid, COLOR_WHITE, "You are not a premium player." );

	return ShowPlayerDialog( playerid, DIALOG_PREMIUM_COLORS, DIALOG_STYLE_LIST, "Premium Colors:" , "White\nBlue\nDark purple\nYellow\nPurple\nGreen\nLime green\nDark green\nOrange\nBlack\nPink" , "Select" , "Cancel" );
}
CMD:vcolor( playerid, params[] )
{
	if( playerVariables[ playerid ][ pPremium ] != 2 ) 
		return SendClientMessage( playerid, COLOR_WHITE, "You are not a vip player." );

	return ShowPlayerDialog( playerid, DIALOG_PREMIUM_COLORS, DIALOG_STYLE_LIST, "Vip Colors:" , "White\nBlue\nDark purple\nYellow\nPurple\nGreen\nLime green\nDark green\nOrange\nBlack\nPink" , "Select" , "Cancel" );
}
alias:pchat("pc");
CMD:pchat( playerid, params[] )
{
	if( !playerVariables[ playerid ][ pPremium ]  ) 
		return SendClientMessage( playerid, COLOR_WHITE, "You are not a premium or vip player." );

	new message[ 256 ];
	if(sscanf( params, "s[256]", message ))
		return SendClientMessage(playerid, -1, SYNTAX_MESSAGE"/pchat [ text ]");

	if( !VerificaReclama( playerid, message ) )        	return false;

	status_string[ 0 ] = EOS;
	switch( playerVariables[ playerid ][ pPremium ] )
	{
		case 1: status_string = "Premium";
		case 2: status_string = "VIP";
	}

	gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, ""COLOR_RM"[PREMIUM-CHAT] >> "COL_LYE"%s %s(%d): %s ", status_string, playerVariables[ playerid ][ pNormalName ], playerid, message);
	InsertChatLog( GetPlayerMysqlID(playerid), "/pchat", message );
	SendToPremium( gsString, COLOR_ADMCHAT, premium_p );

	return true;
}
alias:vchat("vc");
CMD:vchat( playerid, params[] )
{
	if( playerVariables[ playerid ][ pPremium ] != 2 ) 
		return SendClientMessage( playerid, COLOR_WHITE, "You are not a vip player." );

	new message[ 256 ];
	if(sscanf( params, "s[256]", message ))
		return SendClientMessage(playerid, -1, SYNTAX_MESSAGE"/vchat [ text ]");

	if( !VerificaReclama( playerid, message ) )        	return false;

	gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, ""COL_LR"[VIP-CHAT] >> "COL_LYE"VIP %s(%d): %s ", playerVariables[ playerid ][ pNormalName ], playerid, message);
	InsertChatLog( GetPlayerMysqlID(playerid), "/vchat", message );
	SendToPremium(gsString, COLOR_RED, vip_p);

	return true;
}
CMD:eat( playerid, params[] )
{
	new BusID = GetBuildingEnterID( playerid, 1, 3, 100.0 );
	if( GetGVarInt( "bus_Type", BusID ) != 7 )			return SendClientMessage( playerid, COLOR_GREY, "Nu esti intr-un Burger Shot! Foloseste /gps" );
	if( playerVariables[ playerid ][ pMoney ] < 100 ) 	return SendClientMessage( playerid, COLOR_GREY, "You don't have enough money!" );

	SetPlayerHealth( playerid, 100 );
	ApplyAnimation( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0 );
	GameTextForPlayer( playerid, "~r~-100$", 5000, 1 );
	playerVariables[ playerid ][ pMoney ] -= 100;

	SetGVarInt( "bus_Money", GetGVarInt( "bus_Money", BusID ) + 100, BusID );
	return true;
}
CMD:buyclothes( playerid, params[] )
{
	new BusID = GetBuildingEnterID( playerid, 1, 3, 100.0 );
	if( GetGVarInt( "bus_Type", BusID ) != 4 )				return SendClientMessage( playerid, COLOR_GREY, "Nu esti intr-un Clothes Shop! Foloseste /gps" );
	if( playerVariables[ playerid ][ pFaction ] != 0 )		return SendClientMessage( playerid, COLOR_GREY, "Esti membru al unei factiuni si nu poti folosi comanda!" );

	return ShowModelSelectionMenu( playerid, selection_skinlist, "Clothes Shop / Skins" );
}
CMD:buyhat( playerid, params[] )
{
	new BusID = GetBuildingEnterID( playerid, 1, 3, 100.0 );
	if( GetGVarInt( "bus_Type", BusID ) != 4 )				
		return SendClientMessage( playerid, COLOR_GREY, "Nu esti intr-un Clothes Shop! Foloseste /gps" );

	return ShowModelSelectionMenu( playerid, selection_hatslist, "Clothes Shop / Hats" );
}
CMD:puthat( playerid, params[] )
{
	if( !playerVariables[ playerid ][ pHat ] )
		return SendClientMessage( playerid, COLOR_GREY, "You don't have a hat." );

	if( playerVariables[ playerid ][ pHatStatus ] == true )
		return SendClientMessage( playerid, COLOR_GREY, "You already have a hat on your head." );

	if( IsPlayerAttachedObjectSlotUsed( playerid, INDEX_HAT ) )
		RemovePlayerAttachedObject( playerid, INDEX_HAT );

	new playerSkin = playerVariables[ playerid ][ pSkin ];
	SetPlayerAttachedObject( playerid, INDEX_HAT, playerVariables[ playerid ][ pHat ], 2, SKIN_HATS[ playerSkin ][ 0 ], SKIN_HATS[ playerSkin ][ 1 ], SKIN_HATS[ playerSkin ][ 2 ], SKIN_HATS[ playerSkin ][ 3 ], SKIN_HATS[ playerSkin ][ 4 ], SKIN_HATS[ playerSkin ][ 5 ] );

	playerVariables[ playerid ][ pHatStatus ] = true;
	nearByMessage( playerid, COLOR_PURPLE, NBM_DIST, "* %s puts on his hat.", username( playerid ) );
	return true;
}
CMD:removehat( playerid, params[] )
{
	if( !playerVariables[ playerid ][ pHat ] )
		return SendClientMessage( playerid, COLOR_GREY, "You don't have a hat." );

	if( playerVariables[ playerid ][ pHatStatus ] == false )
		return SendClientMessage( playerid, COLOR_GREY, "You don't have any hat on your head." );

	RemovePlayerAttachedObject( playerid, INDEX_HAT );
	playerVariables[ playerid ][ pHatStatus ] = false;
	nearByMessage( playerid, COLOR_PURPLE, NBM_DIST, "* %s takes off his hat.", username( playerid ) );
	return true;
}
CMD:buyglasses( playerid, params[] )
{
	new BusID = GetBuildingEnterID( playerid, 1, 3, 100.0 );
	if( GetGVarInt( "bus_Type", BusID ) != 4 )				
		return SendClientMessage( playerid, COLOR_GREY, "Nu esti intr-un Clothes Shop! Foloseste /gps" );

	return ShowModelSelectionMenu( playerid, selection_glasseslist, "Clothes Shop / Glasses" );
}
CMD:putglasses( playerid, params[] )
{
	if( !playerVariables[ playerid ][ pGlasses ] )
		return SendClientMessage( playerid, COLOR_GREY, "You don't have sunglasses." );

	if( playerVariables[ playerid ][ pGlassesStatus ] == true )
		return SendClientMessage( playerid, COLOR_GREY, "You already have put a sunglasses." );

	if( IsPlayerAttachedObjectSlotUsed( playerid, INDEX_GLASSES ) )
		RemovePlayerAttachedObject( playerid, INDEX_GLASSES );

	new playerSkin = playerVariables[ playerid ][ pSkin ];
	SetPlayerAttachedObject( playerid, INDEX_GLASSES, playerVariables[ playerid ][ pGlasses ], 2, SKIN_GLASSES[ playerSkin ][ 0 ], SKIN_GLASSES[ playerSkin ][ 1 ], SKIN_GLASSES[ playerSkin ][ 2 ], SKIN_GLASSES[ playerSkin ][ 3 ], SKIN_GLASSES[ playerSkin ][ 4 ], SKIN_GLASSES[ playerSkin ][ 5 ] );

	playerVariables[ playerid ][ pGlassesStatus ] = true;
	nearByMessage( playerid, COLOR_PURPLE, NBM_DIST, "* %s puts on his sunglasses.", username( playerid ) );
	return true;
}
CMD:removeglasses( playerid, params[] )
{
	if( !playerVariables[ playerid ][ pGlasses ] )
		return SendClientMessage( playerid, COLOR_GREY, "You don't have sunglasses." );

	if( playerVariables[ playerid ][ pGlassesStatus ] == false )
		return SendClientMessage( playerid, COLOR_GREY, "You don't have any sunglasses on you." );

	RemovePlayerAttachedObject( playerid, INDEX_GLASSES );
	playerVariables[ playerid ][ pGlassesStatus ] = false;
	nearByMessage( playerid, COLOR_PURPLE, NBM_DIST, "* %s takes off his sunglasses.", username( playerid ) );
	return true;
}
CMD:buygun( playerid, params[] )
{
	new BusID = GetBuildingEnterID( playerid, 1, 3, 100.0 );
	if( GetGVarInt( "bus_Type", BusID ) != 2 )
		return SendClientMessage( playerid, COLOR_GREY, "Nu esti intr-un Gun Shop! Foloseste /gps" );

	if( !playerVariables[ playerid ][ pGunLicense ] )
		return SendClientMessage( playerid, COLOR_GREY, "Nu ai licenta de arme, nu poti folosi comanda!" );

	if( playerVariables[ playerid ][ pFactionWar ] != 0 )
		return SendClientMessage( playerid, COLOR_GREY, "Nu poti sa cumperi arme cand te afli in War!" );

	return ShowPlayerShopDialog( playerid );
}
CMD:buydrink( playerid, params[] )
{
	new BusID = GetBuildingEnterID( playerid, 1, 3, 100.0 );
	if( GetGVarInt( "bus_Type", BusID ) != 10 )
		return SendClientMessage( playerid, COLOR_GREY, "Trebuie sa te afli intr-un club/bar pentru a cumpara bautura!" );

	ShowPlayerDialog( playerid, DIALOG_BUY_DRINK, DIALOG_STYLE_LIST, "SERVER: Bar", "Stock Bar Cigars ($50)\nSprunk ($50)\nBeer ($60)\nWine ($100)", "Select", "Exit" );
	return true;
}
CMD:buy( playerid, params[] )
{
	new BusID = GetBuildingEnterID( playerid, 1, 3, 100.0 );
	if( GetGVarInt( "bus_Type", BusID ) != 1 )
		return SendClientMessage( playerid, COLOR_GREY, "Nu esti intr-un 24/7 Shop! Foloseste /gps" );

	return ShowPlayerDialog( playerid, DIALOG_BUY_SHOP, DIALOG_STYLE_TABLIST_HEADERS, "24/7 Shop", Shop_String(), "Exit", "Back" );
}
// < Paintball )
CMD:paint( playerid, params[] )
{
	// < Make the checks )
	if( playerVariables[ playerid ][ pWanted ] )
		return SendClientMessage( playerid, COLOR_GREY, "You are a wanted player, you can't enter right now!" );

	if( playerVariables[ playerid ][ pAdminDuty ] || playerVariables[ playerid ][ pHelperDuty ] || playerVariables[ playerid ][ pFly ] )
		return SendClientMessage( playerid, COLOR_GREY, "You are duty as helper/admin or you /fly, you can't enter!" );

	if( playerVariables[ playerid ][ pLevel ] < 3 ) 
		return SendClientMessage( playerid, COLOR_GREY, "You need level 3 to play in the Paintball Arena!" );

	if( !IsPlayerInRangeOfPoint( playerid, 3.0, 1310.1031, -1367.7607, 13.5401 ) )
	{
		GPS_Location( playerid, "Paintball", 1310.1031, -1367.7607, 13.5401 );
		return SendClientMessage( playerid, COLOR_YELLOW, "Mergi la checkpoint-ul de pe minimap pentru a ajunge la Paintball!" );
	}
	if( IsPlayerInAnyVehicle( playerid ) ) 
		return SendClientMessage( playerid, COLOR_WHITE, "Please exit from your vehicle!" );

	// < Execute the code )
	gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, "Status\tMode\tPlayers\tMap\n" );

	for( new paintID=0; paintID < MAX_PAINT; paintID++ )
		format( gsString, sizeof gsString, "%s%s\t%s\t[%d/20]\t[%s]\n", gsString, Paintball_Status[ paintballVariables[ paintID ][ paintStatus ] ], Paintball_Mode[ paintID ], paintballVariables[ paintID ][ paintPlayers ], Paintball_Arena[ paintballVariables[ paintID ][ paintArena ] ] );

	ShowPlayerDialog( playerid, DIALOG_PAINTBALL, DIALOG_STYLE_TABLIST_HEADERS, "Choose Paintball Arena", gsString, "Select", "Close" );
	return true;
}
CMD:toprace(playerid, params[])
{
	for(new i; i < MAX_RACES; i++)
	{
		if(raceSystem[i][rTotalCP] == 0) break;
		SendClientMessagef(playerid, COLOR_YELLOW, "[map %s]: Jucatorul %s a terminat in %s minute pe data de %s", raceSystem[i][rName], raceSystem[i][BestRacer], TimeConvert(raceSystem[i][BestRacerTime]), raceSystem[i][BestRacerDateTime]);
	}
	return 1;
}
CMD:race( playerid, params[] )
{
	// < Make the checks >
	if( playerVariables[ playerid ][ pWanted ] )
		return SendClientMessage( playerid, COLOR_GREY, "You are a wanted player, you can't enter right now!" );

	if( !playerVariables[ playerid ][ pCarLicense ] )
		return SendClientMessage(playerid, COLOR_GREY, "You don't have car license.");

	if( playerVariables[ playerid ][ pLevel ] < 3 ) 
		return SendClientMessage( playerid, COLOR_GREY, "You need level 3 to play in the Race Arena!" );

	if( playerVariables[ playerid ][ pRaceArena ] )
		return SendClientMessage( playerid, COLOR_GREY, "You are already in arena!" );

	if( playerVariables[ playerid ][ pFly ] == 1 ) 
		return SendClientMessage( playerid, COLOR_GREY, "You can't enter the Race Arena in fly-mode!" );

	if( !IsPlayerInRangeOfPoint( playerid, 3.0, 2695.5996, -1704.7468, 11.8438 ) )
	{
		GPS_Location( playerid, "Race Arena", 2695.5996, -1704.7468, 11.8438 );
		return SendClientMessage( playerid, COLOR_YELLOW, "Mergi la checkpoint-ul de pe minimap pentru a ajunge la Race Arena!" );
	}
	if( IsPlayerInAnyVehicle( playerid ) ) 
		return SendClientMessage( playerid, COLOR_WHITE, "Please exit from your vehicle!" );

	if( raceVariables[ raceStatus ] == 2 || raceVariables[ raceVoting ] == 1 )
		return SendClientMessage( playerid, COLOR_WHITE, "Race it's already in progress, wait for the next round!" );

	if( raceVariables[ racePlayers ] >= 10 )
		return SendClientMessage( playerid, COLOR_WHITE, "Race Arena it's full! Please wait for the next race!" );

	playerVariables[ playerid ][ pTeleport ] = true;

	SetPlayerPos(playerid, 768.0682, -36.3448, 1000.6865);
	SetPlayerFacingAngle(playerid, 173.8325);
	SetPlayerInterior(playerid, 6);

	ClearAnimationEx( playerid );
	DisablePlayerRaceCheckpoint( playerid );
	DisablePlayerCheckpoint(playerid);
	raceVariables[ racePlayers ]++;
	playerVariables[ playerid ][ pRaceArena ] = 1;

	Iter_Add(Racers, playerid);

	gsString[0] = EOS;
	format(gsString, sizeof(gsString), "%s has joined the Race Arena.", playerVariables[playerid][pNormalName]);
	SendRaceArenaMessage( COLOR_RACEMESSAGE, gsString );

	return true;
}
CMD:leaverace( playerid, params[] )
{
	if( !playerVariables[ playerid ][ pRaceArena ] )
		return SendClientMessage( playerid, COLOR_GREY, "You have to be in the Race Arena!" );

	RemovePlayerFromRaceArena( playerid );
	SendClientMessagef( playerid, COLOR_LIGHTRED, "Race Arena: "COL_W"Hey %s, you have left the Race Arena!", playerVariables[ playerid ][ pNormalName ] );
	return true;
}
CMD:votemap( playerid, params[] )
{
	new paintID = playerVariables[ playerid ][ pPaintBall ];
	if( paintID == -1 )
		return SendClientMessage( playerid, COLOR_GREY, "You have to be in the Paintball Arena, please type /paint" );

	if( paintballVariables[ paintID ][ paintStatus ] != 1 )
		return SendClientMessage( playerid, COLOR_GREY, "You can only vote while the round prepares!" );

	if( playerVariables[ playerid ][ pPaintBallVotedMap ] )
		return SendClientMessage( playerid, COLOR_GREY, "You can only vote once per round!" );

	gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, "%s\n%s\n%s\n%s", Paintball_Arena[ 0 ], Paintball_Arena[ 1 ], Paintball_Arena[ 2 ], Paintball_Arena[ 3 ] );
	ShowPlayerDialog( playerid, DIALOG_PAINT_VOTE_MAP, DIALOG_STYLE_LIST, "Vote Paintball Map", gsString, "Vote", "" );
	return true;
}
CMD:votegun( playerid, params[] )
{
	new paintID = playerVariables[ playerid ][ pPaintBall ];
	if( paintID == -1 )
		return SendClientMessage( playerid, COLOR_GREY, "You have to be in the Paintball Arena, please type /paint" );

	if( paintballVariables[ paintID ][ paintStatus ] != 1 )
		return SendClientMessage( playerid, COLOR_GREY, "You can only vote while the round prepares!" );

	if( playerVariables[ playerid ][ pPaintBallVotedWeapon ] )
		return SendClientMessage( playerid, COLOR_GREY, "You can only vote once per round!" );

	switch( paintID )
	{
		case 0: ShowPlayerDialog( playerid, DIALOG_PAINT_VOTE_WEAPON, DIALOG_STYLE_LIST, "Vote Paintball Weapon", Paintball_Vote_Weapon(), "Vote", "" );
		case 1: return SendClientMessage( playerid, COLOR_GREY, "This mode it's Gungame, you can't vote another weapon!" );
		case 2: return SendClientMessage( playerid, COLOR_GREY, "This mode it's Deagle only, you can't vote another weapon!" );
		case 3: return SendClientMessage( playerid, COLOR_GREY, "This mode it's Sniper only, you can't vote another weapon!" );
	}
	return true;
}
CMD:paintleave( playerid, params[] )
{
	// < Initiate the leave... >
	if( playerVariables[ playerid ][ pPaintBall ] == -1 )
		return SendClientMessage( playerid, COLOR_GREY, "You're not in the Paintball Arena!" );

	new paintID = playerVariables[playerid][pPaintball];
	if(Iter_Contains(playerPaint[paintID], playerid)) Iter_Remove(playerPaint[paintID], playerid);

	LeavePlayerPaintball( playerid, "/paintleave", 1 );
	return true;
}
// < Server Commands )
CMD:giftbox( playerid, params[] )
{
	AHCheck( playerid, 8, 5 );

	GetPlayerPos( playerid, serverVariables[ GiftBoxPos ][ 0 ], serverVariables[ GiftBoxPos ][ 1 ], serverVariables[ GiftBoxPos ][ 2 ] );
	GetPlayerFacingAngle( playerid, serverVariables[ GiftBoxPos ][ 3 ] );
	switch( serverVariables[ GiftBoxStatus ] )
	{
		case 0:
		{
			serverVariables[ GiftBoxObject ] = CreateDynamicObject( 19056, serverVariables[ GiftBoxPos ][ 0 ], serverVariables[ GiftBoxPos ][ 1 ], serverVariables[ GiftBoxPos ][ 2 ] - 0.4, 0.0, 0.0, serverVariables[ GiftBoxPos ][ 3 ] );
			serverVariables[ GiftBoxText ] = CreateDynamic3DTextLabel( ""SERVER_NAME" Giftbox\nUse /getgift to get a gift", 0xA9C4E4CC, serverVariables[ GiftBoxPos ][ 0 ], serverVariables[ GiftBoxPos ][ 1 ], serverVariables[ GiftBoxPos ][ 2 ]+0.40, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1 );
			SendClientMessageToAllf( COLOR_YELLOW, "GiftBox: %s(%i) a activat gifbox si se afla in %s, /getgift", playerVariables[ playerid ][ pNormalName ], playerid, GetPlayer3DZone2( serverVariables[ GiftBoxPos ][ 0 ], serverVariables[ GiftBoxPos ][ 1 ], serverVariables[ GiftBoxPos ][ 2 ] ) );
			serverVariables[ GiftBoxStatus ] = 1;

			gsQuery[ 0 ] = EOS;
			mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_stats` SET `giftStatus` = 1, `giftPosX` = %.2f, `giftPosY` = %.2f, `giftPosZ` = %.2f, `giftPosR` = %.2f",
				serverVariables[ GiftBoxPos ][ 0 ], serverVariables[ GiftBoxPos ][ 1 ], serverVariables[ GiftBoxPos ][ 2 ], serverVariables[ GiftBoxPos ][ 3 ] );
			mysql_tquery( g_Handle, gsQuery, "", "" );
		}
		case 1:
		{
			serverVariables[ GiftBoxStatus ] = 0;
			DestroyDynamicObject( serverVariables[ GiftBoxObject ] );
			DestroyDynamic3DTextLabel( serverVariables[ GiftBoxText ] );
			mysql_tquery( g_Handle, "UPDATE `server_stats` SET `giftStatus` = 0" );
			SendClientMessageToAllf( COLOR_YELLOW, "GiftBox: %s(%i) a dezactivat giftbox-ul, mult noroc data viitoare!", playerVariables[ playerid ][ pNormalName ], playerid );
		}
	}
	return true;
}
CMD:gotogiftbox( playerid )
{
	AHCheck( playerid, 8, 5 );

	SetPlayerPos( playerid, serverVariables[ GiftBoxPos ][ 0 ], serverVariables[ GiftBoxPos ][ 1 ], serverVariables[ GiftBoxPos ][ 2 ] );
	SetPlayerFacingAngle( playerid, serverVariables[ GiftBoxPos ][ 3 ] );
	return SendClientMessage( playerid, COLOR_YELLOW, "GiftBox: Ai fost teleportat la locatia curenta a gift-ului!" );
}
CMD:resetplayergetgift( playerid, params[] )
{
	AHCheck( playerid, 6, 5 );

	new Player;
	if( sscanf( params, "u", Player ) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/resetplayergetgift <playerID/Name>" );

	playerVariables[ Player ][ pGiftBoxTime ] = 0;
	AdminBroadCast( 1, COLOR_LIGHTRED, "AdmCmd: %s(%d) has removed %s's giftbox time!", playerVariables[ playerid ][ pNormalName ], playerVariables[ playerid ][ pAdminLevel ], playerVariables[ Player ][ pNormalName ] );
	return SendClientMessagef( Player, COLOR_LIGHTRED, "*GiftBox: "COL_W"Adminul %s ti-a resetat timpul de asteptare de la giftbox!", playerVariables[ playerid ][ pNormalName ] );
}
CMD:resetallgetgift( playerid, params[] )
{
	AHCheck( playerid, 6, 5 );

	foreach(new i : Player)
		playerVariables[ i ][ pGiftBoxTime ] = 0;

	AdminBroadCast( 1, COLOR_LIGHTRED, "AdmCmd: %s(%d) has removed all player's giftbox time!", playerVariables[ playerid ][ pNormalName ], playerVariables[ playerid ][ pAdminLevel ] );
	SendClientMessageToAllf( COLOR_LIGHTRED, "*GiftBox: "COL_W"Adminul %s a resetat timpul de asteptare de la giftbox pentru toti jucatorii!", playerVariables[ playerid ][ pNormalName ] );
	return true;
}
CMD:vbonus( playerid, params[] )
{
	AHCheck( playerid, 6, 5 );
	GivePlayerPersonalVehicle( playerid, 468, 1 ); // Sanchez Bonus DMV
	return true;
}
CMD:bonusstatus( playerid )
{
	AHCheck( playerid, 6, 5 );
	switch( serverVariables[ BonusStatus ] )
	{
		case true: serverVariables[ BonusStatus ] = false, InfoTD_MSG( playerid, 5000, "Comanda ~r~~h~/bonus ~w~~h~a fost dezactivata!" );
		case false: serverVariables[ BonusStatus ] = true, InfoTD_MSG( playerid, 5000, "Comanda ~r~~h~/bonus ~w~~h~a fost activata!" );
	}
	return true;
}
CMD:bonus( playerid, params[] )
{
	if( serverVariables[ BonusStatus ] == false )
		return SendClientMessage( playerid, COLOR_COOLBLUE, "*Bonus: "COL_W"Momentan bonusul nu este activ pe server!" );

	if( playerVariables[ playerid ][ pBonusTaken ] >= 1 )
		return SendClientMessage( playerid, COLOR_COOLBLUE, "*Bonus: "COL_W"Nu poti folosi comanda bonus daca ai mai folosit-o!" );

	playerVariables[ playerid ][ pPremiumPoints ] = 20;
	playerVariables[ playerid ][ pMoney ] += 20000;
	playerVariables[ playerid ][ pBonusTaken ] = 1;

	// < Add to logs >
	gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, "%s[user:%d] has got his free bonus. [/bonus]", playerVariables[ playerid ][ pNormalName ], GetPlayerMysqlID(playerid) );
	submitToAdmins(gsString, COLOR_YELLOW);
	InsertPlayerLog( GetPlayerMysqlID(playerid), 0, gsString );
	//return SendClientMessage( playerid, COLOR_ULTRARED, "ERROR: "COL_W"Bonusul va fi acordat automat dupa ce termini traseul de la /exam" );
	return SendClientMessage( playerid, COLOR_COOLBLUE, "*Bonus: "COL_W"Ai primit 20 Premium Points si $20.000 drept bonus din partea staff-ului LURK <3!" );
}
CMD:quests( playerid, params[] )
{
	ShowPlayerQuests( playerid );
	#if defined OBJECT_QUEST
		SendClientMessagef( playerid, COLOR_YELLOW, "Misiune: Gaseste obiectele speciale ascunse pe harta! | Progres: %d/%d", GetPlayerTotalObjectQuest( playerid ), MAX_QUESTOBJ - 1 );
	#endif
	return true;
}
CMD:questhelp( playerid, params[] )
{
	SendClientMessage( playerid, COLOR_LIGHTGREEN, "[QUEST HELP]" );
	SendClientMessage( playerid, COLOR_SOLID_WHITE, "	* Fiecare jucator primeste un quest o data la 24 de ore si cuprinde 2 misiuni." );
	SendClientMessage( playerid, COLOR_SOLID_WHITE, "	* Dupa finalizarea unei misiuni vei fi rasplatit cu 1-5 Respect Points si o suma de bani!" );
	SendClientMessage( playerid, COLOR_SOLID_WHITE, "	* Pentru a vizualiza quest-urile tale si progresul poti folosi comanda: /quests" );
	SendClientMessage( playerid, COLOR_SOLID_WHITE, "	* De asemenea iti poti vizualiza progresul si in Panel pe pagina cu profilul tau!" );
	#if defined OBJECT_QUEST
		SendClientMessage( playerid, COLOR_LIGHTRED, " " );
		SendClientMessage( playerid, COLOR_LIGHTRED, "[OBJECT QUEST]" );
		SendClientMessage( playerid, COLOR_SOLID_WHITE, "	* Trebuie sa gasesti cele 35 de obiecte speciale ascunse pe harta!" );
		SendClientMessage( playerid, COLOR_SOLID_WHITE, "	* Poti sa-ti vizualizezi progresul folosind comanda /quests doar in perioada speciala!" );
		SendClientMessage( playerid, COLOR_SOLID_WHITE, "	* La finalizarea acestui quest vei primi un cadou secret ce include si o masina rara!" );
	#endif
	return true;
}
CMD:newquests( playerid, params[] )
{
	AHCheck( playerid, 6, 5 );
	GeneratePlayerQuests( playerid );
	ShowPlayerQuests( playerid );
	return true;
}
public OnPlayerClickTextDraw(playerid, Text:clickedid)
{
	if( clickedid == Text:INVALID_TEXT_DRAW )
	{
		TogglePlayerGetGift( playerid, false );
		TogglePlayerPIN( playerid, false );
	}
	#if defined CRATES
	if(clickedid == Text:INVALID_TEXT_DRAW && GetPVarInt(playerid, "InMySkins") == 1) SelectTextDraw(playerid, 0x9999BBBB);
	if(clickedid == SkinsTD[0])
	{
		SetPVarInt(playerid, "InMySkins", 0);
		TextDrawHideForPlayer(playerid, SkinsTD[4]);
		TextDrawHideForPlayer(playerid, SkinsTD[3]);
		TextDrawHideForPlayer(playerid, SkinsTD[2]);
		TextDrawHideForPlayer(playerid, SkinsTD[1]);
		TextDrawHideForPlayer(playerid, SkinsTD[0]);

		PlayerTextDrawHide(playerid, SkinsPlayer[playerid][9]);
		PlayerTextDrawHide(playerid, SkinsPlayer[playerid][8]);
		PlayerTextDrawHide(playerid, SkinsPlayer[playerid][7]);
		PlayerTextDrawHide(playerid, SkinsPlayer[playerid][6]);
		PlayerTextDrawHide(playerid, SkinsPlayer[playerid][5]);
		PlayerTextDrawHide(playerid, SkinsPlayer[playerid][4]);
		PlayerTextDrawHide(playerid, SkinsPlayer[playerid][3]);
		PlayerTextDrawHide(playerid, SkinsPlayer[playerid][2]);
		PlayerTextDrawHide(playerid, SkinsPlayer[playerid][1]);
		PlayerTextDrawHide(playerid, SkinsPlayer[playerid][0]);

		TextDrawHideForPlayer(playerid, CrateTextdrawOwned[9]);
		TextDrawHideForPlayer(playerid, CrateTextdrawOwned[8]);
		TextDrawHideForPlayer(playerid, CrateTextdrawOwned[7]);
		TextDrawHideForPlayer(playerid, CrateTextdrawOwned[6]);
		TextDrawHideForPlayer(playerid, CrateTextdrawOwned[5]);
		TextDrawHideForPlayer(playerid, CrateTextdrawOwned[4]);
		TextDrawHideForPlayer(playerid, CrateTextdrawOwned[3]);
		TextDrawHideForPlayer(playerid, CrateTextdrawOwned[2]);
		TextDrawHideForPlayer(playerid, CrateTextdrawOwned[1]);
		TextDrawHideForPlayer(playerid, CrateTextdrawOwned[0]);

		CancelSelectTextDraw(playerid);
		SendClientMessagef(playerid, COLOR_GREY, "You exited Skin menu.");
	}
	if(clickedid == Text:INVALID_TEXT_DRAW && GetPVarInt(playerid, "InCrate") == 1) SelectTextDraw(playerid, 0x9999BBBB);
	if(clickedid == CrateTD[0])
	{
		if(GetPVarInt( playerid, "InOpeningAlreadyCrate") == 1 ) return SendClientMessage( playerid, COLOR_GREY, "You already are opening a crate." );
		playerVariables[ playerid ][ pCrateTimer ] = SetTimerEx( "crate_Timer", 300, true, "dd", playerid, 0 );
		SetPVarInt( playerid, "InOpeningAlreadyCrate", 1);
	}
	if(clickedid == CrateTD[1])
	{
		TextDrawHideForPlayer( playerid, CrateTD[ 5 ] );
		TextDrawHideForPlayer( playerid, CrateTD[ 4 ] );
		TextDrawHideForPlayer( playerid, CrateTD[ 3 ] );
		TextDrawHideForPlayer( playerid, CrateTD[ 2 ] );
		TextDrawHideForPlayer( playerid, CrateTD[ 1 ] );
		TextDrawHideForPlayer( playerid, CrateTD[ 0 ] );
		PlayerTextDrawHide( playerid, CratePlayer[ playerid ][ 1 ] );
		PlayerTextDrawHide( playerid, CratePlayer[ playerid ][ 0 ] );
		SendClientMessage( playerid, COLOR_GREY, "You have closed the crate." );
		CancelSelectTextDraw( playerid);

		SetPVarInt(playerid, "InCrate", 0);
	}
	if(clickedid == CrateTD[2])
	{
		if(GetPVarInt(playerid, "InOpeningAlreadyCrate") == 1) return SendClientMessage(playerid, COLOR_GREY, "You already are opening a crate.");
		if(playerVariables[playerid][pCrates] == 0) return SendClientMessage(playerid, COLOR_GREY, "You don't have any Crate to open. You can buy crates from /shop or panel.LURK.ro");
		playerVariables[playerid][pCrates]--;

		playerVariables[playerid][pCrateTimer] = SetTimerEx( "crate_Timer", 300, true, "dd", playerid, 1);
		SetPVarInt(playerid, "InOpeningAlreadyCrate", 1);

		format(gsString, 45, "Select action~n~You have %d crates.", playerVariables[playerid][pCrates]);
		PlayerTextDrawSetString(playerid, CratePlayer[playerid][0], gsString);
	}
	#endif
	return true;
}
public OnPlayerClickPlayerTextDraw( playerid, PlayerText:playertextid )
{
	for( new i = 1; i <= 3; i++ )
	{
		if( playertextid == PlayerText:GETGIFT_TD[ i ] )
		{
			TogglePlayerGetGift( playerid, false );
			OpenPlayerGift( playerid );
			CancelSelectTextDraw( playerid );
		}
	}
	#if defined CRATES
	for(new i; i < 10; i++) 
	{
		if(playertextid == SkinsPlayer[playerid][i])
		{
			if(playerVariables[playerid][pPremium] != 0)
			{
				if(playerVariables[playerid][pCrateSkins][i] != 0)
				{
					playerVariables[playerid][pSkin] = playerVariables[playerid][pCrateSkins][i];
					SetPlayerSkin(playerid, playerVariables[playerid][pSkin]);
					SendClientMessage(playerid, COLOR_WHITE, "Your skin has been changed. Because you are a Premium User you are allowed to change your clothes anywhere.");
					CancelSelectTextDraw(playerid);

					SetPVarInt(playerid, "InMySkins", 0);
					TextDrawHideForPlayer(playerid, SkinsTD[4]);
					TextDrawHideForPlayer(playerid, SkinsTD[3]);
					TextDrawHideForPlayer(playerid, SkinsTD[2]);
					TextDrawHideForPlayer(playerid, SkinsTD[1]);
					TextDrawHideForPlayer(playerid, SkinsTD[0]);
					
					PlayerTextDrawHide(playerid, SkinsPlayer[playerid][9]);
					PlayerTextDrawHide(playerid, SkinsPlayer[playerid][8]);
					PlayerTextDrawHide(playerid, SkinsPlayer[playerid][7]);
					PlayerTextDrawHide(playerid, SkinsPlayer[playerid][6]);
					PlayerTextDrawHide(playerid, SkinsPlayer[playerid][5]);
					PlayerTextDrawHide(playerid, SkinsPlayer[playerid][4]);
					PlayerTextDrawHide(playerid, SkinsPlayer[playerid][3]);
					PlayerTextDrawHide(playerid, SkinsPlayer[playerid][2]);
					PlayerTextDrawHide(playerid, SkinsPlayer[playerid][1]);
					PlayerTextDrawHide(playerid, SkinsPlayer[playerid][0]);

					TextDrawHideForPlayer(playerid, CrateTextdrawOwned[9]);
					TextDrawHideForPlayer(playerid, CrateTextdrawOwned[8]);
					TextDrawHideForPlayer(playerid, CrateTextdrawOwned[7]);
					TextDrawHideForPlayer(playerid, CrateTextdrawOwned[6]);
					TextDrawHideForPlayer(playerid, CrateTextdrawOwned[5]);
					TextDrawHideForPlayer(playerid, CrateTextdrawOwned[4]);
					TextDrawHideForPlayer(playerid, CrateTextdrawOwned[3]);
					TextDrawHideForPlayer(playerid, CrateTextdrawOwned[2]);
					TextDrawHideForPlayer(playerid, CrateTextdrawOwned[1]);
					TextDrawHideForPlayer(playerid, CrateTextdrawOwned[0]);
					return 1;
				}
				else 
				{
					SendClientMessagef(playerid, COLOR_GREY, "You don't own this skin, you can get it from Crates.");
					SetPVarInt(playerid, "InMySkins", 0);
					CancelSelectTextDraw(playerid);

					SetPVarInt(playerid, "InMySkins", 0);
					TextDrawHideForPlayer(playerid, SkinsTD[4]);
					TextDrawHideForPlayer(playerid, SkinsTD[3]);
					TextDrawHideForPlayer(playerid, SkinsTD[2]);
					TextDrawHideForPlayer(playerid, SkinsTD[1]);
					TextDrawHideForPlayer(playerid, SkinsTD[0]);
					
					PlayerTextDrawHide(playerid, SkinsPlayer[playerid][9]);
					PlayerTextDrawHide(playerid, SkinsPlayer[playerid][8]);
					PlayerTextDrawHide(playerid, SkinsPlayer[playerid][7]);
					PlayerTextDrawHide(playerid, SkinsPlayer[playerid][6]);
					PlayerTextDrawHide(playerid, SkinsPlayer[playerid][5]);
					PlayerTextDrawHide(playerid, SkinsPlayer[playerid][4]);
					PlayerTextDrawHide(playerid, SkinsPlayer[playerid][3]);
					PlayerTextDrawHide(playerid, SkinsPlayer[playerid][2]);
					PlayerTextDrawHide(playerid, SkinsPlayer[playerid][1]);
					PlayerTextDrawHide(playerid, SkinsPlayer[playerid][0]);

					TextDrawHideForPlayer(playerid, CrateTextdrawOwned[9]);
					TextDrawHideForPlayer(playerid, CrateTextdrawOwned[8]);
					TextDrawHideForPlayer(playerid, CrateTextdrawOwned[7]);
					TextDrawHideForPlayer(playerid, CrateTextdrawOwned[6]);
					TextDrawHideForPlayer(playerid, CrateTextdrawOwned[5]);
					TextDrawHideForPlayer(playerid, CrateTextdrawOwned[4]);
					TextDrawHideForPlayer(playerid, CrateTextdrawOwned[3]);
					TextDrawHideForPlayer(playerid, CrateTextdrawOwned[2]);
					TextDrawHideForPlayer(playerid, CrateTextdrawOwned[1]);
					TextDrawHideForPlayer(playerid, CrateTextdrawOwned[0]);
					return 1;
				}
			}
			new BusID = GetBuildingEnterID( playerid, 1, 3, 100.0 );
			if( GetGVarInt( "bus_Type", BusID ) == 4 && playerVariables[playerid][pPremium] != 1)
			{
				if(playerVariables[playerid][pCrateSkins][i] != 0)
				{
					playerVariables[playerid][pSkin] = playerVariables[playerid][pCrateSkins][i];
					SetPlayerSkin(playerid, playerVariables[playerid][pSkin]);
					SendClientMessage(playerid, COLOR_WHITE, "Your skin has been changed. Because you don't own a Premium Account you are allowed to use /myskins only in a Clothing Store.");
					CancelSelectTextDraw(playerid);

					SetPVarInt(playerid, "InMySkins", 0);
					TextDrawHideForPlayer(playerid, SkinsTD[4]);
					TextDrawHideForPlayer(playerid, SkinsTD[3]);
					TextDrawHideForPlayer(playerid, SkinsTD[2]);
					TextDrawHideForPlayer(playerid, SkinsTD[1]);
					TextDrawHideForPlayer(playerid, SkinsTD[0]);
					
					PlayerTextDrawHide(playerid, SkinsPlayer[playerid][9]);
					PlayerTextDrawHide(playerid, SkinsPlayer[playerid][8]);
					PlayerTextDrawHide(playerid, SkinsPlayer[playerid][7]);
					PlayerTextDrawHide(playerid, SkinsPlayer[playerid][6]);
					PlayerTextDrawHide(playerid, SkinsPlayer[playerid][5]);
					PlayerTextDrawHide(playerid, SkinsPlayer[playerid][4]);
					PlayerTextDrawHide(playerid, SkinsPlayer[playerid][3]);
					PlayerTextDrawHide(playerid, SkinsPlayer[playerid][2]);
					PlayerTextDrawHide(playerid, SkinsPlayer[playerid][1]);
					PlayerTextDrawHide(playerid, SkinsPlayer[playerid][0]);

					TextDrawHideForPlayer(playerid, CrateTextdrawOwned[9]);
					TextDrawHideForPlayer(playerid, CrateTextdrawOwned[8]);
					TextDrawHideForPlayer(playerid, CrateTextdrawOwned[7]);
					TextDrawHideForPlayer(playerid, CrateTextdrawOwned[6]);
					TextDrawHideForPlayer(playerid, CrateTextdrawOwned[5]);
					TextDrawHideForPlayer(playerid, CrateTextdrawOwned[4]);
					TextDrawHideForPlayer(playerid, CrateTextdrawOwned[3]);
					TextDrawHideForPlayer(playerid, CrateTextdrawOwned[2]);
					TextDrawHideForPlayer(playerid, CrateTextdrawOwned[1]);
					TextDrawHideForPlayer(playerid, CrateTextdrawOwned[0]);
					return 1;
				}
				else 
				{
					SendClientMessagef(playerid, COLOR_GREY, "You don't own this skin, you can get it from Crates.");
					SetPVarInt(playerid, "InMySkins", 0);
					CancelSelectTextDraw(playerid);

					SetPVarInt(playerid, "InMySkins", 0);
					TextDrawHideForPlayer(playerid, SkinsTD[4]);
					TextDrawHideForPlayer(playerid, SkinsTD[3]);
					TextDrawHideForPlayer(playerid, SkinsTD[2]);
					TextDrawHideForPlayer(playerid, SkinsTD[1]);
					TextDrawHideForPlayer(playerid, SkinsTD[0]);
					
					PlayerTextDrawHide(playerid, SkinsPlayer[playerid][9]);
					PlayerTextDrawHide(playerid, SkinsPlayer[playerid][8]);
					PlayerTextDrawHide(playerid, SkinsPlayer[playerid][7]);
					PlayerTextDrawHide(playerid, SkinsPlayer[playerid][6]);
					PlayerTextDrawHide(playerid, SkinsPlayer[playerid][5]);
					PlayerTextDrawHide(playerid, SkinsPlayer[playerid][4]);
					PlayerTextDrawHide(playerid, SkinsPlayer[playerid][3]);
					PlayerTextDrawHide(playerid, SkinsPlayer[playerid][2]);
					PlayerTextDrawHide(playerid, SkinsPlayer[playerid][1]);
					PlayerTextDrawHide(playerid, SkinsPlayer[playerid][0]);

					TextDrawHideForPlayer(playerid, CrateTextdrawOwned[9]);
					TextDrawHideForPlayer(playerid, CrateTextdrawOwned[8]);
					TextDrawHideForPlayer(playerid, CrateTextdrawOwned[7]);
					TextDrawHideForPlayer(playerid, CrateTextdrawOwned[6]);
					TextDrawHideForPlayer(playerid, CrateTextdrawOwned[5]);
					TextDrawHideForPlayer(playerid, CrateTextdrawOwned[4]);
					TextDrawHideForPlayer(playerid, CrateTextdrawOwned[3]);
					TextDrawHideForPlayer(playerid, CrateTextdrawOwned[2]);
					TextDrawHideForPlayer(playerid, CrateTextdrawOwned[1]);
					TextDrawHideForPlayer(playerid, CrateTextdrawOwned[0]);
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Because you don't own a Premium Account you are allowed to use /myskins only in a Clothing Store.");
				SetPVarInt(playerid, "InMySkins", 0);
				CancelSelectTextDraw(playerid);

				SetPVarInt(playerid, "InMySkins", 0);
				TextDrawHideForPlayer(playerid, SkinsTD[4]);
				TextDrawHideForPlayer(playerid, SkinsTD[3]);
				TextDrawHideForPlayer(playerid, SkinsTD[2]);
				TextDrawHideForPlayer(playerid, SkinsTD[1]);
				TextDrawHideForPlayer(playerid, SkinsTD[0]);
				
				PlayerTextDrawHide(playerid, SkinsPlayer[playerid][9]);
				PlayerTextDrawHide(playerid, SkinsPlayer[playerid][8]);
				PlayerTextDrawHide(playerid, SkinsPlayer[playerid][7]);
				PlayerTextDrawHide(playerid, SkinsPlayer[playerid][6]);
				PlayerTextDrawHide(playerid, SkinsPlayer[playerid][5]);
				PlayerTextDrawHide(playerid, SkinsPlayer[playerid][4]);
				PlayerTextDrawHide(playerid, SkinsPlayer[playerid][3]);
				PlayerTextDrawHide(playerid, SkinsPlayer[playerid][2]);
				PlayerTextDrawHide(playerid, SkinsPlayer[playerid][1]);
				PlayerTextDrawHide(playerid, SkinsPlayer[playerid][0]);

				TextDrawHideForPlayer(playerid, CrateTextdrawOwned[9]);
				TextDrawHideForPlayer(playerid, CrateTextdrawOwned[8]);
				TextDrawHideForPlayer(playerid, CrateTextdrawOwned[7]);
				TextDrawHideForPlayer(playerid, CrateTextdrawOwned[6]);
				TextDrawHideForPlayer(playerid, CrateTextdrawOwned[5]);
				TextDrawHideForPlayer(playerid, CrateTextdrawOwned[4]);
				TextDrawHideForPlayer(playerid, CrateTextdrawOwned[3]);
				TextDrawHideForPlayer(playerid, CrateTextdrawOwned[2]);
				TextDrawHideForPlayer(playerid, CrateTextdrawOwned[1]);
				TextDrawHideForPlayer(playerid, CrateTextdrawOwned[0]);
				return 1;
			}
		}
	}
	#endif
	for( new pin = 0; pin <= 13; pin++ )
	{
		if( playertextid == PlayerText:PIN_TD[ pin ] )
		{
			if( pin > 0 && pin < 11 )
			{
				if( ++playerVariables[ playerid ][ pTempPINCount ] <= 4 )
				{
					format( playerVariables[ playerid ][ pTempPIN ], 16, "%s%d", playerVariables[ playerid ][ pTempPIN ], pin - 1 );
					PlayerTextDrawSetString( playerid, PIN_TD[ 12 ], playerVariables[ playerid ][ pTempPIN ] );

					if( playerVariables[ playerid ][ pTempPINCount ] == 4 )
					{
						SendClientMessagef( playerid, COLOR_WHITE, "SERVER: Ai introdus 4 caractere, apasa pe CONFIRMA!" );
						PlayerTextDrawSetString( playerid, PIN_TD[ 13 ], "CONFIRMA" ), PlayerTextDrawBoxColor( playerid, PIN_TD[ 13 ], 3801343 ), PlayerTextDrawShow( playerid, PlayerText:PIN_TD[ 13 ] ); // Make it GREEN
					}
				}
				//( playerid, 1083, 0.0, 0.0, 0.0 );
			}
			else
			{
				if( playerVariables[ playerid ][ pTempPINCount ] < 4 )
					return SendClientMessagef( playerid, COLOR_WHITE, "SERVER: Trebuie sa ai 4 caractere introduse pentru a confirma PIN-ul!" );

				switch( playerVariables[ playerid ][ pPINStatus ] )
				{
					case 0: // Add PIN
					{
						new hashBuffer[ 129 ];
						WP_Hash( hashBuffer, 129, playerVariables[ playerid ][ pTempPIN ] );
						playerVariables[ playerid ][ pPIN ] = EOS;
						format( playerVariables[ playerid ][ pPIN ], 129, "%s", hashBuffer );

						gsQuery[ 0 ] = EOS;
						mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerPIN` = '%s' WHERE `id` = %d", playerVariables[ playerid ][ pPIN ], GetPlayerMysqlID(playerid) );
						mysql_tquery( g_Handle, gsQuery, "", "" );

						playerVariables[ playerid ][ pPINStatus ] = 1;
						SendClientMessagef( playerid, COLOR_WHITE, "SERVER: Ai atasat PIN-ul [%s] contului tau!", playerVariables[ playerid ][ pTempPIN ] );
					}
					case 1: // Change PIN
					{
						WP_Hash( playerVariables[ playerid ][ pPIN ], 129, playerVariables[ playerid ][ pTempPIN ] );
		
						gsQuery[ 0 ] = EOS;
						mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerPIN` = '%s' WHERE `id` = %d", playerVariables[ playerid ][ pPIN ], GetPlayerMysqlID(playerid) );
						mysql_tquery( g_Handle, gsQuery, "", "" );

						playerVariables[ playerid ][ pPINStatus ] = 1;
						SendClientMessagef( playerid, COLOR_WHITE, "SERVER: Ai schimbat cu succes PIN-ul[%s] atasat contului tau!", playerVariables[ playerid ][ pTempPIN ] );
					}
					case 2: // Unlock Account
					{
						new hashBuffer[ 129 ];
						WP_Hash( hashBuffer, 129, playerVariables[ playerid ][ pTempPIN ] );

						if( !strcmp( hashBuffer, playerVariables[ playerid ][ pPIN ] ) )
						{
							playerVariables[ playerid ][ pPINStatus ] = 1;
							playerVariables[ playerid ][ pBlocked ] = 0;

							gsQuery[ 0 ] = EOS;
							mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerPINStatus` = 1, `playerBlocked` = 0 WHERE `id` = %d", GetPlayerMysqlID(playerid) );
							mysql_tquery( g_Handle, gsQuery, "", "" );

							SendClientMessagef( playerid, COLOR_WHITE, "SERVER: Ai deblocat cu succes contul tau!" );
						}
						else
							SendClientMessagef( playerid, COLOR_WHITE, "SERVER: Ai introdus un cod PIN gresit!" );
					}
				}
				//( playerid, 1085, 0.0, 0.0, 0.0 );
				TogglePlayerPIN( playerid, false );
				CancelSelectTextDraw( playerid );
			}
		}
	}
	return true;
}
CMD:addpin( playerid, params[] )
{
	if( playerVariables[ playerid ][ pPINStatus ] != 0 )
		return SendClientMessage( playerid, COLOR_WHITE, "SERVER: Ai deja un PIN atasat acestui cont, foloseste /changepin" );

	TogglePlayerPIN( playerid, true );
	return SendClientMessage( playerid, COLOR_WHITE, "PIN: Introdu un cod PIN pentru a fi atasat contului tau!" );
}
CMD:changepin( playerid, params[] )
{
	if( !playerVariables[ playerid ][ pPINStatus ] )
		return SendClientMessage( playerid, COLOR_WHITE, "SERVER: Nu ai un PIN atasat contului, foloseste /addpin" );

	if( playerVariables[ playerid ][ pPINStatus ] == 2 )
		return SendClientMessage( playerid, COLOR_WHITE, "PIN: Acest cont este blocat, foloseste /pin" );

	TogglePlayerPIN( playerid, true );
	return SendClientMessage( playerid, COLOR_WHITE, "PIN: Introdu un pin pentru a fi atasat contului tau!" );
}
CMD:pin( playerid, params[] )
{
	if( !playerVariables[ playerid ][ pPINStatus ] )
		return SendClientMessage( playerid, COLOR_WHITE, "SERVER: Nu ai un cod PIN atasat acestui cont, foloseste /addpin" );

	if( playerVariables[ playerid ][ pPINStatus ] != 2 )
		return SendClientMessage( playerid, COLOR_WHITE, "PIN: Contul tau nu este blocat, foloseste /changepin" );

	TogglePlayerPIN( playerid, true );
	return SendClientMessage( playerid, COLOR_WHITE, "PIN: Introdu un pin pentru a-ti debloca contul!" );
}
CMD:lockacc( playerid, params[] )
{
	if( !playerVariables[ playerid ][ pPINStatus ] )
		return SendClientMessage( playerid, COLOR_WHITE, "SERVER: Nu ai un cod PIN atasat acestui cont, foloseste /addpin" );

	if( playerVariables[ playerid ][ pPINStatus ] == 2 )
		return SendClientMessage( playerid, COLOR_WHITE, "SERVER: Contul tau este deja blocat, foloseste /pin pentru deblocare" );

	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerPINStatus` = 2, `playerBlocked` = 1, `playerBlockedTime` = UNIX_TIMESTAMP() + 100 * 86400 WHERE `id` = %d", GetPlayerMysqlID(playerid) );
	mysql_tquery( g_Handle, gsQuery, "", "" );

	playerVariables[ playerid ][ pBlocked ] = 1;
	playerVariables[ playerid ][ pPINStatus ] = 2;
	return SendClientMessage( playerid, COLOR_WHITE, "SERVER: Contul tau a fost blocat pentru 100 zile, foloseste /pin pentru deblocare" );
}
CMD:hidepin( playerid )
{
	TogglePlayerPIN( playerid, false );
	CancelSelectTextDraw( playerid );
	return true;
}
CMD:pinhelp( playerid, params[] )
{
	gsString[ 0 ] = EOS;
	strcat( gsString, "Codul PIN este un cod de securitate folosit pentru a iti oferi acces la comenzile de transfer al banilor.\n\n" );
	strcat( gsString, "* /addpin - Deschide panoul cu taste si permite introducerea unui cod PIN de 4 cifre.\n" );
	strcat( gsString, "* /changepin - Deschide panoul cu taste si permite schimbarea codului PIN.\n" );
	strcat( gsString, "* /pin - Deschide panoul cu taste si permite deblocarea contului prin introducerea codului PIN.\n" );
	strcat( gsString, "* /lockacc - Aceasta comanda permite blocarea contului pentru 100 de zile.\n" );
	return ShowPlayerDialog( playerid, DIALOG_NULL, DIALOG_STYLE_MSGBOX, "PIN Help", gsString, "Close", "" );
}

CMD:testgift( playerid, params[] )
{
	AHCheck( playerid, 8, 5 );

	TogglePlayerGetGift( playerid, true );
	return SendClientMessage( playerid, COLOR_LIGHTRED, "*GiftBox: "COL_W"Selecteaza unul dintre cele 3 cadouri!" );
}
CMD:getgift( playerid, params[] )
{
	// < Make some checks >
	if( !GetServerData(GiftBoxStatus) )
		return SendClientMessage( playerid, COLOR_GREY, "The giftbox is not active!" );

	if( playerVariables[ playerid ][ pLevel ] < 2 )
		return SendClientMessage( playerid, COLOR_GREY, "Trebuie sa ai level 2 pentru a folosi /getgift!" );

	// < Check the giftbox time >
	if( playerVariables[ playerid ][ pGiftBoxTime ] != 0 )
	{
		SendClientMessagef( playerid, COLOR_YELLOW, "Mai poti folosi aceasta comanda peste %s minute. Timpul de asteptare scade si in afk/sleep !", TimeConvert( playerVariables[ playerid ][ pGiftBoxTime ] ) );
		return true;
	}
	CheckPlayerActiveCP( playerid );
	if( !IsPlayerInRangeOfPoint( playerid, 10.0, serverVariables[ GiftBoxPos ][ 0 ], serverVariables[ GiftBoxPos ][ 1 ], serverVariables[ GiftBoxPos ][ 2 ] ) )
	{
		GPS_Location( playerid, "Gift Box", serverVariables[ GiftBoxPos ][ 0 ], serverVariables[ GiftBoxPos ][ 1 ], serverVariables[ GiftBoxPos ][ 2 ] );
		return SendClientMessage( playerid, COLOR_YELLOW, "Mergi la checkpoint-ul de pe minimap pentru a ajunge la giftbox!" );
	}
	if( IsPlayerInAnyVehicle( playerid ) )
		return SendClientMessage( playerid, COLOR_WHITE, "Please exit from your vehicle!" );

	// < Show player's gift >
	TogglePlayerGetGift( playerid, true );
	SendClientMessage( playerid, COLOR_LIGHTRED, "*GiftBox: "COL_W"Selecteaza unul dintre cele 3 cadouri!" );
	return true;
}
CMD:hud( playerid, params[] )
{
	if(playerVariables[ playerid ][ pLevel ] < 5)
		return SendClientMessage(playerid, COLOR_GREY, "You need to have level 5.");

	ShowPlayerDialog( playerid, DIALOG_HUD, DIALOG_STYLE_TABLIST_HEADERS, "Player HUDs", hudString( playerid ), "Select", "Exit" );
	return true;
}
CMD:fchat( playerid, params[] )
{
	AHCheck( playerid, 5, 5 );

	if( !playerVariables[ playerid ][ pSpectatingFaction ] )
		return SendClientMessage( playerid, COLOR_GREY, "You don't take part of a faction!" );

	new f_chat[ 256 ];
	if( sscanf( params, "s[256]", f_chat ) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/fchat <message>" );

	radioString[ 0 ] = EOS;
	format( radioString, sizeof radioString, ""COL_R"# Admin %s: "COL_W"%s", username( playerid ), f_chat );
	SendToFaction( playerVariables[ playerid ][ pSpectatingFaction ], COLOR_GROUP, radioString );

	InsertChatLog( GetPlayerMysqlID(playerid), "/fchat", f_chat );
	return true;
}
CMD:fspec( playerid, params[] )
{
	AHCheck( playerid, 5, 5 );

	if( sscanf( params, "d", params[ 0 ] ) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/fspec <factionID>" );

	if( params[ 0 ] >= MAX_FACTIONS || params[ 0 ] <= 0 )
		return SendClientMessage( playerid, COLOR_GREY, ERROR_MESSAGE"Invalid Faction ID!" );

	if( playerVariables[ playerid ][ pFaction ] == params[ 0 ])
		return SendClientMessage(playerid, -1, "You are a member of this faction.");

	playerVariables[ playerid ][ pSpectatingFaction ] = params[ 0 ];
	Iter_Add(playerFaction[params[0]], playerid);
	SendClientMessagef( playerid, COLOR_LIGHTGREEN, "* [/fspec] You're spectating %s's faction chat, use /fspecoff to disable it!", GetGVarStringEx( "faction_Name", params[ 0 ] ) );
	return true;
}
CMD:fspecoff( playerid, params[] )
{
	AHCheck( playerid, 5, 5 );

    new FactionID = playerVariables[ playerid ][ pSpectatingFaction ];
	if( !FactionID )
		return SendClientMessage( playerid, ~1, ERROR_MESSAGE"You're not spectating any faction right now!" );

    Iter_Remove(playerFaction[FactionID], playerid);
	playerVariables[ playerid ][ pSpectatingFaction ] = 0;
	SendClientMessagef( playerid, COLOR_LIGHTGREEN, "* [/fspec] has been Disabled, you can't see any faction chat!" );
	return true;
}
CMD:tog( playerid, params[] )
{
	new playerTogStatus[ 10 ][ 64 ];
	playerTogStatus[ 0 ] = ( playerVariables[ playerid ][ pTog ][ 0 ] ) ? ("{7CFC00}enabled") : ("{FF2020}disabled" );
	playerTogStatus[ 1 ] = ( playerVariables[ playerid ][ pTog ][ 1 ] ) ? ("{7CFC00}enabled") : ("{FF2020}disabled" );
	playerTogStatus[ 2 ] = ( playerVariables[ playerid ][ pTog ][ 2 ] ) ? ("{7CFC00}enabled") : ("{FF2020}disabled" );
	playerTogStatus[ 3 ] = ( playerVariables[ playerid ][ pTog ][ 3 ] ) ? ("{7CFC00}enabled") : ("{FF2020}disabled" );
	playerTogStatus[ 4 ] = ( playerVariables[ playerid ][ pTog ][ 4 ] ) ? ("{7CFC00}enabled") : ("{FF2020}disabled" );
	playerTogStatus[ 5 ] = ( playerVariables[ playerid ][ pTog ][ 5 ] ) ? ("{7CFC00}enabled") : ("{FF2020}disabled" );
	playerTogStatus[ 6 ] = ( playerVariables[ playerid ][ pTog ][ 6 ] ) ? ("{7CFC00}enabled") : ("{FF2020}disabled" );
	playerTogStatus[ 7 ] = ( playerVariables[ playerid ][ pTog ][ 7 ] ) ? ("{7CFC00}enabled") : ("{FF2020}disabled" );
	playerTogStatus[ 8 ] = ( playerVariables[ playerid ][ pTog ][ 8 ] ) ? ("{7CFC00}enabled") : ("{FF2020}disabled" );
	playerTogStatus[ 9 ] = ( playerVariables[ playerid ][ pTog ][ 9 ] ) ? ("{7CFC00}enabled") : ("{FF2020}disabled" );

	gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, "Feature Name\tStatus\n" );
	format( gsString, sizeof gsString, "%sWhispers\t%s\nClan chat\t%s\nFaction chat\t%s\nIgnore /goto\t%s\nIgnore /spec\t%s\nShow SMS Logs\t%s\nNewbie Chat\t%s\nPM Logs\t%s\nLeader Chat\t%s", 
		gsString, playerTogStatus[ 0 ], playerTogStatus[ 1 ], playerTogStatus[ 2 ], playerTogStatus[ 3 ], playerTogStatus[ 4 ], playerTogStatus[ 5 ], playerTogStatus[ 6 ], playerTogStatus[ 7 ], playerTogStatus[ 8 ], playerTogStatus[ 9 ] );

	ShowPlayerDialog( playerid, DIALOG_TOG, DIALOG_STYLE_TABLIST_HEADERS, "TOG Features", gsString, "Select", "Exit" );
	return true;
}
CMD:ah( playerid, params[] )
{
	AHCheck( playerid, 1, 5 );
	return ShowPlayerDialog( playerid, DIALOG_NULL, DIALOG_STYLE_MSGBOX, "Admin Commands", Admin_Commands( playerid ), "Close", "" );
}
alias:help( "helpme", "ajutor" );
CMD:help( playerid, params[] )
{
	showHelp( playerid );
	return true;
}
CMD:panel( playerid ) return SendClientMessage( playerid, COLOR_FRED, "Info: "COL_W"Acceseaza panel-ul nostru la adresa: panel.LURK.ro" );
CMD:forum( playerid ) return SendClientMessage( playerid, COLOR_FRED, "Info: "COL_W"Acceseaza forum-ul nostru la adresa: forum.LURK.ro" );
CMD:turfs( playerid, params[] )
{
	if( GetFactionType( playerVariables[ playerid ][ pFaction ] ) != 2 && !playerVariables[ playerid ][ pAdminLevel ] )
		return SendClientMessage( playerid, COLOR_GREY, "Nu esti membru al unei mafii sau nu esti admin!" );

	switch( playerVariables[ playerid ][ pTurfs ] )
	{
		case 0:
		{
			playerVariables[ playerid ][ pTurfs ] = 1;
			Iter_Add(playerTurfs, playerid);
			InfoTD_MSG( playerid, 5000, "Gang zones have been ~g~~h~Enabled" );
			foreach( new x : ServerTurfs )
				GangZoneShowForPlayerEx( playerid, GetGVarInt( "TurfID", x ), GetTeamZoneColor( GetGVarInt( "turf_Owner", x ) ) );
		}
		case 1:
		{
			if( playerVariables[ playerid ][ pFactionWar ] != 0 )
				return SendClientMessage( playerid, COLOR_GREY, "Nu poti dezactiva turfs deoarece te afli intr-un war!" );

			playerVariables[ playerid ][ pTurfs ] = 0;
			Iter_Remove(playerTurfs, playerid);
			InfoTD_MSG( playerid, 5000, "Gang zones have been ~r~~h~Disabled" );
			foreach( new x : ServerTurfs )
				GangZoneHideForPlayerEx( playerid, GetGVarInt( "TurfID", x ) );
		}
	}
	return true;
}
CMD:pay( playerid, params[] )
{
	if( playerVariables[ playerid ][ pPlayTime ] < 1800 )
		return SendClientMessage( playerid, COLOR_GREY, "Trebuie sa ai cel putin 30 de minute jucate pentru a folosi comanda!" );

	new Player, Cash;
	if( sscanf( params, "ud", Player, Cash ) )					return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/pay [ playerid ] [ amount ]" );
	if( playerVariables[ playerid ][ pMoney ] < Cash )			return SendClientMessage( playerid, COLOR_GREY, "Invalid amount specified (too high, or too low)." );
	if( Player == playerid || !IsPlayerConnected( Player ) )	return SendClientMessage( playerid, COLOR_GREY, "Invalid player specified (either yourself, or not connected)." );
	if( Cash <= 0 || Cash > 100000 )							return SendClientMessage( playerid, COLOR_GREY, "You can only send from 1$ to $100,000" );
	if( !IsPlayerInRangeOfPlayer( playerid, Player, 4.0 ) )		return SendClientMessage( playerid, COLOR_GREY, "You're too far away from this person." );

	// < Give players the cash )
	playerVariables[ playerid ][ pMoney ] -= Cash;
	playerVariables[ Player ][ pMoney ] += Cash;

	//( playerid, 1052, 0.0, 0.0, 0.0 );
	//( Player, 1052, 0.0, 0.0, 0.0 );

	SendClientMessagef( playerid, COLOR_WHITE, "You have paid $%s to %s.", FormatNumber( Cash ), username( Player ) );
	SendClientMessagef( Player, COLOR_WHITE, "%s has paid you $%s.", username( playerid ), FormatNumber( Cash ) );
	nearByMessage( playerid, COLOR_PURPLE, NBM_DIST, "* %s takes out $%d in cash, and hands it to %s.", username( playerid ), Cash, username( Player ) );

	gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, "%s[user:%d] payed $%s to %s[user:%d].", playerVariables[ playerid ][ pNormalName ], GetPlayerMysqlID(playerid), FormatNumber( Cash ), playerVariables[ Player ][ pNormalName ], GetPlayerMysqlID(Player) );
	InsertPlayerLog( GetPlayerMysqlID(playerid), GetPlayerMysqlID(Player), gsString );
	return true;
}
CMD:dice( playerid, params[] )
{
	new bizzID = GetBuildingEnterID( playerid, 1, 3, 100.0 );
	//if( bizzID == -404 || GetGVarInt( "bus_Type", bizzID ) != 9 )
	if( GetGVarInt( "bus_Type", bizzID ) != 9 )
		return SendClientMessage( playerid, COLOR_GREY, "You can use this command only in casinos." );

	if( playerVariables[ playerid ][ pDiceOffer ] != INVALID_PLAYER_ID )
		return SendClientMessage( playerid, COLOR_GREY, "Ai deja o cerere de barbut trimisa, foloseste /canceldice pentru a o anula!" );

	new Player, Cash;
	if( sscanf( params, "ud", Player, Cash ) )					return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/dice [ playerid/Name ] [ Money ]" );
	if( Player == playerid || !IsPlayerConnected( Player ) )	return SendClientMessage( playerid, COLOR_GREY, "Invalid player specified (either yourself, or not connected)." );

	if( playerVariables[ playerid ][ pMoney ] < Cash || playerVariables[ Player ][ pMoney ] < Cash )			
		return SendClientMessage( playerid, COLOR_GREY, "Tu sau adversarul tau nu aveti suficienti bani pentru a juca barbut." );
	
	if( Cash < 5000 || Cash > 1000000 )							return SendClientMessage( playerid, COLOR_GREY, "You can only use values from $5,000 to $1,000,000" );
	if( !IsPlayerInRangeOfPlayer( playerid, Player, 5.0 ) )		return SendClientMessage( playerid, COLOR_GREY, "You're too far away from that person." );

	playerVariables[ playerid ][ pDiceOffer ] = Player;
	playerVariables[ Player ][ pDiceOffer2 ] = playerid;
	playerVariables[ playerid ][ pDicePrice ] = Cash;

	SendClientMessagef( playerid, COLOR_DARKPINK, "> Cererea de barbut a fost trimisa catre %s.", playerVariables[ Player ][ pNormalName ] );
	SendClientMessagef( Player, COLOR_DARKPINK, "> %s[%d] te-a invitat sa joci barbut cu el pe $%s. Scrie /accept dice %d pentru a juca.", playerVariables[ playerid ][ pNormalName ], playerid, FormatNumber( Cash ), playerid );
	return true;
}
CMD:canceldice( playerid, params[] )
{
	if( playerVariables[ playerid ][ pDiceOffer ] == INVALID_PLAYER_ID )
		return SendClientMessage( playerid, COLOR_GREY, "Nu ai nicio cerere de barbut trimisa!" );

	SendClientMessagef( playerVariables[ playerid ][ pDiceOffer ], COLOR_DARKPINK, "> Cererea de barbut trimisa de %s a fost anulata folosind /canceldice", 
		playerVariables[ playerid ][ pNormalName ] );

	playerVariables[ playerid ][ pDiceOffer ] = INVALID_PLAYER_ID;
	playerVariables[ playerid ][ pDicePrice ] = 0;
	return SendClientMessage( playerid, COLOR_DARKPINK, "> You have removed your dice request!" );
}
alias:ad( "advertise", "anunt" );
CMD:ad( playerid, params[] )
{
	new bizzID = GetBuildingEnterID( playerid, 0, 3, 5.0 );
	if( bizzID == -404 || GetGVarInt( "bus_Type", bizzID ) != 8 )
	{
		GPS_Location( playerid, "CNN", 1169.8340, -1489.6545, 22.7559 );
		return InfoTD_MSG( playerid, 5000, "Trebuie sa fii in pickup-ul de la CNN!" );
	}
	new playerText[ 256 ], activeADS = GetServerData(other_count_ads), adTime;
	if( sscanf( params, "s[256]", playerText ) )		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/ad [advertisement]" );
	if( !playerVariables[ playerid ][ pPhone ] )		return SendClientMessage( playerid, COLOR_GREY, "You don't have a phone, so you're unable to submit an advertisement." );
	if( playerVariables[ playerid ][ pLevel ] < 5 )		return SendClientMessage( playerid, COLOR_GREY, "You don't have enough level (5)." );
	if( activeADS >= 20 )                          		return SendClientMessage( playerid, COLOR_GREY, "There are 20 ads placed, come back later." );

	if( playerVariables[ playerid ][ pAdTime ] != 0 )
	{
		SendClientMessage( playerid, COLOR_DARKPINK, "Your ad:" );
		SendClientMessage( playerid, COLOR_DARKPINK, playerVariables[ playerid ][ pAdString ] );
		return SendClientMessage( playerid, COLOR_DARKPINK, "Pentru a-ti sterge anuntul, foloseste /deletemyad." );
	}
	// < Update cash and time )
	if( activeADS > 0 )
		adTime = ( activeADS + 1 )*30;
	else if( activeADS == 0 )
		adTime = 30;

	new adPrice = CountChars( playerText ) * GetGVarInt( "bus_Fuel", bizzID );
	if( playerVariables[ playerid ][ pMoney ] < adPrice )
		return SendClientMessagef( playerid, COLOR_GREY, "You don't have enough money for this ($%s)", FormatNumber( adPrice ) );

	playerVariables[ playerid ][ pMoney ] -= adPrice;
	SetGVarInt( "bus_Money", GetGVarInt( "bus_Money", bizzID ) + adPrice, bizzID );
	SendClientMessagef( playerid, COLOR_DARKPINK, "Ai platit $%s pentru anunt. Anuntul tau va fi afisat in %d secunde.", FormatNumber( adPrice ), adTime );

	// < Update player AD )
	format( playerVariables[ playerid ][ pAdString ], 256, "%s", playerText );
	playerVariables[ playerid ][ pAdTime ] = adTime;
	serverVariables[other_count_ads]++;

	// < Info admins )
	gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, "[AD LOG]: %s(%i) a folosit /ad: %s", playerVariables[ playerid ][ pNormalName ], playerid, playerText );
	foreach(new i : server_admins)
		SendSplitMessage( i, COLOR_ADV, gsString );
	return true;
}
CMD:deletemyad( playerid, params[] )
{
	if( playerVariables[ playerid ][ pAdTime ] == 0 )
		return SendClientMessage( playerid, COLOR_WHITE, "You don't have an ad placed." );

	playerVariables[ playerid ][ pAdTime ] = 0;
	serverVariables[other_count_ads]--;
	format( playerVariables[ playerid ][ pAdString ], 256, "N/A" );
	return SendClientMessage( playerid, COLOR_DARKPINK, "Ad-ul tau a fost sters!" );
}
CMD:dad( playerid, params[] )
{
	AHCheck( playerid, 1, 5 );
	new Player;
	if( sscanf( params, "u", Player ) )							return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/dad [ username/ID ]" );
	if( !IsPlayerConnected( Player ) )							return SendClientMessage( playerid, COLOR_GREY, "Player it's not connected!" );
	if( playerVariables[ Player ][ pAdTime ] == 0 )             return SendClientMessage( playerid, COLOR_GREY, "This player don't have an ad placed." );

	// < Delete player's ad )
	gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, "Admin %s deleted %s /ad.", playerVariables[ playerid ][ pNormalName ], playerVariables[ Player ][ pNormalName ] );
	submitToAdmins(gsString, COLOR_ADMCOMMANDS);

	playerVariables[ Player ][ pAdTime ] = 0;
	serverVariables[other_count_ads]--;
	format( playerVariables[ Player ][ pAdString ], 256, "N/A" );
	SendClientMessagef( Player, COLOR_LIGHTRED, "Admin %s deleted your /ad.", playerVariables[ playerid ][ pNormalName ]);
	return true;
}
// < Player Chat Commands )
CMD:pm( playerid, params[] )
{
	AHCheck( playerid, 1, 1 );

	new Player, pText[ 128 ];
	if( sscanf( params, "us[128]", Player, pText ) ) 	return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/pm <Name/Playerid> <Message>" );
	if( !IsPlayerConnected( Player ) )					return SendClientMessage( playerid, COLOR_GREY, "Player it's not connected!" );
	if( Player == playerid )							return SendClientMessage( playerid, COLOR_GREY, "You can't PM yourself!!" );

	if( !VerificaReclama( playerid, pText ) )
		return false;

	foreach(new i : server_admins)
		if( playerVariables[ i ][ pAdminLevel ] >= 5 && playerVariables[ i ][ pTog ][ 7 ] )
			SendClientMessagef( i, COLOR_YELLOW, "(PM LOG) %s(%i) send to %s(%i): %s", username( playerid ), playerid, username( Player ), Player, pText );

	SendClientMessagef( Player, COLOR_YELLOW, "> PM from %s: %s", username( playerid ), pText );
	SendClientMessagef( playerid, COLOR_YELLOW, "PM sent to %s: %s", username( Player ), pText );
	InsertCMDLog( GetPlayerMysqlID(playerid), GetPlayerMysqlID(Player), "/pm", pText );
	return true;
}
CMD:togphone( playerid, params[] )
{
	if( !playerVariables[ playerid ][ pPhone ] )
		return SendClientMessage( playerid, COLOR_GREY, "You don't have a phone." );

	switch( playerVariables[ playerid ][ pPhoneStatus ] )
	{
		case 0:
		{
			playerVariables[ playerid ][ pPhoneStatus ] = 1;
			switch( playerVariables[ playerid ][ pPhone ] )
			{
				case 1: nearByMessage( playerid, COLOR_PURPLE, NBM_DIST, "* %s turns on his/her phone.", username( playerid ) );
				case 2: nearByMessage( playerid, COLOR_PURPLE, NBM_DIST, "* %s turns on his/her iPhone.", username( playerid ) );
			}
		}
		case 1:
		{
			playerVariables[ playerid ][ pPhoneStatus ] = 0;
			switch( playerVariables[ playerid ][ pPhone ] )
			{
				case 1: nearByMessage( playerid, COLOR_PURPLE, NBM_DIST, "* %s turns off his/her phone.", username( playerid ) );
				case 2: nearByMessage( playerid, COLOR_PURPLE, NBM_DIST, "* %s turns off his/her iPhone.", username( playerid ) );
			}
		}
	}
	return true;
}
CMD:ignore( playerid, params[] )
{
	AHCheck( playerid, 6, 5 );

	if( playerVariables[ playerid ][ pPhone ] < 1 )								return SendClientMessage( playerid, COLOR_GREY, "You don't have a phone." );
	if( playerVariables[ playerid ][ pPhoneStatus ] != 1 )						return SendClientMessage( playerid, COLOR_GREY, "Your phone is not switched on /togphone" );
	if( playerVariables[ playerid ][ pPhoneCredit ] < 3 )						return SendClientMessage( playerid, COLOR_GREY, "You have no remaining phone credit - visit a 24/7 to top it up." );
	if( playerVariables[ playerid ][ pPhoneCall ] != INVALID_PLAYER_ID ) 		return SendClientMessage( playerid, COLOR_GREY, "You're already in another call with somebody, please /h(angup) !" );

	new Player;
	if( sscanf( params, "u", Player ) )											return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/ignore <playerID/Name>" );
	if( Player == playerVariables[ playerid ][ pPhoneNumber ] )					return SendClientMessage( playerid, COLOR_GREY, "You can't ignore yourself!" );

	SendClientMessagef( playerid, ~1, "You have ignored the player %s", playerVariables[ playerid ][ pNormalName ] );

	// < Set player's ignore list )
	for( new i=0; i <= 9; i++ )
		if( GetPVarIntEx( playerid, "phone_Ignore", i ) == INVALID_PLAYER_ID )
			SetPVarIntEx( playerid, "phone_Ignore", Player, i );
	return true;	
}
CMD:call( playerid, params[] )
{
	if( playerVariables[ playerid ][ pPhone ] < 1 )								return SendClientMessage( playerid, COLOR_GREY, "You don't have a phone." );
	if( playerVariables[ playerid ][ pPhoneStatus ] != 1 )						return SendClientMessage( playerid, COLOR_GREY, "Your phone is not switched on /togphone" );
	if( playerVariables[ playerid ][ pPhoneCredit ] < 3 )						return SendClientMessage( playerid, COLOR_GREY, "You have no remaining phone credit - visit a 24/7 to top it up." );
	if( playerVariables[ playerid ][ pPhoneCall ] != INVALID_PLAYER_ID ) 		return SendClientMessage( playerid, COLOR_GREY, "You're already in another call with somebody, please /h(angup) !" );

	new pNumber;
	if( sscanf( params, "d", pNumber ) )										return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/call <Number>" );
	if( pNumber == playerVariables[ playerid ][ pPhoneNumber ] )				return SendClientMessage( playerid, COLOR_GREY, "You can't call yourself!" );

	// < Check the number )
	if( pNumber == 112 )
	{
		if( playerVariables[ playerid ][ pPlayTime ] < 1800 )
			return SendClientMessage( playerid, COLOR_GREY, "Trebuie sa ai cel putin 30 de minute jucate pentru a folosi comanda!" );

		// < Check player stats )
		new killerID = playerVariables[ playerid ][ pKillerID ];
		if( !IsPlayerConnected( killerID ) )									return SendClientMessage( playerid, COLOR_GREY, "Killer it's not connected anymore!" );
		if( IsPlayerCop( killerID ) )											return SendClientMessage( playerid, COLOR_GREY, "You can't report a Cop!" );
		if( IsPlayerCop( playerid ) )											return SendClientMessage( playerid, COLOR_GREY, "You're a cop and you can't call 112!" );
		if( playerVariables[ playerid ][ pKillerTime ] == 0 )					return SendClientMessage( playerid, COLOR_GREY, "You don't have any crime to report, your crime time has expired!" );
		if( playerVariables[ playerid ][ pKillerID ] == -1 )					return SendClientMessage( playerid, COLOR_GREY, "You already reported the crime." );
		if( playerVariables[ playerid ][ pKillerID ] == INVALID_PLAYER_ID )		return SendClientMessage( playerid, COLOR_GREY, "You don't have a reason for reporting any crime." );
		if( playerVariables[ killerID ][ pWanted ] >= 6 ) 						return SendClientMessage( playerid, COLOR_GREY, "This player has got already maximum of wanted stars." );

		// < Announce the Dept. )
		playerVariables[ killerID ][ pWanted ]++;
		playerVariables[ killerID ][ pCrimes ]++;
		playerVariables[ killerID ][ pWantedTime ] = 600;
		SetPlayerWantedLevel( killerID, playerVariables[ killerID ][ pWanted ] );
		if(!Iter_Contains(server_wanteds, killerID)) Iter_Add(server_wanteds, killerID), server_wanteds++;
		UpdateScadeWanted( killerID, playerVariables[ killerID ][ pWantedTime ] );
		//( playerid, 20600, 0.0, 0.0, 0.0 );

		playerVariables[ playerid ][ pCrimeReason ] = EOS;
		format( playerVariables[ playerid ][ pCrimeReason ], 128, "first degree murder - reporter: %s", playerVariables[ playerid ][ pNormalName ] );

		gsString[ 0 ] = EOS;
		format( gsString, sizeof gsString, "Dispatch: %s[%d] has comitted a crime: Crime. Reporter: %s W: +1 | New Wanted Level: %d", playerVariables[ killerID ][ pNormalName ], killerID, playerVariables[ playerid ][ pNormalName ], playerVariables[ killerID ][ pWanted ] );
		sendDepartmentMessage( COLOR_RADIOCHAT, gsString );
		SendClientMessagef( playerid, COLOR_LIGHTBLUE, "You reported %s for a crime.", playerVariables[ killerID ][ pNormalName ] );
		SendClientMessagef( killerID, COLOR_RED2, "Ai comis o infractiune: first degree murder, raportat de: %s. W: +1. Nivel de urmarire nou: %d.", playerVariables[ playerid ][ pNormalName ], playerVariables[ killerID ][ pWanted ] );

        //( playerid, 21001, 0.0, 0.0, 0.0 );

		// < Reset the var )
		playerVariables[ playerid ][ pKillerID ] = -1;
		return true;
	}
	else
	{
		new i = GetPhoneNumberOwner( pNumber );

		if(i == INVALID_PLAYER_ID)
			return SendClientMessage(playerid, ~1, "This player is not connected.");

        if( playerVariables[ i ][ pPhoneCall ] != INVALID_PLAYER_ID)         return SendClientMessage( playerid, COLOR_GREY, "This player is in another call!" );
        if(GetPVarInt(i, "player_called") != INVALID_PLAYER_ID)              return SendClientMessage( playerid, COLOR_GREY, "This player is in another call!" );

		if( !playerVariables[ i ][ pPhoneStatus ] )
			return SendClientMessage( playerid, COLOR_GREY, "Player's phone it's turned off right now!" );

		if( playerVariables[ i ][ pPhoneStatus ] == 2 )
			return SendClientMessage( playerid, COLOR_GREY, "Player's phone it's turned off for calls right now!" );

		if( playerVariables[ i ][ pSpectating ] != INVALID_PLAYER_ID )
			return SendClientMessage( playerid, COLOR_GREY, "This player it's spectating someone!" );

		// < Load the code )
		nearByMessage( playerid, COLOR_PURPLE, NBM_DIST, "* %s takes out their cellphone, and dials in a number.", username( playerid ) );
		SetPlayerSpecialAction( playerid, SPECIAL_ACTION_USECELLPHONE );
		//( playerid, 3600, 0.0, 0.0, 0.0 );
		playerVariables[ playerid ][ pPhoneCall ] = i;

		playerVariables[ playerid ][ pPhoneCredit ] -= 2;

		SetPVarInt(i, "player_called", playerid);

		// < Attach the phone/iphone )
		switch( playerVariables[ playerid ][ pPhone ] )
		{
			case 1: SetPlayerAttachedObject( playerid, INDEX_PHONE, 330, 6, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Phone
			case 2: SetPlayerAttachedObject( playerid, INDEX_PHONE, 18870, 6, 0.086043, 0.027719, 0.003817, 95.232246, 178.651031, 1.691840, 1.002077, 1.000000, 1.000000 ); // iPhone
		}
		// < Show to the called player )
		switch( playerVariables[ playerid ][ pPhone ] )
		{
			case 1: nearByMessage( i, COLOR_PURPLE, NBM_DIST, "* %s's cellphone starts to ring...", username( i ) );
			case 2: nearByMessage( i, COLOR_PURPLE, NBM_DIST, "* %s's iPhone starts to ring...", username( i ) );
		}
		//( playerid, 21001, 0.0, 0.0, 0.0 );
		//( i, 20600, 0.0, 0.0, 0.0 );
		SendClientMessagef( i, COLOR_YELLOW, "%s is calling you. Use /p(ickup) to answer your phone.", username( playerid ) );
	}
	return true;
}
alias:pickup( "p", "answer" );
CMD:pickup( playerid, params[] )
{
	if( playerVariables[ playerid ][ pPhoneCall ] != INVALID_PLAYER_ID ) 
		return SendClientMessage( playerid, COLOR_GREY, "You're already in another call with somebody!" );

    new i = GetPVarInt(playerid, "player_called");

    if(i == INVALID_PLAYER_ID)
    	return SendClientMessage( playerid, COLOR_GREY, "Nobody has called you!" );

	if( playerVariables[ i ][ pPhoneCall ] == playerid )
	{
		playerVariables[ playerid ][ pPhoneCall ] = i;
		SendClientMessage( i, COLOR_WHITE, "The other person has answered the call." );
		SendClientMessage( playerid, COLOR_WHITE, "You have answered your phone, you can end the call with /h(angup)" );
		SetPlayerSpecialAction( playerid, SPECIAL_ACTION_USECELLPHONE );

		// < Attach the phone/iphone )
		switch( playerVariables[ playerid ][ pPhone ] )
		{
			case 1: SetPlayerAttachedObject( playerid, INDEX_PHONE, 330, 6, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Phone
			case 2: SetPlayerAttachedObject( playerid, INDEX_PHONE, 18870, 6, 0.086043, 0.027719, 0.003817, 95.232246, 178.651031, 1.691840, 1.002077, 1.000000, 1.000000 ); // iPhone
		}
	}
	return true;
}
alias:hangup( "h", "endcall" );
CMD:hangup( playerid, params[] )
{
	new callerID = playerVariables[ playerid ][ pPhoneCall ];
	playerVariables[ playerid ][ pPhoneCall ] = INVALID_PLAYER_ID;

	// < Check the callerID )
	if( !IsPlayerConnected( callerID ) || callerID == INVALID_PLAYER_ID )
		return SendClientMessage( playerid, COLOR_GREY, "Your caller has disconnected / nobody called you!" );

	// < Load the code )
	SendClientMessage( playerid, COLOR_LIGHTGREEN, "You turned off the current call!" );
	SendClientMessagef( callerID, COLOR_LIGHTGREEN, "Player %s has turned off the current call with /h(angup) !", playerVariables[ playerid ][ pNormalName ] );

	SetPlayerSpecialAction( callerID, SPECIAL_ACTION_STOPUSECELLPHONE );
	SetPlayerSpecialAction( playerid, SPECIAL_ACTION_STOPUSECELLPHONE );
	RemovePlayerAttachedObject( callerID, INDEX_PHONE );
	RemovePlayerAttachedObject( playerid, INDEX_PHONE );
	playerVariables[ callerID ][ pPhoneCall ] = INVALID_PLAYER_ID;
	SetPVarInt(playerid, "player_called", INVALID_PLAYER_ID);
	SetPVarInt(callerID, "player_called", INVALID_PLAYER_ID);
	return true;
}
CMD:sms( playerid, params[] )
{
	if( !playerVariables[ playerid ][ pPhone ] )
		return SendClientMessage( playerid, COLOR_GREY, "You don't have a phone, buy one from 24/7!" );

	new pNumber, pText[ 128 ];
	if( sscanf( params, "ds[128]", pNumber, pText ) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/sms [number] [message]" );

	if( !VerificaReclama( playerid, pText ) )
		return false;

	if( playerVariables[ playerid ][ pPhoneNumber ] == pNumber )
		return SendClientMessage( playerid, COLOR_GREY, "You can't SMS yourself!" );

	if( !playerVariables[ playerid ][ pPhoneStatus ] )
		return SendClientMessage( playerid, COLOR_GREY, "Your phone is not switched on /togphone" );

	if( playerVariables[ playerid ][ pPhoneCredit ] < 3 )
		return SendClientMessage( playerid, COLOR_GREY, "You have no remaining phone credit - visit a 24/7 to top it up." );

	new x = GetPhoneNumberOwner( pNumber );

	if(x == INVALID_PLAYER_ID)
		return SendClientMessage(playerid, ~1, "This player is not connected.");
	
	if( playerVariables[ x ][ pSpectating ] != INVALID_PLAYER_ID )
		return SendClientMessage( playerid, COLOR_GREY, "This player it's spectating someone!" );

	if( playerVariables[ x ][ pPhoneStatus ] != 1 )
		return SendClientMessage( playerid, COLOR_GREY, "Telefonul acestui jucator este inchis momentan!" );

	//( playerid, 1052, 0.0, 0.0, 0.0 );
	//( x, 1139, 0.0, 0.0, 0.0 );

	SendClientMessagef( x, COLOR_YELLOW, "SMS from %s (%d): %s", username( playerid ), playerVariables[ playerid ][ pPhoneNumber ], pText );
	SendClientMessagef( playerid, COLOR_SMS, "SMS sent to %s (%d): %s", username( x ), playerVariables[ x ][ pPhoneNumber ], pText );
	InsertChatLog( GetPlayerMysqlID(playerid), "/sms", pText );
	playerVariables[ playerid ][ pPhoneCredit ] -= 3;
	if( playerVariables[ x ][ pPhone ] == 2 )
		playerVariables[ x ][ pPhoneLast ] = playerid;

	foreach(new i : server_admins)
		if( playerVariables[ i ][ pAdminLevel ] > 4 && playerVariables[ i ][ pTog ][ 5 ] == 1 )
			SendClientMessagef( i, COLOR_YELLOW, "(SMS LOG) %s(%i) send to %s(%i): %s", username( playerid ), playerid, username( x ), x, pText );

	return true;
}
CMD:reply( playerid, params[] )
{
	if( playerVariables[ playerid ][ pPhone ] != 2 )
		return SendClientMessage( playerid, COLOR_GREY, "Doar cei ce au iPhone pot sa foloseasca /reply <text>. Pentru a cumpara un iPhone foloseste /shop." );

	if( playerVariables[ playerid ][ pPhoneLast ] == INVALID_PLAYER_ID || !IsPlayerConnected( playerVariables[ playerid ][ pPhoneLast ] ) )
		return SendClientMessage( playerid, COLOR_GREY, "Nu ai primit niciun SMS de curand sau jucatorul s-a deconectat!" );

	if( playerVariables[ playerid ][ pPhoneStatus ] != 1 )
		return SendClientMessage( playerid, COLOR_GREY, "Your iPhone is not switched on /togphone" );

	if( playerVariables[ playerid ][ pPhoneCredit ] < 3 )
		return SendClientMessage( playerid, COLOR_GREY, "You have no remaining phone credit - visit a 24/7 to top it up." );

	new pText[ 256 ], Player = playerVariables[ playerid ][ pPhoneLast ];
	if( sscanf( params, "s[256]", pText ) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/reply [message]" );

	if( !VerificaReclama( playerid, pText ) )
		return false;

	//( playerid, 1052, 0.0, 0.0, 0.0 );
	//( Player, 1139, 0.0, 0.0, 0.0 );

	SendClientMessagef( Player, COLOR_YELLOW, "SMS from %s (%d): %s", username( playerid ), playerVariables[ playerid ][ pPhoneNumber ], pText );
	SendClientMessagef( playerid, COLOR_SMS, "SMS sent to %s (%d): %s", username( Player ), playerVariables[ Player ][ pPhoneNumber ], pText );
	InsertChatLog( GetPlayerMysqlID(playerid), "/reply", pText );
	playerVariables[ playerid ][ pPhoneCredit ] -= 3;
	if( playerVariables[ Player ][ pPhone ] == 2 )
		playerVariables[ Player ][ pPhoneLast ] = playerid;

	foreach(new i : server_admins)
		if( playerVariables[ i ][ pAdminLevel ] > 4 && playerVariables[ i ][ pTog ][ 5 ] == 1 )
			SendClientMessagef( i, COLOR_YELLOW, "(SMS LOG) %s(%i) send to %s(%i): %s", username( playerid ), playerid, username( Player ), Player, pText );
	return true;
}
CMD:mp3( playerid, params[] )
{
	if( !playerVariables[ playerid ][ pPremium ] )
		return SendClientMessage( playerid, COLOR_GREY, "You're not a Premium or Vip player, buy it from /shop !" );

	new pLink[ 256 ];
	if( sscanf(params, "s[256]", pLink) )
		return SendClientMessage( playerid, -1, SYNTAX_MESSAGE"/mp3 [url Link]" );

	StopAudioStreamForPlayer( playerid );
	PlayAudioStreamForPlayer( playerid, pLink );
	InfoTD_MSG( playerid, 5000, "~y~~h~MP3 SYSTEM:~n~~w~~h~You're now playing link: %s", pLink );
	return true;
}
CMD:number( playerid, params[] )
{
	if( playerVariables[ playerid ][ pPhoneBook ] == 0 )
		return SendClientMessage( playerid, COLOR_GREY, "You don't have a phonebook." );

	new Player;
	if( sscanf( params, "u", Player ) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/number [ name/playerid ]" );

	if( !IsPlayerConnected( Player ) )
		return SendClientMessage( playerid, COLOR_GREY, "The specified player ID is either not connected or has not authenticated." );

	gsString[ 0 ] = EOS;
	if( playerVariables[ Player ][ pPhone] != 0 ) format(gsString, sizeof gsString, "%d", playerVariables[ Player ][ pPhoneNumber ]);
	else gsString = "None";

    SendClientMessagef( playerid, COLOR_WHITE, "Name: "COL_GRI"%s"COL_W" | Number: "COL_GRI"%s", username( Player ), gsString );
	return true;
}
CMD:me( playerid, params[] )
{
	new mText[ 256 ];
	if( sscanf( params, "s[256]", mText ) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/me [ action ]" );

	if( !VerificaReclama( playerid, mText ) )
		return false;

	nearByMessage( playerid, COLOR_PURPLE, NBM_DIST, "(/me)* %s %s.", username( playerid ), mText );
	return true;
}
CMD:do( playerid, params[] )
{
	new dText[ 256 ];
	if( sscanf( params, "s[256]", dText ) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/do [ action ]" );

	if( !VerificaReclama( playerid, dText ) )
		return false;

	nearByMessage( playerid, COLOR_PURPLE, NBM_DIST, "* %s (( %s )) ", dText, username( playerid ) );
	return true;
}
CMD:cw( playerid, params[] )
{
	new Text[ 128 ];
	if( sscanf( params, "s[128]", Text ) )
		return SendClientMessage( playerid, COLOR_GREY,  SYNTAX_MESSAGE"/cw [ message ]" );

    if(!IsPlayerInAnyVehicle(playerid))
    	return SendClientMessage(playerid, -1, "{FFF8C6}You need to be in vehicle.");

	if( !VerificaReclama( playerid, Text ) )
		return false;

	InsertChatLog( GetPlayerMysqlID(playerid), "/cw", Text );

	Iter_gPlayerVehicleId[playerid] = GetPlayerVehicleID(playerid);
    foreach(new i : vehiclePlayerStream[Iter_gPlayerVehicleId[playerid]])
        SendClientMessagef( i, COLOR_YELLOW, "(Car Whisper) %s: %s", username( playerid ), Text );
	return true;
}
CMD:w( playerid, params[] ) return callcmd::whisper( playerid, params );
CMD:whisper( playerid, params[] )
{
	new Player, Text[ 128 ];
	if( sscanf( params, "us[128]", Player, Text ) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/whisper [ playerid ] [ message ]" );

	if( !VerificaReclama( playerid, Text ) )
		return false;

	if( !IsPlayerConnected( Player ) )
		return SendClientMessage( playerid, COLOR_GREY, "The specified player ID is either not connected or has not authenticated." );

	if( playerVariables[ Player ][ pUndercover ] )
		return SendClientMessage( playerid, COLOR_GREY, "You can't use this command on this player because he is undercover." );

	if( !IsPlayerInRangeOfPlayer( playerid, Player, 2.0 ) )
		return SendClientMessage( playerid, COLOR_GREY, "You're too far away." );

	if( playerVariables[ Player ][ pTog ][ 0 ] )
		return SendClientMessage( playerid, COLOR_GREY, "This player has whisper toggled off!" );

	InsertChatLog( GetPlayerMysqlID(playerid), "/w", Text );
	SendClientMessagef( Player, COLOR_NICESKY, "%s whispers: %s", username( playerid ), Text );
	SendClientMessagef( playerid, COLOR_NICESKY, "You whisper to %s: %s", username( Player ), Text);
	return true;
}
// < Walkie Talkie )
CMD:wthelp( playerid, params[] )
{
	if( playerVariables[ playerid ][ pWTalkie ] == 0 )
		return SendClientMessage( playerid, COLOR_GREY, "You don't have a Walkie Talkie." );

	SendClientMessage( playerid, COLOR_WHITE, "{3385FF}Walkie Talkie: /togwt /setfreq /wt" );
	return true;
}
CMD:togwt( playerid, params[] )
{
	if( !playerVariables[ playerid ][ pWTalkie ] )	return SendClientMessage( playerid, COLOR_GREY, "You don't have a Walkie Talkie." );
	switch( playerVariables[ playerid ][ pWTalkieStatus ] )
	{
		case true: SendClientMessage( playerid, COLOR_WHITE, "You have disabled your Walkie Talkie." ), playerVariables[ playerid ][ pWTalkieStatus ] = 0;
		case false: SendClientMessage( playerid, COLOR_WHITE, "You have enabled your Walkie Talkie." ), playerVariables[ playerid ][ pWTalkieStatus ] = 1;
	}
	return true;
}
CMD:showfreq( playerid, params[] )
{
	AHCheck( playerid, 1, 5 );

	new Player;
	if( sscanf( params, "u", Player ) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/showfreq [ playerID/Name ]" );

	if( !IsPlayerConnected( Player ) )
		return SendClientMessage( playerid, COLOR_GREY, "The specified player ID is either not connected or has not authenticated." );

	if( !playerVariables[ playerid ][ pWTalkie ] )
		return SendClientMessage( playerid, COLOR_GREY, "This player don't have a Walkie Talkie." );

	SendClientMessagef( playerid, COLOR_WHITE, "{B8FFDB}Walkie Talkie Frequency #%d khz.", playerVariables[ Player ][ pWTalkieFRQ ] );
	return true;
}
CMD:setfreq( playerid, params[] ) return callcmd::setfrequency( playerid, params );
CMD:setfrequency( playerid, params[] )
{
	if( !playerVariables[ playerid ][ pWTalkie ] )
		return SendClientMessage( playerid, COLOR_GREY, "You don't have a Walkie Talkie." );

	new wtFRQ;
	if( sscanf( params, "d", wtFRQ ) )		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/setfrequency <Frequency> (0 to switch off)" );
	if( wtFRQ < 0 || wtFRQ > 100)           return SendClientMessage( playerid, COLOR_GREY, "Invalid frequency specified. Valid frequencies: 1 - 100.");

	if( wtFRQ < 0 )
		return SendClientMessage(playerid, -1, "Invalid frequency specified.");

	if( wtFRQ == playerVariables[ playerid ][ pWTalkieFRQ ] )
		return SendClientMessage( playerid, COLOR_GREY, "You are already on this frequency." );

	if( playerVariables[ playerid ][ pWTalkieStatus ] == 0 )
		return SendClientMessage( playerid, COLOR_GREY, "Your walkie talkie is turned off." );


    new id_freq = playerVariables[ playerid ][ pWTalkieFRQ ];
	switch( wtFRQ )
	{
		case 0:
		{
			Iter_Remove( playerFreq[ id_freq ], playerid);
	    	playerVariables[ playerid ][ pWTalkieFRQ ] = wtFRQ;
	        SendClientMessage( playerid, ~1, "{B8FFDB}You set your Walkie Talkie Frequency to #0 khz." );
	    	return true;
		}
		default: Iter_Remove( playerFreq[ id_freq ], playerid);
	}

    Iter_Add( playerFreq[ wtFRQ ], playerid );
	SendClientMessagef( playerid, ~1, "{B8FFDB}You set your Walkie Talkie Frequency to #%d khz.", wtFRQ );
	playerVariables[ playerid ][ pWTalkieFRQ ] = wtFRQ;
	return true;
}
CMD:wt( playerid, params[] )
{
	if( !playerVariables[ playerid ][ pWTalkie ] )
		return SendClientMessage( playerid, COLOR_GREY, "You don't have a Walkie Talkie." );

	new wtText[ 128 ];
	if( sscanf( params, "s[128]", wtText ) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/wt <Message>" );

	if( !VerificaReclama( playerid, wtText ) )        	return false;

	if( playerVariables[ playerid ][ pWTalkieStatus ] == 0)
		return SendClientMessage( playerid, COLOR_GREY, "Your walkie talkie is turned off (/togwt)." );

	if( playerVariables[ playerid ][ pWTalkieFRQ ] == 0 )
		return SendClientMessage( playerid, COLOR_GREY, "Please set frequency." );

	// < Send the message via Radio Waves )

	svString[ 0 ] = EOS;
	format( svString, sizeof svString, "(wt) ''%s''", wtText );
	SetPlayerChatBubble( playerid, svString, COLOR_CHATBUBBLE, 10.0, 10000 );
	InsertChatLog( GetPlayerMysqlID(playerid), "/wt", wtText );

    gsString[0] = EOS;
    format(gsString, sizeof gsString, "(frequency: %d) %s: %s", playerVariables[ playerid ][ pWTalkieFRQ ], username( playerid ), wtText );

	SendToFrequency(COLOR_SMS, playerVariables[playerid][pWTalkieFRQ], gsString);

	return true;
}

//
CMD:report(playerid, params[])
{
	if( playerVariables[ playerid ][ pAdminLevel ] != 0 )   return SendClientMessage( playerid, -1, "Esti administrator si nu poti folosi aceasta comanda!" );
	if( playerVariables[ playerid ][ pReportTimer ] != 0 )	return SendClientMessage( playerid, -1, "Poti da un report o data la un minut." );
	if( playerVariables[ playerid ][ pReported ] == 1 )     return SendClientMessage( playerid, -1, "Ai deja un /report activ!" );
	if( playerVariables[ playerid ][ pRMuted ] != 0 )		return SendClientMessage( playerid, -1, "You are muted from /report." );
	if( !server_admins)  					                return SendClientMessage( playerid, COLOR_FRED, "Error: There are no admins online." );

	ShowPlayerDialog( playerid, DIALOG_REPORT_LIST, DIALOG_STYLE_LIST, "Report", 
		"Contul meu este spart sau blocat\nRaporteaza DM\nRaporteaza un cheater\nIntrebari despre donatii\nSunt blocat/cad prin mapa\nVreau sa fac o afacere si am nevoie de ajutor\nAlta problema", "Select", "Inchide" );
	return true;
}
/*CMD:report( playerid, params[] )
{
	new rText[ 128 ];
	if( playerVariables[ playerid ][ pAdminLevel ] != 0 )   return SendClientMessage( playerid, -1, "Esti administrator si nu poti folosi aceasta comanda!" );
	if( playerVariables[ playerid ][ pReportTimer ] != 0 )	return SendClientMessage( playerid, -1, "Poti da un report o data la un minut." );
	if( sscanf( params, "s[128]", rText ) )					return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/report [ text ]" );
	if( playerVariables[ playerid ][ pReported ] == 1 )     return SendClientMessage( playerid, -1, "Ai deja un /report activ!" );
	if( playerVariables[ playerid ][ pRMuted ] != 0 )		return SendClientMessage( playerid, -1, "You are muted from /report." );
	if( GetOnlineAdmins() == 0 ) 							return SendClientMessage( playerid, COLOR_FRED, "Error: There are no admins online." );

	gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, "Report from %s [%d]: %s.", username( playerid ), playerid, rText );
	submitToHelpersAndAdmins( gsString, COLOR_FRED );
	SendClientMessage( playerid, 0xF3FF02FF, "Your report message was sent to Admins and Helpers! " );

	playerVariables[ playerid ][ pReportTimer ] = 60;
	playerVariables[ playerid ][ pReported ] = 1;
	format( playerVariables[ playerid ][ pReportMessage ], 256, "%s", rText );
	return true;
}*/
CMD:rmute( playerid, params[] )
{
	AHCheck( playerid, 1, 5 );

	new Player, Minutes;
	if( sscanf( params, "ud", Player, Minutes ) ) 		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/rmute [ playerid ] [ minutes ]" );
	if( !IsPlayerConnected( Player ) )					return SendClientMessage( playerid, COLOR_GREY, "Player it's not connected!" );

	playerVariables[ Player ][ pRMuted ] = (60 * Minutes);

	gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, "%s has been muted from /report by %s for %d minutes.", username( Player ), username( playerid ), Minutes );
	submitToAdmins(gsString, COLOR_RED);

	SendClientMessagef( Player, ~1, "%s has muted you on /report for %d minutes.", username( playerid ), Minutes );
	SendClientMessagef( playerid, ~1, "You have muted %s for %d minutes.", username( Player ), Minutes );
	return true;
}
CMD:nmute( playerid, params[] )
{
	AHCheck( playerid, 1, 1 );

	new Player, Minutes;
	if( sscanf( params, "ud", Player, Minutes ) ) 		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/nmute [ playerid ] [ minutes ]" );
	if( !IsPlayerConnected( Player ) )					return SendClientMessage( playerid, COLOR_GREY, "Player it's not connected!" );

	playerVariables[ Player ][ pNMuted ] = (60 * Minutes);

	gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, "%s has been muted from /n by %s for %d minutes.", username( Player ), username( playerid ), Minutes );
	submitToAdmins(gsString, COLOR_RED);

	SendClientMessagef( Player, ~1, "%s has muted you on /n for %d minutes.", username( playerid ), Minutes );
	SendClientMessagef( playerid, ~1, "You have muted %s for %d minutes.", username( Player ), Minutes );
	return true;
}
CMD:reports( playerid, params[] )
{
	AHCheck( playerid, 1, 5 );

	if(!server_reports)
		return SendClientMessage(playerid, -1, "No reports!");

	foreach(new i : server_reports)
		SendClientMessagef( playerid, COLOR_WHITE, "Player %s(%i): %s", username( i ), i, playerVariables[ i ][ pReportMessage ] );

	SendClientMessagef( playerid, COLOR_WHITE, "Total reports: %d", server_reports );
	return true;
}
CMD:cheat( playerid, params[] )
{
	if( playerVariables[ playerid ][ pAdminLevel ] != 0 )   return SendClientMessage( playerid, -1, "Esti administrator si nu poti folosi aceasta comanda!" );
	if( playerVariables[ playerid ][ pReportTimer ] != 0 )	return SendClientMessage( playerid, -1, "Poti da un report o data la un minut." );
	if( playerVariables[ playerid ][ pReported ] == 1 )     return SendClientMessage( playerid, -1, "Ai deja un /report activ!" );
	if( playerVariables[ playerid ][ pRMuted ] != 0 )		return SendClientMessage( playerid, -1, "You are muted from /report." );
	if( !server_admins ) 				                    return SendClientMessage( playerid, COLOR_FRED, "Error: There are no admins online." );

	new Player;
	if( sscanf( params, "u", Player ) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/cheat [ playerID/Name ]" );

	if( !IsPlayerConnected( Player ) )
		return SendClientMessage( playerid, COLOR_GREY, "Player it's not connected!" );

	if( playerid == Player)
		return SendClientMessage( playerid, COLOR_GREY, "You cannot report yourself!" );

	gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, "Report from %s [%d, level %d]: Has reported %s(%i) for using cheats!", username( playerid ), playerid, playerVariables[ playerid ][ pLevel ], username( Player ), Player );
	submitToHelpersAndAdmins( gsString, COLOR_FRED );
	SendClientMessage( playerid, 0xF3FF02FF, "* Your report message was sent to Admins and Helpers!" );

	playerVariables[ Player ][ pReportType ] = REPORT_CHEAT;
	playerVariables[ playerid ][ pReportTimer ] = 60;
	playerVariables[ playerid ][ pReported ] = 1;
	playerVariables[ Player ][ pReportedID ] = playerid;
	Iter_Add(server_reports, playerid);
	server_reports++;
	format( playerVariables[ playerid ][ pReportMessage ], 256, "Has reported %s(%i) for using cheats!", username( Player ), Player );
	return true;
}

CMD:cr( playerid, params[] )
{
	AHCheck( playerid, 1, 5 );

	new Player, rText[ 128 ];
	if( sscanf( params, "us[128]", Player, rText ) ) 	return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/cr [ playerid ] [ text ]" );
	if( !IsPlayerConnected( Player ) )					return SendClientMessage( playerid, COLOR_GREY, "Player it's not connected!" );
	if( !playerVariables[ Player ][ pReported ] )		return SendClientMessage( playerid, -1, "Acest jucator nu are un report activ!" );

	// < Close the player's report )
	ClosePlayerReport( playerid, Player, rText );
	return true;
}
CMD:dr( playerid, params[] )
{
	AHCheck( playerid, 1, 5 );

	new Player;
	if( sscanf( params, "u", Player ) ) return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/dr [ playerid ]" );
	if( !IsPlayerConnected( Player ) )	return SendClientMessage( playerid, COLOR_GREY, "Player it's not connected!" );

	if( !playerVariables[ Player ][ pReported ] )
		return SendClientMessage( playerid, -1, "Acest jucator nu are un report activ!" );

	playerVariables[ playerid ][ pReportAccepted ] = -1;
	playerVariables[ Player ][ pReportAccepted ] = -1;
	playerVariables[ Player ][ pReported ]  = 0;
	SendClientMessagef( Player, COLOR_ATTACK, "* Reportul tau a fost sters de catre adminul %s!", username( playerid ) );
	AdminBroadCast( 1, COLOR_GREY, "%s deleted report from %s [%d, level %d]", username( playerid ), username( Player ), Player, playerVariables[ Player ][ pLevel ] );
	return true;
}
alias:newbie( "n", "how" );
CMD:newbie( playerid, params[] )
{
	if( !GetServerData(other_helpers_duty) )
		return SendClientMessage( playerid, COLOR_GREY, "Nu este niciun helper on duty momentan!" );

    if( playerVariables[ playerid ][ pAdminLevel ] > 0 || playerVariables[ playerid ][ pHelper ] > 0 )
		return SendClientMessage( playerid, COLOR_GREY, "Nu poti folosi aceasta comanda pentru ca faci parte din staff!" );

	new sText[ 128 ];
	if( sscanf( params, "s[128]", sText ) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/n [ question ]" );

	if( playerVariables[ playerid ][ pNMuted ] != 0 )				return SendClientMessage( playerid, -1, "You are muted from /newbie." );
	if( playerVariables[ playerid ][ pNewbieRequesting ] != 0 )		return SendClientMessage( playerid, COLOR_GREY, "Ai folosit deja comanda /n !" );
	if( !VerificaReclama( playerid, sText ) ) 						return false;

	new helperID = SelectRandomHelper();
	if( !IsPlayerConnected( helperID ) )
		return SendClientMessage( playerid, COLOR_GREY, "[...] sunt prea multe intrebari, reincearca!" );

    FormatMSGSplit( helperID, COLOR_YELLOW, "[newbie] * (%d) %s - lvl %d: %s", playerid, playerVariables[ playerid ][ pNormalName ], playerVariables[ playerid ][ pLevel ], sText );
	FormatMSGSplit( playerid, COLOR_YELLOW, "* (%d) %s - lvl %d: %s", playerid, playerVariables[ playerid ][ pNormalName ], playerVariables[ playerid ][ pLevel ], sText );
	SendClientMessage( playerid, COLOR_YELLOW, "Intrebarea ta va expira dupa 3 minute daca nu primesti un raspuns!" );

	// < Insert the /nre logs >
	InsertCMDLog( GetPlayerMysqlID(playerid), 0, "/n", sText );

	format( playerVariables[ playerid ][ pNewbieRequest ], 128, "%s", sText );
	playerVariables[ playerid ][ pNewbieRequesting ] = 1;
	playerVariables[ playerid ][ pNewbieTime ] = 180;
	Iter_Add(server_newbies, playerid);
	server_newbies++;
	playerVariables[ helperID ][ pNewbieQuestion ] = playerid;
	return true;
}
CMD:nskip( playerid, params[] )
{
	// < Check if player it's having any question )
	if( playerVariables[ playerid ][ pNewbieQuestion ] == INVALID_PLAYER_ID )
		return SendClientMessage( playerid, COLOR_GREY, "You don't have any active newbie question!" );

	if( !GetServerData(other_helpers_duty) )
		return SendClientMessage( playerid, COLOR_GREY, "There are no other helpers on duty, please answer to the question!" );

	// < Select another Helper )
	new oldNewbieID = playerVariables[ playerid ][ pNewbieQuestion ];
	playerVariables[ playerid ][ pNewbieQuestion ] = INVALID_PLAYER_ID;

	new helperID = SelectRandomHelper();
	if( helperID == INVALID_PLAYER_ID )
		helperID = playerid, playerVariables[ helperID ][ pNewbieQuestion ] = oldNewbieID;
	else
		playerVariables[ helperID ][ pNewbieQuestion ] = oldNewbieID;

	new newbieID = playerVariables[ helperID ][ pNewbieQuestion ];
	playerVariables[ helperID ][ pNewbieQuestion ] = newbieID;

	// < Send the message )
	SendClientMessage( playerid, COLOR_LIGHTGREEN, "Question skipped. If there are no other helpers online you will receive the same question!" );
	FormatMSGSplit( helperID, COLOR_NOB, "[newbie] * (%d) %s - lvl %d: %s", newbieID, playerVariables[ newbieID ][ pNormalName ], playerVariables[ newbieID ][ pLevel ], playerVariables[ newbieID ][ pNewbieRequest ] );
	return true;
}
CMD:ns( playerid, params[] )
{
	AHCheck( playerid, 1, 1 );
	if(!server_newbies)
		return SendClientMessage(playerid, ~1, "No questions!");

	SendClientMessagef( playerid, ~1, "Qustions: {CECECE}%d"COL_W" | Helpers: {CECECE}%d", GetActiveQuestions(), GetServerData(other_helpers_duty) );
	return true;
}
CMD:viewnewbie( playerid, params[] )
{
	if( playerVariables[ playerid ][ pAdminLevel ] != 0 || playerVariables[ playerid ][ pHelper ] != 0 )
	{
		SendClientMessage( playerid, COLOR_TEAL, "---------------------------------------------------------------------------------------------------------------------------------" );
		foreach(new i : server_newbies)
			SendClientMessagef( playerid, COLOR_WHITE, "Requested by: %s(ID:%i) | Problem: %s", username( i ), i, playerVariables[ i ][ pNewbieRequest ] );

		SendClientMessage( playerid, COLOR_TEAL, "---------------------------------------------------------------------------------------------------------------------------------" );
	}
	return true;
}
CMD:myn( playerid, params[] )
{
	AHCheck( playerid, 1, 1 );

	new newbieID = playerVariables[ playerid ][ pNewbieQuestion ];
	if( newbieID == INVALID_PLAYER_ID )		
		return SendClientMessage( playerid, COLOR_GREY, "You don't have any active question!" );

	FormatMSGSplit( playerid, COLOR_NOB, "* %s asked: %s?", playerVariables[ newbieID ][ pNormalName ], playerVariables[ newbieID ][ pNewbieRequest ] );
	return true;
}
CMD:nre( playerid, params[] )
{
	AHCheck( playerid, 1, 1 );

	new Text[ 128 ];
	if( sscanf( params, "s[128]", Text ) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/nre [ message ]" );

	new newbieID = playerVariables[ playerid ][ pNewbieQuestion ];
	if( newbieID == INVALID_PLAYER_ID )			return SendClientMessage( playerid, COLOR_GREY, "You don't have any active question!" );
	if( !IsPlayerConnected( newbieID ) ) 		return SendClientMessage( playerid, COLOR_GREY, "The specified player ID is either not connected or has not authenticated." );


	FormatMSGSplit( newbieID, COLOR_YELLOW, "* Helper %s: %s", playerVariables[ playerid ][ pNormalName ], Text );
	FormatMSGSplit( playerid, COLOR_NOB, "* Raspuns trimis: %s", Text );

	InsertCMDLog( GetPlayerMysqlID(playerid), GetPlayerMysqlID(newbieID), "/nre", Text );
	playerVariables[ newbieID ][ pNewbieRequesting ] = 0;
	Iter_Remove(server_newbies, newbieID);
	server_newbies--;
	playerVariables[ newbieID ][ pNewbieTime ] = 0;
	playerVariables[ playerid ][ pHelperTokens ]++;
	playerVariables[ playerid ][ pHelpedPlayers ]++;
	playerVariables[ playerid ][ pNewbieQuestion ] = INVALID_PLAYER_ID;
	SetPVarInt( newbieID, "helper_id", INVALID_PLAYER_ID );

	if(Iter_Contains( playerWithHud, playerid ))
		Iter_Remove( playerWithHud, playerid );
	if(Iter_Contains( playerWithHud, newbieID ))
		Iter_Remove( playerWithHud, newbieID );

	foreach(new i : playerWithHud )
	{
		FormatMSGSplit( i, COLOR_NOB, "* Newbie %s: %s?", playerVariables[ newbieID ][ pNormalName ], playerVariables[ newbieID ][ pNewbieRequest ] );
		FormatMSGSplit( i, COLOR_NOB, "* Helper %s: @%s, %s", playerVariables[ playerid ][ pNormalName ], playerVariables[ newbieID ][ pNormalName ], Text );
	}
	return true;
}
CMD:re( playerid, params[] )
{
	AHCheck( playerid, 1, 1 );

	new Player, Text[ 128 ];
	if( sscanf( params, "us[128]", Player, Text ) )	return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/re [playerID/Name] [ message ]" );
	if( !IsPlayerConnected( Player ) )				return SendClientMessage( playerid, COLOR_GREY, "The specified player ID is either not connected or has not authenticated." );

	// < Insert the /re logs >
	InsertCMDLog( GetPlayerMysqlID(playerid), GetPlayerMysqlID(Player), "/re", Text );
	AdminBroadCast( 1, COLOR_YELLOW, "(/re)%s->%s: %s", username( playerid ), username( Player ), Text );
	FormatMSGSplit( Player, COLOR_YELLOW, "Helper %s->%s: %s", username( playerid ), username( Player ), Text );
	return true;
}
alias:nd("ndelete");
CMD:nd( playerid, params[] )
{
	AHCheck( playerid, 1, 1 );

	new Text[ 128 ];
	if( sscanf( params, "s[128]", Text ) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/nd [ message ]" );

	new newbieID = playerVariables[ playerid ][ pNewbieQuestion ];
	if( newbieID == INVALID_PLAYER_ID )			return SendClientMessage( playerid, COLOR_GREY, "You don't have any active question!" );
	if( !IsPlayerConnected( newbieID ) ) 		return SendClientMessage( playerid, COLOR_GREY, "The specified player ID is either not connected or has not authenticated." );

	FormatMSGSplit( newbieID, COLOR_YELLOW, "* Helper %s: %s", playerVariables[ playerid ][ pNormalName ], Text );
	FormatMSGSplit( playerid, COLOR_NOB, "[/nd(elete)] Raspuns trimis: %s", Text );

	// < Insert the /nre logs )
	InsertCMDLog( playerVariables[ playerid ][ pKey ], playerVariables[ newbieID ][ pKey ], "/nd", Text );

	// < Reset the Variables )
	playerVariables[ newbieID ][ pNewbieRequesting ] = 0;
	Iter_Remove(server_newbies, newbieID);
	server_newbies--;
	playerVariables[ newbieID ][ pNewbieRequesting ] = 0;
	playerVariables[ playerid ][ pHelperTokens ]++;
	playerVariables[ playerid ][ pHelpedPlayers ]++;
	playerVariables[ playerid ][ pNewbieQuestion ] = INVALID_PLAYER_ID;
	playerVariables[ newbieID ][ pNewbieTime ] = 0;
	SetPVarInt( newbieID, "helper_id", INVALID_PLAYER_ID );

    Iter_Remove(Staff, playerid);
	foreach(new i : Staff)
	{
		FormatMSGSplit( i, COLOR_NOB, "* Newbie %s: %s?", playerVariables[ newbieID ][ pNormalName ], playerVariables[ newbieID ][ pNewbieRequest ] );
		FormatMSGSplit( i, COLOR_NOB, "(/nd) Helper %s: @%s, %s", playerVariables[ playerid ][ pNormalName ], playerVariables[ newbieID ][ pNormalName ], Text );		
	}
	Iter_Add(Staff, playerid);
	return true;
}
CMD:checkn( playerid, params[] )
{
	new Player;
	if( sscanf( params, "u", Player ) )		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/checkn [ playerid ]" );
	if( !IsPlayerConnected( Player ) ) 		return SendClientMessage( playerid, COLOR_GREY, "This player it's not connected!" );

	SendClientMessagef( playerid, COLOR_PURPLE, "%s[%d] has solved %d Newbie Requests!", username( Player ), Player, playerVariables[ Player ][ pHelpedPlayers ] );
	return true;
}
CMD:aaa2( playerid, params[] )
{
	AHCheck( playerid, 1, 5 );
	CheckPlayerAction( playerid );
	
	SetPlayerVirtualWorld( playerid, 2 );
	SetPlayerInterior( playerid, 0 );
	SetPlayerPos( playerid, -1616.2125, -123.9771, 14.1484);
	SendClientMessage( playerid, COLOR_WHITE, "Welcome to SF airport (in virtual world)." );
	return true;
}
/*CMD:takefaggio( playerid, params[] )
{
	if( IsPlayerInAnyVehicle( playerid ) )
		return SendClientMessage( playerid, COLOR_GREY, "Trebuie sa fii inafara masinii pentru a folosi comanda!" );

	if( playerVariables[ playerid ][ pTakeFaggio ] != 0 )
		return SendClientMessage( playerid, COLOR_GREY, "Ai folosit deja aceasta comanda!" );

	if( playerVariables[ playerid ][ pCarLicense ] != 0 )
		return SendClientMessage( playerid, COLOR_GREY, "Poti folosi aceasta comanda doar daca nu ai permis de conducere!" );

	switch( playerVariables[ playerid ][ pCity ] )
	{
		case 0: // LS
		{
			if( !IsPlayerInRangeOfPoint( playerid, 3.0, 1780.9833, -1862.9436, 13.0811 ) )
			{
				GPS_Location( playerid, "DMV LS", 1780.9833, -1862.9436, 13.0811 );
				return SendClientMessage( playerid, COLOR_GREY, "Trebuie sa fii in zona de Spawn!" );
			}
		}
		case 1: // LV
		{
			if( !IsPlayerInRangeOfPoint( playerid, 3.0, 1219.2964, -1813.3220, 16.5938 ) )
			{
				GPS_Location( playerid, "DMV LV", 1219.2964, -1813.3220, 16.5938 );
				return SendClientMessage( playerid, COLOR_GREY, "Trebuie sa fii in zona de Spawn!" );
			}
		}
	}
	DisableRemoteVehicleCollisions( playerid, true );
	playerVariables[ playerid ][ pTakeFaggio ] = 1;
	InfoTD_MSG( playerid, 5000, "Ai primit un Fagio!~n~Mergi la DMV-ul indicat pe GPS pentru a da examenul!" );
	switch( playerVariables[ playerid ][ pCity ] )
	{
		case 0: GPS_Location( playerid, "DMV LS", 1219.2964, -1813.3220, 16.5938 ), playerVariables[ playerid ][ pFaggioVehicle ] = CreateVehicle( 462, 1780.9833, -1862.9436, 13.0811, 1.4400, 0, 0, -1 ); // The Fagio
		case 1: GPS_Location( playerid, "DMV LV", 2044.8219, 1919.8163, 11.7481 ), playerVariables[ playerid ][ pFaggioVehicle ] = CreateVehicle( 462, 2044.8219, 1919.8163, 11.7481, 91.3106, 0, 0, -1 ); // The Fagio
	}
	SetVehicleNumberPlate( playerVariables[ playerid ][ pFaggioVehicle ], "DMV FAGGIO" );
	SetGVarInt( "veh_Faction", 0, playerVariables[ playerid ][ pFaggioVehicle ] );
	PutPlayerInVehicle( playerid, playerVariables[ playerid ][ pFaggioVehicle ], 0 );
	serverVariables[ VehicleGas ][ playerVariables[ playerid ][ pFaggioVehicle ] ] = 100.0;
	return true;
}*/
// School Instructors Commands
CMD:startlesson( playerid, params[] )
{
	if( playerVariables[ playerid ][ pFaction ] != 4 )	
		return SendClientMessage( playerid, COLOR_GREY, "Nu esti membru al factiunii School Instructors!" );

	new Player;
	if( sscanf( params, "u", Player ) )					return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/startlesson [ playerid ]" );
	if( !IsPlayerConnected( Player ) )					return SendClientMessage( playerid, COLOR_GREY, "Player it's not connected!" );
	if( playerid == Player )							return SendClientMessage( playerid, COLOR_WHITE, "Nu poti sa faci lectii cu tine!" );
	if( playerVariables[ Player ][ pTakeExam ] )		return SendClientMessage( playerid, COLOR_WHITE, "Jucatorul este deja in timpul unui examen!" );

	gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, "# Instructor %s has started the lesson for %s.", username( playerid ), username( Player ) );
	SendToFaction( 4, COLOR_IN, gsString );

	SendClientMessagef( playerid, COLOR_WHITE, "* You've started %s's lesson.", username( Player ) );
	SendClientMessagef( Player, COLOR_WHITE, "* Instructor %s has started your lesson.", username( playerid ) );

	SetPVarInt( playerid, "lesson_Timer", gettime() );
	playerVariables[ Player ][ pTakeExam ] = 1;
	return true;
}
CMD:stoplesson( playerid, params[] )
{
	new Player;
	if( sscanf( params, "u", Player ) )					return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/stoplesson [ playerid ]" );
	if( !IsPlayerConnected( Player ) )					return SendClientMessage( playerid, COLOR_GREY, "Player it's not connected!" );
	if( playerVariables[ playerid ][ pFaction ] != 4 )	return SendClientMessage( playerid, COLOR_GREY, "Nu esti membru al factiunii School Instructors!" );
	if( !playerVariables[ Player ][ pTakeExam ] )		return SendClientMessage( playerid, COLOR_WHITE, "Jucatorul nu are nici-un examen activ!" );

	gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, "# Instructor %s has stopped the lesson for %s.", username( playerid ), username( Player ) );
	SendToFaction( 4, COLOR_IN, gsString );

	SendClientMessagef( playerid, COLOR_WHITE, "* You've stopped %s's lesson.", username( Player ) );
	SendClientMessagef( Player, COLOR_WHITE, "* Instructor %s has stopped your lesson.", username( playerid ) );

	playerVariables[ Player ][ pTakeExam ] = 0;
	return true;
}
CMD:givegun( playerid, params[] )
{
	if( playerVariables[ playerid ][ pFaction ] != 4 )		
		return SendClientMessage( playerid, COLOR_GREY, "Nu esti membru al factiunii School Instructors!" );

	new Player;
	if( sscanf( params, "u", Player ) )						return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/givegun [ playerid ]" );
	if( !IsPlayerConnected( Player ) )						return SendClientMessage( playerid, COLOR_GREY, "Player it's not connected!" );
	if( playerid == Player )								return SendClientMessage( playerid, COLOR_WHITE, "Nu poti sa faci lectii cu tine!" );
	if( !IsPlayerInRangeOfPlayer( playerid, Player, 20 ) )	return SendClientMessage( playerid, COLOR_GREY, "The player have to be min 20m away from you!" );
	if( !playerVariables[ Player ][ pTakeExam ] )			return SendClientMessage( playerid, COLOR_WHITE, "Jucatorul nu are nici-un examen activ!" );

	if( playerVariables[ playerid ][ pPaintBall ] != -1 )
		return SendClientMessage( playerid, COLOR_GREY, "You can't use this command in Paintball Arena!" );

	GivePlayerServerWeapon( Player, 23, 10 );
	SendClientMessagef( Player, COLOR_WHITE, "* Instructorul %s ti-a dat un pistol pentru examen!", username( playerid ) );

	gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, "# Instructor %s has given a weapon to %s.", username( playerid ), username( Player ) );
	SendToFaction( 4, COLOR_IN, gsString );
	return true;
}
CMD:givelicense( playerid, params[] )
{
	if( playerVariables[ playerid ][ pFaction ] != 4 )
		return SendClientMessage( playerid, COLOR_GREY, "Nu esti membru al factiunii School Instructors!" );

	if( gettime() - GetPVarInt( playerid, "lesson_Timer" ) <= 60 )
		return SendClientMessagef( playerid, ~1, "* Trebuie sa astepti %d secunde dupa ce ai folosit /startlesson!", 60 - (gettime() - GetPVarInt( playerid, "lesson_Timer" )) );

	new Player, License[ 16 ];
	if( sscanf( params, "us[16]", Player ,License ) )
	{
		SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/givelicense [ playerid ] [ license ]" );
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"Available licenses: Fly, Gun, Boat." );
	}
	if( !IsPlayerConnected( Player ) )						return SendClientMessage( playerid, COLOR_GREY, "Player it's not connected!" );
	if( playerid == Player )								return SendClientMessage( playerid, COLOR_WHITE, "Trebuie sa dai teste cu un alt instructor pentru a primi licentele!" );
	if( !playerVariables[ Player ][ pTakeExam ] )			return SendClientMessage( playerid, COLOR_WHITE, "Jucatorul trebuie sa fie intr-un examen activ, /startlesson" );
	if( !IsPlayerInRangeOfPlayer( playerid, Player, 4.0 ) )	return SendClientMessage( playerid, COLOR_GREY, "You're too far away from this person!" );

    switch(YHash(License, false))
    {
    	case _I<fly>:
    	{
    		SendClientMessagef( playerid, COLOR_WHITE, "* %s has recieved fly license.", username( Player ) );
			SendClientMessagef( Player, COLOR_WHITE, "%s has given you a fly license.", username( playerid ) );
			playerVariables[ Player ][ pFlyLicense ] = 100;
			playerVariables[ playerid ][ pFactionLicensesGiven ]++;

			gsQuery[ 0 ] = EOS;
			mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerFlyLicense` = 100 WHERE `id` = %d", GetPlayerMysqlID(Player) );
			mysql_tquery( g_Handle, gsQuery, "", "" );

			gsString[ 0 ] = EOS;
			format( gsString, sizeof gsString, "(i) %s has given %s the Fly license.", username( playerid ), username( Player ) );
			SendToFaction( 4, COLOR_IN, gsString );
			return true;
    	}
    	case _I<gun>:
    	{
    		SendClientMessagef( playerid, COLOR_WHITE, "* %s has recieved gun license.", username( Player ) );
			SendClientMessagef( Player, COLOR_WHITE, "%s has given you a gun license.", username( playerid ) );
			playerVariables[ Player ][ pGunLicense ] = 100;
			playerVariables[ playerid ][ pFactionLicensesGiven ]++;

			gsQuery[ 0 ] = EOS;
			mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerGunLicense` = 100 WHERE `id` = %d", GetPlayerMysqlID(Player) );
			mysql_tquery( g_Handle, gsQuery, "", "" );

			gsString[ 0 ] = EOS;
			format( gsString, sizeof gsString, "(i) %s has given %s the Gun license.", username( playerid ), username( Player ) );
			SendToFaction( 4, COLOR_IN, gsString );	
			return true;
    	}
    	case _I<boat>:
    	{
    		SendClientMessagef( playerid, COLOR_WHITE, "* %s has recieved boat license.", username( Player ) );
			SendClientMessagef( Player, COLOR_WHITE, "%s has given you a boat license.", username( playerid ) );
			playerVariables[ Player ][ pBoatLicense ] = 100;
			playerVariables[ playerid ][ pFactionLicensesGiven ]++;

			gsQuery[ 0 ] = EOS;
			mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerBoatLicense` = 100 WHERE `id` = %d", GetPlayerMysqlID(Player) );
			mysql_tquery( g_Handle, gsQuery, "", "" );

			gsString[ 0 ] = EOS;
			format( gsString, sizeof gsString, "(i) %s has given %s the Boat license.", username( playerid ), username( Player ) );
			SendToFaction( 4, COLOR_IN, gsString );
			return true;
    	}
    	default:
    	{
    		SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/givelicense [ playerid ] [ license ]" );
		    return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"Available licenses: Fly, Gun, Boat." );
    	}
    }
	return true;
}
// NR Commands
CMD:news( playerid, params[] )
{
	if( playerVariables[ playerid ][ pFaction ] != 5 )
		return SendClientMessage( playerid, COLOR_GREY, "You are not member of News Reporters!" );

	if( gettime() - GetPVarInt( playerid, "news_Timer" ) <= 60 )
		return SendClientMessagef( playerid, ~1, "* Trebuie sa astepti %d secunde pentru a plasa un anunt nou!", 60 - (gettime() - GetPVarInt( playerid, "news_Timer" )) );

	new nrText[ 128 ], nrCar = GetPlayerVehicleID( playerid ), GetTime[ 3 ];
	if( sscanf( params, "s[128]", nrText ) ) 
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/news [message]" );
	
	if( !VerificaReclama( playerid, nrText ) )
		return false;

	if( GetGVarInt( "veh_Faction", nrCar ) != 5 )
		return SendClientMessage( playerid, COLOR_GREY, "This vehicle it's not from the News Reporters!" );

	SetPVarInt( playerid, "news_Timer", gettime() );
	SendClientMessageToAllf( COLOR_NEWSRP, "NR %s: %s", username( playerid ), nrText );
	gettime( GetTime[ 0 ], GetTime[ 1 ], GetTime[ 2 ] );

	// < Give the payday )
	if( GetTime[ 1 ] >= 00 && GetTime[ 1 ] <= 10 )
	{
		playerVariables[ playerid ][ pFactionFreeNews ]++;
		if( playerVariables[ playerid ][ pFactionSessionStatus ] == 0 )
			playerVariables[ playerid ][ pFactionSessionStatus ] = 1, playerVariables[ playerid ][ pFactionNewsSessions ]++;
	}
	else playerVariables[ playerid ][ pFactionNews ]++;
	return true;
}
CMD:live( playerid, params[] )
{
	if( playerVariables[ playerid ][ pFaction ] != 5 )			return SendClientMessage( playerid, COLOR_GREY, "You are not member of News Reporters!" );
	if( playerVariables[ playerid ][ pLiveStatus ] == true ) 	return SendClientMessage( playerid, COLOR_WHITE, "You already have an active live interview!" );

	new Player, liveMoney;
	if( sscanf( params, "ud", Player, liveMoney ) ) 			return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/live [playerID/Name] <Money>" );
	if( !IsPlayerConnected( Player ) )							return SendClientMessage( playerid, COLOR_GREY, "Player it's not connected!" );
	if( liveMoney < 10 && liveMoney > 500 )						return SendClientMessage( playerid, COLOR_GREY, "You can use values from from $10 to $500!" );

	switch( playerVariables[ playerid ][ pFactionRank ] )
	{
		case 6..7:
		{
			if( GetTotalLivePlayers( playerid ) > 5 )
				return SendClientMessage( playerid, COLOR_GREY, "You can't invite more than 4 players to a live interview." );
		}
		default:
		{
			if( GetTotalLivePlayers( playerid ) > 3 )
				return SendClientMessage( playerid, COLOR_GREY, "You can't invite more than 2 players to a live interview." );
		}
	}
	if( !IsPlayerInRangeOfPlayer( playerid, Player, 5.0 ) )		return SendClientMessage( playerid, COLOR_GREY, "You're too far away from that player!" );
	if( Player == playerid ) 									return SendClientMessage( playerid, COLOR_WHITE, "You can't invite yourself to a live interview." );
	if( playerVariables[ Player ][ pTakingLive ] != INVALID_PLAYER_ID ) return SendClientMessage( playerid, COLOR_WHITE, "This player is already in a live interview." );
	if( playerVariables[ Player ][ pFaction ] == 5 ) 			return SendClientMessage( playerid, COLOR_WHITE, "You can't invite a news reporter to a live interview." );
	if( playerVariables[ Player ][ pMoney ] < 500 ) return SendClientMessage( playerid, COLOR_WHITE, "This player doesn't have enough cash." );

	playerVariables[ playerid ][ pTakingLive ] = playerid;
	Iter_Add( livePlayers[ playerid ], playerid );
	playerVariables[ Player ][ pLiveOffer ] = playerid;
	playerVariables[ Player ][ pLiveMoney ] = liveMoney;
	SendClientMessagef( playerid, COLOR_LIGHTBLUE, "You invited %s to take a live interview for $%s", playerVariables[ Player ][ pNormalName ], FormatNumber( liveMoney ) );
	SendClientMessagef( Player, COLOR_LIGHTBLUE, "* Reporter %s has invited you to take a live interview for $%s. (accept invitation, type '/accept live').", playerVariables[ playerid ][ pNormalName ], FormatNumber( liveMoney ) );
	return true;
}
CMD:startlive( playerid, params[] )
{
	if( playerVariables[ playerid ][ pLiveStatus ] )
		return SendClientMessage( playerid, COLOR_GREY, "Ai deja un live activ, termina-l pe cel curent cu /endlive !" );

	if( GetTotalLivePlayers( playerid ) < 2 )
		return SendClientMessage( playerid, COLOR_GREY, "There are not enough players invited!" );

	foreach(new i : livePlayers[ playerid ] )
		SendClientMessagef( i, COLOR_LIGHTBLUE, "* Reporter %s has started the live interview!", playerVariables[ playerid ][ pNormalName ] );

	playerVariables[ playerid ][ pLiveStatus ] = true;
	return true;
}
CMD:endlive( playerid, params[] )
{
	if( playerVariables[ playerid ][ pFaction ] != 5 )		return SendClientMessage( playerid, COLOR_GREY, "You are not member of News Reporters!" );
	if( !playerVariables[ playerid ][ pLiveStatus ] ) 		return SendClientMessage( playerid, COLOR_GREY, "You don't have any active live interview!" );

    Iter_Remove(Player, playerid);
	foreach(new i : livePlayers[ playerid ] )
	{
		TogglePlayerControllable( i, 1 );
		playerVariables[ i ][ pTakingLive ] = INVALID_PLAYER_ID;
		playerVariables[ i ][ pLiveOffer ] = INVALID_PLAYER_ID;
		Iter_Remove( livePlayers[ playerid ], i );
		SendClientMessagef( i, COLOR_LIGHTBLUE, "* Reporter %s has stopped the live interview!", playerVariables[ playerid ][ pNormalName ] );
	}
	Iter_Add(Player, playerid);
	playerVariables[ playerid ][ pLiveStatus ] = false;
	SendClientMessage( playerid, COLOR_LIGHTBLUE, "You have stopped the live interview!" );
	return true;
}
CMD:kicklive( playerid, params[] )
{
	if( playerVariables[ playerid ][ pFaction ] != 5 )			return SendClientMessage( playerid, COLOR_GREY, "You are not member of News Reporters!" );
	new Player;
	if( sscanf( params, "u", Player ) ) 						return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/kicklive [playerID/Name]" );
	if( !IsPlayerConnected( Player ) )							return SendClientMessage( playerid, COLOR_GREY, "Player it's not connected!" );
	if( playerVariables[ Player ][ pTakingLive ] != playerid ) 	return SendClientMessage( playerid, COLOR_WHITE, "This player it's not in your live interview." );

	TogglePlayerControllable( Player, 1 );
	playerVariables[ Player ][ pTakingLive ] = INVALID_PLAYER_ID;
	playerVariables[ Player ][ pLiveOffer ] = INVALID_PLAYER_ID;
	Iter_Remove( livePlayers[ playerid ], Player );
	SendClientMessagef( playerid, COLOR_LIGHTBLUE, "You have kicked %s from your live interview.", playerVariables[ Player ][ pNormalName ] );
	SendClientMessagef( Player, COLOR_LIGHTBLUE, "Reporter %s has kicked you from the live interview.", playerVariables[ playerid ][ pNormalName ] );

	// < Check if there are any players left )
	if( GetTotalLivePlayers( playerid ) == 1 )
	{
		TogglePlayerControllable( playerid, 1 );
		playerVariables[ playerid ][ pLiveStatus ] = false;
		playerVariables[ playerid ][ pLiveOffer ] = INVALID_PLAYER_ID;
		playerVariables[ playerid ][ pTakingLive ] = INVALID_PLAYER_ID;
		Iter_Remove( livePlayers[ playerid ], playerid );
		SendClientMessage( playerid, COLOR_LIGHTBLUE, "Your live interview has been stopped, reason: No more players in live!" );
	}
	return true;
}
CMD:camera( playerid, params[] )
{
	if( playerVariables[ playerid ][ pFaction ] != 5 )
		return SendClientMessage( playerid, COLOR_GREY, "You are not member of News Reporters!" );

	GivePlayerServerWeapon( playerid, 43, 9999999 );
	SendClientMessage( playerid, COLOR_LIGHTBLUE, "SUCCES: You got for FREE a camera to make photos." );
	return true;
}
// < Hitman Commands >
CMD:contracts( playerid, params[] )
{
	if(!server_contracts)
		return SendClientMessage(playerid, ~1, "No active contracts found.");

	if( playerVariables[ playerid ][ pFaction ] != 6 )
		return true;
	
	SendClientMessage( playerid, COLOR_TEAL, "---------------------------------------------------------------------------------------------------------------------------------" );
	SendClientMessage( playerid, COLOR_WHITE, "Active Contract:" );

	foreach(new i : server_contracts)
	{
		if( playerVariables[ i ][ pHeadTaken ] == 1 ) SendClientMessagef( playerid, COLOR_GREY, "Target: %s (ID:%d) - $%d - assigned\n", username( i ), i, playerVariables[ i ][ pHeadValue ] );
		if( playerVariables[ i ][ pHeadTaken ] == 0 ) SendClientMessagef( playerid, COLOR_GREY, "Target: %s (ID:%d) - $%d - unassigned\n", username( i ), i, playerVariables[ i ][ pHeadValue ] );
	}

	SendClientMessage( playerid, COLOR_TEAL, "---------------------------------------------------------------------------------------------------------------------------------" );

	return true;
}
CMD:gethit( playerid, params[] )
{
	if( playerVariables[ playerid ][ pFaction ] != 6 )
		return SendClientMessage( playerid, COLOR_GREY, "You are not from the Hitman Faction!" );

	new Player;
	if( sscanf( params, "u", Player ) ) return SendClientMessage( playerid, -1, SYNTAX_MESSAGE"/gethit [hitid]" );
	if( !IsPlayerConnected( Player ) )	return SendClientMessage( playerid, COLOR_GREY, "Player it's not connected!" );

	if( Player == INVALID_PLAYER_ID )					return SendClientMessage( playerid, COLOR_GREY, "This player is not connected!" );
	if( !playerVariables[ Player ][ pHeadValue ] )		return SendClientMessage( playerid, COLOR_GREY, "This player is not a hit!" );
	if( playerVariables[ Player ][ pHeadTaken ] )		return SendClientMessage( playerid, COLOR_GREY, "This hit has been taken by another Hitman!" );

	if( playerVariables[ playerid ][ pHeadChasing ] != INVALID_PLAYER_ID )
	{
		SendClientMessage( playerid, COLOR_GREY, "You already have a hit!" );
		return SendClientMessage( playerid, COLOR_GREY, "Solve the contract or type /cancelhit to take another hit!" );
	}
	playerVariables[ playerid ][ pHeadChasing ] = Player;
	playerVariables[ Player ][ pHeadChased ] = playerid;
	playerVariables[ Player ][ pHeadTaken ] = 1;

	gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, "%s has assigned the contract on %s (%d) to him.", username( playerid ), username( Player ), Player );
	SendToFaction( 6, COLOR_HIT, gsString );
	return true;
}
CMD:cancelhit( playerid, params[] )
{
	if( playerVariables[ playerid ][ pFaction ] == 6 )
	{
		if( playerVariables[ playerid ][ pHeadChasing ] != INVALID_PLAYER_ID )
		{
			new Player = playerVariables[ playerid ][ pHeadChasing ];
			playerVariables[ Player ][ pHeadTaken ] = 0;
			playerVariables[ Player ][ pHeadChased ] = INVALID_PLAYER_ID;
			playerVariables[ playerid ][ pHeadChasing ] = INVALID_PLAYER_ID;

			gsString[ 0 ] = EOS;
			format( gsString, sizeof gsString, "[AGENCY NEWS] %s canceled the contract on %s. Type /gethit %d to get this contract!", username( playerid ), username( Player ), Player );
			SendToFaction( 6, COLOR_HIT, gsString );
		}
	}
	return true;
}
CMD:undercover( playerid, params[] )
{
	if( playerVariables[ playerid ][ pFaction ] == 6 )
	{
		switch( playerVariables[ playerid ][ pUndercover ] )
		{
			case 0:
			{
				new hqID = GetBuildingEnterID( playerid, 1, 0, 300 );
				if( hqID == -404 )
					return SendClientMessage( playerid, COLOR_TEAL, "Trebuie sa fii in HQ pentru a folosi comanda!" );

				if( hqID != 6 )
					return SendClientMessage( playerid, COLOR_TEAL, "Acest HQ nu apartine factiunii Hitman!" );

				if( !playerVariables[ playerid ][ pGunLicense ] )
					return SendClientMessage( playerid, COLOR_GREY, "Nu ai licenta de arme, nu poti folosi comanda!" );

				foreach(new i : Player)
					ShowPlayerNameTagForPlayer( i, playerid, false );

				ResetServerWeapons( playerid );
				GivePlayerServerWeapon( playerid, 4, 1 ); // Knife
				GivePlayerServerWeapon( playerid, 23, 100 ); // SD Pistol
				GivePlayerServerWeapon( playerid, 34, 100 ); // Sniper

				PlayerTextDrawShow( playerid, PLAYER_TD[ 5 ] );
				playerVariables[ playerid ][ pUndercover ] = 1;
				SendClientMessage( playerid, -1, "You are now undercovered, use your Sniper and Knife to kill your target!" );
			}
			case 1:
			{
				foreach(new i : Player)
					ShowPlayerNameTagForPlayer( i, playerid, true );

				PlayerTextDrawHide( playerid, PLAYER_TD[ 5 ] );
				playerVariables[ playerid ][ pUndercover ] = 0;
				SendClientMessage( playerid, -1, "You are not undercovered anymore." );
			}
		}
	}
	return true;
}
CMD:contract( playerid, params[] )
{
	new Player, hMoney;
	if( sscanf( params, "ui", Player, hMoney ) )			return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/contract [ playerid ] [ amount ]" );
	if( !IsPlayerConnected( Player ) )						return SendClientMessage( playerid, COLOR_GREY, "That player isn't online!" );
	if( playerVariables[ Player ][ pAFKHits ] >= 3 )		return SendClientMessage( playerid, COLOR_GREY, "Acest jucator este AFK si a fost omorat deja!" );
	if( playerVariables[ Player ][ pFaction ] == 6 )		return SendClientMessage( playerid, COLOR_GREY, "You cannot place this contract on this Hitman!" );
	if( playerVariables[ Player ][ pAdminLevel ] )			return SendClientMessage( playerid, COLOR_GREY, "You cannot place contracts on Admins!" );
	if( playerVariables[ playerid ][ pFaction ] == 6 )		return SendClientMessage( playerid, COLOR_GREY, "You are a hitman and you can't place any contract!" );
	if( Player == playerid ) 								return SendClientMessage( playerid, COLOR_GREY, "You cannot contract yourself!" );
	if( playerVariables[ playerid ][ pMoney ] < hMoney )	return SendClientMessage( playerid, COLOR_GREY, "You do not have enough money for this contract!" );
	if( playerVariables[ Player ][ pHeadChased ] != INVALID_PLAYER_ID )
		return SendClientMessage( playerid, COLOR_GREY, "An active contract it's already active!" );

	if( hMoney < 500 || hMoney > 100000 )					
		return SendClientMessage( playerid, COLOR_GREY, "The minimum amount of a contract is $500 and the maximum amount $100.000" );

	playerVariables[ playerid ][ pMoney ] -= hMoney;
	playerVariables[ Player ][ pHeadValue ] = hMoney;
	Iter_Add(server_contracts, Player);
	server_contracts++;

	gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, "New hit! Target: %s. Price: $%d.", username( Player ), hMoney );
	SendToFaction( 6, COLOR_HIT, gsString );

	SendClientMessagef( playerid, COLOR_WHITE, "* You placed a contract on %s for $%s", username( Player ), FormatNumber( hMoney ) );
	//( playerid, 1052, 0.0, 0.0, 0.0 );
	return true;
}
// < LVPD Commands >
CMD:backup( playerid, params[] )
{
	if( playerVariables[ playerid ][ pFaction ] == 1 )
	{
		gsString[ 0 ] = EOS;
		format( gsString, sizeof gsString, "Dispatch: %s is requesting for immediate backup (( '/acceptbackup %d' to take the call )).", username( playerid ), playerid );
		SendToFaction( playerVariables[ playerid ][ pFaction ], COLOR_RADIOCHAT, gsString );
		SetPVarInt( playerid, "rBackUp", 1 ); // Unlike the backup var (which will be called repeatedly) this will only be looked up when someone uses /acceptbackup.
	}
	return true;
}
CMD:cancelbackup( playerid, params[] )
{
	if( playerVariables[ playerid ][ pFaction ] == 1 )
		DeletePVar( playerid, "rBackUp" ), SendClientMessage( playerid, COLOR_WHITE, "You have canceled your backup request." );

	return true;
}
CMD:acceptbackup( playerid, params[] )
{
	if( !IsPlayerCop( playerid ) )					return SendClientMessage( playerid, COLOR_GREY, "You are not a Cop!" );
	new Player;
	if( sscanf( params, "u", Player ) )				return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/acceptbackup [ playerid ]" );
	if( !IsPlayerConnected( Player ) )				return SendClientMessage( playerid, COLOR_GREY, "Player it's not connected!" );
	if( GetPVarInt(Player, "rB") != 1 )				return SendClientMessage( playerid, COLOR_GREY, "Invalid backup call specified." );
	if( playerVariables[ playerid ][ pCP ] != 0 )	return SendClientMessage( playerid, COLOR_GREY, "You already have an active checkpoint, reach it first, or /killcp." );

	// < Show the messages )
	SendClientMessagef( Player, COLOR_WHITE, "%s has responded to your backup call.", username( playerid ) );
	SendClientMessagef( playerid, COLOR_WHITE, "You have responded to %s's backup call.", username( Player ) );
	return true;
}
CMD:fuelcars( playerid, params[] )
{
	AHCheck( playerid, 4, 5 );

	foreach( new i : ServerVehicles )
		if( !IsVehicleOccupied( GetGVarInt( "Server_Vehicle", i ) ) )
			serverVariables[ VehicleGas ][ i ] = 100.0;

	SendClientMessageToAllf( COLOR_GENANNOUNCE, "(Vehicle Refill) "COL_W"Admin %s has refilled server's vehicles gas tank!", username( playerid ) );
	return true;
}
CMD:rac( playerid, params[] )
{
	AHCheck( playerid, 4, 5 );

	foreach( new i : ServerVehicles )
		if( !IsVehicleOccupied( GetGVarInt( "Server_Vehicle", i ) ) )
			SetVehicleToRespawn( GetGVarInt( "Server_Vehicle", i ) ), serverVariables[ VehicleGas ][ i ] = 100.0, LinkVehicleToInterior( GetGVarInt( "Server_Vehicle", i ), 0 ), SetVehicleVirtualWorld( GetGVarInt( "Server_Vehicle", i ), 0 );

    foreach( new i : ServerSpawnCars )
        if(!IsVehicleOccupied( i ))
        	DestroyVehicle_( i ), Iter_SafeRemove(ServerSpawnCars, i, i);

	SendClientMessageToAllf( COLOR_GENANNOUNCE, "(Vehicle Respawn) "COL_W"Admin %s has respawned server's vehicles with full gas tank!", username( playerid ) );
	return true;
}
CMD:fvr( playerid, params[] )
{
	if( playerVariables[ playerid ][ pFactionRank ] < 6 )
		return SendClientMessage( playerid, COLOR_GREY, "You are not the co-leader/leader of any Faction!" );

	foreach( new i : ServerVehicles )
		if( GetGVarInt( "veh_Faction", i ) == playerVariables[ playerid ][ pFaction ] )
			if( !IsVehicleOccupied( GetGVarInt( "Server_Vehicle", i ) ) )
				SetVehicleToRespawn( GetGVarInt( "Server_Vehicle", i ) ), serverVariables[ VehicleGas ][ i ] = 100.0, LinkVehicleToInterior( GetGVarInt( "Server_Vehicle", i ), 0 ), SetVehicleVirtualWorld( GetGVarInt( "Server_Vehicle", i ), 0 );

	gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, "(Faction) "COL_W"Leader %s(%i) has respawned faction's vehicles with full gas tank!", username( playerid ), playerid );
	SendToFaction( playerVariables[ playerid ][ pFaction ], COLOR_GENANNOUNCE, gsString );
	return true;
}
CMD:changecarspawn( playerid, params[] )
{
	AHCheck( playerid, 8, 5 );

	if( !IsPlayerInAnyVehicle( playerid ) )
		return SendClientMessage( playerid, COLOR_GREY, "You have to be in a faction vehicle!" );

	new Float:fvPos[ 4 ], vehicleID = GetPlayerVehicleID( playerid );
	GetVehiclePos( vehicleID, fvPos[ 0 ], fvPos[ 1 ], fvPos[ 2 ] );
	GetVehicleZAngle( vehicleID, fvPos[ 3 ] );

	SetGVarFloat( "veh_PosX", fvPos[ 0 ], vehicleID );
	SetGVarFloat( "veh_PosY", fvPos[ 1 ], vehicleID );
	SetGVarFloat( "veh_PosZ", fvPos[ 2 ], vehicleID );
	SetGVarFloat( "veh_PosR", fvPos[ 3 ], vehicleID );

	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_vehicles` SET `vehiclePosX` = %0.2f, `vehiclePosY` = %0.2f, `vehiclePosZ` = %0.2f, `vehiclePosRotation` = %0.2f WHERE `vehicleID` = %d", 
			fvPos[ 0 ], fvPos[ 1 ], fvPos[ 2 ], fvPos[ 3 ], vehicleID );

	mysql_tquery( g_Handle, gsQuery, "", "" );

	return true;
}
CMD:find( playerid, params[] )
{
	if( IsPlayerCop( playerid ) || playerVariables[ playerid ][ pFaction ] == 2 || playerVariables[ playerid ][ pFaction ] == 3 || playerVariables[ playerid ][ pFaction ] == 6 || playerVariables[ playerid ][ pJob ] == 9 || playerVariables[ playerid ][ pJob ] == 10 )
	{
		CheckPlayerActiveCP( playerid );

		if( playerVariables[ playerid ][ pDoingJob ] != 0 )
			return SendClientMessage( playerid, COLOR_GREY, "You are working right now!" );

		new Player;
		if( playerVariables[ playerid ][ pCP ] )
			return SendClientMessage( playerid, COLOR_GREY, "Ai deja un CP setat asa ca foloseste /killcp!" );

		if( sscanf( params, "u", Player ) ) return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/find [ playerid ]" );
		if( !IsPlayerConnected( Player ) )	return SendClientMessage( playerid, COLOR_GREY, "Player it's not connected!" );
		if( !playerVariables[ Player ][ pLogged ] ) return SendClientMessage( playerid, COLOR_GREY, "Player it's not logged in!" );
		if( Player == playerid )			return SendClientMessage( playerid, COLOR_GREY, "You can't find yourself!" );

		playerVariables[ playerid ][ pCP ] = 5001;
		playerVariables[ playerid ][ pFindPlayer ] = Player;
		Iter_Add( playerFinds[ Player ], playerid);
		new Float:FindPos[ 3 ];
		GetPlayerPos( Player, FindPos[ 0 ], FindPos[ 1 ], FindPos[ 2 ] );
		new Float:fDistance = GetPlayerDistanceFromPoint( playerid, FindPos[ 0 ], FindPos[ 1 ], FindPos[ 2 ] );

		SendClientMessagef( playerid, COLOR_YELLOW, "Server has set you a checkpoint to %s[%d]. Distance: %.0f meters.", username( Player ), Player, fDistance );
		SetPlayerCheckpoint( playerid, FindPos[ 0 ], FindPos[ 1 ], FindPos[ 2 ], 3.0 );
		playerVariables[ playerid ][ pFindPlayerTimer ] = SetTimerEx( "FindTimer", 1500, true, "d", playerid );
	}
	return true;
}
CMD:free( playerid, params[] )
{
	new Player, Cash;
	if( !IsPlayerCop( playerid ) ) 						return SendClientMessage( playerid, COLOR_GREY, "You are not a Cop!" );
	if( playerVariables[ playerid ][ pFreePoints ] < 2 )return SendClientMessage( playerid, COLOR_GREY, "You don't have enough Free points!" );
	if( sscanf( params, "ud", Player, Cash ) )			return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/free [ playerid ] [ money ]" );
	if( !IsPlayerConnected( Player ) )					return SendClientMessage( playerid, COLOR_GREY, "Player it's not connected!" );
	if( Player == playerid )							return SendClientMessage( playerid, COLOR_GREY, "You can't free yourself!" );
	if( playerVariables[ Player ][ pPrisonTime ] == 0 ) return SendClientMessage( playerid, COLOR_GREY, "This player it's not jailed!" );
	if( !IsPlayerInRangeOfPlayer( playerid, Player, 5.0 ) )	return SendClientMessage( playerid, COLOR_GREY, "Target it's too far away from you!" );
	if( Cash < 1 || Cash > 10000 )						return SendClientMessage( playerid, COLOR_GREY, "You can use values from $1 to $10.000!" );
	if( playerVariables[ Player ][ pMoney ] < Cash )	return SendClientMessage( playerid, COLOR_GREY, "This player don't have enough money to pay!" );

	// < Send the messages )
	SendClientMessagef( playerid, COLOR_DARKPINK, "> I-ai trimis lui %s o oferta de a fi eliberat pentru $%s.", playerVariables[ Player ][ pNormalName ], FormatNumber( Cash ) );

	gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, "> %s doreste sa iti ofere posibilitatea de a iesi din jail in schimbul sumei de $%s. Scrie '/accept free' pentru a accepta.", playerVariables[ playerid ][ pNormalName ], FormatNumber( Cash ) );
	SendSplitMessage( Player, COLOR_DBLUE, gsString );

	// < Set the variables )
	playerVariables[ Player ][ pFreeOffer ] = playerid;
	playerVariables[ Player ][ pFreePrice ] = Cash;
	return true;
}
CMD:arrest( playerid, params[] )
{
	if( !IsPlayerCop( playerid ) ) 							return SendClientMessage( playerid, COLOR_GREY, "You are not a Cop!" );
	if( !IsPlayerInRangeOfPoint( playerid, 5.0, 2295.8447, 2468.7539, 10.8203 ) 
		&& !IsPlayerInRangeOfPoint( playerid, 5.0, 1524.7207, -1677.8617, 5.8906 )
		&& !IsPlayerInRangeOfPoint( playerid, 5.0, 268.7818,82.1058,1001.0391 ) )
		return SendClientMessage( playerid, COLOR_GREY, "Trebuie sa fii la minim 5 metri distanta de punctul de Arrest!" );

	new Player;
	if( sscanf( params, "u", Player ) )						return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/arrest [ playerid ]" );
	if( Player == playerid )								return SendClientMessage( playerid, COLOR_GREY, "You can't use this command on yourself!" );
	if( !IsPlayerConnected( Player ) )						return SendClientMessage( playerid, COLOR_GREY, "Player it's not connected!" );

	if( !IsPlayerInRangeOfPlayer( playerid, Player, 4.0 ) )	return SendClientMessage( playerid, COLOR_GREY, "Target it's too far away from you!" );
	if( !playerVariables[ Player ][ pWanted ] )				return SendClientMessage( playerid, COLOR_GREY, "Acest jucator nu are wanted!" );

	new pSentence, pTicket;
	switch( playerVariables[ Player ][ pWanted ] )
	{
		case 1: pSentence = 3 * 60, pTicket = 250;
		case 2: pSentence = 7 * 60, pTicket = 500;
		case 3: pSentence = 10 * 60, pTicket = 750;
		case 4: pSentence = 15 * 60, pTicket = 1000;
		case 5: pSentence = 20 * 60, pTicket = 1500;
		case 6: pSentence = 25 * 60, pTicket = 2000;
	}
	SendClientMessageToAllf( COLOR_LIGHTRED, "%s has arrested suspect %s, issuing a fine of $%s with a sentence of %d minutes.", username( playerid ), username( Player ), FormatNumber( pTicket ), pSentence/60 );
	playerVariables[ Player ][ pMoney ] -= pTicket;
	playerVariables[ playerid ][ pMoney ] += pTicket;
	ArrestPlayer( Player, pSentence );
	return true;
}
CMD:confiscate( playerid, params[] )
{
	if( !IsPlayerCop( playerid ) )						return SendClientMessage( playerid, COLOR_GREY, "You are not a Cop!" );
	if( !playerVariables[ playerid ][ pOnDuty ] )		return SendClientMessage( playerid, COLOR_GREY, "You're not a Cop on duty!" );

	new Player, cItem[ 15 ], reason [ 128 ];
	if( sscanf( params, "us[15]s[128]", Player, cItem, reason ) )
	{
		SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/confiscate <Name/Playerid> <Item> <Reason>" );
		SendClientMessage( playerid, COLOR_WHITE, "Items: Licence, Drugs, Materials, Weapons." );
		return true;
	}
	if( Player == playerid )							return SendClientMessage( playerid, COLOR_GREY, "You can't confiscate yourself!" );
	if( !IsPlayerConnected( Player ) )					return SendClientMessage( playerid, COLOR_GREY, "Player it's not connected!" );


	switch(YHash(cItem, false))
	{
		case _I<licence>:
		{
			if( Player == INVALID_PLAYER_ID )				return SendClientMessage( playerid, COLOR_GREY, "Player it's not connected." );
			if( !ProxDetectorS( 8.0, playerid, Player ) )	return SendClientMessage( playerid, COLOR_GREY, "This player is not near you." );

			gsString[ 0 ] = EOS;
			format( gsString, sizeof gsString, "* %s has confiscated %s's driving license, reason: %s.", username( playerid ), username( Player ), reason );
			nearByMessage( playerid, COLOR_PURPLE, NBM_DIST, gsString, username( playerid ), username( Player ) );
			SendToFaction( 1, COLOR_LIGHTBLUE, gsString );

			SendClientMessagef( playerid, COLOR_WHITE, "You have confiscated %s's driving license, reason: %s.", username( Player ), reason );
			SendClientMessagef( Player, COLOR_WHITE, "%s has confiscated your driving license, reason: %s.", username( playerid ), reason );

			playerVariables[ playerid ][ pFactionLicenses ]++;
			playerVariables[ Player ][ pCarLicense ] = 0;
			if(playerVariables[Player][pRadarON] == 1) playerVariables[Player][pRadarON] = 0, SetPVarInt(Player, "coming_ticket_radar", 1);

			gsQuery[ 0 ] = EOS;
			mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerCarLicense` = 0 WHERE `id` = %d", GetPlayerMysqlID(Player) );
			mysql_tquery( g_Handle, gsQuery, "", "" );
		}
		case _I<weapons>:
		{
			if( Player == INVALID_PLAYER_ID )				return SendClientMessage( playerid, COLOR_GREY, "Player it's not connected." );
			if( !ProxDetectorS( 8.0, playerid, Player ) )	return SendClientMessage( playerid, COLOR_GREY, "This player is not near you." );

			gsString[ 0 ] = EOS;
			format( gsString, sizeof gsString, "* %s has confiscated %s's weapon license, reason: %s.", username( playerid ), username( Player ), reason );
			nearByMessage( playerid, COLOR_PURPLE, NBM_DIST, gsString, username( playerid ), username( Player ) );
			SendToFaction( 1, COLOR_LIGHTBLUE, gsString );

			SendClientMessagef( playerid, COLOR_WHITE, "You have confiscated %s's weapons, reason: %s.", username( Player ), reason );
			SendClientMessagef( Player, COLOR_WHITE, "%s has confiscated your weapons, reason: %s.", username( playerid ), reason );

			ResetServerWeapons( Player );
		}
		case _I<materials>:
		{
			if( Player == INVALID_PLAYER_ID )				return SendClientMessage( playerid, COLOR_GREY, "Player it's not connected." );
			if( !ProxDetectorS( 8.0, playerid, Player ) )	return SendClientMessage( playerid, COLOR_GREY, "This player is not near you." );
			if( playerVariables[ Player ][ pMaterials ] == 0 )
				return SendClientMessage( playerid, COLOR_GREY, "This player doesn't have any Materials!" );

			gsString[ 0 ] = EOS;
			format( gsString, sizeof gsString, "* %s has confiscated %s's materials, reason: %s.", username( playerid ), username( Player ), reason );
			nearByMessage( playerid, COLOR_PURPLE, NBM_DIST, gsString, username( playerid ), username( Player ) );
			SendToFaction( 1, COLOR_LIGHTBLUE, gsString );

			SendClientMessagef( playerid, COLOR_WHITE, "You have confiscated %s's materials, reason: %s.", username( Player ), reason );
			SendClientMessagef( Player, COLOR_WHITE, "%s has confiscated your materials, reason: %s.", username( playerid ), reason );

			playerVariables[ Player ][ pMaterials ] = 0;

			gsQuery[ 0 ] = EOS;
			mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerMaterials` = 0 WHERE `id` = %d", GetPlayerMysqlID(Player) );
			mysql_tquery( g_Handle, gsQuery, "", "" );
		}
		case _I<drugs>:
		{
			if( Player == INVALID_PLAYER_ID )				return SendClientMessage( playerid, COLOR_GREY, "Player it's not connected." );
			if( !ProxDetectorS( 8.0, playerid, Player ) )	return SendClientMessage( playerid, COLOR_GREY, "This player is not near you." );
			if( playerVariables[ Player ][ pDrugs ] == 0 )
				return SendClientMessage( playerid, COLOR_GREY, "This player doesn't have any Drugs!" );

			gsString[ 0 ] = EOS;
			format( gsString, sizeof gsString, "* %s has confiscated %s's drugs, reason: %s.", username( playerid ), username( Player ), reason );
			nearByMessage( playerid, COLOR_PURPLE, NBM_DIST, gsString, username( playerid ), username( Player ) );
			SendToFaction( 1, COLOR_LIGHTBLUE, gsString );

			SendClientMessagef( playerid, COLOR_WHITE, "You have confiscated %s's drugs, reason: %s.", username( Player ), reason );
			SendClientMessagef( Player, COLOR_WHITE, "%s has confiscated your drugs, reason: %s.", username( playerid ), reason );

			playerVariables[ playerid ][ pFactionDrugs ]++;
			playerVariables[ Player ][ pDrugs ] = 0;

			gsQuery[ 0 ] = EOS;
			mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerDrugs` = 0 WHERE `id` = %d", GetPlayerMysqlID(Player) );
			mysql_tquery( g_Handle, gsQuery, "", "" );
		}
		default:
		{
			SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/confiscate <Name/Playerid> <Item> <Reason>" );
			SendClientMessage( playerid, COLOR_WHITE, "Items: Licence, Drugs, Materials, Weapons." );
			return true;
		}
	}
	return true;
}
CMD:ticket( playerid, params[] )
{
	if( !IsPlayerCop( playerid ) )							return SendClientMessage( playerid, COLOR_GREY, "You are not a Cop!" );
	if( !playerVariables[ playerid ][ pOnDuty ] )			return SendClientMessage( playerid, COLOR_GREY, "You're not on duty as a cop, use /duty" );

	new Player, ticketMoney, ticketReason[ 32 ];
	if( sscanf( params, "uds[32]", Player, ticketMoney, ticketReason ) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/ticket [ playerid ] [ money ] [ reason ]" );

	if( Player == playerid )								return SendClientMessage( playerid, COLOR_GREY, "You can't send a ticket to yourself!" );
	if( !IsPlayerConnected( Player ) )						return SendClientMessage( playerid, COLOR_GREY, "Player it's not connected!" );
	if( !IsPlayerInRangeOfPlayer( playerid, Player, 3.0 ) )	return SendClientMessage( playerid, COLOR_GREY, "You're too far away." );
	if( ticketMoney < 1000 || ticketMoney > 20000 )			return SendClientMessage( playerid, COLOR_GREY, "Ticket value can be from $1.000 to $20.000" );
	if( GetPVarInt( Player, "IsuerID" ) == playerid )		return SendClientMessage( playerid, COLOR_GREY, "You already send one ticket for this player!" );

	SetPVarInt( Player, "IsuerID", playerid );
	SetPVarInt( Player, "IsuerMoney", ticketMoney );

	nearByMessage( playerid, COLOR_PURPLE, NBM_DIST, "* %s writes up a ticket, and hands it to %s.", username( playerid ), username( Player ) );
	SendClientMessagef( playerid, COLOR_WHITE, "You have issued %s a ticket costing $%s with reason: %s", username( Player ), FormatNumber( ticketMoney ), ticketReason );
	SendClientMessagef( Player, COLOR_GENANNOUNCE, "%s issued you a ticket for $%s, reason: %s - /accept ticket to pay the fine.", username( playerid ), FormatNumber( ticketMoney ), ticketReason );
	return true;
}
CMD:accept( playerid, params[] )
{
	new sscanfPlayer, lsService[ 64 ];
	if( sscanf( params, "s[64]D(65535)", lsService, sscanfPlayer ) )
	{
		SendClientMessage( playerid, COLOR_WHITE, "USAGE: /accept [item] [playerID - where required]" );
		return SendClientMessage( playerid, COLOR_GREY, "Items: dice, ticket, mats, drugs, invite, weapon, live, refill, repair" );
	}
	switch(YHash(lsService, false))
	{
		case _I<free>:
		{
			new Player = playerVariables[ playerid ][ pFreeOffer ],
			Cash = playerVariables[ playerid ][ pFreePrice ];

			if( Player == INVALID_PLAYER_ID || !IsPlayerConnected( Player ) ) 
				return SendClientMessage( playerid, COLOR_GREY, "Niciun player nu ti-a oferit /free sau s-a deconectat." );

			if(playerVariables[Player][pFreePoints] < 2) return SendClientMessage(Player, COLOR_GREY, "Nu ai destule free points."), SendClientMessage(playerid, COLOR_GREY, "Jucatorul nu are destule free points.");

			if(playerVariables[playerid][pMoney] < Cash) return SendClientMessage(Player, COLOR_GREY, "Jucatorul caruia i-ai oferit free nu are destui bani."), SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani.");

			// < Send messages )
			SendClientMessagef( Player, COLOR_GREEN, "(+) %s a acceptat oferta de a fi eliberat iar tu ai primit $%s.", playerVariables[ playerid ][ pNormalName ], FormatNumber( Cash ) );
			SendClientMessagef( playerid, COLOR_DARKPINK, "Ai platit $%s pentru a fi eliberat din inchisoare.", FormatNumber( Cash ) );
			playerVariables[ Player ][ pMoney ] += Cash;
			playerVariables[ playerid ][ pMoney ] -= Cash;
			playerVariables[ Player ][ pFreePoints ] -= 2; 

			// < Reset variables )
			playerVariables[ playerid ][ pFreeOffer ] = INVALID_PLAYER_ID;
			playerVariables[ playerid ][ pFreePrice ] = 0;

			// < Free the player )
			SetPlayerInterior( playerid, 0 );
			SetPlayerVirtualWorld( playerid, 0 );
			SetPlayerHealth( playerid, 100 );
			SetPlayerArmour( playerid, 0.0 );
			playerVariables[ playerid ][ pPrisonTime ] = 0;
			KillTimer( playerVariables[ playerid ][ pPrisonTimer ] );
			PlayerTextDrawHide( playerid, PLAYER_TD[ 4 ] );
			LSPD_POS(playerid);
		}
		case _I<hidden>:
		{
			new Player = sscanfPlayer;
			if( !IsPlayerConnected( Player ) )
				return SendClientMessage( playerid, COLOR_GREY, "This player it's not connected to the server!" );

			if( GetPVarInt( Player, "hidTrade_Player" ) != playerid )
				return SendClientMessage( playerid, COLOR_GREY, "This player didn't send you any trade offer!" );

			new tradeCash = GetPVarInt( Player, "hidTrade_Cash" );
			if( !IsPlayerInRangeOfPlayer( playerid, Player, 5.0 ) )
				return SendClientMessage( playerid, COLOR_GREY, "You're too far away from that person." );

			if( !playerVariables[ Player ][ pHiddenColors ] )			
				return SendClientMessage( playerid, COLOR_GREY, "Jucatorul care ti-a trimis oferta de schimb nu mai detine culori hidden!" );

			if( playerVariables[ playerid ][ pMoney ] < tradeCash ) 
				return SendClientMessage( playerid, COLOR_GREY, "Nu ai banii necesari pentru a efectua schimbul." );

			// < Update the house's Text )
			playerVariables[ Player ][ pMoney ] += tradeCash;
			playerVariables[ playerid ][ pMoney ] -= tradeCash;

			playerVariables[ Player ][ pHiddenColors ]--;
			playerVariables[ playerid ][ pHiddenColors ]++;

			SendClientMessagef( playerid, COLOR_WHITE, "{B8FFDB}* You accepted to buy 1 hidden color for $%s from %s.", FormatNumber( tradeCash ), playerVariables[ Player ][ pNormalName ] );
			SendClientMessagef( Player, COLOR_WHITE, "{B8FFDB}* %s accepted your hidden color trade offer, and $%s was added to your Account.", playerVariables[ playerid ][ pNormalName ], FormatNumber( tradeCash ) );

			gsString[ 0 ] = EOS;
			format( gsString, sizeof gsString, "%s[user:%d] has traded 1 hidden color for $%s to %s[user:%d]", 
				playerVariables[ Player ][ pNormalName ], GetPlayerMysqlID(Player), FormatNumber( tradeCash ), playerVariables[ playerid ][ pNormalName ], GetPlayerMysqlID(playerid) );
			InsertPlayerLog( GetPlayerMysqlID(Player), GetPlayerMysqlID(playerid), gsString );
			submitToAdmins(gsString, COLOR_YELLOW);

			// < Reset trade offer )
			SetPVarInt( Player, "hidTrade_Player", INVALID_PLAYER_ID );
		}
		case _I<business>:
		{
			new Player = sscanfPlayer;
			if( !IsPlayerConnected( Player ) )
				return SendClientMessage( playerid, COLOR_GREY, "This player it's not connected to the server!" );

			if( playerVariables[ playerid ][ pBusiness ] )
				return SendClientMessage( playerid, COLOR_GREY, "Detii deja un business, nu poti accepta ofera!" );

			if( GetPVarInt( Player, "bizzTrade_Player" ) != playerid )
				return SendClientMessage( playerid, COLOR_GREY, "This player didn't send you any trade offer!" );

			new tradeCash = GetPVarInt( Player, "bizzTrade_Cash" ), bizzID = GetPVarInt( Player, "bizzTrade_bID" );
			if( !IsPlayerInRangeOfPlayer( playerid, Player, 5.0 ) )
				return SendClientMessage( playerid, COLOR_GREY, "You're too far away from that person." );

			if( playerVariables[ Player ][ pBusiness ] != bizzID )			
				return SendClientMessage( playerid, COLOR_GREY, "Jucatorul care ti-a trimis oferta de schimb nu mai detine acest business." );

			if( playerVariables[ playerid ][ pMoney ] < tradeCash ) 
				return SendClientMessage( playerid, COLOR_GREY, "Nu ai banii necesari pentru a efectua schimbul." );

			// Trade the house
			SetGVarInt( "bus_OwnerKey", GetPlayerMysqlID(playerid), bizzID );
			SetGVarString( "bus_Owner", playerVariables[ playerid ][ pNormalName ], bizzID );

			// < Update the house's Text )
			UpdateBusinessText( bizzID );
			playerVariables[ Player ][ pMoney ] += tradeCash;
			playerVariables[ playerid ][ pMoney ] -= tradeCash;

			playerVariables[ Player ][ pBusiness ] = 0;
			playerVariables[ playerid ][ pBusiness ] = bizzID;

			SendClientMessagef( playerid, COLOR_WHITE, "{B8FFDB}* You accepted to buy the Business[ID:%d] for $%s from %s.", bizzID, FormatNumber( tradeCash ), playerVariables[ Player ][ pNormalName ] );
			SendClientMessagef( Player, COLOR_WHITE, "{B8FFDB}* %s accepted your Business[ID:%d] trade offer, and $%s was added to your Account.", playerVariables[ playerid ][ pNormalName ], bizzID, FormatNumber( tradeCash ) );

			gsQuery[ 0 ] = EOS;
			mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_business` SET `busOwner` = '%s', `busOwnerKey` = %d WHERE `busKey` = %d", playerVariables[ playerid ][ pNormalName ], GetPlayerMysqlID(playerid), bizzID );
			mysql_tquery( g_Handle, gsQuery, "", "" );

			gsQuery[ 0 ] = EOS;
			mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerBusiness` = 0 WHERE `id` = %d", GetPlayerMysqlID(Player) );
			mysql_tquery( g_Handle, gsQuery, "", "" );

			gsQuery[ 0 ] = EOS;
			mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerBusiness` = %d WHERE `id` = %d", bizzID, GetPlayerMysqlID(playerid) );
			mysql_tquery( g_Handle, gsQuery, "", "" );

			gsString[ 0 ] = EOS;
			format( gsString, sizeof gsString, "%s[user:%d] has traded [business:%d] for $%s to %s[user:%d]", 
				playerVariables[ Player ][ pNormalName ], GetPlayerMysqlID(Player), bizzID, FormatNumber( tradeCash ), playerVariables[ playerid ][ pNormalName ], GetPlayerMysqlID(playerid) );

			InsertPlayerLog( GetPlayerMysqlID(Player), GetPlayerMysqlID(playerid), gsString );
			submitToAdmins(gsString, COLOR_YELLOW);

			// < Reset trade offer )
			SetPVarInt( Player, "bizzTrade_Player", INVALID_PLAYER_ID );
		}
		case _I<house>:
		{
			new Player = sscanfPlayer;
			if( !IsPlayerConnected( Player ) )
				return SendClientMessage( playerid, COLOR_GREY, "This player it's not connected to the server!" );

			if( playerVariables[ playerid ][ pHouse ] )
				return SendClientMessage( playerid, COLOR_GREY, "Detii deja o casa, nu poti accepta ofera!" );

			if( GetPVarInt( Player, "houseTrade_Player" ) != playerid )
				return SendClientMessage( playerid, COLOR_GREY, "This player didn't send you any trade offer!" );

			new tradeCash = GetPVarInt( Player, "houseTrade_Cash" ), houseID = GetPVarInt( Player, "houseTrade_hID" );
			if( !IsPlayerInRangeOfPlayer( playerid, Player, 5.0 ) )
				return SendClientMessage( playerid, COLOR_GREY, "You're too far away from that person." );

			if( playerVariables[ Player ][ pHouse ] != houseID )			
				return SendClientMessage( playerid, COLOR_GREY, "Jucatorul care ti-a trimis oferta de schimb nu mai detine aceasta casa." );

			if( playerVariables[ playerid ][ pMoney ] < tradeCash ) 
				return SendClientMessage( playerid, COLOR_GREY, "Nu ai banii necesari pentru a efectua schimbul." );

			// Trade the house
			SetGVarInt( "house_OwnerKey", GetPlayerMysqlID(playerid), houseID );
			SetGVarString( "house_Owner", playerVariables[ playerid ][ pNormalName ], houseID );
			if( playerVariables[ Player ][ pSpawnType ] == 2 )
				playerVariables[ Player ][ pSpawnType ] = 0;

			// < Update the house's Text )
			UpdateHouseText( houseID, 0 );
			playerVariables[ Player ][ pMoney ] += tradeCash;
			playerVariables[ playerid ][ pMoney ] -= tradeCash;

			playerVariables[ Player ][ pHouse ] = 0;
			playerVariables[ playerid ][ pHouse ] = houseID;

			SendClientMessagef( playerid, COLOR_WHITE, "{B8FFDB}* You accepted to buy the House for $%s from %s.", FormatNumber( tradeCash ), playerVariables[ Player ][ pNormalName ] );
			SendClientMessagef( Player, COLOR_WHITE, "{B8FFDB}* %s accepted your House trade offer, and $%s was added to your Account.", playerVariables[ playerid ][ pNormalName ], FormatNumber( tradeCash ) );

			gsQuery[ 0 ] = EOS;
			mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_houses` SET `houseOwner` = '%s', `houseOwnerKey` = %d WHERE `houseKey` = %d", playerVariables[ playerid ][ pNormalName ], GetPlayerMysqlID(playerid), houseID );
			mysql_tquery( g_Handle, gsQuery, "", "" );

			gsQuery[ 0 ] = EOS;
			mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerHouse` = 0 WHERE `id` = %d", GetPlayerMysqlID(Player) );
			mysql_tquery( g_Handle, gsQuery, "", "" );

			gsQuery[ 0 ] = EOS;
			mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerHouse` = %d WHERE `id` = %d", houseID, GetPlayerMysqlID(playerid) );
			mysql_tquery( g_Handle, gsQuery, "", "" );

			gsString[ 0 ] = EOS;
			format( gsString, sizeof gsString, "%s[user:%d] has traded [house:%d] for $%s to %s[user:%d]", 
				playerVariables[ Player ][ pNormalName ], GetPlayerMysqlID(Player), houseID, FormatNumber( tradeCash ), playerVariables[ playerid ][ pNormalName ], GetPlayerMysqlID(playerid) );

			InsertPlayerLog( GetPlayerMysqlID(Player), GetPlayerMysqlID(playerid), gsString );
			submitToAdmins(gsString, COLOR_YELLOW);

			// < Reset trade offer )
			SetPVarInt( Player, "houseTrade_Player", INVALID_PLAYER_ID );
		}
		case _I<dice>:
		{
			new Player = sscanfPlayer;
			if( !IsPlayerConnected( Player ) ) 
				return SendClientMessage( playerid, COLOR_GREY, "This player it's not connected to the server!" );

			if( playerVariables[ Player ][ pDiceOffer ] != playerid )
				return SendClientMessage( playerid, COLOR_GREY, "This player didn't send you any dice offer!" );

			new Cash = playerVariables[ Player ][ pDicePrice ];
			if( !IsPlayerInRangeOfPlayer( playerid, Player, 5.0 ) )		
				return SendClientMessage( playerid, COLOR_GREY, "You're too far away from that person." );

			if( playerVariables[ playerid ][ pMoney ] < playerVariables[ playerid ][ pDicePrice ] || playerVariables[ Player ][ pMoney ] < playerVariables[ playerid ][ pDicePrice ] ) 
				return SendClientMessage( playerid, COLOR_GREY, "Tu sau adversarul tau nu aveti suficienti bani pentru a juca barbut." );

			// < Player Dice's )
			playerVariables[ playerid ][ pDice ][ 0 ] = randomEx( 1, 6 );
			playerVariables[ playerid ][ pDice ][ 1 ] = randomEx( 1, 6 );
			playerVariables[ playerid ][ pDiceTotal ] = playerVariables[ playerid ][ pDice ][ 0 ] + playerVariables[ playerid ][ pDice ][ 1 ];

			// < Inviter Dice's )
			playerVariables[ Player ][ pDice ][ 0 ] = randomEx( 1, 6 );
			playerVariables[ Player ][ pDice ][ 1 ] = randomEx( 1, 6 );
			playerVariables[ Player ][ pDiceTotal ] = playerVariables[ Player ][ pDice ][ 0 ] + playerVariables[ Player ][ pDice ][ 1 ];

			// < Check the winner )
			if( playerVariables[ playerid ][ pDiceTotal ] > playerVariables[ Player ][ pDiceTotal ] )
			{
				nearByMessage( playerid, COLOR_PURPLE, NBM_DIST, "* %s rolls %d %d. %s rolls %d %d. %s won $%s.", 
					username( playerid ), playerVariables[ playerid ][ pDice ][ 0 ], playerVariables[ playerid ][ pDice ][ 1 ], 
					username( Player ), playerVariables[ Player ][ pDice ][ 0 ], playerVariables[ Player ][ pDice ][ 1 ], username( playerid ), FormatNumber( Cash ) );

				playerVariables[ playerid ][ pMoney ] += Cash;
				playerVariables[ Player ][ pMoney ] -= Cash;
				SendClientMessagef( playerid, COLOR_GREEN, "(+) Ai castigat la barbut $%s!", FormatNumber( Cash ) );
				SendClientMessagef( Player, COLOR_GREEN, "(-) Ai pierdut la barbut $%s!", FormatNumber( Cash ) );
			}
			else if( playerVariables[ playerid ][ pDiceTotal ] < playerVariables[ Player ][ pDiceTotal ] )
			{
				nearByMessage( playerid, COLOR_PURPLE, NBM_DIST, "* %s rolls %d %d. %s rolls %d %d. %s won $%s.", 
					username( playerid ), playerVariables[ playerid ][ pDice ][ 0 ], playerVariables[ playerid ][ pDice ][ 1 ], 
					username( Player ), playerVariables[ Player ][ pDice ][ 0 ], playerVariables[ Player ][ pDice ][ 1 ], username( Player ), FormatNumber( Cash ) );

				playerVariables[ Player ][ pMoney ] += Cash;
				playerVariables[ playerid ][ pMoney ] -= Cash;
				SendClientMessagef( Player, COLOR_GREEN, "(+) Ai castigat la barbut $%s!", FormatNumber( Cash ) );
				SendClientMessagef( playerid, COLOR_GREEN, "(-) Ai pierdut la barbut $%s!", FormatNumber( Cash ) );
			}
			else
			{
				nearByMessage( playerid, COLOR_PURPLE, NBM_DIST, "* %s rolls %d %d. %s rolls %d %d. No one won.",
					username( playerid ), playerVariables[ playerid ][ pDice ][ 0 ], playerVariables[ playerid ][ pDice ][ 1 ],
					username( Player ), playerVariables[ Player ][ pDice ][ 0 ], playerVariables[ Player ][ pDice ][ 1 ] );
			}
			// < Reset dice offer )
			playerVariables[ Player ][ pDiceOffer ] = INVALID_PLAYER_ID;
			playerVariables[ Player ][ pDicePrice ] = 0;
		}
		case _I<refill>:
		{
			new Player = playerVariables[ playerid ][ pRefillOffer ];
			if( Player == INVALID_PLAYER_ID || !IsPlayerConnected( Player ) )
				return SendClientMessage( playerid, COLOR_GREY, "You don't have any refill offer from this mechanic or it's disconnected!" );

			new Cash = playerVariables[ playerid ][ pRefillPrice ];
			if(playerVariables[playerid][pMoney] < Cash) return SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani.");
			SendClientMessagef( playerid, COLOR_WHITE, "* You refuelled your car for $%d by car mechanic %s.", Cash, playerVariables[ Player ][ pNormalName ] );
			SendClientMessagef( Player, COLOR_WHITE, "* You refuelled %s's car for $%d.", playerVariables[ playerid ][ pNormalName ], Cash );
			playerVariables[ Player ][ pMoney ] += Cash;
			playerVariables[ playerid ][ pMoney ] -= Cash;
			serverVariables[ VehicleGas ][ GetPlayerVehicleID( playerid ) ] = 100.0;

			playerVariables[ playerid ][ pRefillOffer ] = INVALID_PLAYER_ID;
			playerVariables[ playerid ][ pRefillPrice ] = 0;
		}
		case _I<repair>:
		{
			new Player = playerVariables[ playerid ][ pRepairOffer ];
			if( Player == INVALID_PLAYER_ID || !IsPlayerConnected( Player ) )
				return SendClientMessage( playerid, COLOR_GREY, "You don't have any repair offer from this mechanic or it's disconnected!" );

			new Cash = playerVariables[ playerid ][ pRepairPrice ];
			if(playerVariables[playerid][pMoney] < Cash) return SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani.");
			SendClientMessagef( playerid, COLOR_WHITE, "* You repaired your car for $%d by car mechanic %s.", Cash, playerVariables[ Player ][ pNormalName ] );
			SendClientMessagef( Player, COLOR_WHITE, "* You repaired %s's car for $%d.", playerVariables[ playerid ][ pNormalName ], Cash );
			playerVariables[ Player ][ pMoney ] += Cash;
			playerVariables[ playerid ][ pMoney ] -= Cash;
			RepairVehicle( GetPlayerVehicleID( playerid ) );

			playerVariables[ playerid ][ pRepairOffer ] = INVALID_PLAYER_ID;
			playerVariables[ playerid ][ pRepairPrice ] = 0;
		}
		case _I<live>:
		{
			new Player = playerVariables[ playerid ][ pLiveOffer ];
			if( !IsPlayerConnected( Player ) )
				return SendClientMessage( playerid, COLOR_GREY, "This player it's not connected anymore!" );

			if( Player == INVALID_PLAYER_ID )
				return SendClientMessage( playerid, COLOR_GREY, "You don't have any live offer from this player! " );

			if(playerVariables[playerid][pMoney] < playerVariables[ playerid ][ pLiveMoney ]) return SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani.");

			SendClientMessage( playerid, COLOR_LIGHTBLUE, "You are now in a live interview! Respect the rules or you will get kicked!" );
			SendClientMessage( playerid, COLOR_LIGHTBLUE, "Everything you say will be seen by everyone on the server!" );
			SendClientMessage( playerid, COLOR_DARKPINK, "Ai primit freeze. Te vei putea misca dupa ce se va termina live-ul." );
			SendClientMessagef( Player, COLOR_LIGHTBLUE, "%s accepted live interview for $%d", playerVariables[ playerid ][ pNormalName ], playerVariables[ playerid ][ pLiveMoney ] );
			TogglePlayerControllable( playerid, 0 );

			playerVariables[ playerid ][ pMoney ] -= playerVariables[ playerid ][ pLiveMoney ];
			playerVariables[ Player ][ pMoney ] += playerVariables[ playerid ][ pLiveMoney ];

			playerVariables[ playerid ][ pTakingLive ] = Player;
			Iter_Add( livePlayers[ Player ], playerid );
			playerVariables[ playerid ][ pLiveOffer ] = INVALID_PLAYER_ID;

			if( GetTotalLivePlayers( playerid ) == 2 )
				playerVariables[ playerid ][ pFactionLives ]++, TogglePlayerControllable( Player, 0 ), SendClientMessage( Player, COLOR_DARKPINK, "Ai primit freeze. Te vei putea misca dupa ce vei termina live-ul." );
		}
		case _I<cinvite>:
		{
			if( GetPVarInt(playerid, "clanInviteID") == -1 )
			    return SendClientMessage( playerid, COLOR_GREY, "You don't have an active clan invite request." );

			playerVariables[ playerid ][ pClan ] = GetPVarInt( playerid, "clanInviteID" );
			playerVariables[ playerid ][ pClanRank ] = 1;
			new clanID = playerVariables[ playerid ][ pClan ];

			gsString[ 0 ] = EOS;
			format( gsString, sizeof gsString, "%s has joined the clan (invited by %s).", playerVariables[ playerid ][ pNormalName ], GetPVarStringEx( playerid, "clanInviteName" ) );
			SendToClan( clanID, COLOR_GENANNOUNCE, gsString );
			InsertClanLog( playerid, clanID, gsString );

			SendClientMessagef( playerid, COLOR_NICESKY, "You are now a member of the %s.", GetGVarStringEx( "clan_Name", clanID ) );
			SetGVarInt( "clan_Members", GetGVarInt( "clan_Members", clanID ) + 1, clanID );

			Iter_Add(playerClans[clanID], playerid);

			gsQuery[ 0 ] = EOS;
			mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_clans` SET `clanMembers` = `clanMembers` + 1 WHERE `clanKey` = %d", clanID );
			mysql_tquery( g_Handle, gsQuery, "", "" );

			gsQuery[ 0 ] = EOS;
			mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerClan` = %d, `playerClanRank` = 1, `playerClanJoined` = now() WHERE `id` = %d", playerVariables[ playerid ][ pClan ], GetPlayerMysqlID(playerid) );
			mysql_tquery( g_Handle, gsQuery, "", "" );

			DeletePVar( playerid, "clanInviteID" );
			DeletePVar( playerid, "clanInviteName" );
		}
		case _I<mats>:
		{
			if( GetPVarInt( playerid, "mID" ) < 0 )
				return SendClientMessage( playerid, -1, "You don't have an active mats offer." );

			new amount, dealer, price;
			amount = GetPVarInt( playerid, "mAmount" );
			price = GetPVarInt( playerid, "mPrice" );
			dealer = GetPVarInt( playerid, "mID" );

			if( !IsPlayerConnected( dealer ) )
			{
				DeletePVar( playerid, "mAmount" );
				DeletePVar( playerid, "mID" );
				DeletePVar( playerid, "mPrice" );
				return SendClientMessage( playerid, -1, "The dealer has disconnected!" );
			}

			if(playerVariables[playerid][pMoney] < price) return SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani.");
			if(playerVariables[dealer][pMaterials] < amount) return SendClientMessage(playerid, COLOR_GREY, "Nu poti vinde mai multe materiale decat ai.");

			playerVariables[ playerid ][ pMoney ] -= price;
			playerVariables[ dealer ][ pMoney ] += price;
			playerVariables[ playerid ][ pMaterials ] += amount;
			playerVariables[ dealer ][ pMaterials ] -= amount;

			DeletePVar( playerid, "mAmount" );
			DeletePVar( playerid, "mID" );
			DeletePVar( playerid, "mPrice" );

			SendClientMessagef( playerid, COLOR_LIGHTBLUE, "You have bought %d mats from %s for $%i", amount, username( dealer ), price );
			SendClientMessagef( dealer, COLOR_LIGHTBLUE, "%s has bought %d mats from you, for $%i.", username( playerid ), amount, price );
		}
		case _I<drugs>:
		{
			if( GetPVarInt( playerid, "dID" ) < 0 )
				return SendClientMessage( playerid, -1, "You don't have an active drugs offer." );

			new amount, dealer, price;
			amount = GetPVarInt( playerid, "dAmount" );
			price = GetPVarInt( playerid, "dPrice" );
			dealer = GetPVarInt( playerid, "dID" );

			if( !IsPlayerConnected( dealer ) )
			{
				DeletePVar( playerid, "dAmount" );
				DeletePVar( playerid, "dID" );
				DeletePVar( playerid, "dPrice" );
				return SendClientMessage( playerid, -1, "The dealer has disconnected!" );
			}

			if(playerVariables[playerid][pMoney] < price) return SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani.");
			if(playerVariables[dealer][pMaterials] < amount) return SendClientMessage(playerid, COLOR_GREY, "Nu poti vinde mai multe droguri decat ai.");

			playerVariables[ playerid ][ pMoney ] -= price;
			playerVariables[ dealer ][ pMoney ] += price;
			playerVariables[ playerid ][ pDrugs ] += amount;
			playerVariables[ dealer ][ pDrugs ] -= amount;

			DeletePVar( playerid, "dAmount" );
			DeletePVar( playerid, "dID" );
			DeletePVar( playerid, "dPrice" );

			SendClientMessagef( playerid, COLOR_LIGHTBLUE, "You have bought %dg of drugs from %s for $%i", amount, username( dealer ), price );
			SendClientMessagef( dealer, COLOR_LIGHTBLUE, "%s has bought %dg of drugs from you, for $%i.", username( playerid ), amount, price );
		}
		case _I<ticket>:
		{
			if( !IsPlayerConnected( GetPVarInt( playerid, "IsuerID" ) ) )
			{
				DeletePVar( playerid, "IsuerID" );
				return SendClientMessage( playerid, COLOR_GREY, "The person issuing the ticket has disconnected." );
			}
			if( GetPVarInt( playerid, "IsuerID" ) == INVALID_PLAYER_ID )
				return SendClientMessage( playerid, COLOR_GREY, "Nobody has issued you a ticket." );

			if( !IsPlayerInRangeOfPlayer( playerid, GetPVarInt( playerid, "IsuerID" ), 3.0 ) )
				return SendClientMessage( playerid, COLOR_GREY, "You're too far away." );

			new ticketMoney = GetPVarInt( playerid, "IsuerMoney" ), ticketHalfMoney = floatround( ( GetPVarInt( playerid, "IsuerMoney" )/100 )*50, floatround_round );
			if( playerVariables[ playerid ][ pMoney ] < ticketMoney )
				return SendClientMessagef( playerid, COLOR_GREY, "You can't afford to pay this ticket of $%s", FormatNumber( ticketMoney ) );

			playerVariables[ playerid ][ pMoney ] -= ticketMoney;
			playerVariables[ GetPVarInt( playerid, "IsuerID" ) ][ pFactionTickets ]++;
			playerVariables[ GetPVarInt( playerid, "IsuerID" ) ][ pMoney ] += ticketHalfMoney;
			SetGVarInt( "faction_Money", GetGVarInt( "faction_Money", 1 ) + ticketHalfMoney, 1 );

			if(GetPVarInt(playerid, "coming_ticket_radar") == 1) SetPVarInt(playerid, "coming_ticket_radar", 0);

			nearByMessage( playerid, COLOR_PURPLE, NBM_DIST, "* %s takes out $%s in cash, and hands it to %s.", username( playerid ), FormatNumber( ticketMoney ), username( GetPVarInt( playerid, "IsuerID" ) ) );
			SendClientMessagef( GetPVarInt( playerid, "IsuerID" ), COLOR_WHITE, "%s has accepted the ticket you issued him - you have received $%s", username( playerid ), FormatNumber( ticketMoney ) );
			SendClientMessagef( playerid, COLOR_WHITE, "You have paid the $%s ticket %s issued you.", FormatNumber( ticketMoney ), username( GetPVarInt( playerid, "IsuerID" ) ) );
			SetPVarInt( playerid, "IsuerID", INVALID_PLAYER_ID );
			return true;
		}
		case _I<invite>:
		{
			if( playerVariables[ playerid ][ pFactionRank ] != 0 )
				return SendClientMessage( playerid, COLOR_GREY, "You're already member of one of the factions!" );

			if( GetPVarInt( playerid, "inviteID" ) <= 0 )
				return SendClientMessage( playerid, COLOR_GREY, "You don't have an active faction invite request!" );

			playerVariables[ playerid ][ pFaction ] = GetPVarInt( playerid, "inviteID" );
			playerVariables[ playerid ][ pFactionRank ] = 1;
			new factionID = playerVariables[ playerid ][ pFaction ];
			SendClientMessagef( playerid, COLOR_NICESKY, "You are now a member of the %s.", GetGVarStringEx( "faction_Name", playerVariables[ playerid ][ pFaction ] ) );

			gsString[ 0 ] = EOS;
			format( gsString, sizeof gsString, "%s has joined the faction (invited by %s).", playerVariables[ playerid ][ pNormalName ], playerVariables[ GetPVarInt( playerid, "invitePlayer" ) ][ pNormalName ] );
			SendToFaction( playerVariables[ playerid ][ pFaction ], COLOR_GENANNOUNCE, gsString );
			ResetPlayerFactionRaport( GetPlayerMysqlID(playerid));

			switch(factionID)
			{
				case 1:
				{
					playerVariables[ playerid ][ pWanted ] = 0;
					if(Iter_Contains(server_wanteds, playerid)) Iter_Remove(server_wanteds, playerid), server_wanteds--;
					SetPlayerWantedLevel( playerid, 0 );
					SendClientMessage( playerid, COLOR_LIGHTBLUE, "As you are now a cop, you are not wanted anymore." );
					format( playerVariables[ playerid ][ pCrimeReason ], 250, "N/A" );
					Iter_Add(Departments, playerid);
					Iter_Add(playerFaction[factionID], playerid);
				}
				case 4: Iter_Add(server_instructors, playerid), server_instructors++, Iter_Add(playerFaction[factionID], playerid);
				case 5: Iter_Add(server_reporters, playerid), server_reporters++, Iter_Add(playerFaction[factionID], playerid);
				case 9: Iter_Add(Departments, playerid), Iter_Add(playerFaction[factionID], playerid);
				default: Iter_Add(playerFaction[factionID], playerid);
			}

			gsString[ 0 ] = EOS;
			format( gsString, sizeof gsString, "has joined the faction %s (invited by %s).", GetGVarStringEx( "faction_Name", playerVariables[ playerid ][ pFaction ] ), playerVariables[ GetPVarInt( playerid, "invitePlayer" ) ][ pNormalName ] );

			gsQuery[ 0 ] = EOS;
			mysql_format( g_Handle, gsQuery, sizeof gsQuery, "INSERT INTO `server_feed`(`playerKey`,`playerName`,`logText`) VALUES (%d, '%s', '%s')", GetPlayerMysqlID(playerid), playerVariables[ playerid ][ pNormalName ], gsString );
			mysql_tquery( g_Handle, gsQuery, "", "" );

			gsString[ 0 ] = EOS;
			format( gsString, sizeof gsString, "%s[user:%d] has joined the faction %s (invited by %s[user:%d]).", playerVariables[ playerid ][ pNormalName ], GetPlayerMysqlID(playerid), GetGVarStringEx( "faction_Name", playerVariables[ playerid ][ pFaction ] ), playerVariables[ GetPVarInt( playerid, "invitePlayer" ) ][ pNormalName ], GetPlayerMysqlID(GetPVarInt(playerid, "invitePlayer")) );
			InsertFactionLog( gsString, playerVariables[ playerid ][ pFaction ], GetPlayerMysqlID(playerid), playerVariables[ playerid ][ pNormalName ], 0, "N/A" );

			gsQuery[ 0 ] = EOS;
			mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `panel_applications` SET `appStatus` = 2 WHERE `appPlayerID` = %d AND `appFactionID` = %d", GetPlayerMysqlID(playerid), playerVariables[ playerid ][ pFaction ] );
			mysql_tquery( g_Handle, gsQuery, "", "" );

			playerVariables[ playerid ][ pSpawnType ] = 1;
			SetPlayerFactionColor( playerid );
			SetPlayerFactionSkin( playerid );

			gsQuery[ 0 ] = EOS;
			mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerFaction` = %d, `playerFactionRank` = 1, `playerFactionJoined` = now(), `playerFW` = 0, `playerFP` = 0, `playerSkin` = %d WHERE `id` = %d", playerVariables[ playerid ][ pFaction ], playerVariables[ playerid ][ pSkin ], GetPlayerMysqlID(playerid) );
			mysql_tquery( g_Handle, gsQuery, "", "" );

			gsQuery[ 0 ] = EOS;
			mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_factions` SET `factionMembers` = `factionMembers` + 1 WHERE `factionKey` = %d", playerVariables[ playerid ][ pFaction ] );
			mysql_tquery( g_Handle, gsQuery, "", "" );
			SetGVarInt( "faction_Members", GetGVarInt( "faction_Members", factionID ) + 1, factionID );

			DeletePVar( playerid, "invitePlayer" );
			DeletePVar( playerid, "inviteID" );
			return true;
		}
		case _I<weapon>:
		{
			new
				playerOffering = GetPVarInt( playerid, "gunID" ),
				weaponPrice = GetPVarInt( GetPVarInt( playerid, "gunID" ), "gunPrice" ),
				weaponMats = GetPVarInt( GetPVarInt( playerid, "gunID" ), "gunMats" ),
				weaponOffering = GetPVarInt( GetPVarInt( playerid, "gunID" ), "gun" ),
				slotOffering = GetPVarInt( GetPVarInt( playerid, "gunID" ), "slot" );

			if( !weaponOffering && !slotOffering )
				return SendClientMessage( playerid, COLOR_GREY, "Nobody offered you a weapon." );

			if( playerVariables[ playerid ][ pMoney ] < weaponPrice )
				return SendClientMessage( playerid, COLOR_GREY, "You don't have enough Money to buy this gun!" );

			if( !IsPlayerInRangeOfPlayer( playerid, playerOffering, 5.0 ) && IsPlayerInAnyVehicle( playerid ) && IsPlayerInAnyVehicle( playerOffering ) )
				return SendClientMessage( playerid, COLOR_GREY, "You're too far away from the person offering, or either of you are in a vehicle." );

			if(playerVariables[playerid][pMoney] < weaponPrice) return SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani.");
			if(playerVariables[playerOffering][pMaterials] < weaponMats) return SendClientMessage(playerid, COLOR_GREY, "Nu poti vinde mai multe materiale decat ai.");

			GivePlayerServerWeapon( playerid, weaponOffering, 150 );
			playerVariables[ playerid ][ pMoney ] -= weaponPrice;
			playerVariables[ playerOffering ][ pMoney ] += weaponPrice;
			playerVariables[ playerOffering ][ pMaterials ] -= weaponMats;

			SendClientMessagef( playerid, COLOR_WHITE, "You have accepted the %s from %s.", WeaponNames[ weaponOffering ], username( playerOffering ) );
			SendClientMessagef( playerOffering, COLOR_WHITE, "%s has accepted the %s you offered them.", username( playerid ), WeaponNames[ weaponOffering ] );
			nearByMessage( playerid, COLOR_PURPLE, NBM_DIST, "* %s has given their %s to %s.", username( playerOffering ), WeaponNames[ weaponOffering ], username( playerid ) );

			DeletePVar( playerOffering, "gun" );
			DeletePVar( playerid, "gunID" );
			DeletePVar( playerOffering, "slot" );
		}
		default:
		{
			SendClientMessage( playerid, COLOR_WHITE, "USAGE: /accept [item] [playerID - where required]" );
		    return SendClientMessage( playerid, COLOR_GREY, "Items: dice, ticket, mats, drugs, invite, weapon, live, refill, repair" );
		}
	}
	return true;
}
alias:su( "suspect" );
CMD:su( playerid, params[] )
{
	if( !IsPlayerCop( playerid ) )							
		return SendClientMessage( playerid, COLOR_GREY, "You are not a cop!" );

	if( !playerVariables[ playerid ][ pOnDuty ] )
		return SendClientMessage( playerid, COLOR_GREY, "Trebuie sa fii duty ca politist pentru a folosi comanda!" );

	new Player;
	if( sscanf( params, "u", Player ) )
		return SendClientMessage( playerid, -1, SYNTAX_MESSAGE"/su(spect) [ playerid ]" );

	// < Make some checks )
	if( playerid == Player )								return SendClientMessage( playerid, COLOR_GREY, "You cannot suspect yourself!" );
	if( !IsPlayerConnected( Player ) )						return SendClientMessage( playerid, COLOR_GREY, "Player it's not connected!" );
	if( IsPlayerCop( Player ) )								return SendClientMessage( playerid, COLOR_GREY, "You cannot suspect a cop!" );

	// < Set player's Suspect ID )
	SetPVarInt( playerid, "su_Player", Player );

	// < Show the dialog to the cop! )
	gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, "Crime Reason\tWanted Level\tSurrender\n" );
	for( new i = 0; i < sizeof(SU_ACTIONS); i++ )
		format( gsString, sizeof gsString, "%s"COL_W"%s\t"COL_LYE"+%d Stars\t%s\n", gsString, SU_ACTIONS[ i ][ su_Crime ], SU_ACTIONS[ i ][ su_Level ], SU_ACTIONS[ i ][ su_Surrender ] );
	return ShowPlayerDialog( playerid, DIALOG_COP_SUSPECT, DIALOG_STYLE_TABLIST_HEADERS, "Crimes List", gsString, "Select", "Exit" );
}
CMD:clear( playerid, params[] )
{
	if( !IsPlayerCop( playerid ) && playerVariables[ playerid ][ pAdminLevel ] < 4 )						
		return SendClientMessage( playerid, COLOR_GREY, "You are not a Cop or your Admin level it's too low!" );

	new Player;
	if( sscanf( params, "u", Player ) )					return SendClientMessage( playerid, -1, SYNTAX_MESSAGE"/clear [ playerid ]" );
	if( !IsPlayerConnected( Player ) )					return SendClientMessage( playerid, COLOR_GREY, "This player is not connected!" );
	if( playerVariables[ Player ][ pWanted ] == 0 )		return SendClientMessage( playerid, COLOR_RADIOCHAT, "Dispatch: This player is not wanted!" );
	playerVariables[ Player ][ pWanted ] = 0;
	playerVariables[ Player ][ pWantedTime ] = 0;
	SetPlayerWantedLevel( Player, 0 );

	gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, "Dispatch: %s cleared %s's wanted.", username( playerid ), username( Player ) );
	sendDepartmentMessage( COLOR_RADIOCHAT, gsString );
	SendClientMessagef( Player, COLOR_RADIOCHAT, "%s cleared your wanted.", username( playerid ) );

	if(Iter_Contains(server_wanteds, Player)) Iter_Remove(server_wanteds, Player), server_wanteds--;

	playerVariables[ Player ][ pCrimeReason ] = EOS;
	format( playerVariables[ Player ][ pCrimeReason ], 90, "N/A" );
	PlayerTextDrawHide( Player, PLAYER_TD[ 3 ] );
	return true;
}
CMD:buyheal( playerid, params[] )
{
	if( !IsPlayerInRangeOfPoint( playerid, 3.0, 298.9561, -126.3070, 1004.0625 ) )
		return SendClientMessagef( playerid, ~1, "Trebuie sa fii in pickup-ul cu heal din GunShop!" );

	//( playerid, 1058, 0.0, 0.0, 0.0 );
	playerVariables[ playerid ][ pMoney ] -= 300;
	SetPlayerHealth( playerid, 100 );
	return true;
}
alias:healme( "healhq" );
CMD:healme( playerid, params[] )
{
	new houseKey = GetBuildingEnterID( playerid, 1, 2, 300 ),
		factionKey = GetBuildingEnterID( playerid, 1, 0, 300 );

	if( factionKey == -404 && houseKey == -404 )
		return SendClientMessage( playerid, COLOR_TEAL, "Nu poti sa folosesti /healme in aceasta zona!" );

	if( factionKey != -404 )
		if( !playerVariables[ playerid ][ pFaction ] )
			return SendClientMessage( playerid, COLOR_GREY, "You are not member of any Faction!" );

	if( houseKey != -404 && houseKey != playerVariables[ playerid ][ pHouse ] && houseKey != playerVariables[ playerid ][ pRentRoom ] )
		return SendClientMessage( playerid, COLOR_GREY, "You can't get heal in this house!" );

	if( factionKey != -404 )
	{
		if( IsPlayerCop( playerid ) )
		{
			SetPlayerArmour( playerid, 100.0 );
			SetPlayerHealth( playerid, 100.0 );
			nearByMessage( playerid, COLOR_PURPLE, NBM_DIST, "* %s puts on body armour.", username( playerid ) );
		}
		else
		{
			SetPlayerHealth( playerid, 100.0 );
			nearByMessage( playerid, COLOR_PURPLE, NBM_DIST, "* %s ate some food from the HQ!", username( playerid ) );
		}
	}
	else if( houseKey != -404 )
	{
		if( IsPlayerCop( playerid ) )
		{
			SetPlayerArmour( playerid, 100.0 );
			SetPlayerHealth( playerid, 100.0 );
			nearByMessage( playerid, COLOR_PURPLE, NBM_DIST, "* %s puts on body armour.", username( playerid ) );
		}
		else
		{
			SetPlayerHealth( playerid, 100.0 );
			nearByMessage( playerid, COLOR_PURPLE, NBM_DIST, "* %s ate some food from this House!", username( playerid ) );
		}
	}
	return true;
}
CMD:duty( playerid, params[] )
{
	if( !IsPlayerCop( playerid ) )	
		return SendClientMessage( playerid, COLOR_GREY, "You are not a Cop!" );

	if( !playerVariables[ playerid ][ pGunLicense ] )
		return SendClientMessage( playerid, COLOR_GREY, "You don't have a Gun License!" );

	switch( playerVariables[ playerid ][ pOnDuty ] )
	{
		case 0:
		{
			if( !IsPlayerInRangeOfPoint( playerid, 100.0, GetGVarFloat( "faction_ExitX", 1 ), GetGVarFloat( "faction_ExitY", 1 ), GetGVarFloat( "faction_ExitZ", 1 ) ) )
				return SendClientMessage( playerid, COLOR_GREY, "You're not in the Police Department HQ!" );

			nearByMessage( playerid, COLOR_PURPLE, NBM_DIST, "* %s took a badge and a gun from his locker.", playerVariables[ playerid ][ pNormalName ] ) ;
			GivePlayerServerWeapon( playerid, 24, 1000 );
			GivePlayerServerWeapon( playerid, 31, 1000 );
			GivePlayerServerWeapon( playerid, 29, 1000 );
			GivePlayerServerWeapon( playerid, 41, 1000 );
			SetPlayerHealth( playerid, 100 );
			SetPlayerArmour( playerid, 100 );
			playerVariables[ playerid ][ pOnDuty ] = 1;
		}
		case 1:
		{
			if( !IsPlayerInRangeOfPoint( playerid, 100.0, GetGVarFloat( "faction_ExitX", 1 ), GetGVarFloat( "faction_ExitY", 1 ), GetGVarFloat( "faction_ExitZ", 1 ) ) )
				return SendClientMessage( playerid, COLOR_GREY, "You're not in the Police Department HQ!" );

			nearByMessage( playerid, COLOR_PURPLE, NBM_DIST, "* %s places his badge and gun in his locker.", playerVariables[ playerid ][ pNormalName ] );
			SetPlayerHealth( playerid, 100 );
			SetPlayerArmour( playerid, 0 );
			ResetServerWeapons( playerid );
			playerVariables[ playerid ][ pOnDuty ] = 0;
		}
	}
	return true;
}
CMD:aduty( playerid, params[] )
{
	AHCheck( playerid, 1, 5 );
	if( playerVariables[ playerid ][ pWanted ] )			
		return SendClientMessage( playerid, COLOR_GREY, "You're wanted, you can't get on duty right now!" );

	if( playerVariables[ playerid ][ pPaintBall ] != -1 )
		return SendClientMessage( playerid, COLOR_GREY, "You can't use this command in Paintball Arena!" );

	if( playerVariables[ playerid ][ pFactionWar ] )
		return SendClientMessage( playerid, COLOR_GREY, "You can't use this command while in war!" );

	switch( playerVariables[ playerid ][ pAdminDuty ] )
	{
		case 0:
		{
			playerVariables[ playerid ][ pAdminDuty ] = 1;
			SetPlayerSkin( playerid, 217 );
			SetPlayerArmour( playerid, 100 );
			SetPlayerSkin( playerid, 217 );

			gsString[ 0 ] = EOS;
			format( gsString, sizeof gsString, "Notice: "COL_W"Admin %s is now on administrative duty.", playerVariables[ playerid ][ pNormalName ] );
			submitToAdmins(gsString, COLOR_RED2);
		}
		case 1:
		{
			playerVariables[ playerid ][ pAdminDuty ] = 0;
			SetPlayerSkin( playerid, playerVariables[ playerid ][ pSkin ] );
			SetPlayerHealth( playerid, 100 );
			SetPlayerArmour( playerid, 0 );

			gsString[ 0 ] = EOS;
			format( gsString, sizeof gsString, "Notice: "COL_W"Admin %s is now off administrative duty.", playerVariables[ playerid ][ pNormalName ] );
			submitToAdmins(gsString, COLOR_RED2);
		}
	}
	return true;
}
CMD:hduty( playerid, params[] )
{
	AHCheck( playerid, 10, 1 );
	if( playerVariables[ playerid ][ pWanted ] )			
		return SendClientMessage( playerid, COLOR_GREY, "You're wanted, you can't get on duty right now!" );

	if( playerVariables[ playerid ][ pPaintBall ] != -1 )
		return SendClientMessage( playerid, COLOR_GREY, "You can't use this command in Paintball Arena!" );

	if( playerVariables[ playerid ][ pFactionWar ] )
		return SendClientMessage( playerid, COLOR_GREY, "You can't use this command while in war!" );

	switch( playerVariables[ playerid ][ pHelperDuty ] )
	{
		case 0:
		{
			playerVariables[ playerid ][ pHelperDuty ] = 1;
			SetPlayerSkin( playerid, 217 );
			//SetPlayerArmour( playerid, 100 );
			SendClientMessage( playerid, COLOR_LIGHTGREEN, "Acum esti duty ca helper!" );
			serverVariables[other_helpers_duty]++;
		}
		case 1:
		{
			if( playerVariables[ playerid ][ pNewbieQuestion ] != INVALID_PLAYER_ID )
				return SendClientMessage( playerid, -1, "Nu poti sa nu mai fii duty deoarece ai o intrebare activa! ");

			playerVariables[ playerid ][ pHelperDuty ] = 0;
			SetPlayerSkin( playerid, playerVariables[ playerid ][ pSkin ] );
			SendClientMessage( playerid, COLOR_LIGHTGREEN, "Acum nu mai esti in duty ca helper!" );
			serverVariables[other_helpers_duty]--;
			//SetPlayerHealth( playerid, 100 );
			//SetPlayerArmour( playerid, 0 );
		}
	}
	return true;
}
CMD:mdc( playerid, params[] )
{
	new Player;
	if( sscanf( params, "u", Player ) )						return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/mdc [ playerid ]" );
	if( !IsPlayerCop( playerid ) )							return SendClientMessage( playerid, COLOR_GREY, "You are not a Cop!" );
	if( !IsPlayerConnected( Player ) )						return SendClientMessage( playerid, COLOR_GREY, "Player it's not connected!" );
	if( playerVariables[ Player ][ pWanted ] == 0 )			return SendClientMessage( playerid, COLOR_GREY, "Player it's not wanted!" );

	// < Show the info )
	SendClientMessagef( playerid, COLOR_WHITE, "-- MDC [ID: %d - %s] ["COL_YE"W:%d"COL_W"] [Chased by %d cops] [Wanted expires in: %s] --", Player, playerVariables[ Player ][ pNormalName ], playerVariables[ Player ][ pWanted ], CountChasingCops( Player ), TimeConvert( playerVariables[ Player ][ pWantedTime ] ) );
	SendClientMessage( playerid, COLOR_WHITE, playerVariables[ Player ][ pCrimeReason ] );
	return true;
}
CMD:so( playerid, params[] )
{
	if( !IsPlayerCop( playerid ) )							return SendClientMessage( playerid, COLOR_GREY, "You're not a law enforcement officer!" );
	if( !playerVariables[ playerid ][ pOnDuty ] )			return SendClientMessage( playerid, COLOR_GREY, "You're not on duty as a cop, use /duty" );
	if( !IsPlayerInAnyVehicle( playerid ) )					return SendClientMessage( playerid, COLOR_GREY, "You're not in a police vehicle!" );

	if( gettime() - GetPVarInt( playerid, "so_Timer" ) <= 5 )
		return SendClientMessagef( playerid, ~1, "* Trebuie sa astepti %d secunde pentru a folosi comanda!", 5 - (gettime() - GetPVarInt( playerid, "so_Timer" )) );

	new Player;
	if( sscanf( params, "u", Player ) ) 					return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/so [ playerid ]" );
	if( Player == playerid )								return SendClientMessage( playerid, COLOR_GREY, "You can't somate yourself as a cop!" );
	if( !IsPlayerConnected( Player ) ) 						return SendClientMessage( playerid, COLOR_GREY, "Player it's not connected!" );
	if( !IsPlayerInRangeOfPlayer( playerid, Player, 50 ) ) 	return SendClientMessage( playerid, COLOR_GREY, "The player have to be min 50m away from you!" );
	SetPVarInt( playerid, "so_Timer", gettime() );

	gsString[ 0 ] = EOS;
	if( GetPlayerState( Player ) == PLAYER_STATE_DRIVER )
	{
		new playerSpeed = GetVehicleSpeed( GetPlayerVehicleID( Player ), 0 );
		if( playerSpeed > 1 )
			nearByMessage( playerid, COLOR_YELLOW, 50.0, "(Megaphone) Politist %s: "COL_LR"%s "COL_YE"esti urmarit de politie, trage pe dreapta imediat!", username( playerid ), username( Player ) );
		else
		{
			if( playerVariables[ Player ][ pWanted ] > 0 )
				nearByMessage( playerid, COLOR_YELLOW, 50.0, "(Megaphone) Politist %s: "COL_S"%s "COL_YE"esti urmarit de politie! Te predai?", username( playerid ), username( Player ) );
			else
				nearByMessage( playerid, COLOR_YELLOW, 50.0, "(Megaphone) Politist %s: "COL_S"%s "COL_YE"esti urmarit de politie! Opreste-te unde esti!", username( playerid ), username( Player ) );
		}
	}
	else
	{
		if( playerVariables[ Player ][ pWanted ] > 0 )
			nearByMessage( playerid, COLOR_YELLOW, 50.0, "(Megaphone) Politist %s: "COL_S"%s "COL_YE"esti urmarit de politie! Te predai?", username( playerid ), username( Player ) );
		else
			nearByMessage( playerid, COLOR_YELLOW, 50.0, "(Megaphone) Politist %s: "COL_S"%s "COL_YE"esti urmarit de politie! Opreste-te unde esti!", username( playerid ), username( Player ) );
	}
	return true;
}
alias:megaphone( "m" );
CMD:megaphone( playerid, params[] )
{
	if( !IsPlayerCop( playerid ) )							return SendClientMessage( playerid, COLOR_GREY, "You're not a law enforcement officer!" );
	if( !IsPlayerInAnyVehicle( playerid ) )					return SendClientMessage( playerid, COLOR_GREY, "You're not in a police vehicle!" );

	new Radio[ 256 ];
	if( sscanf(params, "s[256]", Radio ) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/m(egaphone) [message]" );

	if( !VerificaReclama( playerid, Radio ) ) return false;
	new FactionID = playerVariables[ playerid ][ pFaction ];

	radioString[ 0 ] = EOS;
	switch( playerVariables[ playerid ][ pFactionRank ] )
	{
		case 1:	format( radioString, sizeof radioString, "(Megaphone) "COL_W"%s %s: %s", GetGVarStringEx( "faction_Rank1", FactionID ), username( playerid ), Radio );
		case 2:	format( radioString, sizeof radioString, "(Megaphone) "COL_W"%s %s: %s", GetGVarStringEx( "faction_Rank2", FactionID ), username( playerid ), Radio );
		case 3:	format( radioString, sizeof radioString, "(Megaphone) "COL_W"%s %s: %s", GetGVarStringEx( "faction_Rank3", FactionID ), username( playerid ), Radio );
		case 4:	format( radioString, sizeof radioString, "(Megaphone) "COL_W"%s %s: %s", GetGVarStringEx( "faction_Rank4", FactionID ), username( playerid ), Radio );
		case 5:	format( radioString, sizeof radioString, "(Megaphone) "COL_W"%s %s: %s", GetGVarStringEx( "faction_Rank5", FactionID ), username( playerid ), Radio );
		case 6:	format( radioString, sizeof radioString, "(Megaphone) "COL_W"%s %s: %s", GetGVarStringEx( "faction_Rank6", FactionID ), username( playerid ), Radio );
		case 7:	format( radioString, sizeof radioString, "(Megaphone) "COL_W"%s %s: %s", GetGVarStringEx( "faction_Rank7", FactionID ), username( playerid ), Radio );
	}
	nearByMessage( playerid, COLOR_YELLOW, 50.0, radioString );
	return true;
}
alias:taser( "ta" );
CMD:taser( playerid, params[] )
{
	if( !IsPlayerCop( playerid ) )
		return SendClientMessage( playerid, COLOR_GREY, "You are not a Cop!" );

	if( !playerVariables[ playerid ][ pOnDuty ] )		
		return SendClientMessage( playerid, COLOR_GREY, "You're not on duty as a cop, use /duty" );

	if( gettime() - GetPVarInt( playerid, "taser_Timer" ) <= 60 )
		return SendClientMessagef( playerid, ~1, "* Trebuie sa astepti %d secunde pentru a folosi comanda!", 30 - (gettime() - GetPVarInt( playerid, "taser_Timer" )) );

	if( playerVariables[ playerid ][ pPaintBall ] != -1 )
		return SendClientMessage( playerid, COLOR_GREY, "You can't use Taser in Paintball Arena!" );

	SetPVarInt( playerid, "taser_Timer", gettime() );
	GivePlayerServerWeapon( playerid, 23, 15 );
	InfoTD_MSG( playerid, 5000, "You have received your ~r~~h~Taser~n~~w~~h~Use ~g~~h~/taoff ~w~~h~to get back your Deagle!" );
	return true;
}
alias:taseroff( "taoff" );
CMD:taseroff( playerid, params[] )
{
	if( !IsPlayerCop( playerid ) ) 
		return SendClientMessage( playerid, COLOR_GREY, "You are not a Cop!" );

	if( !playerVariables[ playerid ][ pOnDuty ] )			
		return SendClientMessage( playerid, COLOR_GREY, "You're not on duty as a cop, use /duty" );

	if( GetPlayerWeapon( playerid ) != WEAPON_SILENCED )      
		return SendClientMessage( playerid, COLOR_GREY, "Trebuie sa ai Taser-ul in mana!" );

	//GivePlayerServerWeapon( playerid, 23, 15 );
	GivePlayerServerWeapon( playerid, 24, 1000 );
	InfoTD_MSG( playerid, 5000, "You ~r~~h~Taser ~w~~h~has been replaced with your Deagle!" );
	return true;
}
#if defined RADAR
CMD:radar( playerid, params[] )
{
	if( !IsPlayerCop( playerid ) ) 
		return SendClientMessage( playerid, COLOR_GREY, "You are not a Cop!" );

	if( IsValidDynamicArea( playerVariables[ playerid ][ pRadarZone ] ) )
		return SendClientMessage( playerid, COLOR_GREY, "Your radar it's still active, please use /radaroff" );

	if(playerVariables[ playerid ][ pOnDuty ] == 0)
		return SendClientMessage( playerid, COLOR_GREY, "You need to be on duty.");

	new vehicleID = GetPlayerVehicleID(playerid);

    if(GetPlayerState( playerid ) != PLAYER_STATE_DRIVER)
    	return SendClientMessage(playerid, -1, "You need to be in vehicle as a driver");

	if( GetGVarInt( "veh_Faction", vehicleID) != 1 )
		return SendClientMessage( playerid, COLOR_GREY, "You can use radar only in a police vehicle!" );

	new Float:radarPOS[ 3 ];
	GetPlayerPos( playerid, radarPOS[ 0 ], radarPOS[ 1 ], radarPOS[ 2 ] );
	playerVariables[ playerid ][ pRadarZone ] = CreateDynamicCircle( radarPOS[ 0 ], radarPOS[ 1 ], 50.0 ); // Zona de 50m in jurul masinii de politie!
	TogglePlayerControllable( playerid, false );
	InfoTD_MSG( playerid, 5000, "~b~~h~LSPD System~n~~w~~h~Radar has been turned on, wait for vehicles!" );
	return SendClientMessagef( playerid, COLOR_BLUE, "LSPD System: "COL_W"Radar has been turned off!" );
}
CMD:radaroff( playerid, params[] )
{
	if( !IsPlayerCop( playerid ) ) 
		return SendClientMessage( playerid, COLOR_GREY, "You are not a Cop!" );

	if( !IsValidDynamicArea( playerVariables[ playerid ][ pRadarZone ] ) )
		return SendClientMessage( playerid, COLOR_GREY, "Your radar it's already turned off right now!" );

	TogglePlayerControllable( playerid, true );
	DestroyDynamicArea( playerVariables[ playerid ][ pRadarZone ] );
	playerVariables[ playerid ][ pRadarZone ] = INVALID_STREAMER_ID;
	return SendClientMessagef( playerid, COLOR_BLUE, "LSPD System: "COL_W"Radar has been turned off!" );
}
#endif
CMD:frisk( playerid, params[] ) 
{
	if( !IsPlayerCop( playerid ) ) 
		return SendClientMessage( playerid, COLOR_GREY, "You are not a Cop!" );

	new Player, count, Player_Weapons[ 13 ], Player_Ammos[ 13 ];
	if( sscanf( params, "u", Player ) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/frisk [ playerid ]" );

	if( !IsPlayerConnected( Player ) )					
		return SendClientMessage( playerid, COLOR_GREY, "This player is not connected!" );

	if( !IsPlayerInRangeOfPlayer( playerid, Player, 2.0 ) )
		return SendClientMessage( playerid, COLOR_GREY, "You're too far away." );

	if( GetPlayerSpecialAction( Player ) != SPECIAL_ACTION_HANDSUP )
		return SendClientMessage( playerid, COLOR_GREY, "That person must first be subdued, or have their hands up." );

	nearByMessage( playerid, COLOR_PURPLE, NBM_DIST, "* %s has frisked %s.", playerVariables[ playerid ][ pNormalName ], playerVariables[ Player ][ pNormalName ] );
	SendClientMessage( playerid, COLOR_TEAL, "----------------------------------------------------------------" );

	for( new i = 1; i <= 12; i++ )
	{
		GetPlayerWeaponData( Player, i, Player_Weapons[ i ], Player_Ammos[ i ] );
		if( Player_Weapons[ i ] != 0 )
		{
			new weaponName[ 256 ];
			GetWeaponName( Player_Weapons[ i ], weaponName, 255 );
			SendClientMessagef( playerid, 0xFFFFFFAA, "* Gun: "COL_W"%s{B8DBFF}, Ammo: "COL_W"%d", weaponName, Player_Ammos[ i ] );
			count++;
		}
	}
	if( playerVariables[ Player ][ pMaterials ] != 0 )
		SendClientMessagef( playerid, 0xFFFFFFAA, "* Materials, "COL_W"%d {B8DBFF}pieces", playerVariables[ Player ][ pMaterials ] ), count++;

	if( playerVariables[ Player ][ pDrugs ] != 0 )
		SendClientMessagef( playerid, 0xFFFFFFAA, "* Drugs, "COL_W"%d {B8DBFF}grams", playerVariables[ Player ][ pDrugs ] ), count++;

	if( playerVariables[ Player ][ pPhone ] != 0 )
		SendClientMessage( playerid, 0xFFFFFFAA, "* Phone" );

	if( count == 0 )
		SendClientMessage( playerid, COLOR_GREY, "No items found." );
	else SendClientMessagef( playerid, COLOR_GREY, "You have found %d items in %s' pockets!", count, playerVariables[ Player ][ pNormalName ] );

	SendClientMessage( playerid, COLOR_TEAL, "----------------------------------------------------------------" );
	return true;
}
CMD:cuff( playerid, params[] )
{
	new Player;
	if( !IsPlayerCop( playerid ) )						return SendClientMessage( playerid, COLOR_GREY, "You're not a Cop." );
	if( sscanf(params, "u", Player) )					return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/cuff [ playerid ]" );
	if( !IsPlayerConnected( Player ) )					return SendClientMessage( playerid, COLOR_GREY, "This player is not connected!" );
	if( !IsPlayerInRangeOfPlayer(playerid, Player, 4.0))return SendClientMessage( playerid, COLOR_GREY, "Target it's too far away from you!" );
	if( Player == playerid )							return SendClientMessage( playerid, COLOR_GREY, "You can't cuff yourself." );
	if( playerVariables[ Player ][ pFreezeType ] == 2 ) return SendClientMessage( playerid, COLOR_GREY, "That person is already cuffed!" );

	// < Remove Player Attach >
	if( IsPlayerAttachedObjectSlotUsed( Player, INDEX_CUFFS ) )
		RemovePlayerAttachedObject( Player, INDEX_CUFFS );

	SetPlayerAttachedObject( Player, INDEX_CUFFS, 19418, 6, -0.011000, 0.028000, -0.022000, -15.600012, -33.699977,-81.700035, 0.891999, 1.000000, 1.168000 );
	SetPlayerSpecialAction( Player, SPECIAL_ACTION_CUFFED );

	TogglePlayerControllable( Player, 0 );
	//playerVariables[ target ][ pFreezeTime ] = 900;
	playerVariables[ Player ][ pFreezeType ] = 2;
	GameTextForPlayer( Player, "~n~~r~Handcuffed!", 4000, 4 );
	nearByMessage( playerid, COLOR_PURPLE, NBM_DIST, "* %s has handcuffed %s.", username( playerid ), username( Player ) );
	return true;
}
CMD:uncuff( playerid, params[] )
{
	if( !IsPlayerCop( playerid ) ) 												return SendClientMessage( playerid, COLOR_GREY, "You're not a law enforcement officer." );
	new Player;
	if( sscanf( params, "u", Player ) ) 										return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/uncuff [ playerid ]" );
	if( !IsPlayerConnected( Player ) )											return SendClientMessage( playerid, COLOR_GREY, "This player is not connected!" );
	if( Player == playerid ) 													return SendClientMessage( playerid, COLOR_GREY, "You can't uncuff yourself." );
	if( !IsPlayerInRangeOfPlayer( playerid, Player, 4.0 ) ) 					return SendClientMessage( playerid, COLOR_GREY, "Target it's too far away from you!" );
	if( playerVariables[ Player ][ pFreezeType ] != 2 ) 						return SendClientMessage( playerid, COLOR_GREY, "That person is not cuffed!" );

	// < Remove Player Attach >
	if( IsPlayerAttachedObjectSlotUsed( Player, INDEX_CUFFS ) )
		RemovePlayerAttachedObject( Player, INDEX_CUFFS );

	SetPlayerSpecialAction( Player, SPECIAL_ACTION_NONE );

	//playerVariables[ Player ][ pFreezeTime ] = 0;
	playerVariables[ Player ][ pFreezeType ] = 0;

	TogglePlayerControllable( Player, 1 );
	//( Player, 1145, 0.0, 0.0, 0.0 );
	GameTextForPlayer( Player, "~n~~g~Uncuffed!", 4000, 4 );

	nearByMessage( playerid, COLOR_PURPLE, NBM_DIST, "* %s has uncuffed %s.", username( playerid ), username( Player ) );
	SendClientMessagef( playerid, COLOR_NICESKY, "You have uncuffed %s.", username( Player ) );
	//( playerid, 1145, 0.0, 0.0, 0.0 );
	return true;
}
CMD:wanted( playerid, params[] )
{
	if( IsPlayerCop( playerid ) )
	{
		if(!server_wanteds)
			return SendClientMessage( playerid, 0xFF7800FF, "{FF0000}No wanteds online at the moment!" );

		gsString[ 0 ] = EOS;
		foreach(new i : server_wanteds)
				format( gsString, sizeof gsString, "%sSuspect: "COL_R"%s(ID:%d) "COL_W"| Wanted level: "COL_O"%d "COL_W"| Distance: "COL_YE"%.0f"COL_W"m\n", gsString, username( i ), i, playerVariables[ i ][ pWanted ], GetDistanceBetweenPlayers( playerid, i ) );

		ShowPlayerDialog( playerid, DIALOG_WANTED_PLAYERS, DIALOG_STYLE_LIST, "Wanted List", gsString, "(Find)", "(Exit)" );
	}
	return true;
}
alias:radio( "r" );
CMD:radio( playerid, params[] )
{
	if( !IsPlayerCop( playerid ) && playerVariables[ playerid ][ pFaction ] != 2)
		return SendClientMessage( playerid, COLOR_GREY, "This group does not have an official radio frequency." );

	new Radio[ 256 ];
	if( sscanf(params, "s[256]", Radio ) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/r(adio) [message]" );

	if( !VerificaReclama( playerid, Radio ) ) return false;
	new FactionID = playerVariables[ playerid ][ pFaction ];

	radioString[ 0 ] = EOS;
	switch( playerVariables[ playerid ][ pFactionRank ] )
	{
		case 1:	format( radioString, sizeof radioString, "* %s %s: %s, over.", GetGVarStringEx( "faction_Rank1", FactionID), username( playerid ), Radio);
		case 2:	format( radioString, sizeof radioString, "** %s %s: %s, over.", GetGVarStringEx( "faction_Rank2", FactionID), username( playerid ), Radio);
		case 3:	format( radioString, sizeof radioString, "*** %s %s: %s, over.", GetGVarStringEx( "faction_Rank3", FactionID), username( playerid ), Radio);
		case 4:	format( radioString, sizeof radioString, "*** %s %s: %s, over.", GetGVarStringEx( "faction_Rank4", FactionID), username( playerid ), Radio);
		case 5:	format( radioString, sizeof radioString, "*** %s %s: %s, over.", GetGVarStringEx( "faction_Rank5", FactionID), username( playerid ), Radio);
		case 6:	format( radioString, sizeof radioString, "**** %s %s: %s, over.", GetGVarStringEx( "faction_Rank6", FactionID), username( playerid ), Radio);
		case 7:	format( radioString, sizeof radioString, "***** %s %s: %s, over.", GetGVarStringEx( "faction_Rank7", FactionID), username( playerid ), Radio);
		default: format( radioString, sizeof radioString, "* %s %s: %s, over.", GetGVarStringEx( "faction_Rank1", FactionID), username( playerid ), Radio);
	}
	SendToFaction( playerVariables[ playerid ][ pFaction ], COLOR_RADIOCHAT, radioString );
	InsertChatLog( GetPlayerMysqlID(playerid), "/r", Radio );
	return true;
}
alias:department( "d" );
CMD:department( playerid, params[] )
{
	if( playerVariables[ playerid ][ pFaction ] == 0 )	return SendClientMessage( playerid, COLOR_GREY, "Your faction data is invalid." );
	if( !IsPlayerCop( playerid ) && playerVariables[ playerid ][ pFaction ] != 2) return SendClientMessage( playerid, COLOR_GREY, "This faction does not have an official radio frequency." );
	new Radio[ 256 ];
	if( sscanf( params, "s[256]", Radio ) )				return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/d(epartment) [message]" );

	if( !VerificaReclama( playerid, Radio ) )        	return false;
	new FactionID = playerVariables[ playerid ][ pFaction ];

	switch( playerVariables[ playerid ][ pFactionRank ] )
	{
		case 1:	format( radioString, sizeof radioString, "* %s %s: %s, over.", GetGVarStringEx( "faction_Rank1", FactionID), username( playerid ), Radio);
		case 2:	format( radioString, sizeof radioString, "** %s %s: %s, over.", GetGVarStringEx( "faction_Rank2", FactionID), username( playerid ), Radio);
		case 3:	format( radioString, sizeof radioString, "*** %s %s: %s, over.", GetGVarStringEx( "faction_Rank3", FactionID), username( playerid ), Radio);
		case 4:	format( radioString, sizeof radioString, "*** %s %s: %s, over.", GetGVarStringEx( "faction_Rank4", FactionID), username( playerid ), Radio);
		case 5:	format( radioString, sizeof radioString, "*** %s %s: %s, over.", GetGVarStringEx( "faction_Rank5", FactionID), username( playerid ), Radio);
		case 6:	format( radioString, sizeof radioString, "**** %s %s: %s, over.", GetGVarStringEx( "faction_Rank6", FactionID), username( playerid ), Radio);
		case 7:	format( radioString, sizeof radioString, "***** %s %s: %s, over.", GetGVarStringEx( "faction_Rank7", FactionID), username( playerid ), Radio);
		default: format( radioString, sizeof radioString, "* %s %s: %s, over.", GetGVarStringEx( "faction_Rank1", FactionID), username( playerid ), Radio);
	}
	sendDepartmentMessage( COLOR_ALLDEPT, radioString );

	gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, "(radio) ''%s''", Radio );
	SetPlayerChatBubble( playerid, gsString, COLOR_CHATBUBBLE, 10.0, 10000 );
	InsertChatLog( GetPlayerMysqlID(playerid), "/d", Radio );
	return true;
}
// < Taxi Faction Commands )
alias:faction( "f" );
CMD:faction( playerid, params[] )
{
	if( playerVariables[ playerid ][ pFaction ] == 0 )
		return SendClientMessage( playerid, COLOR_GREY, "You don't take part of a faction!" );

	if( playerVariables[ playerid ][ pFaction ] == 1 || playerVariables[ playerid ][ pFaction ] == 2)
		return SendClientMessage( playerid, COLOR_GREY, "This group does not have an OOC chat." );

	new Radio[ 256 ];
	if( sscanf( params, "s[256]", Radio ) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/f(action) [message]" );

	if( !VerificaReclama( playerid, Radio ) )        	return false;
	new FactionID = playerVariables[ playerid ][ pFaction ];

	radioString[ 0 ] = EOS;
	switch( playerVariables[ playerid ][ pFactionRank ] )
	{
		case 1:	format( radioString, sizeof radioString, "# %s %s: %s", GetGVarStringEx( "faction_Rank1", FactionID), username( playerid ), Radio);
		case 2:	format( radioString, sizeof radioString, "# %s %s: %s", GetGVarStringEx( "faction_Rank2", FactionID), username( playerid ), Radio);
		case 3:	format( radioString, sizeof radioString, "# %s %s: %s", GetGVarStringEx( "faction_Rank3", FactionID), username( playerid ), Radio);
		case 4:	format( radioString, sizeof radioString, "# %s %s: %s", GetGVarStringEx( "faction_Rank4", FactionID), username( playerid ), Radio);
		case 5:	format( radioString, sizeof radioString, "# %s %s: %s", GetGVarStringEx( "faction_Rank5", FactionID), username( playerid ), Radio);
		case 6:	format( radioString, sizeof radioString, "{29b3d9}# %s %s: %s", GetGVarStringEx( "faction_Rank6", FactionID), username( playerid ), Radio);
		case 7:	format( radioString, sizeof radioString, "{29b3d9}# %s %s: %s", GetGVarStringEx( "faction_Rank7", FactionID), username( playerid ), Radio);
		default: format( radioString, sizeof radioString, "# %s %s: %s", GetGVarStringEx( "faction_Rank1", FactionID), username( playerid ), Radio);
	}
	SendToFaction( FactionID, COLOR_GROUP, radioString );
	InsertChatLog( GetPlayerMysqlID(playerid), "/f", Radio );
	return true;
}
// < Taxi Faction Commands )
alias:government( "gov" );
CMD:government( playerid, params[] )
{
	if( playerVariables[ playerid ][ pFaction ] != 1 && playerVariables[ playerid ][ pFaction ] != 2 )
		return SendClientMessage( playerid, COLOR_GREY, "You're not a Cop or a Paramedic!" );

	if( playerVariables[ playerid ][ pFactionRank ] < 5 )
		return SendClientMessage( playerid, COLOR_GREY, "You need to be rank 5 to be able to use this command!" );

	new Radio[ 256 ];
	if( sscanf( params, "s[256]", Radio ) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/gov(ernment) [message]" );

	if( !VerificaReclama( playerid, Radio ) )        	return false;
	new FactionID = playerVariables[ playerid ][ pFaction ];

	switch( playerVariables[ playerid ][ pFaction ] )
	{
		case 1: // LSPD
		{
			radioString[ 0 ] = EOS;
			format( radioString, sizeof radioString, "------ Government Announcement (%s) ------", GetGVarStringEx( "faction_Name", FactionID ) );
			SendClientMessageToAll( FACTION_COLOR_1, radioString );

			switch( playerVariables[ playerid ][ pFactionRank ] )
			{
				case 5:	radioString[ 0 ] = EOS, format( radioString, sizeof radioString, "# %s %s %s: %s", GetGVarStringEx( "faction_Rank5", FactionID ), GetGVarStringEx( "faction_Tag", FactionID ), username( playerid ), Radio );
				case 6:	radioString[ 0 ] = EOS, format( radioString, sizeof radioString, "# %s %s %s: %s", GetGVarStringEx( "faction_Rank6", FactionID ), GetGVarStringEx( "faction_Tag", FactionID ), username( playerid ), Radio );
				case 7:	radioString[ 0 ] = EOS, format( radioString, sizeof radioString, "# %s %s %s: %s", GetGVarStringEx( "faction_Rank7", FactionID ),  GetGVarStringEx( "faction_Tag", FactionID ), username( playerid ), Radio );
			}
			SendClientMessageToAll( FACTION_COLOR_1, radioString );
		}
		case 2: // PARAMEDIC
		{
			radioString[ 0 ] = EOS;
			format( radioString, sizeof radioString, "------ Government Announcement (%s) ------", GetGVarStringEx( "faction_Name", FactionID ) );
			SendClientMessageToAll( FACTION_COLOR_3, radioString );

			switch( playerVariables[ playerid ][ pFactionRank ] )
			{
				case 5:	radioString[ 0 ] = EOS, format( radioString, sizeof radioString, "# %s %s %s: %s", GetGVarStringEx( "faction_Rank5", FactionID ), GetGVarStringEx( "faction_Tag", FactionID ), username( playerid ), Radio );
				case 6:	radioString[ 0 ] = EOS, format( radioString, sizeof radioString, "# %s %s %s: %s", GetGVarStringEx( "faction_Rank6", FactionID ), GetGVarStringEx( "faction_Tag", FactionID ), username( playerid ), Radio );
				case 7:	radioString[ 0 ] = EOS, format( radioString, sizeof radioString, "# %s %s %s: %s", GetGVarStringEx( "faction_Rank7", FactionID ),  GetGVarStringEx( "faction_Tag", FactionID ), username( playerid ), Radio );
			}
			SendClientMessageToAll( FACTION_COLOR_3, radioString );
		}
	}
	InsertChatLog( GetPlayerMysqlID(playerid), "/gov(ernment)", Radio );
	return true;
}
CMD:c( playerid, params[] )
{
	if( !playerVariables[ playerid ][ pClan ] )			return SendClientMessage( playerid, COLOR_GREY, "Your clan data is invalid." );
	new Radio[ 256 ];
	if( sscanf( params, "s[256]", Radio ) )				return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/c [message]" );
	if( !VerificaReclama( playerid, Radio ) )        	return false;
	new clanID = playerVariables[ playerid ][ pClan ];

	radioString[ 0 ] = EOS;
	switch( playerVariables[ playerid ][ pClanRank ] )
	{
		case 1:	format( radioString, sizeof radioString, "{%s}[CLAN] %s %s: %s", GetGVarStringEx("clan_Color", clanID), GetGVarStringEx("clan_Rank1", clanID), username( playerid ), Radio );
		case 2:	format( radioString, sizeof radioString, "{%s}[CLAN] %s %s: %s", GetGVarStringEx("clan_Color", clanID), GetGVarStringEx("clan_Rank2", clanID), username( playerid ), Radio );
		case 3:	format( radioString, sizeof radioString, "{%s}[CLAN] %s %s: %s", GetGVarStringEx("clan_Color", clanID), GetGVarStringEx("clan_Rank3", clanID), username( playerid ), Radio );
		case 4:	format( radioString, sizeof radioString, "{%s}[CLAN] %s %s: %s", GetGVarStringEx("clan_Color", clanID), GetGVarStringEx("clan_Rank4", clanID), username( playerid ), Radio );
		case 5:	format( radioString, sizeof radioString, "{%s}[CLAN] %s %s: %s", GetGVarStringEx("clan_Color", clanID), GetGVarStringEx("clan_Rank5", clanID), username( playerid ), Radio );
		case 6:	format( radioString, sizeof radioString, "{%s}[CLAN] %s %s: %s", GetGVarStringEx("clan_Color", clanID), GetGVarStringEx("clan_Rank6", clanID), username( playerid ), Radio );
		case 7:	format( radioString, sizeof radioString, "{%s}[CLAN] %s %s: %s", GetGVarStringEx("clan_Color", clanID), GetGVarStringEx("clan_Rank7", clanID), username( playerid ), Radio );
		default: format( radioString, sizeof radioString, "{%s}[CLAN] %s %s: %s", GetGVarStringEx("clan_Color", clanID), GetGVarStringEx("clan_Rank1", clanID), username( playerid ), Radio );
	}
	SendToClan( clanID, COLOR_WHITE, radioString );
	return true;
}
alias:l("leaderchat");
CMD:l( playerid, params[] )
{
	if( playerVariables[ playerid ][ pFactionRank ] == 7 || playerVariables[ playerid ][ pAdminLevel ] > 0 )
	{
		new lText[ 256 ];
		if( sscanf( params, "s[256]", lText ) ) return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/l <Message>" );
		{
			if( !VerificaReclama( playerid, lText ) )        	return false;
			if( playerVariables[ playerid ][ pAdminLevel ] > 0 )
			{
				gsString[ 0 ] = EOS;
				format( gsString, sizeof gsString, "(/l) Admin %s: %s", username( playerid ), lText );
				LeaderChat( COLOR_TEAL, gsString );
			}
			else
			{
				gsString[ 0 ] = EOS;
				format( gsString, sizeof gsString, "(/l) %s Leader %s: %s", GetGVarStringEx( "faction_Name", playerVariables[ playerid ][ pFaction ] ), username( playerid ), lText );
				LeaderChat( COLOR_TEAL, gsString );
			}
		}
	}
	else SendClientMessage( playerid, COLOR_WHITE, "{FFB870}Only leaders/admins can use this command." );
	return true;
}
CMD:refill( playerid, params[] )
{
	new Player, Cash;
	if( playerVariables[ playerid ][ pJob ] != 10 )
		return SendClientMessage( playerid, COLOR_GREY, "You are not a mechanic." );

	if( sscanf( params, "uD(200)", Player, Cash ) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/refill [ playerid ] [money]" );

	if( !IsPlayerConnected( Player ) )							
		return SendClientMessage( playerid, COLOR_GREY, "Player it's not connected !" );

	if( playerid == Player )							
		return SendClientMessage( playerid, COLOR_GREY, "You can't refill yourself!" );

	if( !IsPlayerInRangeOfPlayer( playerid, Player, 10.0 ) )
		return SendClientMessage( playerid, COLOR_GREY, "You're too far away." );

	if( Cash < 20 || Cash > 200 )
		return SendClientMessage(playerid, COLOR_GREY, "The money must be between 20-200$." );
	
	if( GetPlayerState( Player ) != PLAYER_STATE_DRIVER )		return SendClientMessage( playerid, COLOR_GREY, "Player it's not driving any vehicle." );
	if( !IsPlayerInRangeOfPlayer( playerid, Player, 10.0 ) ) 	return SendClientMessage( playerid, COLOR_GREY, "You must be near that player." );

	SendClientMessagef( playerid, COLOR_WHITE, "You offerd %s to refill his car for $%d.", playerVariables[ Player ][ pNormalName ], Cash );
	SendClientMessagef( Player, COLOR_WHITE, "Mechanic %s has offered you to refill your car for $%d. Type [/accept refill] to accept.", playerVariables[ playerid ][ pNormalName ], Cash );

	playerVariables[ Player ][ pRefillOffer ] = playerid;
	playerVariables[ Player ][ pRefillPrice ] = Cash;
	return true;
}
CMD:repair( playerid, params[] )
{
	new Player, Cash;
	if( playerVariables[ playerid ][ pJob ] != 10 )
		return SendClientMessage( playerid, COLOR_GREY, "You are not a mechanic." );

	if( sscanf( params, "uD(200)", Player, Cash ) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/repair [ playerid ] [money]" );

	if( !IsPlayerConnected( Player ) )							
		return SendClientMessage( playerid, COLOR_GREY, "Player it's not connected !" );

	if( playerid == Player )							
		return SendClientMessage( playerid, COLOR_GREY, "You can't repair yourself!" );

	if( !IsPlayerInRangeOfPlayer( playerid, Player, 10.0 ) )
		return SendClientMessage( playerid, COLOR_GREY, "You're too far away." );

	if( Cash < 20 || Cash > 200 )
		return SendClientMessage(playerid, COLOR_GREY, "The money must be between 20-200$." );

	
	if( GetPlayerState( Player ) != PLAYER_STATE_DRIVER )		return SendClientMessage( playerid, COLOR_GREY, "Player it's not driving any vehicle." );
	if( !IsPlayerInRangeOfPlayer( playerid, Player, 10.0 ) ) 	return SendClientMessage( playerid, COLOR_GREY, "You must be near that player." );

	SendClientMessagef( playerid, COLOR_WHITE, "You offerd %s to fix his car for $%d.", playerVariables[ Player ][ pNormalName ], Cash );
	SendClientMessagef( Player, COLOR_WHITE, "Mechanic %s has offered you to repair your car for $%d. Type [/accept repair] to accept.", playerVariables[ playerid ][ pNormalName ], Cash );

	playerVariables[ Player ][ pRepairOffer ] = playerid;
	playerVariables[ Player ][ pRepairPrice ] = Cash;
	return true;
}
CMD:taxi( playerid, params[] )
{
	if( !IsPlayerTaxiDriver( playerid ) )
		return SendClientMessage( playerid, COLOR_GREY, "You are not member of Taxi Faction!" );

	new Action[ 16 ], Player;
	if( sscanf(params, "s[16]u", Action, Player) )
	{
		SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/taxi [action] [playerID]" );
		return SendClientMessage( playerid, COLOR_GREY, "Actions: accept, cancel" );
	}
	switch(YHash(Action, false))
	{
		case _I<accept>:
		{
			if( playerVariables[ playerid ][ pTaxiDriver ] == 0 )
				return SendClientMessage( playerid, COLOR_GREY, "You are not a taxi driver on duty!" );

			if( GetGVarInt( "veh_Faction", GetPlayerVehicleID( playerid ) ) == 3 )
			{
				if( playerVariables[ playerid ][ pTaxiClient ] != INVALID_PLAYER_ID )
					return SendClientMessage( playerid, COLOR_GREY, "You already have a target, use /taxi cancel" );

				if( !IsPlayerConnected( Player ) )					return SendClientMessage( playerid, COLOR_GREY, "Player it's not connected !" );
				if( !playerVariables[ Player ][ pTaxiCall ] )		return SendClientMessage( playerid, COLOR_GREY, "Player didn't call for a Taxi yet !" );
				if( playerVariables[ Player ][ pTaxiAccept ] ) 		return SendClientMessage( playerid, COLOR_GREY, "Player has been accepted by another driver !" );

				SendClientMessagef( Player, COLOR_LIGHTBLUE, "* Taxi driver %s has accepted your taxi call, please wait at your current position.", username( playerid ) );

				gsString[ 0 ] = EOS;
				format( gsString, sizeof gsString, "** %s has accepted the taxi call from %s.", username( playerid ), username( Player ) );
				SendToFaction( 3, COLOR_YELLOW, gsString );

				gsString[ 0 ] = EOS;
				format( gsString, 8, "%d", Player );
				callcmd::find( playerid, gsString );

				playerVariables[ Player ][ pTaxiAccept ] = 1;
				playerVariables[ playerid ][ pTaxiClient ] = Player;
				SetPVarInt( Player, "player_taxi" , playerid );
				//playerVariables[ Player ][ pTaxiCall ] = 0;
				return true;
			}
		}
		case _I<cancel>:
		{
			if( playerVariables[ playerid ][ pTaxiDriver ] == 0 )		return SendClientMessage( playerid, COLOR_GREY, "You are not a taxi driver on duty!" );
			if( !IsPlayerConnected( Player ) )							return SendClientMessage( playerid, COLOR_GREY, "Player it's not connected !" );
			if( Player != playerVariables[ playerid ][ pTaxiClient ] )	return SendClientMessage( playerid, COLOR_GREY, "That player it's not your client!" );

			SendClientMessagef( Player, COLOR_LIGHTBLUE, "* Taxi driver %s has canceled your taxi call!", username( playerid ) );

			gsString[ 0 ] = EOS;
			format( gsString, sizeof gsString, "** %s has canceled the taxi call from %s.", username( playerid ), username( Player ) );
			SendToFaction( 3, COLOR_YELLOW, gsString );

			playerVariables[ playerid ][ pFindPlayer ] = INVALID_PLAYER_ID;
			playerVariables[ Player ][ pTaxiAccept ] = 0;
			Iter_Remove( playerFinds [ playerVariables[ playerid ][ pTaxiClient ] ], playerid );
			SetPVarInt( playerVariables[ playerid ][ pTaxiClient ], "player_taxi" , INVALID_PLAYER_ID );
			playerVariables[ playerid ][ pTaxiClient ] = INVALID_PLAYER_ID;
			playerVariables[ Player ][ pTaxiCall ] = 0;
			return true;
		}
		default:
		{
			SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/taxi [action] [playerID]" );
		    return SendClientMessage( playerid, COLOR_GREY, "Actions: accept, cancel" );
		}
	}
	return true;
}
CMD:medic( playerid, params[] )
{
	if( playerVariables[ playerid ][ pFaction ] != 2 )
		return SendClientMessage( playerid, COLOR_GREY, "You are not member of Paramedic Faction!" );

	new Action[ 16 ], Player;
	if( sscanf(params, "s[16]u", Action, Player) )
	{
		SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/medic [action] [playerID]" );
		return SendClientMessage( playerid, COLOR_GREY, "Actions: accept, cancel" );
	}

	switch(YHash(Action, false))
	{
		case _I<accept>:
		{
			if( GetGVarInt( "veh_Faction", GetPlayerVehicleID( playerid ) ) == 2 )
			{
				if( playerVariables[ playerid ][ pMedicClient ] != INVALID_PLAYER_ID )
					return SendClientMessage( playerid, COLOR_GREY, "You already have a target, use /medic cancel" );

				if( !IsPlayerConnected( Player ) )					return SendClientMessage( playerid, COLOR_GREY, "Player it's not connected !" );
				if( playerVariables[ Player ][ pMedicCall ] != 1 )	return SendClientMessage( playerid, COLOR_GREY, "Player didn't called for a medic yet !" );
				if( playerVariables[ Player ][ pMedicAccept ] ) 	return SendClientMessage( playerid, COLOR_GREY, "Player has been accepted by another medic !" );

				SendClientMessagef( Player, COLOR_LIGHTBLUE, "* Medic %s has accepted your call, please wait at your current position.", username( playerid ) );

				gsString[ 0 ] = EOS;
				format( gsString, sizeof gsString, "** %s has accepted the medic call from %s.", username( playerid ), username( Player ) );
				SendToFaction( 2, COLOR_YELLOW, gsString );

				gsString[ 0 ] = EOS;
				format( gsString, 8, "%d", Player );
				callcmd::find( playerid, gsString );

				playerVariables[ Player ][ pMedicAccept ] = 1;
				playerVariables[ playerid ][ pMedicClient ] = Player;
				SetPVarInt( Player, "player_medic", playerid );
				//playerVariables[ Player ][ pMedicCall ] = 0;
				return true;
			}
		}
		case _I<cancel>:
		{
			if( !IsPlayerConnected( Player ) )							return SendClientMessage( playerid, COLOR_GREY, "Player it's not connected !" );
			if( Player != playerVariables[ playerid ][ pMedicClient ] )	return SendClientMessage( playerid, COLOR_GREY, "That player it's not your client!" );

			SendClientMessagef( Player, COLOR_LIGHTBLUE, "* Medic %s has canceled your medic call!", username( playerid ) );

			gsString[ 0 ] = EOS;
			format( gsString, sizeof gsString, "** %s has canceled the medic call from %s.", username( playerid ), username( Player ) );
			SendToFaction( 2, COLOR_YELLOW, gsString );

			playerVariables[ playerid ][ pFindPlayer ] = INVALID_PLAYER_ID;
			playerVariables[ Player ][ pMedicAccept ] = 0;
			Iter_Remove( playerFinds[ playerVariables[ playerid ][ pMedicClient ] ], playerid );
			SetPVarInt( playerVariables[ playerid ][ pMedicClient ], "player_medic", INVALID_PLAYER_ID );
			playerVariables[ playerid ][ pMedicClient ] = INVALID_PLAYER_ID;
			playerVariables[ Player ][ pMedicCall ] = 0;
			return true;
		}
		default:
		{
			SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/medic [action] [playerID]" );
		    return SendClientMessage( playerid, COLOR_GREY, "Actions: accept, cancel" );
		}
	}
	return true;
}
#if defined UBERSYS
CMD:uber(playerid, params[])
{
	if( playerVariables[ playerid ][ pJob ] != 7 )
		return SendClientMessage( playerid, COLOR_GREY, "You are not working as a Uber!" );

	new PlayerSlot = playerVariables[ playerid ][ VehicleSlot ], vehicleid = GetPlayerVehicleID( playerid );
	if( vehicleVariables[ PlayerSlot ][ playerid ][ Vehicle ] != vehicleid ) return SendClientMessage( playerid, ~1, "You can be a Uber only in your personal car!" );


	if( GetPlayerState( playerid ) != PLAYER_STATE_DRIVER )
			return SendClientMessage( playerid, COLOR_GREY, "You are not the driver." );

	new Action[ 16 ], Player, Value;
	if( sscanf(params, "s[16]DD", Action, Player, Value) )
	{
		SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/uber [action] [playerID] [value]" );
		return SendClientMessage( playerid, COLOR_WHITE, "Actions: accept, cancel, start, stop" ), SendClientMessage( playerid, COLOR_GREY, "Hint: Do not use [playerID] param if you intend to use start/stop as [action]." );
	}

	switch(YHash(Action, false))
	{
		case _I<stop>:
		{
			if(playerVariables[playerid][pUberOnWork] == 0)
				return SendClientMessage(playerid, COLOR_GREY, "You are already off duty, use /uber start [value] to stop working.");

			playerVariables[ playerid ][ pUberOnWork ] = 0;
			playerVariables[ playerid ][ pUberPrice ] = 0;
			SendClientMessage(playerid, COLOR_COOLBLUE, "You are not off duty.");
			return true;
		}
		case _I<start>:
		{
			if(playerVariables[playerid][pUberOnWork] == 1)
				return SendClientMessage(playerid, COLOR_GREY, "You are already on work, use /uber stop to stop working.");

			if( Value < 1 || Value > 75 )
				return SendClientMessage( playerid, COLOR_GREY, "The fare price can be from 1$ to 75$" );

			playerVariables[ playerid ][ pUberOnWork ] = 1;
			playerVariables[ playerid ][ pUberPrice ] = Value;

			SendClientMessageToAllf( TEAM_GROVE_COLOR, "* Uber driver %s(%i) is now on duty (%d$ / KM), [/service uber]", username( playerid ), playerid, Value );
			return true;
		}
		case _I<accept>:
		{
			if(Player == playerid) return 1;
			if( playerVariables[ playerid ][ pUberOnClient ] != INVALID_PLAYER_ID )
				return SendClientMessage( playerid, COLOR_GREY, "You already have a target, use /uber cancel" );

			if(playerVariables[playerid][pUberOnWork] == 0)
				return SendClientMessage(playerid, COLOR_GREY, "You are not on your duty, use /uber start [value] to start working.");

			if( playerVariables[ playerid ][ pCP ] )
				return SendClientMessage( playerid, COLOR_GREY, "Ai deja un CP setat asa ca foloseste /killcp daca esti sigur!" );

			if( !IsPlayerConnected( Player ) )						return SendClientMessage( playerid, COLOR_GREY, "Player it's not connected !" );
			if( playerVariables[ Player ][ pUberCalled ] != 1 )	return SendClientMessage( playerid, COLOR_GREY, "Player didn't called for a Uber!" );
			if( playerVariables[ Player ][ pUberAccepted ] ) 		return SendClientMessage( playerid, COLOR_GREY, "Player has been accepted by another Uber Driver !" );

			gsString[ 0 ] = EOS;
			format( gsString, sizeof gsString, "** %s has accepted the Uber call from %s.", username( playerid ), username( Player ) );
			SendToJob(playerVariables[playerid][pJob], COLOR_YELLOW, gsString);
			SendClientMessagef( Player, COLOR_LIGHT_BID, "* Uber %s has accepted your call, please wait at your current position.", username( playerid ) );

			playerVariables[ playerid ][ pCP ] = 5001;
			playerVariables[ playerid ][ pFindPlayer ] = Player;
			Iter_Add( playerFinds[ Player ], playerid );

			new Float:FindPos[ 3 ];
			GetPlayerPos( Player, FindPos[ 0 ], FindPos[ 1 ], FindPos[ 2 ] );
			new Float:fDistance = GetPlayerDistanceFromPoint( playerid, FindPos[ 0 ], FindPos[ 1 ], FindPos[ 2 ] );

			SendClientMessagef( playerid, COLOR_YELLOW, "Server has set you a checkpoint to %s[%d]. Distance: %.0f meters.", username( Player ), Player, fDistance );
			SetPlayerCheckpoint( playerid, FindPos[ 0 ], FindPos[ 1 ], FindPos[ 2 ], 3.0 );

			playerVariables[ playerid ][ pFindPlayerTimer ] = SetTimerEx( "FindTimer", 1500, true, "d", playerid );
			playerVariables[ Player ][ pUberAccepted ] = 1;
			playerVariables[ playerid ][ pUberOnClient ] = Player;
			SetPVarInt( Player, "player_uber", playerid );
			return true;
		}
		case _I<cancel>:
		{
			if( !IsPlayerConnected( Player ) )								return SendClientMessage( playerid, COLOR_GREY, "Player it's not connected !" );
			if( Player != playerVariables[ playerid ][ pUberOnClient ] )	return SendClientMessage( playerid, COLOR_GREY, "That player it's not your client!" );

			if(playerVariables[playerid][pUberOnWork] == 0)
				return SendClientMessage(playerid, COLOR_GREY, "You are not on your duty, use /uber start [price] to start working.");

			SendClientMessagef( Player, COLOR_LIGHTBLUE, "* Uber %s has canceled your Uber call!", username( playerid ) );

			gsString[ 0 ] = EOS;
			format( gsString, sizeof gsString, "** %s has canceled the Uber call from %s.", username( playerid ), username( Player ) );
			SendToJob(playerVariables[playerid][pJob], COLOR_YELLOW, gsString);

			SetPVarInt( Player, "player_uber", INVALID_PLAYER_ID );
			Iter_Remove( playerFinds[ Player ], playerid );

			playerVariables[ playerid ][ pFindPlayer ] = INVALID_PLAYER_ID;
			playerVariables[ Player ][ pUberAccepted ] = 0;
			playerVariables[ playerid ][ pUberOnClient ] = INVALID_PLAYER_ID;
			playerVariables[ Player ][ pUberCalled ] = 0;
			return true;
		}
		default:
		{
			SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/uber [action] [playerID] [value]" );
		    return SendClientMessage( playerid, COLOR_WHITE, "Actions: accept, cancel, start, stop" ), SendClientMessage( playerid, COLOR_GREY, "Hint: Do not use [playerID] param if you intend to use start/stop as [action]." );
		}
	}
	return true;
}

#endif
CMD:mechanic( playerid, params[] )
{
	if( playerVariables[ playerid ][ pJob ] != 10 )
		return SendClientMessage( playerid, COLOR_GREY, "You are not working as a Mechanic!" );

	new Action[ 16 ], Player;
	if( sscanf(params, "s[16]u", Action, Player) )
	{
		SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/mechanic [action] [playerID]" );
		return SendClientMessage( playerid, COLOR_GREY, "Actions: accept, cancel" );
	}

	switch(YHash(Action, false))
	{
		case _I<accept>:
		{
			if( GetVehicleModel( GetPlayerVehicleID( playerid ) ) == 525 ) // Tow Car
			{
				if( playerVariables[ playerid ][ pMechanicClient ] != INVALID_PLAYER_ID )
					return SendClientMessage( playerid, COLOR_GREY, "You already have a target, use /mechanic cancel" );

				if( playerVariables[ playerid ][ pCP ] )
					return SendClientMessage( playerid, COLOR_GREY, "Ai deja un CP setat asa ca foloseste /killcp daca esti sigur!" );

				if( !IsPlayerConnected( Player ) )						return SendClientMessage( playerid, COLOR_GREY, "Player it's not connected !" );
				if( playerVariables[ Player ][ pMechanicCall ] != 1 )	return SendClientMessage( playerid, COLOR_GREY, "Player didn't called for a Mechanic yet !" );
				if( playerVariables[ Player ][ pMechanicAccept ] ) 		return SendClientMessage( playerid, COLOR_GREY, "Player has been accepted by another Mechanic !" );

				gsString[ 0 ] = EOS;
				format( gsString, sizeof gsString, "** %s has accepted the Mechanic call from %s.", username( playerid ), username( Player ) );
				SendToJob( playerVariables[playerid][pJob], COLOR_YELLOW, gsString );
				SendClientMessagef( Player, COLOR_LIGHTBLUE, "* Mechanic %s has accepted your call, please wait at your current position.", username( playerid ) );

				playerVariables[ playerid ][ pCP ] = 5001;
				playerVariables[ playerid ][ pFindPlayer ] = Player;
				Iter_Add( playerFinds[ Player ], playerid );

				new Float:FindPos[ 3 ];
				GetPlayerPos( Player, FindPos[ 0 ], FindPos[ 1 ], FindPos[ 2 ] );
				new Float:fDistance = GetPlayerDistanceFromPoint( playerid, FindPos[ 0 ], FindPos[ 1 ], FindPos[ 2 ] );

				SendClientMessagef( playerid, COLOR_YELLOW, "Server has set you a checkpoint to %s[%d]. Distance: %.0f meters.", username( Player ), Player, fDistance );
				SetPlayerCheckpoint( playerid, FindPos[ 0 ], FindPos[ 1 ], FindPos[ 2 ], 3.0 );

				playerVariables[ playerid ][ pFindPlayerTimer ] = SetTimerEx( "FindTimer", 1500, true, "d", playerid );
				playerVariables[ Player ][ pMechanicAccept ] = 1;
				playerVariables[ playerid ][ pMechanicClient ] = Player;
				SetPVarInt( Player, "player_mechanic", playerid );
				//playerVariables[ Player ][ pMechanicCall ] = 0;
				return true;
			}
		}
		case _I<cancel>:
		{
			if( !IsPlayerConnected( Player ) )								return SendClientMessage( playerid, COLOR_GREY, "Player it's not connected !" );
			if( Player != playerVariables[ playerid ][ pMechanicClient ] )	return SendClientMessage( playerid, COLOR_GREY, "That player it's not your client!" );

			SendClientMessagef( Player, COLOR_LIGHTBLUE, "* Mechanic %s has canceled your Mechanic call!", username( playerid ) );

			gsString[ 0 ] = EOS;
			format( gsString, sizeof gsString, "** %s has canceled the Mechanic call from %s.", username( playerid ), username( Player ) );
			SendToJob( playerVariables[playerid][pJob], COLOR_YELLOW, gsString );
			Iter_Add( playerFinds[ Player ], playerid );

			playerVariables[ playerid ][ pFindPlayer ] = INVALID_PLAYER_ID;
			playerVariables[ Player ][ pMechanicAccept ] = 0;
			SetPVarInt( playerVariables[ playerid ][ pMechanicClient ], "player_mechanic", INVALID_PLAYER_ID );
			playerVariables[ playerid ][ pMechanicClient ] = INVALID_PLAYER_ID;
			playerVariables[ Player ][ pMechanicCall ] = 0;
			return true;
		}
		default:
		{
			SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/mechanic [action] [playerID]" );
		    return SendClientMessage( playerid, COLOR_GREY, "Actions: accept, cancel" );
		}
	}
	return true;
}
CMD:service( playerid, params[] )
{
	new lsService[ 64 ];
	if(sscanf(params, "s[64]", lsService))
	{
		SendClientMessage( playerid, COLOR_WHITE, "USAGE: /service [name]" );
		return SendClientMessage( playerid, COLOR_GREY, "Available names: Taxi, Medic, Mechanic, uber" );
	}

	switch(YHash(lsService, false))
	{
		case _I<taxi>:
		{
			if( playerVariables[ playerid ][ pFaction ] == 3 ) // Taxi
				return SendClientMessage( playerid, COLOR_GREY, "You can't use this command as a taxi!" );

			if( playerVariables[ playerid ][ pTaxiCall ] )
				return SendClientMessage( playerid, COLOR_GREY, "You already have called a taxi! Please use /cancel taxi" );
			//SendClientMessage( playerid, COLOR_GREY, "There are no taxi drivers on duty at the moment, try again later!" );

			playerVariables[ playerid ][ pTaxiCall ] = 1;
			playerVariables[ playerid ][ pTaxiAccept ] = 0;

			gsString[ 0 ] = EOS;
			format( gsString, sizeof gsString, "%s[%d] has called for a taxi, you can use /taxi [accept/cancel] [playerID]", username(playerid), playerid );
			SendToFaction( 3, COLOR_TEAL, gsString );

			SendClientMessage( playerid, COLOR_LIGHTBLUE, "* You have called for a taxi, wait at your current position." );
			return true;
		}
		case _I<uber>:
		{
			if(playerVariables[playerid][pUberOnWork] == 1)
				return SendClientMessage(playerid, COLOR_GREY, "You can't call an uber because you are on duty !");
			if( playerVariables[ playerid ][ pUberCalled ] )
				return SendClientMessage( playerid, COLOR_GREY, "You already have called a uber! Please use /cancel uber" );

			playerVariables[ playerid ][ pUberCalled ] = 1;
			playerVariables[ playerid ][ pUberAccepted ] = 0;

			gsString[ 0 ] = EOS;
			format( gsString, sizeof gsString, "%s[%d] has called for a Uber, you can use /uber [accept/cancel] [playerID]", username(playerid), playerid );
			SendToJob(playerVariables[playerid][pJob], COLOR_YELLOW, gsString);

			SendClientMessage( playerid, COLOR_WHITE, "* You have called for a uber, wait at your current position." );
			return true;
		}
		case _I<medic>:
		{
			if( playerVariables[ playerid ][ pFaction ] == 2 ) // Paramedic
				return SendClientMessage( playerid, COLOR_GREY, "You can't use this command as a medic!" );

			if( playerVariables[ playerid ][ pMedicCall ] )
				return SendClientMessage( playerid, COLOR_GREY, "You already have called a paramedic! Please use /cancel medic" );
			//SendClientMessage( playerid, COLOR_GREY, "There are no taxi drivers on duty at the moment, try again later!" );

			playerVariables[ playerid ][ pMedicCall ] = 1;
			playerVariables[ playerid ][ pMedicAccept ] = 0;

			gsString[ 0 ] = EOS;
			format( gsString, sizeof gsString, "%s[%d] has called for a Medic, you can use /medic [accept/cancel] [playerID]", username(playerid), playerid );
			SendToFaction( 2, COLOR_TEAL, gsString );

			SendClientMessage( playerid, COLOR_LIGHTBLUE, "* You have called for a medic, wait at your current position." );
			return true;
		}
		case _I<mechanic>:
		{
			if(playerVariables[playerid][pMechanicClient] == 1)
				return SendClientMessage(playerid, COLOR_GREY, "You can't call an mechanic because you are on duty !");

			if( playerVariables[ playerid ][ pMechanicCall ] )
				return SendClientMessage( playerid, COLOR_GREY, "You already have called a mechanic! Please use /cancel mechanic" );
			//SendClientMessage( playerid, COLOR_GREY, "There are no taxi drivers on duty at the moment, try again later!" );

			playerVariables[ playerid ][ pMechanicCall ] = 1;
			playerVariables[ playerid ][ pMechanicAccept ] = 0;

			gsString[ 0 ] = EOS;
			format( gsString, sizeof gsString, "%s[%d] has called for a Mechanic, you can use /mechanic [accept/cancel] [playerID]", username(playerid), playerid );
			SendToJob( playerVariables[playerid][pJob], COLOR_YELLOW, gsString );

			SendClientMessage( playerid, COLOR_LIGHTBLUE, "* You have called for a mechanic, wait at your current position." );
			return true;
		}
		default:
		{
			SendClientMessage( playerid, COLOR_WHITE, "USAGE: /service [name]" );
		    return SendClientMessage( playerid, COLOR_GREY, "Available names: Taxi, Medic, Mechanic, uber" );
		}
	}

	return true;
}
CMD:cancel( playerid, params[] )
{
	new Action[ 16 ];
	if(sscanf(params, "s[16]", Action ))
	{
		SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/cancel [action]" );
		return SendClientMessage( playerid, COLOR_GREY, "Actions: taxi, medic, mechanic, uber" );
	}

	switch(YHash(Action, false))
	{
		case _I<taxi>:
		{
			if( playerVariables[ playerid ][ pTaxiCall ] == 0 )
				return SendClientMessage( playerid, COLOR_GREY, "You haven't called for a Taxi yet!" );

			switch( playerVariables[ playerid ][ pTaxiAccept ] )
			{
				case 0:
				{
					GameTextForPlayer( playerid, "~w~You have~n~~r~canceled the call", 5000, 1 );
					playerVariables[ playerid ][ pTaxiCall ] = 0;

					gsString[ 0 ] = EOS;
					format( gsString, sizeof gsString, "%s[%d] has canceled the taxi call!", username( playerid ), playerid );
					SendToFaction( 3, COLOR_TEAL, gsString );
				}
				case 1:
				{
					gsString[ 0 ] = EOS;
					format( gsString, sizeof gsString, "%s[%d] has canceled the taxi call for the current driver!", username( playerid ), playerid );
					SendToFaction( 3, COLOR_TEAL, gsString );

					SendClientMessage( playerid, -1, "You have canceled the taxi call!" );
					playerVariables[ playerid ][ pTaxiCall ] = 0;
					playerVariables[ playerid ][ pTaxiAccept ] = 0;

					new i = GetPVarInt( playerid, "player_taxi" );
					Iter_Remove( playerFinds[ playerid ], i );
					playerVariables[ i ][ pFindPlayer ] = INVALID_PLAYER_ID;
					playerVariables[ i ][ pTaxiClient ] = INVALID_PLAYER_ID;
					InfoTD_MSG( i, 7000, "~r~~h~%s ~w~~h~a anulat comanda curenta!", username( playerid ) );
				}
			}
		}
		case _I<medic>:
		{
			if( !playerVariables[ playerid ][ pMedicCall ] )
				return SendClientMessage( playerid, COLOR_GREY, "You haven't called for a Medic yet!" );

			switch( playerVariables[ playerid ][ pMedicAccept ] )
			{
				case 0:
				{
					GameTextForPlayer( playerid, "~w~You have~n~~r~canceled the call", 5000, 1 );
					playerVariables[ playerid ][ pMedicCall ] = 0;

					gsString[ 0 ] = EOS;
					format( gsString, sizeof gsString, "%s[%d] has canceled the medic call!", username( playerid ), playerid );
					SendToFaction( 2, COLOR_TEAL, gsString );
				}
				case 1:
				{
					gsString[ 0 ] = EOS;
					format( gsString, sizeof gsString, "%s[%d] has canceled the medic call for the current driver!", username( playerid ), playerid );
					SendToFaction( 2, COLOR_TEAL, gsString );

					SendClientMessage( playerid, -1, "You have canceled the medic call!" );
					playerVariables[ playerid ][ pMedicCall ] = 0;
					playerVariables[ playerid ][ pMedicAccept ] = 0;

					new i = GetPVarInt( playerid, "player_medic" );
					Iter_Remove( playerFinds[ playerid ], i );

					playerVariables[ i ][ pFindPlayer ] = INVALID_PLAYER_ID;
				    playerVariables[ i ][ pMedicClient ] = INVALID_PLAYER_ID;
				    InfoTD_MSG( i, 7000, "~r~~h~%s ~w~~h~a anulat comanda curenta!", username( playerid ) );  
				}
			}
		}
		case _I<mechanic>:
		{
			if( !playerVariables[ playerid ][ pMechanicCall ] )
				return SendClientMessage( playerid, COLOR_GREY, "You haven't called for a Mechanic yet!" );

			switch( playerVariables[ playerid ][ pMechanicAccept ] )
			{
				case 0:
				{
					GameTextForPlayer( playerid, "~w~You have~n~~r~canceled the call", 5000, 1 );
					playerVariables[ playerid ][ pMechanicCall ] = 0;

					gsString[ 0 ] = EOS;
					format( gsString, sizeof gsString, "%s[%d] has canceled the mechanic call!", username( playerid ), playerid );
					SendToJob( playerVariables[playerid][pJob], COLOR_YELLOW, gsString );
				}
				case 1:
				{
					gsString[ 0 ] = EOS;
					format( gsString, sizeof gsString, "%s[%d] has canceled the mechanic call for the current driver!", username( playerid ), playerid );
					SendToJob( playerVariables[playerid][pJob], COLOR_YELLOW, gsString );

					SendClientMessage( playerid, -1, "You have canceled the mechanic call!" );
					playerVariables[ playerid ][ pMechanicCall ] = 0;
					playerVariables[ playerid ][ pMechanicAccept ] = 0;

					new i = GetPVarInt( playerid, "player_mechanic" );
					Iter_Remove( playerFinds[ playerid ], i );
				    playerVariables[ i ][ pFindPlayer ] = INVALID_PLAYER_ID;
				    playerVariables[ i ][ pMechanicClient ] = INVALID_PLAYER_ID; 
				    InfoTD_MSG( i, 7000, "~r~~h~%s ~w~~h~a anulat comanda curenta!", username( playerid ) );   
				}
			}
		}
		case _I<uber>:
		{
			if( !playerVariables[ playerid ][ pUberCalled ] )
				return SendClientMessage( playerid, COLOR_GREY, "You haven't called for a Uber yet!" );

			switch( playerVariables[ playerid ][ pUberAccepted ] )
			{
				case 0:
				{
					GameTextForPlayer( playerid, "~w~You have~n~~r~canceled the call", 5000, 1 );
					playerVariables[ playerid ][ pUberCalled ] = 0;

					gsString[ 0 ] = EOS;
					format( gsString, sizeof gsString, "%s[%d] has canceled the uber call!", username( playerid ), playerid );
					SendToJob(playerVariables[playerid][pJob], COLOR_YELLOW, gsString);
				}
				case 1:
				{
					gsString[ 0 ] = EOS;
					format( gsString, sizeof gsString, "%s[%d] has canceled the uber call for the current driver!", username( playerid ), playerid );
					SendToJob(playerVariables[playerid][pJob], COLOR_YELLOW, gsString);

					SendClientMessage( playerid, -1, "You have canceled the uber call!" );
					playerVariables[ playerid ][ pUberCalled ] = 0;
					playerVariables[ playerid ][ pUberAccepted ] = 0;
				}
			}
		}
		default:
		{
			SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/cancel [action]" );
		    return SendClientMessage( playerid, COLOR_GREY, "Actions: taxi, medic, mechanic, uber" );
		}
	}
	return true;
}
CMD:fare( playerid, params[] )
{
	new Value;
	if( sscanf( params, "D(20)", Value ) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/fare [price] (Type /fare 0 to be off duty!)" );

	if( !IsPlayerTaxiDriver( playerid ) )
		return SendClientMessage( playerid, COLOR_GREY, "You are not member of Taxi Faction!" );

	if( GetGVarInt( "veh_Faction", GetPlayerVehicleID( playerid ) ) != 3 )
		return SendClientMessage( playerid, COLOR_GREY, "You have to be in the Taxi!" );

	if( GetPlayerState( playerid ) != PLAYER_STATE_DRIVER )
		return SendClientMessage( playerid, COLOR_GREY, "You are not the driver." );

	if( !Value )
	{
		switch( playerVariables[ playerid ][ pTaxiDriver ] )
		{
			case 0: return SendClientMessage( playerid, COLOR_WHITE, "You are not on duty!" );
			case 1:
			{
				playerVariables[ playerid ][ pTaxiValue ] = 0;
				playerVariables[ playerid ][ pTaxiDriver ] = 0;
				return SendClientMessage( playerid, COLOR_WHITE, "Now you are off duty!" );
			}
		}
		return true;
	}
	if( playerVariables[ playerid ][ pTaxiDriver ] )
		return SendClientMessage( playerid, COLOR_WHITE, "You're already on duty as a taxi driver, use /fare 0 to off duty!" );

	if( Value < 1 || Value > 50 )
		return SendClientMessage( playerid, COLOR_GREY, "The fare price can be from 1$ to 50$" );

	playerVariables[ playerid ][ pTaxiDriver ] = 1;
	playerVariables[ playerid ][ pTaxiValue ] = Value;

	SendClientMessageToAllf( TEAM_GROVE_COLOR, "* Taxi driver %s(%i) is now on duty (%d$ / KM), [/service taxi]", username( playerid ), playerid, Value );
	return true;
}
// < Paramedic Department Faction )
CMD:heal( playerid, params[] )
{
	if( playerVariables[ playerid ][ pFaction ] != 2 )
		return SendClientMessage( playerid, COLOR_GREY, "You are not member of Paramedic Department!" );

	if( playerVariables[ playerid ][ pPaintBall ] != -1 )
		return SendClientMessage( playerid, COLOR_GREY, "You can't use this command in Paintball Arena!" );

	if( playerVariables[ playerid ][ pFactionWar ] )
		return SendClientMessage( playerid, COLOR_GREY, "You can't use this command while in war!" );

	new Player, Value;
	if( sscanf( params, "uD(100)", Player, Value ) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/heal [playerID] [price, default $100]" );

	if( playerid == Player )							
		return SendClientMessage( playerid, COLOR_GREY, "You can't heal yourself!" );

	if( !IsPlayerConnected( Player ) )
		return SendClientMessage( playerid, COLOR_GREY, "This player is not connected!" );

	if( GetGVarInt( "veh_Faction", GetPlayerVehicleID( playerid ) ) != 2 )
		return SendClientMessage( playerid, COLOR_WHITE, "You're not the driver of the Ambulance!" );

	if( GetGVarInt( "veh_Faction", GetPlayerVehicleID( Player ) ) != 2 )
		return SendClientMessage( playerid, COLOR_WHITE, "That player it's not in the Ambulance!" );

	if( GetPlayerVehicleID( Player ) != GetPlayerVehicleID( playerid ) )
		return SendClientMessage( playerid, COLOR_WHITE, "That player it's in another Vehicle!" );

	if( Value < 10 || Value > 100 )
		return SendClientMessage( playerid, COLOR_GREY, "The heal price can be from 10$ to 100$" );

	new Float:Player_Health;
	GetPlayerHealth( Player, Player_Health );
	if( Player_Health >= 99.0 )
		return SendClientMessage( playerid, COLOR_WHITE,"That person is fully healed." );

	playerVariables[ playerid ][ pFactionPatients ]++;
	playerVariables[ playerid ][ pMoney ] += Value;
	playerVariables[ Player ][ pMoney ] -= Value;
	SetPlayerHealth( Player, 100 );

	Announce_Player( playerid, 5000, 1, "~y~Healed ~n~~g~+$%d", Value );
	Announce_Player( Player, 5000, 1, "~y~Healed ~n~~r~-$%d", Value );
	return true;
}
// < Server's Commands )
CMD:spawnme( playerid, params[] )
{
	AHCheck( playerid, 1, 5 );
	CheckPlayerAction( playerid );
	return FIXES_SpawnPlayer( playerid );
}
alias:buybizz( "buybusiness", "buyb" );
CMD:buybizz( playerid, params[] )
{
	CheckPlayerAction( playerid );

	if( serverVariables[ currentBIDTimer ] < 130 && serverVariables[ currentBIDTimer ] > 0 )
		return SendClientMessage( playerid, COLOR_GREY, "There is an active Bid right now!" );

	new bizID = GetBuildingEnterID( playerid, 0, 3 );
	if( bizID == -404 )										return SendClientMessage( playerid, COLOR_GREY, "You have to be in the business pickup!" );

	if( bizID != 56)
	{	
		if( playerVariables[ playerid ][ pBusiness ] != 0 )		return SendClientMessage( playerid, COLOR_GREY, "Your already have a business, please sell it first!" );
		if( GetGVarInt( "bus_OwnerKey", bizID ) != 0 )			return SendClientMessage( playerid, COLOR_GREY, "This business it's not for sale!" );
		if( playerVariables[ playerid ][ pLevel ] < GetGVarInt( "bus_Level", bizID ) )
			return SendClientMessagef( playerid, COLOR_GREY, "You need level %d to be able to buy this business!", GetGVarInt( "bus_Level", bizID ) );

		if( GetGVarInt( "bus_Price", bizID ) > playerVariables[ playerid ][ pMoney ] )
			return SendClientMessage( playerid, COLOR_GREY, "You don't have the money to buy this Business!" );

		SetGVarInt( "bus_Status", 0, bizID );
		SetGVarInt( "bus_OwnerKey", GetPlayerMysqlID(playerid), bizID );
		SetGVarString( "bus_Owner", playerVariables[ playerid ][ pNormalName ], bizID );
		playerVariables[ playerid ][ pBusiness ] = bizID;
		playerVariables[ playerid ][ pMoney ] -= GetGVarInt( "bus_Price", bizID );
		UpdateBusinessText( bizID );

		gsQuery[ 0 ] = EOS;
		mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_business` SET `busOwner` = '%s', `busOwnerKey` = %d WHERE `busKey` = %d", playerVariables[ playerid ][ pNormalName ], GetPlayerMysqlID(playerid), bizID );
		mysql_tquery( g_Handle, gsQuery, "", "" );

		gsQuery[ 0 ] = EOS;
		mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerBusiness` = %d WHERE `id` = %d", bizID, GetPlayerMysqlID(playerid) );
		mysql_tquery( g_Handle, gsQuery, "", "" );

		gsString[ 0 ] = EOS;
		format( gsString, sizeof gsString, "%s[user:%d] has bought [bizz:%d] for $%s.", playerVariables[ playerid ][ pNormalName ], GetPlayerMysqlID(playerid), bizID, FormatNumber( GetGVarInt( "bus_Price", bizID ) ) );
		InsertPlayerLog( GetPlayerMysqlID(playerid), 0, gsString );
		submitToAdmins(gsString, COLOR_YELLOW);
	}	
	return true;
}
CMD:setbizzlevel( playerid, params[] )
{
	AHCheck( playerid, 6, 5 );

	new bizzID = GetBuildingEnterID( playerid, 0, 3 );
	if( bizzID == -404 )
		return SendClientMessage( playerid, COLOR_GREY, "You have to be in the business pickup!" );

	new bizzLevel;
	if( sscanf( params, "d", bizzLevel ) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/setbizzlevel <bizzLevel>" );

	InfoTD_MSG( playerid, 5000, "~r~~h~INFO~n~~w~~h~You have set the businessID %d's level to %d", bizzID, bizzLevel );
	SetGVarInt( "bus_Level", bizzLevel, bizzID );
	UpdateBusinessText( bizzID );

	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_business` SET `busLevel` = %d WHERE `busKey` = %d", bizzLevel, bizzID );
	mysql_tquery( g_Handle, gsQuery, "", "" );
	return true;
}
alias:sellbizztostate( "sellbusinesstostate", "sellbtostate" );
CMD:sellbizztostate( playerid, params[] )
{
	new bizzID = GetBuildingEnterID( playerid, 0, 3 );
	if( bizzID == -404 )										return SendClientMessage( playerid, COLOR_GREY, "You have to be in the business pickup!" );
	if( playerVariables[ playerid ][ pBusiness ] == 0 )			return SendClientMessage( playerid, COLOR_GREY, "You don't own any Business!" );
	if( bizzID != playerVariables[ playerid ][ pBusiness ] )	return SendClientMessage( playerid, COLOR_GREY, "You are not the owner of this Business!" );

	SetGVarInt( "bus_OwnerKey", 0, bizzID );
	SetGVarString( "bus_Owner", "Nobody", bizzID );
	SetGVarInt( "bus_Status", 0, bizzID );

	UpdateBusinessText( bizzID );
	playerVariables[ playerid ][ pBusiness ] = 0;
	playerVariables[ playerid ][ pMoney ] += floatround( (GetGVarInt( "bus_Price", bizzID )/100)*60, floatround_round );
	InfoTD_MSG( playerid, 5000, "Ai vandut business-ul cu ID:%d si ai primit 60%% din valoarea sa.", bizzID );

	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_business` SET `busOwner` = 'Nobody', `busOwnerKey` = 0 WHERE `busKey` = %d", bizzID );
	mysql_tquery( g_Handle, gsQuery, "", "" );

	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerBusiness` = 0 WHERE `id` = %d", GetPlayerMysqlID(playerid) );
	mysql_tquery( g_Handle, gsQuery, "", "" );

	gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, "%s[user:%d] has sold his [bizz:%d] for $%s.", playerVariables[ playerid ][ pNormalName ], GetPlayerMysqlID(playerid), bizzID, FormatNumber( floatround( (GetGVarInt( "bus_Price", bizzID )/100)*60, floatround_round ) ) );
	InsertPlayerLog( GetPlayerMysqlID(playerid), 0, gsString );
	submitToAdmins(gsString, COLOR_YELLOW);
	return true;
}
CMD:asellbizz( playerid, params[] )
{
	AHCheck( playerid, 8, 5 );

	new bizzID;
	if( sscanf( params, "d", bizzID ) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/asellbizz <bizzID>" );

	new bizzOwner = GetPlayerIDFromKey( GetGVarInt( "house_OwnerKey", bizzOwner ) );
	if( IsPlayerConnected( bizzOwner ) )
		playerVariables[ bizzOwner ][ pBusiness ] = 0, SendClientMessagef( bizzOwner, COLOR_YELLOW, "Your business[%d] has been sold by Admin %s", bizzOwner, playerVariables[ playerid ][ pNormalName ] );

	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerBusiness` = 0 WHERE `id` = %d", bizzOwner );
	mysql_tquery( g_Handle, gsQuery, "", "" );

	SetGVarInt( "bus_OwnerKey", 0, bizzID );
	SetGVarString( "bus_Owner", "Nobody", bizzID );
	SetGVarInt( "bus_Status", 0, bizzID );
	UpdateBusinessText( bizzID );

	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_business` SET `busOwner` = 'Nobody', `busOwnerKey` = 0 WHERE `busKey` = %d", bizzID );
	mysql_tquery( g_Handle, gsQuery, "", "" );

	gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, "Admin %s[user:%d] has sold the business [bizz:%d].", playerVariables[ playerid ][ pNormalName ], GetPlayerMysqlID(playerid), bizzID );
	InsertPlayerLog( GetPlayerMysqlID(playerid), 0, gsString );
	submitToAdmins(gsString, COLOR_YELLOW);
	return true;
}
alias:sellbizzto( "sellbusinessto", "sellbto" );
CMD:sellbizzto( playerid, params[] )
{
	if( GetPVarInt( playerid, "bizzTrade_Player" ) != INVALID_PLAYER_ID )
		return SendClientMessage( playerid, COLOR_GREY, "Ai deja o cerere de trade trimisa, foloseste /canceltrade pentru a o anula!" );

	if( !playerVariables[ playerid ][ pBusiness ] )
		return SendClientMessage( playerid, COLOR_GREY, "Nu detii nicio casa pentru a putea sa o vinzi!" );

	new Player, Cash;
	if( sscanf( params, "ud", Player, Cash ) )					return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/sellbizzto [ playerid/Name ] [ Money ]" );
	if( Player == playerid || !IsPlayerConnected( Player ) )	return SendClientMessage( playerid, COLOR_GREY, "Invalid player specified (either yourself, or not connected)." );

	// Make some checks
	if( playerVariables[ Player ][ pBusiness ] )
		return SendClientMessage( playerid, COLOR_GREY, "Acest jucator detine deja un business!" );

	if( Cash < 1 || Cash > 10000000 )
		return SendClientMessage( playerid, COLOR_GREY, "You can only use values from 1$ to $10,000,000" );

	if( playerVariables[ Player ][ pMoney ] < Cash )			
		return SendClientMessage( playerid, COLOR_GREY, "Acest jucator nu are banii necesari pentru a efectua schimbul." );

	if( playerVariables[ Player ][ pLevel ] < GetGVarInt( "bus_Level", playerVariables[ playerid ][ pBusiness ] ) )
		return SendClientMessage( playerid, COLOR_GREY, "Acest jucator nu are levelul necesar pentru a efectua schimbul." );

	if( !IsPlayerInRangeOfPlayer( playerid, Player, 5.0 ) )		
		return SendClientMessage( playerid, COLOR_GREY, "You're too far away from that person." );

	// Set player's vars
	SetPVarInt( playerid, "bizzTrade_Player", Player );
	SetPVarInt( playerid, "bizzTrade_Cash", Cash );
	SetPVarInt( playerid, "bizzTrade_bID", playerVariables[ playerid ][ pBusiness ] );

	SendClientMessagef( playerid, COLOR_DARKPINK, "> Cererea de trade business a fost trimisa catre %s.", playerVariables[ Player ][ pNormalName ] );
	SendClientMessagef( Player, COLOR_DARKPINK, "> %s[%d] iti ofera business-ul cu ID: %d pentru suma de $%s. Scrie /accept business %d pentru a face schimbul.", 
		playerVariables[ playerid ][ pNormalName ], playerid, playerVariables[ playerid ][ pBusiness ], FormatNumber( Cash ), playerid );
	return true;
}
CMD:addbizztobids( playerid, params[] )
{
	AHCheck( playerid, 8, 5 );

	new bizzID;
	if( sscanf( params, "d", bizzID ) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/addbizztobids <bizzID>" );

	new bizzOwner = GetPlayerIDFromKey( GetGVarInt( "bus_OwnerKey", bizzID ) );
	if( IsPlayerConnected( bizzOwner ) )
		playerVariables[ bizzOwner ][ pBusiness ] = 0, SendClientMessagef( bizzOwner, COLOR_YELLOW, "Your business[%d] has been moved to bids list!", bizzID );

	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerBusiness` = 0 WHERE `playerBusiness` = %d", bizzID );
	mysql_tquery( g_Handle, gsQuery, "", "" );

	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_business` SET `busOwner` = 'AdmBot', `busOwnerKey` = 1 WHERE `busKey` = %d", bizzID );
	mysql_tquery( g_Handle, gsQuery, "", "" );

	SetGVarInt( "bus_OwnerKey", 1, bizzID );
	SetGVarString( "bus_Owner", "AdmBot", bizzID );
	UpdateBusinessText( bizzID );

	return SendClientMessagef( playerid, COLOR_LIGHTRED, "Business[ID:%d] has been added to bid list!", bizzID );
}
CMD:sellhidden( playerid, params[] )
{
	if( GetPVarInt( playerid, "hidTrade_Player" ) != INVALID_PLAYER_ID )
		return SendClientMessage( playerid, COLOR_GREY, "Ai deja o cerere de trade trimisa, foloseste /canceltrade pentru a o anula!" );

	if( !playerVariables[ playerid ][ pHiddenColors ] )
		return SendClientMessage( playerid, COLOR_GREY, "Nu detii nicio culoare hidden pentru a putea sa o vinzi!" );

	new Player, Cash;
	if( sscanf( params, "ud", Player, Cash ) )					return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/sellhidden [ playerid/Name ] [ Money ]" );
	if( Player == playerid || !IsPlayerConnected( Player ) )	return SendClientMessage( playerid, COLOR_GREY, "Invalid player specified (either yourself, or not connected)." );

	// Make some checks
	if( Cash < 1 || Cash > 500000 )
		return SendClientMessage( playerid, COLOR_GREY, "You can only use values from 1$ to $500,000" );

	if( playerVariables[ Player ][ pMoney ] < Cash )			
		return SendClientMessage( playerid, COLOR_GREY, "Acest jucator nu are banii necesari pentru a efectua schimbul." );

	if( !IsPlayerInRangeOfPlayer( playerid, Player, 5.0 ) )		
		return SendClientMessage( playerid, COLOR_GREY, "You're too far away from that person." );

	// Set player's vars
	SetPVarInt( playerid, "hidTrade_Player", Player );
	SetPVarInt( playerid, "hidTrade_Cash", Cash );

	SendClientMessagef( playerid, COLOR_DARKPINK, "> Cererea de trade hidden a fost trimisa catre %s.", playerVariables[ Player ][ pNormalName ] );
	SendClientMessagef( Player, COLOR_DARKPINK, "> %s[%d] iti ofera o culoare hidden pentru suma de $%s. Scrie /accept hidden %d pentru a face schimbul.", 
		playerVariables[ playerid ][ pNormalName ], playerid, FormatNumber( Cash ), playerid );
	return true;
}
CMD:canceltrade( playerid, params[] )
{
	SetPVarInt( playerid, "bizzTrade_Player", INVALID_PLAYER_ID );
	SetPVarInt( playerid, "houseTrade_Player", INVALID_PLAYER_ID );
	SetPVarInt( playerid, "hidTrade_Player", INVALID_PLAYER_ID );
	return SendClientMessage( playerid, COLOR_LIGHTGREEN, "Your trade offers are now canceled!" );
}
alias:lockbizz( "lockb", "lockbusiness" );
CMD:lockbizz( playerid, params[] )
{
	new bizID = GetBuildingEnterID( playerid, 0, 3 );
	if( bizID == -404 )											return SendClientMessage( playerid, COLOR_GREY, "You have to be in the business pickup!" );
	if( playerVariables[ playerid ][ pBusiness ] == 0 )			return SendClientMessage( playerid, COLOR_GREY, "You don't own any Business!" );
	if( bizID != playerVariables[ playerid ][ pBusiness ] )		return SendClientMessage( playerid, COLOR_GREY, "You are not the owner of this Business!" );

	switch( GetGVarInt( "bus_Status", bizID ) )
	{
		case 0: SetGVarInt( "bus_Status", 1, bizID ), InfoTD_MSG( playerid, 5000, "~y~Business: ~w~~h~You business has been ~r~~h~locked" );
		case 1: SetGVarInt( "bus_Status", 0, bizID ), InfoTD_MSG( playerid, 5000, "~y~Business: ~w~~h~You business has been ~g~~h~un-locked" );
	}
	UpdateBusinessText( bizID );

	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_business` SET `busStatus` = %d WHERE `busKey` = %d", GetGVarInt( "bus_Status", bizID ), bizID );
	mysql_tquery( g_Handle, gsQuery, "", "" );
	return true;
}
CMD:bwithdraw( playerid, params[] )
{
	if( !playerVariables[ playerid ][ pBusiness ] )				return SendClientMessage( playerid, COLOR_GREY, "You don't own any Business!" );
	new BusIDENT = GetBuildingEnterID( playerid, 0, 3 );
	if( BusIDENT == -404 && BusIDENT != HOTEL_DB_ID) 			return SendClientMessage( playerid, COLOR_GREY, "You have to be in the Business pickup!" );
	if( playerVariables[ playerid ][ pBusiness ] != BusIDENT )  return SendClientMessage( playerid, COLOR_GREY, "You're not the owner of this Business!" );
	new bMoney;
	if( sscanf( params, "d", bMoney ) ) 						return SendClientMessage( playerid, COLOR_WHITE, SYNTAX_MESSAGE"/bwithdraw <money>" );
	if( bMoney <= 0 || GetGVarInt( "bus_Money", BusIDENT ) < bMoney )	return SendClientMessage( playerid, COLOR_GREY, "You don't have this ammount of money in your Business safe!" );

	SetGVarInt( "bus_Money", GetGVarInt( "bus_Money", BusIDENT ) - bMoney, BusIDENT );
	SendClientMessagef( playerid, COLOR_WHITE, "You have withdrawn $%d from your safe.", bMoney );
	playerVariables[ playerid ][ pMoney ] += bMoney;
	nearByMessage( playerid, COLOR_PURPLE, NBM_DIST, "* %s withdraws $%d from their safe.", username( playerid ), bMoney );

	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_business` SET `busMoney` = %d WHERE `busKey` = %d", GetGVarInt( "bus_Money", BusIDENT ), BusIDENT );
	mysql_tquery( g_Handle, gsQuery, "", "" );
	return true;
}
CMD:bizzfee( playerid, params[] )
{
	if( !playerVariables[ playerid ][ pBusiness ] )				return SendClientMessage( playerid, COLOR_GREY, "You don't own any Business!" );
	new Value, bizID = GetBuildingEnterID( playerid, 0, 3 );
	if( bizID == -404 )											return SendClientMessage( playerid, COLOR_GREY, "You have to be in the business pickup!" );
	if( playerVariables[ playerid ][ pBusiness ] != bizID )  	return SendClientMessage( playerid, COLOR_GREY, "You're not the owner of this Business!" );
	if( sscanf( params, "d", Value ) )							return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/bizzfee [ fee ]" );
	if( Value < 50 || Value > 500 )								return SendClientMessage( playerid, COLOR_GREY, "Invalid fee, please use values betwen $50 - $500" );

	SetGVarInt( "bus_Fee", Value, bizID );
	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_business` SET `busFee` = %d WHERE `busKey` = %d", GetGVarInt( "bus_Fee", bizID ), bizID );
	mysql_tquery( g_Handle, gsQuery, "", "" );

	SendClientMessagef( playerid, COLOR_YELLOW, "You have set the business enter fee to: $%s", FormatNumber( Value ) );
	return true;
}
CMD:bizzbalance( playerid, params[] )
{
	if( !playerVariables[ playerid ][ pBusiness ] )
		return SendClientMessage( playerid, COLOR_GREY, "You don't own any Business!" );

	SendClientMessagef( playerid, ~1, "Your business ballance: $%s", FormatNumber( GetGVarInt( "bus_Money", playerVariables[ playerid ][ pBusiness ] ) ) );
	return true;
}
CMD:tenants( playerid, params[] )
{
	new houseID = playerVariables[ playerid ][ pHouse ], tCount = 0;
	if( houseID == 0 )	
		return SendClientMessage( playerid, COLOR_GREY, "You don't own any House!" );

	// < Show Online Tenants )
	SendClientMessage( playerid, -1, "Tenants online:" );
	foreach(new i : playerRenters[houseID])
		SendClientMessagef( playerid, -1, "(%i) %s", i, username( i ) ), tCount++;

	SendClientMessagef( playerid, -1, "Total tenants online: %d", tCount );
	return true;
}
CMD:hbalance( playerid, params[] )
{
	new houseID = playerVariables[ playerid ][ pHouse ];
	if( houseID == 0 )
		return SendClientMessage( playerid, COLOR_GREY, "You don't own any House!" );

	SendClientMessagef( playerid, ~1, "Your House ballance: $%s", FormatNumber( GetGVarInt( "house_Money", houseID ) ) );
	return true;
}
CMD:hwithdraw( playerid, params[] )
{
	if( playerVariables[ playerid ][ pHouse ] == 0 )		return SendClientMessage( playerid, COLOR_GREY, "You don't own any House!" );
	new houseID = GetBuildingEnterID( playerid, 0, 2 );
	if( houseID == -404 ) 									return SendClientMessage( playerid, COLOR_GREY, "You have to be in the House pickup!" );
	if( playerVariables[ playerid ][ pHouse ] != houseID )  return SendClientMessage( playerid, COLOR_GREY, "You're not the owner of this House!" );

	new hMoney;
	if( sscanf( params, "d", hMoney ) ) return SendClientMessage( playerid, COLOR_WHITE, SYNTAX_MESSAGE"/hwithdraw <money>" );
	if( hMoney <= 0 || GetGVarInt( "house_Money", houseID ) < hMoney )	return SendClientMessage( playerid, COLOR_GREY, "You don't have this ammount of money in your House safe!" );

	SetGVarInt( "house_Money", GetGVarInt( "house_Money", houseID ) - hMoney, houseID );
	SendClientMessagef( playerid, COLOR_WHITE, "You have withdrawn $%d from your safe.", hMoney );
	playerVariables[ playerid ][ pMoney ] += hMoney;
	nearByMessage( playerid, COLOR_PURPLE, NBM_DIST, "* %s withdraws $%d from their safe.", username( playerid ), hMoney );

	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_houses` SET `houseMoney` = %d WHERE `houseKey` = %d", GetGVarInt( "house_Money", houseID ), houseID );
	mysql_tquery( g_Handle, gsQuery, "", "" );
	return true;
}
CMD:hdeposit( playerid, params[] )
{
	if( playerVariables[ playerid ][ pHouse ] == 0 )		return SendClientMessage( playerid, COLOR_GREY, "You don't own any House!" );
	new houseID = GetBuildingEnterID( playerid, 0, 2 ), hMoney;
	if( houseID == -404 ) 									return SendClientMessage( playerid, COLOR_GREY, "You have to be in the House pickup!" );
	if( playerVariables[ playerid ][ pHouse ] != houseID )  return SendClientMessage( playerid, COLOR_GREY, "You're not the owner of this House!" );
	if( sscanf( params, "d", hMoney ) ) 					return SendClientMessage( playerid, COLOR_WHITE, SYNTAX_MESSAGE"/hdeposit <money>" );
	if( hMoney <= 0 || playerVariables[ playerid ][ pMoney ] < hMoney )	return SendClientMessage( playerid, COLOR_GREY, "You don't have this ammount of money!" );

	SetGVarInt( "house_Money", GetGVarInt( "house_Money", houseID ) + hMoney, houseID );
	SendClientMessagef( playerid, COLOR_WHITE, "You have deposited $%d in your safe.", hMoney );
	playerVariables[ playerid ][ pMoney ] -= hMoney;
	nearByMessage( playerid, COLOR_PURPLE, NBM_DIST, "* %s deposits $%d in their safe.", username( playerid ), hMoney );

	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_houses` SET `houseMoney` = %d WHERE `houseKey` = %d", GetGVarInt( "house_Money", houseID ), houseID );
	mysql_tquery( g_Handle, gsQuery, "", "" );
	return true;
}
CMD:evict( playerid, params[] )
{
	new Player, houseID = playerVariables[ playerid ][ pHouse ];
	if( houseID == 0 )											return SendClientMessage( playerid, COLOR_GREY, "You don't own any House!" );
	if( sscanf( params, "u", Player ) ) 						return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/evict [playerID/Name]" );
	if( !IsPlayerConnected( Player ) )							return SendClientMessage( playerid, COLOR_GREY, "This player is not connected!" );
	if( playerVariables[ Player ][ pRentRoom ] != houseID ) 	return SendClientMessage( playerid, COLOR_GREY, "This player it's not your tenant!" );
     
    new houseID_x = playerVariables[Player][pRentRoom];
    Iter_Remove(playerRenters[houseID_x], Player); 
	playerVariables[ Player ][ pRentRoom ] = 0;
	GameTextForPlayer( Player, "~w~You have been evicted!", 5000, 3 );
	SendClientMessage( playerid, -1, "Player evicted from your House!" );

	if( playerVariables[ Player ][ pSpawnType ] == 2 )
		playerVariables[ Player ][ pSpawnType ] = 0;

	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerRent` = 0 WHERE `id` = %d", GetPlayerMysqlID(Player) );
	mysql_tquery( g_Handle, gsQuery, "", "" );
	return true;
}
CMD:rent( playerid, params[] )
{
	new sItem[ 10 ];
	if(sscanf( params, "s[10]", sItem))
		return SendClientMessage(playerid, -1, SYNTAX_MESSAGE"/rent [ room / apartment / car ]");

	switch(YHash(sItem, false))
	{
		case _I<room>:
		{
			new houseID = GetBuildingEnterID( playerid, 0, 2 );
			if( houseID == -404 )
				return SendClientMessage( playerid, COLOR_GREY, "You have to be in the house pickup!" );

			if( playerVariables[ playerid ][ pHouse ] != 0 )
				return SendClientMessage( playerid, COLOR_GREY, "Your already have a house, you can't rent a house!" );

			if( playerVariables[ playerid ][ pRentRoom ] != 0 )
				return SendClientMessage( playerid, COLOR_GREY, "Your already have a rent, you can't rent another house!" );

			if( playerVariables[ playerid ][ pRentAP ] != 0 )
				return SendClientMessage( playerid, COLOR_GREY, "Your already have a rent, you can't rent another apartment, use /unrent app" );

			if( GetGVarInt( "house_OwnerKey", houseID == 0 ) )
				return SendClientMessage( playerid, COLOR_GREY, "This house it's not owned by anyone!" );

			GameTextForPlayer( playerid, "~w~Welcome Home~n~You can exit at any time by moving to this door and press F.", 5000, 3 );
			playerVariables[ playerid ][ pRentRoom ] = houseID;
			Iter_Add(playerRenters[houseID], playerid);

			SetPlayerVirtualWorld( playerid, GetGVarInt( "house_Virtual", houseID ) );
			SetPlayerInterior( playerid, GetGVarInt( "house_Interior", houseID ) );
			SetPlayerPos( playerid, GetGVarFloat( "house_ExitX", houseID ), GetGVarFloat( "house_ExitY", houseID ), GetGVarFloat( "house_ExitZ", houseID ) );

			gsQuery[ 0 ] = EOS;
			mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerRent` = %d WHERE `id` = %d", houseID, GetPlayerMysqlID(playerid) );
			mysql_tquery( g_Handle, gsQuery, "", "" );
		}
		case _I<apartment>:
		{
			new ap_id = GetBuildingEnterID( playerid, 0, 4, 1.5 );
			if( ap_id == -404 )
				return SendClientMessage( playerid, COLOR_GREY, "You have to be in the apartment pickup!" );

			if( playerVariables[ playerid ][ pRentRoom ] != 0 )
				return SendClientMessage( playerid, COLOR_GREY, "Your already have a rent, you can't rent another apartment, use /unrent room" );

			if( playerVariables[ playerid ][ pRentAP ] != 0 )
				return SendClientMessage( playerid, COLOR_GREY, "Your already have a rent, you can't rent another apartment, use /unrent app" );

			GameTextForPlayer( playerid, "~w~Welcome Apartment~n~You can exit at any time by moving to this door and press F.", 5000, 3 );
			playerVariables[ playerid ][ pRentAP ] = ap_id;

			SetPlayerPos(playerid, GetGVarFloat("apartment_EXITX", ap_id), GetGVarFloat("apartment_EXITY", ap_id), GetGVarFloat("apartment_EXITZ", ap_id));
			SetPlayerFacingAngle(playerid, GetGVarFloat("apartment_ANGLE", ap_id));

			SetGVarInt("apartment_RENTERS", GetGVarInt("apartment_RENTERS", ap_id) + 1, ap_id);
			UpdateApartment(ap_id);

			gsQuery[ 0 ] = EOS;
			mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerApartment` = %d  WHERE `id` = %d", ap_id, GetPlayerMysqlID( playerid ) );
			mysql_tquery( g_Handle, gsQuery, "", "" );

			gsQuery[ 0 ] = EOS;
			mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_apartments` SET `apartmentRENTERS` = apartmentRENTERS + 1  WHERE `apartmentKEY` = %d", playerVariables[ playerid ][ pRentAP ] );
			mysql_tquery( g_Handle, gsQuery, "", "" );
		}
		case _I<car>:
		{
			if( !playerVariables[ playerid ][ pCarLicense ] )
				return SendClientMessage( playerid, COLOR_WHITE, "Trebuie sa ai permis de conducere!" );

			if( GetGVarInt( "bus_Type", GetBuildingEnterID( playerid, 0, 3, 3.0 ) ) != 13 )
				return SendClientMessage( playerid, COLOR_GREY, "Trebuie sa fii langa un Rent Car pentru a putea inchiria o masina!" );

			ShowModelSelectionMenu( playerid, selection_rentcars, "Rent Cars" );
		}
		default:
		{
			return SendClientMessage(playerid, -1, SYNTAX_MESSAGE"/rent [ room / apartment / car ]");
		}
	}
	return true;
}
CMD:unrent( playerid, params[] )
{
    new sItem[ 10 ];
    if(sscanf( params, "s[10]", sItem))
    	return SendClientMessage(playerid, -1, SYNTAX_MESSAGE"/unrent [ room / apartment ]");

    switch(YHash(sItem, false))
    {
    	case _I<room>:
    	{
    		if( playerVariables[ playerid ][ pRentRoom ] == 0 )
		        return SendClientMessage( playerid, COLOR_GREY, "Your don't have a rent on any House!" );

		    GameTextForPlayer( playerid, "~w~House Un-Rented!", 5000, 3 );

			new houseID = playerVariables[playerid][pRentRoom];
			Iter_Remove(playerRenters[houseID], playerid);
			playerVariables[ playerid ][ pRentRoom ] = 0;

			if( playerVariables[ playerid ][ pSpawnType ] == 2 )
				playerVariables[ playerid ][ pSpawnType ] = 0;

			gsQuery[ 0 ] = EOS;
			mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerRent` = 0 WHERE `id` = %d", GetPlayerMysqlID(playerid) );
			mysql_tquery( g_Handle, gsQuery, "", "" );
    	}
    	case _I<apartment>:
    	{
    		if( playerVariables[ playerid ][ pRentAP ] == 0 )
				return SendClientMessage( playerid, COLOR_GREY, "Your don't have a rent on apartment." );

			GameTextForPlayer( playerid, "~w~Apartment Un-Rented!", 5000, 3 );

			SetGVarInt("apartment_RENTERS", GetGVarInt("apartment_RENTERS", playerVariables[ playerid ][ pRentAP ]) - 1, playerVariables[ playerid ][ pRentAP ]);
			UpdateApartment(playerVariables[ playerid ][ pRentAP ]);

			gsQuery[ 0 ] = EOS;
			mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_apartments` SET `apartmentRENTERS` = apartmentRENTERS - 1  WHERE `apartmentKEY` = '%d'", playerVariables[ playerid ][ pRentAP ]);
			mysql_tquery( g_Handle, gsQuery, "", "" );
			playerVariables[ playerid ][ pRentAP ] = 0;

			if( playerVariables[ playerid ][ pSpawnType ] == 3 )
				playerVariables[ playerid ][ pSpawnType ] = 0;

			gsQuery[ 0 ] = EOS;
			mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerApartment` = 0 WHERE `id` = %d", GetPlayerMysqlID( playerid ) );
			mysql_tquery( g_Handle, gsQuery, "", "" );
		}
    	default:
    	{
    		return SendClientMessage(playerid, -1, SYNTAX_MESSAGE"/unrent [ room / apartment ]");
    	}
    }

	return true;
}
public OnPlayerEditDynamicObject( playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	switch( response )
	{
		case EDIT_RESPONSE_FINAL:
		{
			#if defined XMAS_MODE
			new houseID = GetBuildingEnterID( playerid, 1, 2, 50.0 );
			if( objectid == GetGVarInt( "house_Gift", houseID ) )
			{
				SetDynamicObjectPos( GetGVarInt( "house_Gift", houseID ), Float:x, Float:y, Float:z );
				SetDynamicObjectRot( GetGVarInt( "house_Gift", houseID ), Float:rx, Float:ry, Float:rz );
				SendClientMessage( playerid, ~1, "Ai plasat cadoul cu succes la noua pozitie!" );
			}
			#endif
		}
		case EDIT_RESPONSE_CANCEL: SendClientMessage( playerid, ~1, "Ai anulat editarea obiectului curent!" );
	}
}
#if defined XMAS_MODE
CMD:editgift( playerid, params[] )
{
	new houseID = GetBuildingEnterID( playerid, 1, 2, 50 );
	if( houseID == -404 )
		return SendClientMessage( playerid, COLOR_GREY, "You have to be in the house!" );

	if( houseID != playerVariables[ playerid ][ pHouse ] )
		return SendClientMessage( playerid, COLOR_GREY, "You are not the owner of this House!" );

	EditDynamicObject( playerid, GetGVarInt( "house_Gift", houseID ) );
	return true;
}
CMD:placegift( playerid, params[] )
{
	new houseID = GetBuildingEnterID( playerid, 1, 2, 50 );
	if( houseID == -404 )
		return SendClientMessage( playerid, COLOR_GREY, "You have to be in the house!" );

	if( houseID != playerVariables[ playerid ][ pHouse ] )
		return SendClientMessage( playerid, COLOR_GREY, "You are not the owner of this House!" );

	if( IsValidDynamicObject( GetGVarInt( "house_Gift", houseID ) ) )
		DestroyDynamicObject( GetGVarInt( "house_Gift", houseID ) );

	new Float:fPos[ 3 ];
	GetPlayerPos( playerid, fPos[ 0 ], fPos[ 1 ], fPos[ 2 ] );
	SetGVarInt( "house_Gift", CreateDynamicObject( 19058, fPos[ 0 ] + 2, fPos[ 1 ] + 0.5, fPos[ 2 ], 0.0, 0.0, 0.0, GetGVarInt( "house_Virtual", houseID ), -1, -1, 50.0 ), houseID );
	return true;
}
#endif
CMD:sleep( playerid, params[] )
{
	if( playerVariables[ playerid ][ pWanted ] != 0 )
		return SendClientMessage( playerid, COLOR_GREY, "You can't sleep, because you are wanted." );

    new sItem[ 10 ];
    if(sscanf( params, "s[10]", sItem))
    	return SendClientMessage(playerid, -1, SYNTAX_MESSAGE"/sleep [ house / apartment / off ]");

    switch(YHash(sItem, false))
    {
    	case _I<house>:
    	{
    		if( playerVariables[ playerid ][ pSleeping ] == true )
    			return SendClientMessage( playerid, -1, "You are on sleep, use [ /sleep off ] !" );

    		new houseID = GetBuildingEnterID( playerid, 1, 2, 50 );
			if( houseID == -404 )
				return SendClientMessage( playerid, COLOR_GREY, "You have to be in the house!" );

			if( houseID != playerVariables[ playerid ][ pRentRoom ] && houseID != playerVariables[ playerid ][ pHouse ] )
		        return SendClientMessage( playerid, COLOR_GREY, "Trebuie sa fii in casa ta sau sa ai rent aici!" );

			SleepPlayer( playerid, 1 );
    	}
    	case _I<apartment>:
    	{
    		if( playerVariables[ playerid ][ pSleeping ] == true )
    			return SendClientMessage( playerid, -1, "You are on sleep, use [ /sleep off ] !" );

    		new apartmentID = GetBuildingEnterID( playerid, 1, 4, 50 );
			if( apartmentID == -404 )
				return SendClientMessage( playerid, COLOR_GREY, "You have to be in the apartment!" );

			if( GetPVarInt( playerid, "is_in_apartament" ) == 0 )
				return SendClientMessage( playerid, COLOR_GREY, "You have to be in the apartment!" );

			if( apartmentID != playerVariables[ playerid ][ pRentAP ] && GetGVarInt( "bus_OwnerKey", HOTEL_DB_ID ) != GetPlayerMysqlID( playerid ) )
		        return SendClientMessage( playerid, COLOR_GREY, "Trebuie sa fie hotelul tau sau sa ai rent la acest apartament!" );

			SleepPlayer( playerid, 1 );
    	}
    	case _I<off>:
    	{
    		if( playerVariables[ playerid ][ pSleeping ] == false )
    			return SendClientMessage( playerid, -1, "You are not on sleep!" );

    		SleepPlayer( playerid, 2 );
    	}
    	default:
    	{
    		return SendClientMessage(playerid, -1, SYNTAX_MESSAGE"/sleep [ house / apartment ]");
    	}
    }
	return true;
}
CMD:buyhouse( playerid, params[] )
{
	CheckPlayerAction( playerid );

	if( serverVariables[ currentBIDTimer ] < 130 && serverVariables[ currentBIDTimer ] > 0 )
		return SendClientMessage( playerid, COLOR_GREY, "There is an active Bid right now!" );

	new houseID = GetBuildingEnterID( playerid, 0, 2 );
	if( houseID == -404 )
		return SendClientMessage( playerid, COLOR_GREY, "You have to be in the house pickup!" );

	if( playerVariables[ playerid ][ pHouse ] != 0 )
		return SendClientMessage( playerid, COLOR_GREY, "Your already have a house, please sell it first!" );

	if( GetGVarInt( "house_OwnerKey", houseID ) != 0 )
		return SendClientMessage( playerid, COLOR_GREY, "This house it's not for sale!" );

	if( GetGVarInt( "house_Level", houseID ) > playerVariables[ playerid ][ pLevel ] )
		return SendClientMessagef( playerid, COLOR_GREY, "You need level %d to buy this house!", GetGVarInt( "house_Level", houseID ) );

	if( GetGVarInt( "house_Price", houseID ) > playerVariables[ playerid ][ pMoney ] )
		return SendClientMessage( playerid, COLOR_GREY, "You don't have the money to buy this House!" );

	SetGVarInt( "house_OwnerKey", GetPlayerMysqlID(playerid), houseID );
	SetGVarString( "house_Owner", playerVariables[ playerid ][ pNormalName ], houseID );

	new houseID_x = playerVariables[playerid][pRentRoom];
	if(houseID_x != 0) Iter_Remove(playerRenters[houseID], playerid);

	playerVariables[ playerid ][ pRentRoom ] = 0;
	playerVariables[ playerid ][ pHouse ] = houseID;
	playerVariables[ playerid ][ pMoney ] -= GetGVarInt( "house_Price", houseID );
	DestroyDynamicPickup( GetGVarInt( "HousePickup", houseID ) );
	DeleteGVar( "HousePickup", houseID );
	SetGVarInt( "HousePickup", CreateDynamicPickup( 19522, 23, GetGVarFloat( "house_EnterX", houseID ), GetGVarFloat( "house_EnterY", houseID ), GetGVarFloat( "house_EnterZ", houseID ) ), houseID );
    pickupInfo[ GetGVarInt( "HousePickup", houseID ) ][house_pickups] = houseID;

	// < Update the house's Text )
	UpdateHouseText( houseID, 0 );

	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_houses` SET `houseOwner` = '%s', `houseOwnerKey` = %d WHERE `houseKey` = %d", playerVariables[ playerid ][ pNormalName ], GetPlayerMysqlID(playerid), houseID );
	mysql_tquery( g_Handle, gsQuery, "", "" );

	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerHouse` = %d WHERE `id` = %d", houseID, GetPlayerMysqlID(playerid) );
	mysql_tquery( g_Handle, gsQuery, "", "" );

	gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, "%s[user:%d] has bought [house:%d] for $%s.", playerVariables[ playerid ][ pNormalName ], GetPlayerMysqlID(playerid), houseID, FormatNumber( GetGVarInt( "house_Price", houseID ) ) );
	InsertPlayerLog( GetPlayerMysqlID(playerid), 0, gsString );
	submitToAdmins(gsString, COLOR_YELLOW);
	return true;
}
CMD:sethouselevel( playerid, params[] )
{
	AHCheck( playerid, 6, 5 );

	new houseID = GetBuildingEnterID( playerid, 0, 2 );
	if( houseID == -404 )
		return SendClientMessage( playerid, COLOR_GREY, "You have to be in the house pickup!" );

	if( GetGVarInt( "house_OwnerKey", houseID ) != 0 )
		return SendClientMessage( playerid, COLOR_GREY, "You can't change the level of an owned house!" );

	if( sscanf( params, "d", params[ 0 ] ) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/sethouselevel <houseLevel>" );

	InfoTD_MSG( playerid, 5000, "~r~~h~INFO~n~~w~~h~You have set the houseID %d's level to %d", houseID, params[ 0 ] );
	SetGVarInt( "house_Level", params[ 0 ], houseID );
	UpdateHouseText( houseID, 1 );

	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_houses` SET `houseLevel` = %d WHERE `houseKey` = %d", params[ 0 ], houseID );
	mysql_tquery( g_Handle, gsQuery, "", "" );
	return true;
}
CMD:sethouseprice( playerid, params[] )
{
	AHCheck( playerid, 6, 5 );

	new houseID = GetBuildingEnterID( playerid, 0, 2 );
	if( houseID == -404 )
		return SendClientMessage( playerid, COLOR_GREY, "You have to be in the house pickup!" );

	//if( GetGVarInt( "house_OwnerKey", houseID ) != 0 ) return SendClientMessage( playerid, COLOR_GREY, "You can't change the level of an owned house!" );

	if( sscanf( params, "d", params[ 0 ] ) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/sethouseprice <housePrice>" );

	InfoTD_MSG( playerid, 5000, "~r~~h~INFO~n~~w~~h~You have set the houseID %d's price to $%s", houseID, FormatNumber( params[ 0 ] ) );
	SetGVarInt( "house_Price", params[ 0 ], houseID );
	UpdateHouseText( houseID, 1 );

	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_houses` SET `housePrice` = %d WHERE `houseKey` = %d", params[ 0 ], houseID );
	mysql_tquery( g_Handle, gsQuery, "", "" );
	return true;
}
CMD:sellhousetostate( playerid, params[] )
{
	new houseID = GetBuildingEnterID( playerid, 0, 2 );
	if( houseID == -404 )
		return SendClientMessage( playerid, COLOR_GREY, "You have to be in the house pickup!" );

	if( houseID != playerVariables[ playerid ][ pHouse ] )
		return SendClientMessage( playerid, COLOR_GREY, "You are not the owner of this House!" );

	SetGVarInt( "house_OwnerKey", 0, houseID );
	SetGVarString( "house_Owner", "Nobody", houseID );
	if( playerVariables[ playerid ][ pSpawnType ] == 2 )
		playerVariables[ playerid ][ pSpawnType ] = 0;

	// < Update the house's Text )
	UpdateHouseText( houseID, 1 );
	playerVariables[ playerid ][ pMoney ] += floatround( (GetGVarInt( "house_Price", houseID )/100)*50, floatround_round );
	playerVariables[ playerid ][ pHouse ] = 0;

	DestroyDynamicPickup( GetGVarInt( "HousePickup", houseID ) );
	DeleteGVar( "HousePickup", houseID );
	SetGVarInt( "HousePickup", CreateDynamicPickup( 1273, 23, GetGVarFloat( "house_EnterX", houseID ), GetGVarFloat( "house_EnterY", houseID ), GetGVarFloat( "house_EnterZ", houseID ) ), houseID );
	InfoTD_MSG( playerid, 5000, "Ai vandut casa cu ID:%d si ai primit 50%% din valoarea sa.", houseID );
    pickupInfo[ GetGVarInt( "HousePickup", houseID ) ][house_pickups] = houseID;

	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_houses` SET `houseOwner` = 'Nobody', `houseOwnerKey` = 0 WHERE `houseKey` = %d", houseID );
	mysql_tquery( g_Handle, gsQuery, "", "" );

	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerHouse` = 0 WHERE `id` = %d", GetPlayerMysqlID(playerid) );
	mysql_tquery( g_Handle, gsQuery, "", "" );

	gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, "%s[user:%d] has sold his [house:%d] for $%s.", playerVariables[ playerid ][ pNormalName ], GetPlayerMysqlID(playerid), houseID, FormatNumber( floatround( (GetGVarInt( "house_Price", houseID )/100)*50, floatround_round ) ) );
	InsertPlayerLog( GetPlayerMysqlID(playerid), 0, gsString );
	submitToAdmins(gsString, COLOR_YELLOW);
	return true;
}
CMD:asellhouse( playerid, params[] )
{
	AHCheck( playerid, 8, 5 );

	new houseID;
	if( sscanf( params, "d", houseID ) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/asellhouse <houseID>" );

	new houseOwner = GetPlayerIDFromKey( GetGVarInt( "house_OwnerKey", houseID ) );
	if( IsPlayerConnected( houseOwner ) )
	{
		if( playerVariables[ houseOwner ][ pSpawnType ] == 2 )
			playerVariables[ houseOwner ][ pSpawnType ] = 0;

		playerVariables[ houseOwner ][ pHouse ] = 0, SendClientMessagef( houseOwner, COLOR_YELLOW, "* Your house[%d] has been sold by Admin %s", houseID, playerVariables[ playerid ][ pNormalName ] );
	}
	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerHouse` = 0 WHERE `id` = %d", houseOwner );
	mysql_tquery( g_Handle, gsQuery, "", "" );

	SetGVarInt( "house_OwnerKey", 0, houseID );
	SetGVarString( "house_Owner", "Nobody", houseID );

	// < Update the house's Text )
	UpdateHouseText( houseID, 1 );
	DestroyDynamicPickup( GetGVarInt( "HousePickup", houseID ) );
	DeleteGVar( "HousePickup", houseID );
	SetGVarInt( "HousePickup", CreateDynamicPickup( 1273, 23, GetGVarFloat( "house_EnterX", houseID ), GetGVarFloat( "house_EnterY", houseID ), GetGVarFloat( "house_EnterZ", houseID ) ), houseID );
    pickupInfo[ GetGVarInt( "HousePickup", houseID ) ][house_pickups] = houseID;

	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_houses` SET `houseOwner` = 'Nobody', `houseOwnerKey` = 0 WHERE `houseKey` = %d", houseID );
	mysql_tquery( g_Handle, gsQuery, "", "" );

	gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, "Admin %s[user:%d] has sold the house [house:%d]", playerVariables[ playerid ][ pNormalName ], GetPlayerMysqlID(playerid), houseID );
	InsertPlayerLog( GetPlayerMysqlID(playerid), 0, gsString );
	submitToAdmins(gsString, COLOR_YELLOW);
	return true;
}
CMD:sellhouseto( playerid, params[] )
{
	if( GetPVarInt( playerid, "houseTrade_Player" ) != INVALID_PLAYER_ID )
		return SendClientMessage( playerid, COLOR_GREY, "Ai deja o cerere de trade trimisa, foloseste /canceltrade pentru a o anula!" );

	if( !playerVariables[ playerid ][ pHouse ] )
		return SendClientMessage( playerid, COLOR_GREY, "Nu detii nicio casa pentru a putea sa o vinzi!" );

	new Player, Cash;
	if( sscanf( params, "ud", Player, Cash ) )					return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/sellhouseto [ playerid/Name ] [ Money ]" );
	if( Player == playerid || !IsPlayerConnected( Player ) )	return SendClientMessage( playerid, COLOR_GREY, "Invalid player specified (either yourself, or not connected)." );

	// Make some checks
	if( playerVariables[ Player ][ pHouse ] )
		return SendClientMessage( playerid, COLOR_GREY, "Acest jucator detine deja o casa!" );

	if( Cash < 1 || Cash > 10000000 )
		return SendClientMessage( playerid, COLOR_GREY, "You can only use values from 1$ to $10,000,000" );

	if( playerVariables[ Player ][ pMoney ] < Cash )
		return SendClientMessage( playerid, COLOR_GREY, "Acest jucator nu are banii necesari pentru a efectua schimbul." );

	if( playerVariables[ Player ][ pLevel ] < GetGVarInt( "house_Level", playerVariables[ playerid ][ pHouse ] ) )
		return SendClientMessage( playerid, COLOR_GREY, "Acest jucator nu are levelul necesar pentru a efectua schimbul." );

	if( !IsPlayerInRangeOfPlayer( playerid, Player, 5.0 ) )
		return SendClientMessage( playerid, COLOR_GREY, "You're too far away from that person." );

	// Set player's vars
	SetPVarInt( playerid, "houseTrade_Player", Player );
	SetPVarInt( playerid, "houseTrade_Cash", Cash );
	SetPVarInt( playerid, "houseTrade_hID", playerVariables[ playerid ][ pHouse ] );

	SendClientMessagef( playerid, COLOR_DARKPINK, "> Cererea de trade house a fost trimisa catre %s.", playerVariables[ Player ][ pNormalName ] );
	SendClientMessagef( Player, COLOR_DARKPINK, "> %s[%d] iti ofera casa cu ID: %d pentru suma de $%s. Scrie /accept house %d pentru a face schimbul.", 
		playerVariables[ playerid ][ pNormalName ], playerid, playerVariables[ playerid ][ pHouse ], FormatNumber( Cash ), playerid );
	return true;
}
CMD:addhousetobids( playerid, params[] )
{
	AHCheck( playerid, 8, 5 );

	new houseID;
	if( sscanf( params, "d", houseID ) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/addhousetobids <houseID>" );

	new houseOwner = GetPlayerIDFromKey( GetGVarInt( "house_OwnerKey", houseID ) );
	if( IsPlayerConnected( houseOwner ) )
		playerVariables[ houseOwner ][ pHouse ] = 0, SendClientMessagef( houseOwner, COLOR_YELLOW, "Your house[%d] has been moved to bids list!", houseID );

	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerHouse` = 0 WHERE `playerHouse` = %d", houseID );
	mysql_tquery( g_Handle, gsQuery, "", "" );

	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_houses` SET `houseOwner` = 'AdmBot', `houseOwnerKey` = 1 WHERE `houseKey` = %d", houseID );
	mysql_tquery( g_Handle, gsQuery, "", "" );

	SetGVarInt( "house_OwnerKey", 1, houseID );
	SetGVarString( "house_Owner", "AdmBot", houseID );
	DestroyDynamicPickup( GetGVarInt( "HousePickup", houseID ) );

	DeleteGVar( "HousePickup", houseID );
	SetGVarInt( "HousePickup", CreateDynamicPickup( 19524, 23, GetGVarFloat( "house_EnterX", houseID ), GetGVarFloat( "house_EnterY", houseID ), GetGVarFloat( "house_EnterZ", houseID ) ), houseID );
	UpdateHouseText( houseID, 2 );
    pickupInfo[ GetGVarInt( "HousePickup", houseID ) ][house_pickups] = houseID;

	return SendClientMessagef( playerid, COLOR_LIGHTRED, "House[ID:%d] has been added to bid list!", houseID );
}
CMD:lockhouse( playerid, params[] )
{
	new houseID = GetBuildingEnterID( playerid, 0, 2 );
	if( houseID == -404 )									return SendClientMessage( playerid, COLOR_GREY, "You have to be in the house pickup!" );
	if( playerVariables[ playerid ][ pHouse ] != houseID )	return SendClientMessage( playerid, COLOR_GREY, "You're not the owner of this House!" );

	switch( GetGVarInt( "house_Lock", houseID ) )
	{
		case 0: SetGVarInt( "house_Lock", 1, houseID ), SendClientMessage( playerid, COLOR_TEAL, "You have locked your House!" );
		case 1: SetGVarInt( "house_Lock", 0, houseID ), SendClientMessage( playerid, COLOR_TEAL, "You have un-locked your House!" );
	}
	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_houses` SET `houseLock` = %d WHERE `houseKey` = %d", GetGVarInt( "house_Lock", houseID ), houseID );
	mysql_tquery( g_Handle, gsQuery, "", "" );
	return true;
}
CMD:setrent( playerid, params[] )
{
	new hRent, houseID = GetBuildingEnterID( playerid, 0, 2 );
	if( houseID == -404 )									return SendClientMessage( playerid, COLOR_GREY, "You have to be in the house pickup!" );
	if( playerVariables[ playerid ][ pHouse ] != houseID )	return SendClientMessage( playerid, COLOR_GREY, "You're not the owner of this House!" );
	if( sscanf( params, "d", hRent ) ) 						return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/setrent [ rent ]" );
	if( hRent < 0 || hRent > 1000)                         	return SendClientMessage( playerid, COLOR_GREY, "The Rent price must be less than $1.000" );
	SetGVarInt( "house_Rent", hRent, houseID );
	UpdateHouseText( houseID, 0 );

	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_houses` SET `houseRent` = %d WHERE `houseKey` = %d", hRent, houseID );
	mysql_tquery( g_Handle, gsQuery, "", "" );
	return true;
}
CMD:hname( playerid, params[] )
{
	new houseName[ 32 ], houseNameEscaped[ 32 ];
	if( sscanf( params, "s[32]", houseName ) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/hname [ Name ]" );

	new houseID = GetBuildingEnterID( playerid, 0, 2 );
	if( houseID == -404 )
		return SendClientMessage( playerid, COLOR_GREY, "You have to be in the house pickup!" );

	if( houseID != playerVariables[ playerid ][ pHouse ] )
		return SendClientMessage( playerid, COLOR_GREY, "You are not the owner of this House!" );

	mysql_escape_string( houseName, houseNameEscaped );
	SetGVarString( "house_Name", houseNameEscaped, houseID );
	UpdateHouseText( houseID, 0 );

	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_houses` SET `houseName` = '%s' WHERE `houseKey` = %d", houseNameEscaped, houseID );
	mysql_tquery( g_Handle, gsQuery, "", "" );
	return true;
}
CMD:hmusic( playerid, params[] )
{
	new houseMusic[ 256 ], houseMusicEscaped[ 256 ];
	if( sscanf( params, "s[256]", houseMusic ) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/hmusic [ urlLink.mp3/.pls ]" );

	new houseID = GetBuildingEnterID( playerid, 1, 2, 100.0 );
	if( houseID == -404 )
		return SendClientMessage( playerid, COLOR_GREY, "You have to be in the house!" );

	if( houseID != playerVariables[ playerid ][ pHouse ] )
		return SendClientMessage( playerid, COLOR_GREY, "You are not the owner of this House!" );

	mysql_escape_string( houseMusic, houseMusicEscaped );
	SetGVarString( "house_Music", houseMusicEscaped, houseID );
	SendClientMessagef( playerid, COLOR_YELLOW, "House Music has been updated to: %s", houseMusicEscaped );

	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_houses` SET `houseMusic` = '%s' WHERE `houseKey` = %d", houseMusicEscaped, houseID );
	mysql_tquery( g_Handle, gsQuery, "", "" );
	return true;
}
alias:myhouse( "home" );
CMD:myhouse( playerid, params[] )
{
	if( !playerVariables[ playerid ][ pHouse ] )
		return SendClientMessage( playerid, COLOR_GREY, "You don't have any House!" );

	GPS_Location( playerid, "My House", GetGVarFloat( "house_EnterX", playerVariables[ playerid ][ pHouse ] ), GetGVarFloat( "house_EnterY", playerVariables[ playerid ][ pHouse ] ), GetGVarFloat( "house_EnterZ", playerVariables[ playerid ][ pHouse ] ) );
	return true;
}
CMD:findhouse( playerid, params[] )
{
	if( sscanf(params, "d", params[ 0 ]) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/findhouse [ houseID ]" );

	if( params[ 0 ] >= MAX_HOUSES )
		return SendClientMessage( playerid, COLOR_GREY, "Invalid House ID!" );

	GPS_Location( playerid, "Find House", GetGVarFloat( "house_EnterX", params[ 0 ] ), GetGVarFloat( "house_EnterY", params[ 0 ] ), GetGVarFloat( "house_EnterZ", params[ 0 ] ) );
	return true;
}
CMD:findbizz( playerid, params[] )
{
	if( sscanf(params, "d", params[ 0 ]) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/findbizz [ bizID ]" );

	if( params[ 0 ] >= MAX_BUSINESS )
		return SendClientMessage( playerid, COLOR_GREY, "Invalid Business ID!" );

	GPS_Location( playerid, "Find Biz", GetGVarFloat( "bus_EnterX", params[ 0 ] ), GetGVarFloat( "bus_EnterY", params[ 0 ] ), GetGVarFloat( "bus_EnterZ", params[ 0 ] ) );
	return true;
}
CMD:gotohouse( playerid, params[] )
{
	AHCheck( playerid, 3, 5 );
	if( sscanf(params, "d", params[ 0 ]) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/gotohouse [ houseID ]" );

	if( params[ 0 ] >= MAX_HOUSES )
		return SendClientMessage( playerid, COLOR_GREY, "Invalid HouseID ID!" );

	return SetPlayerPos( playerid, GetGVarFloat( "house_EnterX", params[ 0 ] ), GetGVarFloat( "house_EnterY", params[ 0 ] ), GetGVarFloat( "house_EnterZ", params[ 0 ] ) );
}
CMD:gotobusiness( playerid, params[] )
{
	AHCheck( playerid, 3, 5 );
	if( sscanf(params, "d", params[ 0 ]) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/gotobusiness [ busID ]" );

	if( params[ 0 ] >= MAX_BUSINESS )
		return SendClientMessage( playerid, COLOR_GREY, "Invalid Business ID!" );

	if( GetGVarFloat( "bus_EnterX", params[ 0 ] ) == 0 )
		return SendClientMessage( playerid, COLOR_GREY, "Invalid Business or it's disabled!" );

	return SetPlayerPos( playerid, GetGVarFloat( "bus_EnterX", params[ 0 ] ), GetGVarFloat( "bus_EnterY", params[ 0 ] ), GetGVarFloat( "bus_EnterZ", params[ 0 ] ) );
}
CMD:gotojob( playerid, params[] )
{
	AHCheck( playerid, 3, 5 );
	gsString[ 0 ] = EOS;
	gsString = "Nume\n";
	foreach( new f : ServerJobs )
		format( gsString, sizeof gsString, "%s%s\n", gsString, GetGVarStringEx( "job_Name", f ));

	ShowPlayerDialog( playerid, DIALOG_GOTOJOBS, DIALOG_STYLE_TABLIST_HEADERS, "Server: Jobs List", gsString, "Teleport", "Cancel" );
	return 1;
}
CMD:gotohq( playerid, params[] )
{
	AHCheck( playerid, 3, 5 );
	gsString[ 0 ] = EOS;
	gsString = "Nume\n";
	foreach( new f : ServerFactions )
		format( gsString, sizeof gsString, "%s%s\n", gsString, GetGVarStringEx( "faction_Name", f ));

	ShowPlayerDialog( playerid, DIALOG_GOTOFACTIONS, DIALOG_STYLE_TABLIST_HEADERS, "Server: Faction List", gsString, "Teleport", "Cancel" );
	return 1;
}
CMD:gotopoint( playerid, params[] )
{
	AHCheck( playerid, 1, 5 );
	new interiorID, Float:coordinates[3];

	if( sscanf( params, "fffd", coordinates[ 0 ], coordinates[ 1 ], coordinates[ 2 ], interiorID ) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/gotopoint [x] [y] [z] [interior id]" );

	SetPlayerInterior( playerid, interiorID );
	SetPlayerPos( playerid, coordinates[0], coordinates[1], coordinates[2] + 2 );
	return true;
}
CMD:jobs( playerid, params[] )
{
	gsString[ 0 ] = EOS;
	gsString = "Nume\tLevel\tLocatie\tTip\n";
	foreach( new f : ServerJobs )
		format( gsString, sizeof gsString, "%s%s\t%d\t%s [%0.2f KM]\t%s\n",
			gsString, GetGVarStringEx( "job_Name", f ), GetGVarInt( "job_Level", f ), GetGVarStringEx( "job_Location", f ), 
			GetPlayerDistanceFromPoint( playerid, GetGVarFloat( "job_PosX", f ), GetGVarFloat( "job_PosY", f ), GetGVarFloat( "job_PosZ", f ) ),
			( GetGVarInt( "job_Type", f ) ? ("{dc143c}Ilegal") : ("{228b22}Legal") ) );

	ShowPlayerDialog( playerid, DIALOG_JOBS, DIALOG_STYLE_TABLIST_HEADERS, "Server: Jobs List", gsString, "Find Job", "Cancel" );
	return true;
}
CMD:business( playerid, params[] )
{
	gsBigString[ 0 ] = EOS;
	gsBigString = "Nume\tOwner\tTaxa\tPret\n";
	foreach( new f : ServerBusiness )
		format( gsBigString, sizeof gsBigString, "%s%s\t%s\t%s\t%s\n", gsBigString, GetGVarStringEx( "bus_Name", f ), GetGVarStringEx( "bus_Owner", f ), FormatNumber( GetGVarInt( "bus_Fee", f ) ), FormatNumber( GetGVarInt( "bus_Price", f ) ) );

	ShowPlayerDialog( playerid, DIALOG_BUSINESS, DIALOG_STYLE_TABLIST_HEADERS, "Server: Businesses List", gsBigString, "Find Bizz", "Cancel" );
	return true;
}
CMD:settax(playerid, params[])
{
	if( GetFactionType( playerVariables[ playerid ][ pFaction ] ) != 2 ) 	return SendClientMessage( playerid, COLOR_GREY, "Nu esti membru al unei mafii!" );
	if( playerVariables[ playerid ][ pFactionRank ] < 6 )					return SendClientMessage( playerid, COLOR_GREY, "Trebuie sa fii Co-Leader sau Leader!" );

	new tax;
	if(sscanf(params, "d", tax)) return SendClientMessage(playerid, COLOR_GREY, SYNTAX_MESSAGE"/settax [tax] *must be between 5%% and 15%%.");
	if(tax < 5 || tax > 15) return SendClientMessage(playerid, COLOR_GREY, SYNTAX_MESSAGE"The extortion tax must be between 5%% and 15%%.");

	foreach(new X : ServerBusiness)
	{
		if(GetGVarInt("turf_Owner", GetBusinessTurfID(X)) == playerVariables[ playerid ][ pFaction ])
		{
			SetGVarInt("faction_busExtortion", tax, playerVariables[ playerid ][ pFaction ]);
			UpdateBusinessText(X);
		}
	}
	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, 120, "UPDATE `server_factions` SET `factionBusExtortion` = '%d' WHERE `factionKey` = '%d'", tax, playerVariables[playerid][pFaction] );
	mysql_tquery( g_Handle, gsQuery, "", "" );
	SendClientMessage(playerid, COLOR_GRAD2, "Ai schimbat taxa afacerilor de pe teritoriile tale cu succes.");

	return 1;
}
CMD:fvehicles( playerid, params[] )
{
	if( playerVariables[ playerid ][ pFaction ] == 0 )
		return SendClientMessage( playerid, COLOR_GREY, "Nu faci parte dintr-o factiune pentru a putea folosi aceasta comanda!" );

	gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, "Name/ID\tFuel/HP\tLocation\tStatus\n" );
	foreach( new f : ServerVehicles )
	{
		if( GetGVarInt( "veh_Faction", f ) == playerVariables[ playerid ][ pFaction ] )
		format( gsString, sizeof gsString, "%s%s[%d]\t%0.2f [%0.2f HP]\t%s\t%s\n",
			gsString, VehicleName( GetGVarInt( "veh_Model", f ) ), GetGVarInt( "Server_Vehicle", f ), 
			serverVariables[ VehicleGas ][ GetGVarInt( "Server_Vehicle", f ) ], GetVehicleHealthEx( GetGVarInt( "Server_Vehicle", f ) ),
			GetPlayer3DZone2( GetGVarFloat( "veh_PosX", f ), GetGVarFloat( "veh_PosY", f ), GetGVarFloat( "veh_PosZ", f ) ), ( IsVehicleOccupied( GetGVarInt( "Server_Vehicle", f ) ) ) ? ("{dc143c}Ocupat") : ("{228b22}Liber") );
	}
	ShowPlayerDialog( playerid, DIALOG_NULL, DIALOG_STYLE_TABLIST_HEADERS, "Server: Faction Vehicles", gsString, "Exit", "" );
	return true;
}
CMD:gunname(playerid, params[]) {

	AHCheck( playerid, 3, 5 );
	SendClientMessage(playerid, COLOR_TEAL, "--------------------------------------------------------------------------------------------------------------------------------");
	SendClientMessage(playerid, COLOR_WHITE, "Weapon Search:");
	new
		rcount,
		string[128];

	if(isnull(params)) return SendClientMessage(playerid, COLOR_GREY, "No keyword specified.");
	if(strlen(params) < 3) return SendClientMessage(playerid, COLOR_GREY, "Search keyword too short.");

	for(new v; v < 47; v++) {
		if(strfind(WeaponNames[v], params, true) != -1) {

			if(rcount == 0) format(string, sizeof(string), "%s (ID %d)", WeaponNames[v], v);
			else format(string, sizeof(string), "%s | %s (ID %d)", string, WeaponNames[v], v);

			rcount++;
		}
	}

	if(rcount == 0) SendClientMessage(playerid, COLOR_GREY, "No results found.");

	else if(strlen(string) >= 128) SendClientMessage(playerid, COLOR_GREY, "Too many results found.");

	else SendClientMessage(playerid, COLOR_WHITE, string);

	SendClientMessage(playerid, COLOR_TEAL, "--------------------------------------------------------------------------------------------------------------------------------");
	return 1;
}
CMD:vehname( playerid, params[] )
{
	AHCheck( playerid, 3, 5 );

	new rCount, szMessage[ 128 ];
	if( sscanf( params, "s[16]", params[ 0 ] ) )
		return SendClientMessage( playerid, COLOR_WHITE, SYNTAX_MESSAGE"/vehname <Name/ParOfName>" );

	if( strlen( params[ 0 ] ) < 3 )
		return SendClientMessage( playerid, COLOR_GREY, "Search keyword too short.");

	SendClientMessage( playerid, COLOR_WHITE, "Vehicle Search:" );

	for( new v; v < sizeof( VehicleNames ); v++ ) 
	{
		if( strfind( VehicleNames[ v ], params, true ) != -1 ) 
		{
			if( rCount == 0 )
				format( szMessage, sizeof szMessage, "%s [ID %d]", VehicleNames[ v ], v+400 );
			else
				format( szMessage, sizeof szMessage, "%s | %s [ID %d]", szMessage, VehicleNames[ v ], v+400 );
			rCount++;
		}
	}

	if( rCount == 0 )
		SendClientMessage( playerid, COLOR_GREY, "No results found." );
	else
		if( strlen( szMessage ) >= 128 )
			SendClientMessage( playerid, COLOR_GREY, "Too many results found." );
		else
			SendClientMessage( playerid, COLOR_WHITE, szMessage );

	return true;
}
CMD:spawncar( playerid, params[] ) 
{
	AHCheck( playerid, 1, 5 );
	new model_id;
	if(sscanf(params, "k<vehicle>", model_id)) return SendClientMessage(playerid, ~1, SYNTAX_MESSAGE"/spawncar [model id]");

	new Float: p_Pos[4];
	GetPlayerPos(playerid, p_Pos[ 0 ], p_Pos[ 1 ], p_Pos[ 2 ]);
	GetPlayerFacingAngle(playerid, p_Pos[ 3 ]);
	new veh = AddStaticVehicle(model_id, p_Pos[ 0 ], p_Pos[ 1 ], p_Pos[ 2 ], p_Pos[ 3 ], -1, -1);
    Iter_Add(ServerSpawnCars, veh);
	LinkVehicleToInterior(veh, GetPlayerInterior(playerid));
	SetVehicleVirtualWorld(veh, GetPlayerVirtualWorld(playerid));
	PutPlayerInVehicle(playerid, veh, 0);
	GetVehicleParamsEx( veh, engine, lights, alarm, doors, bonnet, boot, objective );
	SetVehicleParamsEx( veh, VEHICLE_PARAMS_ON, lights, alarm, doors, bonnet, boot, objective );

	serverVariables[ VehicleGas ][ veh ] = 100.0;

	return 1;
}
CMD:top( playerid, params[] )
{
	gsString[ 0 ] = EOS;
	gsString = "Faction\tTurfs\n";

	foreach( new i : ServerFactions )
	{
		new topTurf;
		foreach( new x : ServerTurfs )
			if( GetGVarInt( "turf_Owner", x ) == i )
				topTurf++;

		if( GetFactionType( i ) == 2 )
			format( gsString, sizeof gsString, ""COL_W"%s%s\t%d "COL_LYE"Turfs\n", gsString, GetGVarStringEx( "faction_Name", i ), topTurf );
	}
	ShowPlayerDialog( playerid, DIALOG_NULL, DIALOG_STYLE_TABLIST_HEADERS, ""COL_W"Location: "COL_LYE"Top Gangs", gsString, "Close", "" );
	return true;
}
CMD:givesalary( playerid, params[] )
{
	// < Check if it's ranked as a leader of a faction )
	if( !playerVariables[ playerid ][ pFaction ] || playerVariables[ playerid ][ pFactionRank ] < 6 )
		return SendClientMessage( playerid, COLOR_GREY, "You have to be the Leader/Co-Leader of a faction!" );

	new Player;
	if( sscanf( params, "u", Player ) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/givesalary [playerID/Name]" );

	if( !IsPlayerConnected( Player ) )
		return SendClientMessage( playerid, COLOR_GREY, "This player is not connected!" );

	if( playerVariables[ playerid ][ pFaction ] != playerVariables[ Player ][ pFaction ] )
		return SendClientMessage( playerid, COLOR_GREY, "That player it's not member in your faction!" );

	if( !playerVariables[ Player ][ pPayday ] )
		return SendClientMessage( playerid, COLOR_GREY, "This player doesn't have any paydays!" );

	new fMoney = playerVariables[ Player ][ pPayday ] * 1000;
	if( GetGVarInt( "faction_Money", playerVariables[ playerid ][ pFaction ] ) < fMoney )
	{
		SendClientMessagef( playerid, COLOR_GREY, "The faction's safe doesn't have $%s to pay the salary!", FormatNumber( fMoney ) );
		AdminBroadCast( 1, COLOR_LIGHTRED, "Faction: "COL_W"The faction %s doesn't have enough money for /givesalary", GetGVarStringEx( "faction_Name", playerVariables[ playerid ][ pFaction ] ) );
	}
	// < Announce the leader )
	SendClientMessagef( playerid, COLOR_WHITE, "You have paid $%s to the member %s", FormatNumber( fMoney ), username( Player ) );
	SendClientMessagef( Player, COLOR_WHITE, "You have been paid by leader %s with $%s, you had %d paydays.", username( playerid ), FormatNumber( fMoney ), playerVariables[ Player ][ pPayday ] );

	// < Give player cash and take from the safe )
	playerVariables[ Player ][ pPayday ] = 0;
	playerVariables[ Player ][ pMoney ] += fMoney;
	SetGVarInt( "faction_Money", GetGVarInt( "faction_Money", playerVariables[ playerid ][ pFaction ] ) - fMoney, playerVariables[ playerid ][ pFaction ] );
	UpdateFactionSafe( playerVariables[ playerid ][ pFaction ] );
	return true;
}
CMD:makeleader( playerid, params[] )
{
	AHCheck( playerid, 5, 5 );

	new FactionID, Player;
	if( sscanf(params, "ud", Player, FactionID) ) 				return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/makeleader [ playerid ] [groupid]" );
	if( !IsPlayerConnected( Player ) ) 							return SendClientMessage( playerid, COLOR_GREY, "This player is not connected!" );

	if( FactionID < 1 || FactionID > 10 ) 		            	return SendClientMessage( playerid, COLOR_GREY, "Invalid Faction ID!" );
	if( playerVariables[ Player ][ pFaction ] != 0 ) 			return SendClientMessage( playerid, COLOR_WHITE, "That player is already in a faction! Use first /uninvite!" );
	if( GetGVarInt( "faction_Members", FactionID ) >= GetGVarInt( "faction_Slots", FactionID ) )
		return SendClientMessage( playerid, COLOR_GREY, "Ai atins numarul maxim de membri din factiune!" );

	// < Make the player Leader )
	SendClientMessagef( playerid, COLOR_WHITE, "You have set %s to lead group %s.", playerVariables[ Player ][ pNormalName ], GetGVarStringEx( "faction_Name", FactionID ) );
	SendClientMessagef( Player, COLOR_WHITE, "{e7aaa5}<< Administrator %s has set you to lead faction %s. >>", playerVariables[ playerid ][ pNormalName ], GetGVarStringEx( "faction_Name", FactionID ) );

	//( Player, 1058, 0.0, 0.0, 0.0 );
	if( playerVariables[ Player ][ pFaction ] != FactionID )
		playerVariables[ Player ][ pFactionDays ] = 0;

	playerVariables[ Player ][ pFaction ] = FactionID;
	playerVariables[ Player ][ pFactionLeader ] = FactionID;
	playerVariables[ Player ][ pFactionRank ] = 7;
	playerVariables[ Player ][ pWanted ] = 0;
	if(Iter_Contains(server_wanteds, Player)) Iter_Remove(server_wanteds, Player);
	playerVariables[ Player ][ pWantedTime ] = 0;
	playerVariables[ Player ][ pSpawnType ] = 1;
	SetPlayerFactionColor( Player );
	SetPlayerFactionSkin( Player );

	switch(FactionID)
	{
		case 1, 2: Iter_Add(Departments, Player), Iter_Add(playerFaction[FactionID], Player);
		case 4: Iter_Add(server_instructors, Player), server_instructors++, Iter_Add(playerFaction[FactionID], Player);
		case 5: Iter_Add(server_reporters, Player), server_reporters++, Iter_Add(playerFaction[FactionID], Player);
		default: Iter_Add(playerFaction[FactionID], Player);
	}
	Iter_Add(server_leaders, playerid), server_leaders++;

	// < Update Panel Info )
	if( playerid != Player )
	{
		gsString[ 0 ] = EOS;
		format( gsString, sizeof gsString, "is now the leader of faction %s, promoted by %s", GetGVarStringEx( "faction_Name", playerVariables[ Player ][ pFaction ] ), playerVariables[ playerid ][ pNormalName ] );
		gsQuery[ 0 ] = EOS;
		mysql_format( g_Handle, gsQuery, sizeof gsQuery, "INSERT INTO `server_feed`(`playerKey`,`playerName`,`logText`) VALUES (%d, '%s', '%s')", GetPlayerMysqlID(Player), playerVariables[ Player ][ pNormalName ], gsString );
		mysql_tquery( g_Handle, gsQuery, "", "" );	
	}
	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_factions` SET `factionMembers` = `factionMembers` + 1, `factionLeaders` = `factionLeaders` + 1 WHERE `factionKey` = %d", FactionID );
	mysql_tquery( g_Handle, gsQuery, "", "" );
	SetGVarInt( "faction_Members", GetGVarInt( "faction_Members", FactionID ) + 1, FactionID );
	SetGVarInt( "faction_Leaders", GetGVarInt( "faction_Leaders", FactionID ) + 1, FactionID );

	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerFaction` = %d, `playerFactionLeader` = %d, `playerFactionJoined` = now(), `playerFactionRank` = 7, `playerFW` = 0, `playerFP` = 0, `playerSkin` = %d WHERE `id` = %d", FactionID, FactionID, playerVariables[ Player ][ pSkin ], GetPlayerMysqlID(Player) );
	mysql_tquery( g_Handle, gsQuery, "", "" );

	gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, "%s is now the leader of faction %s, promoted by %s", playerVariables[ Player ][ pNormalName ], GetGVarStringEx( "faction_Name", playerVariables[ Player ][ pFaction ] ), playerVariables[ playerid ][ pNormalName ] );
	InsertFactionLog( gsString, playerVariables[ playerid ][ pFaction ], Player, playerVariables[ Player ][ pNormalName ], GetPlayerMysqlID(playerid), playerVariables[ playerid ][ pNormalName ] );
	return true;
}
CMD:auninvite( playerid, params[] )
{
	new Player, FP, Reason[ 64 ];
	AHCheck( playerid, 5, 5 );

	if( sscanf( params, "uis[64]", Player, FP, Reason ) ) 		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/auninvite [ playerid ] [fp] [reason]" );
	if( !IsPlayerConnected( Player ) ) 							return SendClientMessage( playerid, COLOR_GREY, "That player it's not connected!" );
	if( playerVariables[ Player ][ pFaction ] == 0 ) 			return SendClientMessage( playerid, COLOR_GREY, "That player is already isn't in any faction!" );
	if( FP < 0 || FP > 60 )                                     return SendClientMessage( playerid, COLOR_GREY, "Invalid Faction Punish! Use values between 1 & 60" );

	gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, "%s was uninvited by Admin %s from faction %s (rank %d) after %d days with %d FP. Reason: %s", playerVariables[ Player ][ pNormalName ], playerVariables[ playerid ][ pNormalName ], GetGVarStringEx( "faction_Name", playerVariables[ Player ][ pFaction ] ), playerVariables[ Player ][ pFactionRank ], playerVariables[ Player ][ pFactionDays ], FP, Reason );
	SendToFaction( playerVariables[ Player ][ pFaction ], COLOR_GENANNOUNCE, gsString );
	SendClientMessage( playerid, COLOR_GREY, "L-ai dat afara pe acel player din factiunea din care facea parte!" );
	InsertFactionLog( gsString, playerVariables[ playerid ][ pFaction ], Player, playerVariables[ Player ][ pNormalName ], GetPlayerMysqlID(playerid), playerVariables[ playerid ][ pNormalName ] );
	ResetPlayerFactionRaport( GetPlayerMysqlID(Player) );


    new FactionID = playerVariables[ Player ][ pFaction ];
	switch(playerVariables[ Player ][ pFaction ])
	{
		case 1,2: Iter_Remove(Departments, Player), Iter_Remove(playerFaction[FactionID], Player);
		case 4: Iter_Remove(server_instructors, Player), server_instructors--, Iter_Remove(playerFaction[FactionID], Player);
		case 5: Iter_Remove(server_reporters, Player), server_reporters--, Iter_Remove(playerFaction[FactionID], Player);
		default: Iter_Remove(playerFaction[FactionID], Player);
	}

	// < Update Panel Info )
	if( playerid != Player )
	{
		gsString[ 0 ] = EOS;
		format( gsString, sizeof gsString, "was uninvited by Admin %s from faction %s (rank %d) after %d days with %d FP. Reason: %s", playerVariables[ playerid ][ pNormalName ], GetGVarStringEx( "faction_Name", playerVariables[ Player ][ pFaction ] ), playerVariables[ Player ][ pFactionRank ], playerVariables[ Player ][ pFactionDays ], FP, Reason );
		gsQuery[ 0 ] = EOS;
		mysql_format( g_Handle, gsQuery, sizeof gsQuery, "INSERT INTO `server_feed`(`playerKey`,`playerName`,`logText`) VALUES (%d, '%s', '%s')", GetPlayerMysqlID(Player), playerVariables[ Player ][ pNormalName ], gsString );
		mysql_tquery( g_Handle, gsQuery, "", "" );
	}
	// < Update faction members )
	switch( playerVariables[ Player ][ pFactionRank ] )
	{
		case 7:
		{
			gsQuery[ 0 ] = EOS;
			mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_factions` SET `factionMembers` = `factionMembers` - 1, `factionLeaders` = `factionLeaders` - 1 WHERE `factionKey` = %d", playerVariables[ Player ][ pFaction ] );
			mysql_tquery( g_Handle, gsQuery, "", "" );
			SetGVarInt( "faction_Members", GetGVarInt( "faction_Members", playerVariables[ Player ][ pFaction ] ) - 1, playerVariables[ Player ][ pFaction ] );
			SetGVarInt( "faction_Leaders", GetGVarInt( "faction_Leaders", playerVariables[ Player ][ pFaction ] ) - 1, playerVariables[ Player ][ pFaction ] );
			if(playerVariables[ Player][ pFactionRank ] == 7 && playerVariables[ playerid ][ pAdminLevel] == 0) Iter_Remove(server_leaders, Player), server_leaders--;
		}
		default:
		{
			gsQuery[ 0 ] = EOS;
			mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_factions` SET `factionMembers` = `factionMembers` - 1 WHERE `factionKey` = %d", playerVariables[ Player ][ pFaction ] );
			mysql_tquery( g_Handle, gsQuery, "", "" );
			SetGVarInt( "faction_Members", GetGVarInt( "faction_Members", playerVariables[ Player ][ pFaction ] ) - 1, playerVariables[ Player ][ pFaction ] );
		}
	}
	gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, "%s te-a dat afara din factiunea %s cu %d FP si Reason: %s", playerVariables[ playerid ][ pNormalName ], GetGVarStringEx( "faction_Name", playerVariables[ Player ][ pFaction ] ), FP, Reason );
	InsertPlayerMail( GetPlayerMysqlID(Player), gsString );

	if( playerVariables[ playerid ][ pSpawnType ] == 1 )
		playerVariables[ playerid ][ pSpawnType ] = 0;
	if( playerVariables[ playerid ][ pUndercover ] == 1 )
		playerVariables[ playerid ][ pUndercover ] = 0;

	// < Reset Player Variables )
	ResetServerWeapons( Player );
	SetPlayerHealth( Player, 100 );
	SetPlayerArmour( Player, 0 );
	playerVariables[ Player ][ pFactionDays ] = 0;
	playerVariables[ Player ][ pFW ] = 0;
	playerVariables[ Player ][ pFP ] = FP;
	playerVariables[ Player ][ pFaction ] = 0;
	playerVariables[ Player ][ pFactionLeader ] = 0;
	playerVariables[ Player ][ pFactionRank ] = 0;
	switch( playerVariables[ Player ][ pSex ])
	{
		case 1: playerVariables[ Player ][ pSkin ] = CIVIL_SKIN_MALE;
		case 2: playerVariables[ Player ][ pSkin ] = CIVIL_SKIN_FEMALE;
	}
	SetPlayerFactionColor( Player );
	SetPlayerFactionSkin( Player );
	FIXES_SpawnPlayer( Player );
	FIXES_SpawnPlayer( Player );

	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerFaction` = 0, `playerFactionLeader` = 0, `playerFactionRank` = 0, `playerFactionDays` = 0, `playerFW` = 0, `playerFP` = %d, `playerSkin` = %d WHERE `id` = %d", FP, playerVariables[ Player ][ pSkin ], GetPlayerMysqlID(Player) );
	mysql_tquery( g_Handle, gsQuery, "", "" );
	return true;
}
CMD:uninvite( playerid, params[] )
{
	new Player, FP, Reason[ 64 ];
	if( playerVariables[ playerid ][ pFactionRank ] < 6 ) 		return SendClientMessage( playerid, COLOR_GREY, "Only Leader/Co-Leader of the faction can use this command!" );
	if( sscanf(params, "uis[64]", Player, FP, Reason) ) 		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/uninvite [ playerid ] [fp] [reason]" );
	if( !IsPlayerConnected( Player ) ) 							return SendClientMessage( playerid, COLOR_GREY, "That player it's not connected!" );
	if( playerVariables[ Player ][ pFactionRank ] == 7 ) 		return SendClientMessage( playerid, COLOR_GREY, "Only admins can remove Leaders from the faction!" );

	if( playerVariables[ Player ][ pFaction ] != playerVariables[ playerid ][ pFaction ] )
		return SendClientMessage( playerid, COLOR_GREY, "This player it's not in your faction!" );

	if( playerVariables[ playerid ][ pFactionRank ] < 7 ) 		return SendClientMessage( playerid, COLOR_GREY, "Only Leader of the faction can use this command!" );
	if( FP < 0 || FP > 60 )                                     return SendClientMessage( playerid, COLOR_GREY, "Invalid Faction Punish! Use values between 0 & 60" );

	// < Load the code )
	Faction_UninvitePlayer( playerid, Player, FP, Reason );
	return true;
}
CMD:quitfaction( playerid, params[] )
{
	// < Verifica )
	if( !playerVariables[ playerid ][ pFaction ] )
		return SendClientMessage( playerid, COLOR_GREY, "You are not in any faction!" );

	if( playerVariables[ playerid ][ pFactionRank ] == 7 )
		return SendClientMessage( playerid, COLOR_GREY, "You're the faction Leader, you can't quit faction!" );

	if( playerVariables[ playerid ][ pFactionWar ] )
		return SendClientMessage( playerid, COLOR_GREY, "You can't quit the faction while in war!" );

	ShowPlayerDialog( playerid, DIALOG_QUIT_FACTION, DIALOG_STYLE_MSGBOX, "Quit Faction", "Esti sigur ca vrei sa parasesti aceasta factiune?", "Yes", "No" );
	return true;
}
CMD:members( playerid, params[] )
{
	if( playerVariables[ playerid ][ pFactionRank ] != 7 )
		return SendClientMessage( playerid, COLOR_GREY, "Nu esti liderul factiunii" );

	ShowPlayerDialog( playerid, DIALOG_MANAGE_GANG, DIALOG_STYLE_LIST, "Select action:", "Members\nChange MOTD\nFaction vehicles refuel\nFaction vehicle respawn (fvr)\nChange rank names", "Select", "Cancel" );
	return true;
}
CMD:invite( playerid, params[] )
{
	if( !playerVariables[ playerid ][ pFaction ] )      		return SendClientMessage( playerid, COLOR_GREY, "You don't have any Faction!" );
	new Player;
	if( sscanf( params, "u", Player ) ) 						return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/invite [ playerid ]" );
	if( !IsPlayerConnected( Player ) )                          return SendClientMessage( playerid, COLOR_GREY, "This Player it's not connected!" );
	if( playerVariables[ playerid ][ pFactionRank ] < 6 )      	return SendClientMessage( playerid, COLOR_GREY, "You have to be Leader or Co-Leader of the faction!" );
	if( playerVariables[ Player ][ pFP ] > 0 ) 					return SendClientMessage( playerid, COLOR_GREY, "This player is faction punished!" );
	if( playerVariables[ Player ][ pFaction ] != 0 ) 			return SendClientMessage( playerid, COLOR_GREY, "This player is already in another Faction!" );
	if( Player == playerid )                                    return SendClientMessage( playerid, COLOR_GREY, "You can't invite yourself!" );
	if( GetGVarInt( "faction_Members", playerVariables[ playerid ][ pFaction ] ) >= GetGVarInt( "faction_Slots", playerVariables[ playerid ][ pFaction ] ) )
		return SendClientMessage( playerid, COLOR_GREY, "Ai atins numarul maxim de membri din factiune!" );

	SendClientMessagef( playerid, COLOR_WHITE, "You have invited %s to join your faction.", username( Player ) );
	SendClientMessagef( Player, COLOR_NICESKY, "%s has invited you to join faction %s (to accept the invitation, type '/accept invite').", username( playerid ), GetGVarStringEx( "faction_Name", playerVariables[ playerid ][ pFaction ] ) );

	SetPVarInt( Player, "invitePlayer", playerid );
	SetPVarInt( playerid, "invitePlayer2", Player );
	SetPVarInt( Player, "inviteID", playerVariables[ playerid ][ pFaction ] );
	return true;
}
CMD:setvrank( playerid, params[] )
{
	if( !IsPlayerInAnyVehicle( playerid ) )
		return SendClientMessage( playerid, COLOR_GREY, "Trebuie sa conduci o masina a factiunii!" );

	if( playerVariables[ playerid ][ pFactionRank ] != 7 && playerVariables[ playerid ][ pAdminLevel ] != 6 )
		return SendClientMessage( playerid, COLOR_GREY, "Nu esti liderul factiunii sau un admin autorizat!" );

	new vehicleID = GetPlayerVehicleID( playerid ), vRank, vehicleFaction = GetGVarInt( "veh_Faction", vehicleID );

	if( vehicleFaction == 0 )
		return SendClientMessage( playerid, COLOR_GREY, "Aceasta masina nu apartine de nici-o factiune!" );

	if( playerVariables[ playerid ][ pFaction ] != vehicleFaction && playerVariables[ playerid ][ pAdminLevel ] != 6 )
		return SendClientMessage( playerid, COLOR_GREY, "Nu esti liderul acestei factiuni!" );

	if( sscanf( params, "d", vRank ) ) 					
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/setvrank [rank]" );

	if( vRank < 1 || vRank > 6 )
		return SendClientMessage( playerid, COLOR_GREY, "Invalid rank value!" );

	SetGVarInt( "veh_FactionRank", vRank, vehicleID );
	SendClientMessagef( playerid, COLOR_LIGHTBLUE, "You have changed vehicle's[ID: %d] rank to: %d from the faction: %s", vehicleID, vRank, GetGVarStringEx( "faction_Name", vehicleFaction ) );

	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_vehicles` SET `vehicleFactionRank` = %d WHERE `vehicleID` = %d", vRank, vehicleID );
	mysql_tquery( g_Handle, gsQuery, "", "" );
	return true;
}
CMD:setrank( playerid, params[] )
{
	new Player, Rank;
	if( sscanf( params, "ui", Player, Rank ) ) 					return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/setrank [ playerid ] [ rank ]" );
	if( Player == playerid ) 									return SendClientMessage( playerid, COLOR_GREY, "You can't change your own rank!" );
	if( !IsPlayerConnected( Player ) ) 							return SendClientMessage( playerid, COLOR_GREY, "That player it's not connected!" );
	if( playerVariables[ playerid ][ pFactionRank ] != 7 )      return SendClientMessage( playerid, COLOR_GREY, "You have to be Leader of the faction!" );
	if( playerVariables[ playerid ][ pFaction ] != playerVariables[ Player ][ pFaction ] )	return SendClientMessage( playerid, COLOR_GREY, "This player it's not in your faction!" );
	if( Rank < 1 || Rank > 6 )									return SendClientMessage( playerid, COLOR_GREY, "You can only use values from 1 to 6 (6 = Co-Leader)" );

	// < Give Player Rank )
	playerVariables[ Player ][ pFactionRank ] = Rank;
	SetPlayerFactionColor( Player );
	SetPlayerFactionSkin( Player );

	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerFactionRank` = %d WHERE `id` = %d", playerVariables[ Player ][ pFactionRank ], GetPlayerMysqlID(Player) );
	mysql_tquery( g_Handle, gsQuery, "", "" );

	if( Rank > playerVariables[ Player ][ pFactionRank ] )
		SendClientMessagef( Player, COLOR_NICESKY, "%s has promoted you to the rank of %d (R).", username( playerid ), playerVariables[ Player ][ pFactionRank ] );
	else
		SendClientMessagef( Player, COLOR_NICESKY, "%s has demoted you to the rank of %d (R).", username( playerid ), playerVariables[ Player ][ pFactionRank ] );

	gsString[ 0 ] = EOS;
	if( Rank > playerVariables[ Player ][ pFactionRank ] )
		SendClientMessagef( playerid, COLOR_WHITE, "You have promoted %s to the rank of %d (R).", username( Player ), playerVariables[ Player ][ pFactionRank ] );
	else
		SendClientMessagef( playerid, COLOR_WHITE, "You have demoted %s to the rank of %d (R).", username( Player ), playerVariables[ Player ][ pFactionRank ] );
	return true;
}
CMD:fsetrankname( playerid, params[] )
{
	new Rank, Rank_String[ 32 ];
	if( sscanf( params, "ds[32]", Rank, Rank_String ) ) 				return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/fsetrankname [ rankID ] [ rankName ]" );
	if( playerVariables[ playerid ][ pFactionRank ] != 7 )      		return SendClientMessage( playerid, COLOR_GREY, "You have to be Leader of the faction!" );
	if( Rank < 1 || Rank > 7 )											return SendClientMessage( playerid, COLOR_GREY, "You can only use values from 1 to 7" );
	new FactionID = playerVariables[ playerid ][ pFaction ];

	svString[ 0 ] = EOS;
	format( svString, sizeof svString, "faction_Rank%d", Rank );
	SetGVarString( svString, Rank_String, FactionID );
	SendClientMessagef( playerid, COLOR_GENANNOUNCE, "(Faction) "COL_W"Ai schimbat numele rank-ului #%d in: %s", Rank, Rank_String );

	gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, "%s:%s:%s:%s:%s:%s:%s",
		GetGVarStringEx( "faction_Rank1", FactionID ), GetGVarStringEx( "faction_Rank2", FactionID ),
		GetGVarStringEx( "faction_Rank3", FactionID ), GetGVarStringEx( "faction_Rank4", FactionID ),
		GetGVarStringEx( "faction_Rank5", FactionID ), GetGVarStringEx( "faction_Rank6", FactionID ),
		GetGVarStringEx( "faction_Rank7", FactionID ) );

	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_factions` SET `factionRanks` = '%s' WHERE `factionKey` = %d", gsString, FactionID );
	mysql_tquery( g_Handle, gsQuery, "", "" );
	return true;
}
CMD:showmotd( playerid, params[] )
{
	if( playerVariables[ playerid ][ pFaction ] != 0 )
		SendClientMessagef( playerid, COLOR_GENANNOUNCE, "Faction MOTD: "COL_W"%s", GetGVarStringEx( "faction_MOTD", playerVariables[ playerid ][ pFaction ] ) );

	return true;
}
CMD:clanmotd( playerid, params[] )
{
	if( playerVariables[ playerid ][ pClan ] != 0 )
		SendClientMessagef( playerid, COLOR_GREY, "{%s}Clan MOTD: "COL_W"%s", GetGVarStringEx( "clan_Color", playerVariables[ playerid ][ pClan ] ), GetGVarStringEx( "clan_MOTD", playerVariables[ playerid ][ pClan ] ) );

	return true;
}
CMD:cmotd( playerid, params[] )
{
	if( !playerVariables[ playerid ][ pClan ] )
		return SendClientMessage( playerid, COLOR_GREY, "Nu esti membru al unui clan de pe server!" );

	if( playerVariables[ playerid ][ pClanRank ] < 6 )
		return SendClientMessage( playerid, COLOR_GREY, "Trebuie sa fii Leader/Co-Leader pentru a folosi comanda!" );

	new clanID = playerVariables[ playerid ][ pClan ], cMOTD[ 128 ], cMOTDEscaped[ 128 ];
	if( sscanf( params, "s[128]", cMOTD ) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/cmotd [motd]" );

	mysql_escape_string( cMOTD, cMOTDEscaped );
	SetGVarString( "clan_MOTD", cMOTDEscaped, clanID );
	SendClientMessagef( playerid, COLOR_GENANNOUNCE, "{%s}(Clan) "COL_W"Ai schimbat Clan MOTD cu success! Tasteaza /clanmotd pentru a vizualiza mesajul!", GetGVarStringEx( "clan_Color", playerVariables[ playerid ][ pClan ] ) );

	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_clans` SET `clanMOTD` = '%s' WHERE `clanKey` = %d", cMOTDEscaped, clanID );
	mysql_tquery( g_Handle, gsQuery, "", "" );
	return true;
}
CMD:lockhq( playerid, params[] )
{
	new factionKEY[ 3 ];
	factionKEY[ 0 ] = GetBuildingEnterID( playerid, 0, 0 );
	factionKEY[ 1 ] = GetBuildingEnterID( playerid, 1, 0 );

	if( factionKEY[ 0 ] != -404 )
		factionKEY[ 2 ] = factionKEY[ 0 ];
	else if( factionKEY[ 1 ] != -404 )
		factionKEY[ 2 ] = factionKEY[ 1 ];
	else factionKEY[ 2 ] = -404;

	if( factionKEY[ 2 ] == -404 )
		return SendClientMessage( playerid, COLOR_GREY, "You have to be in the HQ pickup [enter/exit]!" );

	if( factionKEY[ 2 ] != playerVariables[ playerid ][ pFaction ] || playerVariables[ playerid ][ pFactionRank ] < 6 )		
		return SendClientMessage( playerid, COLOR_GREY, "You are not the leader/co-leader of this Faction!" );

	switch( GetGVarInt( "faction_Locked", factionKEY[ 2 ] ) )
	{
		case 0: SetGVarInt( "faction_Locked", 1, factionKEY[ 2 ] ), InfoTD_MSG( playerid, 5000, "~y~Faction HQ: ~w~~h~Your faction HQ has been ~r~~h~locked" );
		case 1: SetGVarInt( "faction_Locked", 0, factionKEY[ 2 ] ), InfoTD_MSG( playerid, 5000, "~y~Faction HQ: ~w~~h~Your faction HQ has been ~g~~h~un-locked" );
	}
	return true;
}
CMD:fdeposit( playerid, params[] )
{
	if( playerVariables[ playerid ][ pFaction ] == 0 )
		return SendClientMessage( playerid, COLOR_GREY, "Nu esti membru al unei factiuni!" );

	new FactionID = playerVariables[ playerid ][ pFaction ];
	if( GetSeifID( playerid, FactionID ) == -404 )
		return SendClientMessage( playerid, COLOR_GREY, "Trebuie sa fii langa seiful factiunii tale!" );

	new sItem[ 16 ], sValue;
	if( sscanf( params, "s[16]d", sItem, sValue ) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/fdeposit [money/materials/drugs] [amount]" );

	if( sValue <= 0 )
		return SendClientMessage( playerid, COLOR_GREY, "Valoarea trebuie sa fie mai mare de 0 !" );

    switch(YHash(sItem, false))
    {
    	case _I<money>:
    	{
    		if( playerVariables[ playerid ][ pMoney ] < sValue )
				return SendClientMessage( playerid, COLOR_GREY, "Nu ai aceasta suma de Bani in contul tau!" );

			playerVariables[ playerid ][ pFactionDepositedMoney ] += sValue;
			playerVariables[ playerid ][ pMoney ] -= sValue;
			SetGVarInt( "faction_Money", GetGVarInt( "faction_Money", FactionID ) + sValue, FactionID );
			UpdateFactionSafe( FactionID );
			SendClientMessagef( playerid, COLOR_GENANNOUNCE, "(Faction) "COL_W"Ai depus $%s Money in seiful factiunii!", FormatNumber( sValue ) );
    	}
    	case _I<materials>:
    	{
    		if( playerVariables[ playerid ][ pMaterials ] < sValue )
				return SendClientMessage( playerid, COLOR_GREY, "Nu ai acest numar de Materials in contul tau!" );

			playerVariables[ playerid ][ pFactionDepositedMats ] += sValue;
			playerVariables[ playerid ][ pMaterials ] -= sValue;
			SetGVarInt( "faction_Materials", GetGVarInt( "faction_Materials", FactionID ) + sValue, FactionID );
			UpdateFactionSafe( FactionID );
			SendClientMessagef( playerid, COLOR_GENANNOUNCE, "(Faction) "COL_W"Ai depus %s Materials in seiful factiunii!", FormatNumber( sValue ) );
    	}
    	case _I<drugs>:
    	{
    		if( GetFactionType( FactionID ) != 2 )
				return SendClientMessage( playerid, COLOR_GREY, "Factiunile pasnice nu pot folosi droguri!" );

			if( playerVariables[ playerid ][ pDrugs ] < sValue )
				return SendClientMessage( playerid, COLOR_GREY, "Nu ai acest numar de Drugs in contul tau!" );

			playerVariables[ playerid ][ pFactionDepositedDrugs ] += sValue;
			playerVariables[ playerid ][ pDrugs ] -= sValue;
			SetGVarInt( "faction_Drugs", GetGVarInt( "faction_Drugs", FactionID ) + sValue, FactionID );
			UpdateFactionSafe( FactionID );
			SendClientMessagef( playerid, COLOR_GENANNOUNCE, "(Faction) "COL_W"Ai depus %s Drugs in seiful factiunii!", FormatNumber( sValue ) );
    	}
    	default:
    	{
    		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/fdeposit [money/materials/drugs] [amount]" );
    	}
    }
	return true;
}
CMD:refillfactions( playerid, params[] )
{
	AHCheck( playerid, 6, 5 );
	foreach( new f : ServerFactions )
	{
		SetGVarInt( "faction_Materials", GetGVarInt( "faction_Materials", f ) + 100000, f );
		SetGVarInt( "faction_Money", GetGVarInt( "faction_Money", f ) + 1000000, f );

		if( GetFactionType( f ) == 2 )
			SetGVarInt( "faction_Drugs", GetGVarInt( "faction_Drugs", f ) + 100, f );
		// < Update the safe 3d Text )
		UpdateFactionSafe( f );
	}
	InfoTD_MSG( playerid, 5000, "Faction's safe has been refilled!" );
	return true;
}
CMD:fwithdraw( playerid, params[] )
{
	if( playerVariables[ playerid ][ pFactionRank ] < 6 )	
		return SendClientMessage( playerid, COLOR_GREY, "You have to be Leader/Co-Leader of the faction!" );

	new FactionID = playerVariables[ playerid ][ pFaction ];
	if( GetSeifID( playerid, FactionID ) == -404 )
		return SendClientMessage( playerid, COLOR_GREY, "Trebuie sa fii langa seiful factiunii tale!" );

	new sItem[ 16 ], sValue;
	if( sscanf( params, "s[16]d", sItem, sValue ) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/fwithdraw [money/materials/drugs] [amount]" );

	if( sValue <= 0 )
		return SendClientMessage( playerid, COLOR_GREY, "Valoarea trebuie sa fie mai mare de 0 !" );

    switch(YHash(sItem, false))
    {
    	case _I<money>:
    	{
    		if( GetGVarInt( "faction_Money", FactionID ) < sValue )
				return SendClientMessage( playerid, COLOR_GREY, "Nu ai aceasta suma de Bani in Seiful factiunii!" );

			playerVariables[ playerid ][ pMoney ] += sValue;
			SetGVarInt( "faction_Money", GetGVarInt( "faction_Money", FactionID ) - sValue, FactionID );
			UpdateFactionSafe( FactionID );
			SendClientMessagef( playerid, COLOR_GENANNOUNCE, "(Faction) "COL_W"Ai retras $%s Money din seiful factiunii!", FormatNumber( sValue ) );
    	}
    	case _I<materials>:
    	{
    		if( GetGVarInt( "faction_Materials", FactionID ) < sValue )
				return SendClientMessage( playerid, COLOR_GREY, "Nu ai acest numar de Materials in Seiful factiunii!" );

			playerVariables[ playerid ][ pMaterials ] += sValue;
			SetGVarInt( "faction_Materials", GetGVarInt( "faction_Materials", FactionID ) - sValue, FactionID );
			UpdateFactionSafe( FactionID );
			SendClientMessagef( playerid, COLOR_GENANNOUNCE, "(Faction) "COL_W"Ai retras %s Materials din seiful factiunii!", FormatNumber( sValue ) );
    	}
    	case _I<drugs>:
    	{
    		if( GetFactionType( FactionID ) != 2 )
				return SendClientMessage( playerid, COLOR_GREY, "Factiunile pasnice nu pot folosi droguri!" );

			if( GetGVarInt( "faction_Drugs", FactionID ) < sValue )
				return SendClientMessage( playerid, COLOR_GREY, "Nu ai acest numar de Drugs in Seiful factiunii!" );

			playerVariables[ playerid ][ pDrugs ] += sValue;
			SetGVarInt( "faction_Drugs", GetGVarInt( "faction_Drugs", FactionID ) - sValue, FactionID );
			UpdateFactionSafe( FactionID );
			SendClientMessagef( playerid, COLOR_GENANNOUNCE, "(Faction) "COL_W"Ai retras %s Drugs din seiful factiunii!", FormatNumber( sValue ) );
    	}
    	default:
    	{
    		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/fwithdraw [money/materials/drugs] [amount]" );
    	}
    }
	return true;
}
CMD:attack( playerid, params[] )
{
	new GetTime[ 6 ], TurfID = GetPlayerTurfID( playerid ), FactionID = playerVariables[ playerid ][ pFaction ];
	if( GetFactionType( FactionID ) != 2 )                  return SendClientMessage( playerid, COLOR_GREY, "Nu esti membru al unei mafii!" );
	if( playerVariables[ playerid ][ pFactionRank ] < 6 )	return SendClientMessage( playerid, COLOR_GREY, "Trebuie sa fii Co-Leader sau Leader!" );

	getdate( GetTime[ 0 ], GetTime[ 1 ], GetTime[ 2 ] );
	gettime( GetTime[ 3 ], GetTime[ 4 ], GetTime[ 5 ] );
	if( GetDay( GetTime[ 2 ], GetTime[ 1 ], GetTime[ 0 ] ) == 6 || GetDay( GetTime[ 2 ], GetTime[ 1 ], GetTime[ 0 ] ) == 7 )
		return SendClientMessage( playerid, COLOR_GREY, "Sambata si Duminica nu sunt permise war-urile." );

	if( GetTime[ 3 ] < 20 || GetTime[ 3 ] > 22 && GetPlayerMysqlID(playerid) != 2 && GetPlayerMysqlID(playerid) != 3 )
		return SendClientMessage( playerid, COLOR_TEAL, "War-urile se desfasoare intre orele 20:00 / 22:00 !" );

	if( !playerVariables[ playerid ][ pTurfs ] )        	return SendClientMessage( playerid, COLOR_GREY, "Trebuie sa ai /turfs activate!" );
	if( TurfID == 0 )										return SendClientMessage( playerid, COLOR_GREY, "Trebuie sa fii intr-un teritoriu!" );
	if( GetGVarInt( "turf_Owner", TurfID ) == FactionID )	return SendClientMessage( playerid, COLOR_GREY, "Nu poti sa iti ataci propriul teritoriu!" );

	if( !IsFactionLeaderOnline( GetGVarInt( "turf_Owner", TurfID ) ) )
		return SendClientMessage( playerid, COLOR_GREY, "Liderul acestei factiuni nu este online!" );

	if( GetGVarInt( "faction_WarStatus", FactionID ) != 0 ) return SendClientMessage( playerid, COLOR_GREY, "Factiunea ta se afla deja intr-un War!" );
	if( GetGVarInt( "faction_WarStatus", GetGVarInt( "turf_Owner", TurfID ) ) != 0 ) return SendClientMessage( playerid, COLOR_GREY, "Aceasta Factiune se afla deja intr-un alt War!" );
	if( GetGVarInt( "turf_Status", TurfID ) != 0 )          return SendClientMessage( playerid, COLOR_GREY, "Acest teritoriu este deja atacat de alta Factiune!" );

	if( gettime() - GetGVarInt( "turf_LastAttack", TurfID ) <= 1800 )
		return SendClientMessagef( playerid, ~1, "* Trebuie sa astepti %d secunde pentru a ataca acest turf!", 1800 - (gettime() - GetGVarInt( "turf_LastAttack", TurfID )) );

	// < Post the message )
	gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, "[TURF] %s from your faction attacked turf %d (owned by %s)", username( playerid ), TurfID, GetGVarStringEx( "faction_Name", GetGVarInt( "turf_Owner", TurfID ) ) );
	SendToFaction( playerVariables[ playerid ][ pFaction ], COLOR_ATTACK, gsString );

	gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, "[TURF] %s from %s attacked turf %i owned by you.", username( playerid ), GetGVarStringEx( "faction_Name", playerVariables[ playerid ][ pFaction ] ), TurfID );
	SendToFaction( GetGVarInt( "turf_Owner", TurfID ), COLOR_ATTACK, gsString );
	InfoTD_MSG( playerid, 10000, "Ai atacat teritoriul(ID:%d) mafiei: ~y~~h~%s", TurfID, GetGVarStringEx( "faction_Name", GetGVarInt( "turf_Owner", TurfID ) ) );

	new Float:playerPos[ 3 ];
	GetPlayerPos( playerid, playerPos[ 0 ], playerPos[ 1 ], playerPos[ 2 ] );
	GetPlayer3DZone2( playerPos[ 0 ], playerPos[ 1 ], playerPos[ 2 ] );

	// < Set Variables )
	SetGVarInt( "faction_WarID", FactionID, GetGVarInt( "turf_Owner", TurfID ) );
	SetGVarInt( "faction_WarID", GetGVarInt( "turf_Owner", TurfID ), FactionID );

	new warVirtual = randomEx( 100, 10000 );
	SetGVarInt( "faction_WarVirtual", warVirtual, FactionID );
	SetGVarInt( "faction_WarVirtual", warVirtual, GetGVarInt( "turf_Owner", TurfID ) );

	SetGVarInt( "faction_WarTurf", TurfID, FactionID );
	SetGVarInt( "faction_WarTurf", TurfID, GetGVarInt( "turf_Owner", TurfID ) );

	SetGVarInt( "faction_WarStatus", 1, FactionID );
	SetGVarInt( "turf_Status", 1, TurfID );
	SetGVarInt( "turf_LastAttack", gettime(), TurfID );

	SetGVarString( "faction_WarZone", GetPlayer3DZone2( playerPos[ 0 ], playerPos[ 1 ], playerPos[ 2 ] ), FactionID );
	SetGVarInt( "faction_AttackTimer", SetTimerEx( "WarTimer", 1000, true, "ddd", FactionID, TurfID, GetGVarInt( "turf_Owner", TurfID ) ), FactionID );
	SetGVarInt( "faction_WarTimer", 1200, FactionID );
	SetGVarInt( "faction_WarKills", 0, FactionID );
	SetGVarInt( "faction_WarKills", 0, GetGVarInt( "turf_Owner", TurfID ) );

	// < Prepare the turf and the members )
	foreach(new a : playerFaction[ FactionID ])
	{
		if( !playerVariables[ a ][ pTurfs ] )
			foreach( new x : ServerTurfs )
				GangZoneShowForPlayerEx( a, GetGVarInt( "TurfID", x ), GetTeamZoneColor( GetGVarInt( "turf_Owner", x ) ) );

		GangZoneFlashForPlayer( a, GetGVarInt( "TurfID", TurfID ), COLOR_BLACK );
		playerVariables[ a ][ pFactionWar ] = GetGVarInt( "turf_Owner", TurfID );
		playerVariables[ a ][ pFactionWarKills ] = 0;
		playerVariables[ a ][ pFactionWarDeaths ] = 0;
		playerVariables[ a ][ pFactionWarSeconds ] = 0;

		if( IsPlayerInDynamicArea( a, GetGVarInt( "TurfREC", TurfID ) ) )
		{
			if( GetPlayerState( a ) == PLAYER_STATE_DRIVER )
				SetVehicleVirtualWorld( GetPlayerVehicleID( a ), GetGVarInt( "faction_WarVirtual", playerVariables[ a ][ pFaction ] ) );

			SetPlayerFactionSolidColor( a ), SetPlayerVirtualWorld( a, GetGVarInt( "faction_WarVirtual", FactionID ) );
		}
	}	
	foreach( new d : playerFaction[ GetGVarInt( "turf_Owner", TurfID) ] )
    {
		if( !playerVariables[ d ][ pTurfs ] )
			foreach( new x : ServerTurfs )
				GangZoneShowForPlayerEx( d, GetGVarInt( "TurfID", x ), GetTeamZoneColor( GetGVarInt( "turf_Owner", x ) ) );

		GangZoneFlashForPlayer( d, GetGVarInt( "TurfID", TurfID ), COLOR_BLACK );
		playerVariables[ d ][ pFactionWar ] = FactionID;
		playerVariables[ d ][ pFactionWarKills ] = 0;
		playerVariables[ d ][ pFactionWarDeaths ] = 0;
		playerVariables[ d ][ pFactionWarSeconds ] = 0;

		if( IsPlayerInDynamicArea( d, GetGVarInt( "TurfREC", TurfID ) ) )
		{
			if( GetPlayerState( d ) == PLAYER_STATE_DRIVER )
				SetVehicleVirtualWorld( GetPlayerVehicleID( d ), GetGVarInt( "faction_WarVirtual", playerVariables[ d ][ pFaction ] ) );

			SetPlayerFactionSolidColor( d ), SetPlayerVirtualWorld( d, GetGVarInt( "faction_WarVirtual", FactionID ) );
		}
	}		
	return true;
}
alias:war( "wars" );
CMD:war( playerid, params[] )
{
	foreach( new i : ServerFactions )
		if( GetGVarInt( "faction_WarID", i ) != 0 )
			SendClientMessagef( playerid, COLOR_GREEN, "[WAR LOG]: %s it's in war against %s for Turf #%d", GetGVarStringEx( "faction_Name", i ), GetGVarStringEx( "faction_Name", GetGVarInt( "faction_WarID", i ) ), GetGVarInt( "faction_WarTurf", i ) );
	return true;
}
CMD:order( playerid, params[] )
{
	if( !playerVariables[ playerid ][ pGunLicense ] )
		return SendClientMessage( playerid, COLOR_GREY, "Nu ai licenta de arme, nu poti folosi comanda!" );

	if( !playerVariables[ playerid ][ pFaction ] )
		return SendClientMessage( playerid, COLOR_TEAL, "You are not member of any faction!" );

	if( GetFactionType( playerVariables[ playerid ][ pFaction ] ) != 2 )
		return SendClientMessage( playerid, COLOR_GREY, "Nu esti membru al unei mafii!" );

	new hqID = GetBuildingEnterID( playerid, 1, 0, 300 );
	if( hqID == -404 )
		return SendClientMessage( playerid, COLOR_TEAL, "Trebuie sa fii in HQ pentru a folosi comanda!" );

	new FactionID = playerVariables[ playerid ][ pFaction ];
	if( FactionID != hqID )
		return SendClientMessage( playerid, COLOR_TEAL, "Acest HQ nu apartine factiunii tale!" );

	if( GetGVarInt( "faction_Materials", FactionID ) < 100 )
		return SendClientMessage( playerid, COLOR_TEAL, "Nu sunt destule materiale in seiful factiunii! (100)" );

	new oItem;
	if( sscanf( params, "d", oItem ) )
	{
		SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/order [item]" );
		SendClientMessage( playerid, COLOR_GREY, "Order 1: Deagle" );
		SendClientMessage( playerid, COLOR_GREY, "Order 2: Shotgun" );
		SendClientMessage( playerid, COLOR_GREY, "Order 3: M4A1" );
		SendClientMessage( playerid, COLOR_GREY, "Order 4: AK47" );
		SendClientMessage( playerid, COLOR_GREY, "Order 5: TEC-9" );
		return SendClientMessage( playerid, COLOR_GREY, "Order 6: Rifle" );
	}
	switch( oItem )
	{
		case 1: // Deagle
		{
			GivePlayerServerWeapon( playerid, 24, 100 );
			playerVariables[ playerid ][ pFactionMatsUsed ] += 50;
			SetGVarInt( "faction_Materials", GetGVarInt( "faction_Materials", FactionID ) - 50, FactionID ),
			SendClientMessage( playerid, COLOR_WHITE, "Ai cumparat un Deagle cu 50 de materiale si-au fost retrase din seiful factiunii." );
		}
		case 2: // Shotgun
		{
			GivePlayerServerWeapon( playerid, 25, 100 );
			playerVariables[ playerid ][ pFactionMatsUsed ] += 50;
			SetGVarInt( "faction_Materials", GetGVarInt( "faction_Materials", FactionID ) - 50, FactionID ),
			SendClientMessage( playerid, COLOR_WHITE, "Ai cumparat un Shotgun cu 50 de materiale si-au fost retrase din seiful factiunii." );
		}
		case 3: //M4-A1
		{
			GivePlayerServerWeapon( playerid, 31, 100 );
			playerVariables[ playerid ][ pFactionMatsUsed ] += 50;
			SetGVarInt( "faction_Materials", GetGVarInt( "faction_Materials", FactionID ) - 50, FactionID ),
			SendClientMessage( playerid, COLOR_WHITE, "Ai cumparat un M4-A1 cu 50 de materiale si-au fost retrase din seiful factiunii." );
		}
		case 4: //AK-47
		{
			GivePlayerServerWeapon( playerid, 30, 100 );
			playerVariables[ playerid ][ pFactionMatsUsed ] += 50;
			SetGVarInt( "faction_Materials", GetGVarInt( "faction_Materials", FactionID ) - 50, FactionID ),
			SendClientMessage( playerid, COLOR_WHITE, "Ai cumparat un AK-47 cu 50 de materiale si-au fost retrase din seiful factiunii." );
		}
		case 5: // TEC-9
		{
			if( playerVariables[ playerid ][ pFactionRank ] < 4 )
				return SendClientMessage( playerid, COLOR_GREY, "Trebuie sa ai rank 4 pentru folosi aceasta arma!" );

			GivePlayerServerWeapon( playerid, 32, 350 );
			playerVariables[ playerid ][ pFactionMatsUsed ] += 50;
			SetGVarInt( "faction_Materials", GetGVarInt( "faction_Materials", FactionID ) - 50, FactionID ),
			SendClientMessage( playerid, COLOR_WHITE, "Ai cumparat un TEC-9 cu 50 de materiale si-au fost retrase din seiful factiunii." );
		}
		case 6: // Riffle
		{
			GivePlayerServerWeapon( playerid, 33, 100 );
			playerVariables[ playerid ][ pFactionMatsUsed ] += 50;
			SetGVarInt( "faction_Materials", GetGVarInt( "faction_Materials", FactionID ) - 50, FactionID ),
			SendClientMessage( playerid, COLOR_WHITE, "Ai cumparat un Riffle cu 50 de materiale si-au fost retrase din seiful factiunii." );
		}
		default: return SendClientMessage( playerid, COLOR_WHITE, "Invalid order ID!" );
	}
	// < Update faction safe )
	UpdateFactionSafe( FactionID );
	return true;
}
CMD:killcp( playerid, params[] )
{
	if( playerVariables[ playerid ][ pDoingJob ] != 0 )
		return SendClientMessage( playerid, COLOR_GREY, "You are working right now!" );

	playerVariables[ playerid ][ pCP ] = 0;
	SendClientMessage( playerid, COLOR_WHITE, "You have disabled your current checkpoint." );
	DestroyPlayerJobVehicles( playerid, 1 );

	// < Disable GPS )
	HideGPSForPlayer( playerid );
	if( playerVariables[ playerid ][ pFindPlayer ] != INVALID_PLAYER_ID )
	{
		KillTimer( playerVariables[ playerid ][ pFindPlayerTimer ] );
		Iter_Remove( playerFinds[ playerVariables[ playerid ][ pFindPlayerTimer ] ], playerid );
		playerVariables[ playerid ][ pFindPlayer ] = INVALID_PLAYER_ID;
		PlayerTextDrawHide( playerid, PlayerText:FIND_TD );
	}
	return true;
}
alias:gps( "locations", "where" );
CMD:gps( playerid, params[] )
{
	if( playerVariables[ playerid ][ pDoingJob ] != 0 )
		return SendClientMessage( playerid, COLOR_GREY, "You are working right now!" );

	CheckPlayerActiveCP( playerid );
	SendClientMessage( playerid, COLOR_YELLOW, "You can also use /jobs, /factions and /business to see their locations!" );
	ShowPlayerDialog( playerid, DIALOG_LOCATIONS, DIALOG_STYLE_LIST, "SERVER: Server Locations", "Driving School(DMV Los Santos)\nDriving School(DMV Las Venturas)\nLos Santos Bank\nLas Venturas Bank\nPaintball\nRace Arena\nDealership LS\nDealership LV\nCNN Ads\nEvent Arena\nJobs\nFactions\nBusiness\nHotel LURK\n", "Select", "Close" );
	return true;
}
CMD:friends( playerid, params[] )
{
	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "SELECT * FROM `server_friends` WHERE `friendsPlayer` = %d", GetPlayerMysqlID(playerid) );
	mysql_pquery( g_Handle, gsQuery, "ShowFriendsDialog", "d", playerid );
	return true;
}
CMD:factions( playerid, params[] )
	return mysql_pquery( g_Handle, "SELECT * FROM `server_factions` WHERE `factionStatus` = 1", "ShowFactionsDialog", "d", playerid );

CMD:updates( playerid, params[] )
	return mysql_pquery( g_Handle, "SELECT `cfgUpdates` FROM `server_config`", "ShowUpdatesDialog", "d", playerid );

CMD:email( playerid, params[] )
{
	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "SELECT * FROM `server_emails` WHERE `playerKey` = %d ORDER BY `emailKey` DESC LIMIT 10", GetPlayerMysqlID(playerid) );
	return mysql_pquery( g_Handle, gsQuery, "LoadPlayerMails", "i", playerid );
}
CMD:getjob( playerid, params[] )
{
	new JobID = GetJobID( playerid );
	if( JobID == -404 ) return true;
	if( playerVariables[ playerid ][ pLevel ] < GetGVarInt( "job_Level", JobID ) )
		return SendClientMessage( playerid, COLOR_WHITE, "Your level it's too small to get this job!" );

	if( playerVariables[ playerid ][ pJob ] == JobID )      return SendClientMessage( playerid, COLOR_WHITE, "You already have this job! You can start the /work" );
	if( playerVariables[ playerid ][ pJob ] != 0 )			return SendClientMessage( playerid, COLOR_WHITE, "You already have a job (type /quitjob first)." );
	if( IsPlayerInAnyVehicle( playerid ) )                  return SendClientMessage( playerid, COLOR_WHITE, "Please exit from your vehicle!" );

	Iter_Add(playerJobs[JobID], playerid);
	if(JobID == 10) mechanics++;

	playerVariables[ playerid ][ pJob ] = JobID;
	if( playerVariables[ playerid ][ pFaction ] == 0 )
		SetPlayerSkin( playerid, GetGVarInt( "job_Skin", JobID ) );

	return InfoTD_MSG( playerid, 5000, "Te-ai angajat la job-ul de ~r~~h~%s~n~Scrie comanda ~g~~h~/work ~w~~h~pentru a lucra!", GetGVarStringEx( "job_Name", JobID ) );
}
CMD:quitjob( playerid, params[] )
{
	if( !playerVariables[ playerid ][ pJob ] )
		return SendClientMessage( playerid, COLOR_WHITE, "You don't have any job!" );

	if(playerVariables[ playerid ][ pDoingJob ] ) DestroyPlayerJobVehicles( playerid, 1 );
	SetPlayerFactionSkin( playerid );

	new jobID = playerVariables[playerid][pJob];
	if(jobID == 10) mechanics--;
	if(Iter_Contains(playerJobs[jobID], playerid)) Iter_Remove(playerJobs[jobID], playerid);
	playerVariables[ playerid ][ pJob ] = 0;
	playerVariables[ playerid ][ pJobTimer ] = 0;
	if(playerVariables[playerid][pBackTimer]) KillTimer(playerVariables[ playerid ][ pBackTimer ]);
	if(playerVariables[playerid][pBackTimer2]) KillTimer(playerVariables[ playerid ][ pBackTimer2 ]);
	SetPlayerVirtualWorld(playerid, 0);
	TogglePlayerControllable( playerid, true );

	SendClientMessage( playerid, COLOR_WHITE, "You have quit your job." );
	return true;
}
CMD:stopwork(playerid, params[])
{
	if(!playerVariables[playerid][pDoingJob])
		return SendClientMessage(playerid, COLOR_GREY, "Trebuie sa lucrezi ca sa poti folosii aceasta comanda !");
	DestroyPlayerJobVehicles( playerid, 1 );
	SetPlayerFactionSkin( playerid );
	playerVariables[ playerid ][ pJobTimer ] = 0;
	if(playerVariables[playerid][pBackTimer]) KillTimer(playerVariables[ playerid ][ pBackTimer ]);
	if(playerVariables[playerid][pBackTimer2]) KillTimer(playerVariables[ playerid ][ pBackTimer2 ]);
	SetPlayerVirtualWorld(playerid, 0);
	TogglePlayerControllable( playerid, true );
	return 1;
}
CMD:work( playerid, params[] )
{
	CheckPlayerActiveCP( playerid );

	if( GetPlayerInterior( playerid ) != 0 || GetPlayerVirtualWorld( playerid ) != 0 )
		return SendClientMessage( playerid, COLOR_WHITE, "Trebuie sa fii in virtual world 0 si interior 0!" );

	if( IsPlayerInAnyVehicle( playerid ) )                    			return SendClientMessage( playerid, COLOR_WHITE, "Please exit from your vehicle!" );
	if( !playerVariables[ playerid ][ pJob ] )							return SendClientMessage( playerid, COLOR_WHITE, "Trebuie sa te angajezi mai intai, /jobs !" );
	if( GetWorkJob( playerid, playerVariables[ playerid ][ pJob ] ) )	return SendClientMessage( playerid, COLOR_WHITE, "Trebuie sa fii la maxim 10m distanta de Job-ul tau!" );

	if( IsPlayerCop( playerid ) && GetGVarInt( "job_Type", playerVariables[ playerid ][ pJob ] ) )
		return SendClientMessage( playerid, COLOR_WHITE, "Esti politist, nu poti folosi job-uri ilegale!" );

	switch( playerVariables[ playerid ][ pJob ] )
	{
		case 1://Trucker
		{
			if( !playerVariables[ playerid ][ pCarLicense ] )
				return SendClientMessage( playerid, COLOR_GREY, "Trebuie sa ai o licenta de Driving activa!" );

			serverVariables[workers_trucker]++;
			SetPlayerCheckpoint( playerid, 2206.3298, -2230.0242, 14.1237, 5.0 );
			playerVariables[ playerid ][ pCP ] = 5010; // Truck
			InfoTD_MSG( playerid, 10000, "Mergi la ~r~~h~Checkpoint ~w~~h~pentru a primi Tirul!" );
		}
		case 2://Farmer
		{
			if( !playerVariables[ playerid ][ pCarLicense ] )		
				return SendClientMessage( playerid, COLOR_GREY, "Trebuie sa ai o licenta de Driving activa!" );

			if( playerVariables[ playerid ][ pJobValue ] != 0 ) 	
				return InfoTD_MSG( playerid, 10000, "Trebuie sa duci sacul cu faina la un Burger Shot!" );

			serverVariables[workers_farmer]++;
			SetPlayerCheckpoint( playerid, -375.9869, -1447.6426, 26.0747, 5.0 );
			playerVariables[ playerid ][ pCP ] = 6010; // Tractor
			InfoTD_MSG( playerid, 10000, "Mergi la ~r~~h~Checkpoint ~w~~h~pentru a primi Tractorul!" );
		}
		case 3://Pizza
		{
			if( !playerVariables[ playerid ][ pCarLicense ] )
				return SendClientMessage( playerid, COLOR_GREY, "Trebuie sa ai o licenta de Driving activa!" );

			serverVariables[workers_pizza]++;
			SetPlayerCheckpoint( playerid, 2106.3606, -1782.4164, 13.1153, 5.0 );
			playerVariables[ playerid ][ pCP ] = 7010; // Pizza
			InfoTD_MSG( playerid, 10000, "Mergi la ~r~~h~Checkpoint ~w~~h~pentru a primi Scuterul cu Pizza!" );
		}
		case 4://Pilot
		{
			if( playerVariables[ playerid ][ pFlyLicense ] == 0 )
				return SendClientMessage( playerid, COLOR_GREY, "Trebuie sa ai o licenta de Fly activa!" );

			serverVariables[workers_pilot]++;
			SetPlayerCheckpoint( playerid, 1389.0065, 1361.9304, 11.7393, 5.0 );
			playerVariables[ playerid ][ pCP ] = 8010; // Pilot
			InfoTD_MSG( playerid, 10000, "Mergi la ~r~~h~Checkpoint ~w~~h~pentru a primi Avionul!" );
		}
		case 5://Arms Dealer
		{
			InfoTD_MSG( playerid, 10000, "Mergi la ~y~~h~Pickup-ul ~w~~h~din apropiere si scrie comanda /getmats~n~Se vor extrage ~g~~h~$500 ~w~~h~din contul tau!" );
		}
		case 6://Car Jacker
		{
			InfoTD_MSG( playerid, 10000, "Fura o masina si foloseste comanda ~r~~h~/dropcar ~w~~h~pentru a o vinde!" );
		}
		case 7://Uber Driver
		{
			return InfoTD_MSG( playerid, 10000, "Urca intr-un vehicul personal si foloseste comanda ~r~~h~/uber ~w~~h~pentru a incepe munca!" );
		}
		case 8://Fisher
		{
			if( playerVariables[ playerid ][ pBoatLicense ] == 0 )
				return SendClientMessage( playerid, COLOR_GREY, "Trebuie sa ai o licenta de Boat activa!" );

			serverVariables[workers_fisher]++;
			SetPlayerCheckpoint( playerid, 2102.3611, -103.8359, 2.3090, 5.0 );
			playerVariables[ playerid ][ pCP ] = 10040; // Fisher
			InfoTD_MSG( playerid, 20000, "Mergi la ~r~~h~Checkpoint ~w~~h~pentru a primi Barca!~n~Navigheaza 20m fata de docuri si foloseste comanda ~b~~h~~h~/fish" );
		}
		case 9://Detective
		{
			InfoTD_MSG( playerid, 20000, "Foloseste comanda ~r~~h~/find ~w~~h~pentru a gasi un jucator de pe server!" );
		}
		case 10://Mechanic
		{
			if( !playerVariables[ playerid ][ pCarLicense ] )
				return SendClientMessage( playerid, COLOR_GREY, "Trebuie sa ai un permis de conducere activ!" );

			serverVariables[workers_mechanic]++;
			SetPlayerCheckpoint( playerid, 867.5190, -1209.2643, 16.9692, 5.0 );
			playerVariables[ playerid ][ pCP ] = 10060; // Mechanic
			InfoTD_MSG( playerid, 20000, "Mergi la ~r~~h~Checkpoint ~w~~h~pentru a primi un Towcar~n~Foloseste comanda /tow pentru a ridica masini de pe strada!" );
		}
		case 11://Sweeper
		{
			if( !playerVariables[ playerid ][ pCarLicense ] )
				return SendClientMessage( playerid, COLOR_GREY, "Trebuie sa ai un permis de conducere activ!" );

			serverVariables[workers_sweeper]++;
			SetPlayerCheckpoint( playerid, 2160.7576, -1177.7554, 23.5455, 5.0 );
			playerVariables[ playerid ][ pCP ] = 10060; // Sweeper
			InfoTD_MSG( playerid, 20000, "Mergi la ~r~~h~Checkpoint ~w~~h~pentru a primi un Sweeper~n~Urmeaza traseul marcat pe GPS pentru a castiga banii!" );
		}
		case 12://Garbage
		{
			if( !playerVariables[ playerid ][ pCarLicense ] )
				return SendClientMessage( playerid, COLOR_GREY, "Trebuie sa ai un permis de conducere activ!" );

			serverVariables[workers_garbage]++;
			SetPlayerCheckpoint( playerid, 2159.7034, -1978.1818, 14.0984, 5.0 );
			playerVariables[ playerid ][ pCP ] = 10060; // Garbage
			InfoTD_MSG( playerid, 20000, "Mergi la ~r~~h~Checkpoint ~w~~h~pentru a primi un Trashmaster~n~Urmeaza traseul marcat pe GPS pentru a castiga banii!" );
		}
		case 13://Drugs Dealer
		{
			InfoTD_MSG( playerid, 20000, "Mergi in Crack House pentru a cumpara droguri folosind comanda ~r~~h~/getdrugs" );
		}
		case 14://Transporter
		{
			if( !playerVariables[ playerid ][ pCarLicense ] )
				return SendClientMessage( playerid, COLOR_GREY, "Trebuie sa ai un permis de conducere activ!" );

			serverVariables[workers_transporter]++;
			SetPlayerCheckpoint( playerid, 1508.6135, -1734.1775, 6.4515, 1.0 );
			playerVariables[ playerid ][ pCP ] = 10060; // Transporter
			InfoTD_MSG( playerid, 20000, "Mergi la ~r~~h~Checkpoint ~w~~h~pentru a primi o masina~n~~r~~h~ATENTIE: ~w~~h~Acest job este ilegal, evitati politia!" );
		}
	}
	// < the final setup >
	if( !playerVariables[ playerid ][ pFaction ] && playerVariables[ playerid ][ pJob ] != 9 ) // < in faction and in job >
		SetPlayerSkin( playerid, GetGVarInt( "job_Skin", playerVariables[ playerid ][ pJob ] ) );

	ClearAnimationEx( playerid );
	playerVariables[ playerid ][ pTotalEarnings ] = 0;
	playerVariables[ playerid ][ pJobTimer ] = 0;
	return true;
}
CMD:getdrugs( playerid, params[] )
{
	if( playerVariables[ playerid ][ pJob ] != 13 )
		return SendClientMessage( playerid, COLOR_GREY, "You're not a Drugs Dealer! Please use command: /jobs" );

	if( !IsPlayerInRangeOfPoint( playerid, 5, 316.5966, 1123.2393, 1083.8828 ) )
		return SendClientMessage( playerid, COLOR_GREY, "Trebuie sa fii in Crack House pentru a folosi comanda!" );

	new valueDrugs;
	if( sscanf( params, "d", valueDrugs) ) 
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/getdrugs [amount]" );

	if( valueDrugs <= 0 || valueDrugs > 15 ) 
		return SendClientMessage( playerid, COLOR_GREY, "Valoarea trebuie sa fie cuprinsa intre 1-15 grame!" );

	if( playerVariables[ playerid ][ pDrugs ] >= 100 )
		return SendClientMessage( playerid, COLOR_GREY, "Detii deja mai mult de 100 de grame la tine!" );

	new valueCash = valueDrugs * 500;
	if( playerVariables[ playerid ][ pMoney ] < valueCash )
		return SendClientMessage( playerid, COLOR_GREY, "Nu ai destui bani pentru a cumpara aceasta cantitate de droguri!" );

	// < Give player drugs )
	playerVariables[ playerid ][ pMoney ] -= valueCash;
	playerVariables[ playerid ][ pDrugs ] += valueDrugs;
	SendClientMessagef( playerid, COLOR_TEAL, "Ai cumparat %d grame de droguri din Crack House pentru $%s.", valueDrugs, FormatNumber( valueCash ) );
	return true;
}
CMD:tow( playerid, params[] )
{
	if( playerVariables[ playerid ][ pJob ] != mechanic_job )
		return SendClientMessage( playerid, COLOR_GREY, "You have to be a Mechanic!" );

	if( GetVehicleModel( GetPlayerVehicleID( playerid ) ) != 525 )
		return SendClientMessage( playerid, COLOR_GREY, "You have to be in the Tow Truck!" );

	if( GetPlayerState( playerid ) != PLAYER_STATE_DRIVER )
		return SendClientMessage( playerid, COLOR_GREY, "You are not the driver." );

	new playerTowTruck = GetPlayerVehicleID( playerid );
	if( IsTrailerAttachedToVehicle( playerTowTruck ) )
		return DetachTrailerFromVehicle( playerTowTruck );

	new targetVehicle = GetVehicleFromBehind( playerTowTruck );
	if( targetVehicle != INVALID_VEHICLE_ID)
	{
		targetVehicleID[playerid] = targetVehicle;
		AttachTrailerToVehicle( targetVehicle, playerTowTruck );
		playerVariables[ playerid ][ pCP ] = 10070; // Mechanic
		new randTow = random( sizeof( gRandomTowcar ) );
		SetPlayerCheckpoint( playerid, gRandomTowcar[ randTow ][ 0 ], gRandomTowcar[ randTow ][ 1 ], gRandomTowcar[ randTow ][ 2 ], 5.0 );
		//SendClientMessage( playerid, COLOR_YELLOW, "Your working hours is up, go to red marker." );
		nearByMessage( playerid, COLOR_GREY, 30.0, "** %s has hooked a %s onto their tow truck.", playerVariables[ playerid ][ pNormalName ], VehicleName( GetVehicleModel( targetVehicle ) ) );
	}
	else return SendClientMessage( playerid, COLOR_YELLOW, "There is no vehicle in your range!" );
	return true;
}
CMD:dropcar( playerid, params[] )
{
	if( playerVariables[ playerid ][ pJob ] != 6 )
		return SendClientMessage( playerid, COLOR_GREY, "Trebuie sa te angajezi la Car Jacker job!" );

	new vehicleid = GetPlayerVehicleID( playerid );
	new PlayerSlot = playerVariables[ playerid ][ VehicleSlot ];

	if( GetPlayerState( playerid ) != PLAYER_STATE_DRIVER ) 		return SendClientMessage( playerid, ~1, "Trebuie sa fii soferul unei masini!" );
	if( vehicleVariables[ PlayerSlot ][ playerid ][ Vehicle ] == vehicleid ) 	return SendClientMessage( playerid, ~1, "Nu poti fura masina ta personala!" );

	if( gettime() - GetPVarInt( playerid, "dropcar_Timer" ) <= 300 )
		return SendClientMessagef( playerid, ~1, "* Trebuie sa astepti %d secunde pentru a vinde masina!", 300 - (gettime() - GetPVarInt( playerid, "dropcar_Timer" )) );

	SetPVarInt( playerid, "dropcar_Timer", gettime() );
	playerVariables[ playerid ][ pCP ] = 10030;
	SetPlayerCheckpoint( playerid, 2399.9775, 2800.9055, 10.4454, 5.0 );
	InfoTD_MSG( playerid, 10000, "Mergi cu masina la Checkpoint pentru a o vinde unui dealer!" );
	return true;
}
CMD:fish( playerid, params[] )
{
	if( playerVariables[ playerid ][ pJob ] != 8 )		return SendClientMessage( playerid, COLOR_GREY, "Trebuie sa te angajezi la Fish Job!" );
	if( playerVariables[ playerid ][ pFishing ] == 1 )	return SendClientMessage( playerid, COLOR_GREY, "Nu poti folosi aceasta comanda in timp ce pescuiesti!" );

	if( !IsPlayerInVehicle( playerid, playerVariables[ playerid ][ pJobVehicle ][ 0 ] ) && playerVariables[ playerid ][ pFishes ] < 5 )
		return SendClientMessage( playerid, COLOR_GREY, "Trebuie sa fii in barca pentru a folosi comanda!" );

	if( IsPlayerInRangeOfPoint( playerid, 20.0, 2091.1987, -112.1740, 0.7686 ) && playerVariables[ playerid ][ pFishes ] < 5 )
		return SendClientMessage( playerid, COLOR_GREY, "Trebuie sa fii la minim 20m fata de docuri!" );

	if( playerVariables[ playerid ][ pFishes ] >= 5 )
	{
		DisablePlayerCheckpoint( playerid );
		playerVariables[ playerid ][ pCP ] = 10050;
		SetPlayerCheckpoint( playerid, 2327.2693, 6.5696, 26.5360, 3.0 );
		return SendClientMessage( playerid, COLOR_GREY, "Trebuie sa mergi la pescarie sa iti vinzi pestii pe bani!" );
	}
	playerVariables[ playerid ][ pFishing ] = 1;
	TogglePlayerControllable( playerid, false );
	//( playerid, 1057, 0.0, 0.0, 0.0 );
	Announce_Player( playerid, 5000, 3, "~b~~h~~h~Fishing..." );
	SetTimerEx( "FishTimer", 10000, 0, "i", playerid );
	return true;
}
CMD:usedrugs( playerid, params[] )
{
	CheckPlayerAction( playerid );

	if( IsPlayerInAnyVehicle( playerid ) )
		return SendClientMessage( playerid, COLOR_GREY, "Nu poti folosi aceasta comanda intr-o masina!" );

	if( playerVariables[ playerid ][ pDrugs ] < 1 )
		return SendClientMessage( playerid, COLOR_GREY, "You don't have any drugs!" );

	if( playerVariables[ playerid ][ pUseDrugs ] != 0 || playerVariables[ playerid ][ pUsingDrugs ] != 0 )
		return SendClientMessagef( playerid, COLOR_GREY, "Nu poti folosi comanda in acest moment!" );

	// < Apply the drugs >
	ApplyAnimation( playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 10000, 0 );
	playerVariables[ playerid ][ pDrugs ]--;
	playerVariables[ playerid ][ pUseDrugs ] = 0;
	playerVariables[ playerid ][ pUsingDrugs ] = 30;
	nearByMessage( playerid, COLOR_PURPLE, NBM_DIST, "** %s took some drugs out of his pocket.", username( playerid ) );
	return true;
}
CMD:getmats( playerid, params[] )
{
	if( playerVariables[ playerid ][ pJob ] != 5 )								return SendClientMessage( playerid, COLOR_GREY, "You need to have job Arms Dealer!" );
	if( !IsPlayerInRangeOfPoint( playerid, 5.0, 813.5888, 1673.7957, 5.2813 ) )	return GPS_Location( playerid, "Location: /getmats", 813.5888, 1673.7957, 5.2813 ) ;
	if( playerVariables[ playerid ][ pMoney ] < 500 )							return SendClientMessage( playerid, COLOR_GREY, "You need to pay $500 to collect materials." );

	playerVariables[ playerid ][ pMoney ] -= 500;
	SetPlayerAttachedObject( playerid, INDEX_ROB, 1550, 15, 0.016491, 0.205742, -0.208498, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Money Bag
	SendClientMessage( playerid, COLOR_WHITE, "Reach the checkpoint to collect your materials!" );
	SetPlayerCheckpoint( playerid, 2240.1580, -82.7209, 26.5024, 5.0 );
	playerVariables[ playerid ][ pCP ] = 9010; // Arms Dealer
	return true;
}
CMD:sellgun( playerid, params[] )
{
	CheckPlayerAction( playerid );
	if( playerVariables[ playerid ][ pJob ] != 5 )				
		return SendClientMessage( playerid, COLOR_GREY, "You have to be an Arms Dealer!" );

	new Player, Weapon[ 25 ], Price;
	if( sscanf( params, "us[25]d", Player, Weapon, Price  ))
	{
		SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/sellgun [ playerid ] [ weapon name ] [ price ]" );
		return SendClientMessage( playerid, COLOR_GREY, "Available weapon names: rifle, m4, deagle, ak47" );
	}
	if( !IsPlayerConnected( Player ) ) 							return SendClientMessage( playerid, COLOR_GREY, "That player it's not connected!" );
	if( Price < 0 )												return SendClientMessage( playerid, COLOR_GREY, "Pretul trebuie sa fie mai mare decat 0!" );
	if( !IsPlayerInRangeOfPlayer( playerid, Player, 10.0 ) )	return SendClientMessage( playerid, COLOR_GREY, "You're too far away from this player!" );

	
    switch(YHash(Weapon, false))
    {
    	case _I<m4>:
    	{
    		if( playerVariables[ playerid ][ pMaterials ] < 200 )	return SendClientMessage( playerid, COLOR_GREY, "Nu ai destule materiale!" );
			SendClientMessagef( playerid, COLOR_WHITE, "You have offered %s a M4 for $%i", username( Player ), Price );
			SendClientMessagef( Player, COLOR_NICESKY, "%s has offered you a M4 for $%i. To accept type /accept weapon", username( playerid ), Price );

			SetPVarInt( Player, "gunID", playerid );
			SetPVarInt( playerid, "gun", 31 );
			SetPVarInt( playerid, "slot", GetWeaponSlot( 31 ) );
			SetPVarInt( playerid, "gunPrice", Price );
			SetPVarInt( playerid, "gunMats", 200 );
    	}
    	case _I<rifle>:
    	{
    		if( playerVariables[ playerid ][ pMaterials ] < 350 )	return SendClientMessage( playerid, COLOR_GREY, "Nu ai destule materiale!" );
			SendClientMessagef( playerid, COLOR_WHITE, "You have offered %s a Rifle for $%i", username( Player ), Price );
			SendClientMessagef( Player, COLOR_NICESKY, "%s has offered you a Rifle for $%i. To accept type /accept weapon", username( playerid ), Price );

			SetPVarInt( Player, "gunID", playerid );
			SetPVarInt( playerid, "gun", 33 );
			SetPVarInt( playerid, "slot", GetWeaponSlot( 33 ) );
			SetPVarInt( playerid, "gunPrice", Price );
			SetPVarInt( playerid, "gunMats", 350 );
    	}
    	case _I<ak47>:
    	{
    		if( playerVariables[ playerid ][ pMaterials ] < 150 )	return SendClientMessage( playerid, COLOR_GREY, "Nu ai destule materiale!" );
			SendClientMessagef( playerid, COLOR_WHITE, "You have offered %s a AK47 for $%i", username( Player ), Price );
			SendClientMessagef( Player, COLOR_NICESKY, "%s has offered you a AK47 for $%i. To accept type /accept weapon", username( playerid ), Price );

			SetPVarInt( Player, "gunID", playerid );
			SetPVarInt( playerid, "gun", 30 );
			SetPVarInt( playerid, "slot", GetWeaponSlot( 30 ) );
			SetPVarInt( playerid, "gunPrice", Price );
			SetPVarInt( playerid, "gunMats", 150 );
    	}
    	case _I<deagle>:
    	{
    		if( playerVariables[ playerid ][ pMaterials ] < 150 )	return SendClientMessage( playerid, COLOR_GREY, "Nu ai destule materiale!" );
			SendClientMessagef( playerid, COLOR_WHITE, "You have offered %s a Deagle for $%i", username( Player ), Price );
			SendClientMessagef( Player, COLOR_NICESKY, "%s has offered you a Deagle for $%i. To accept type /accept weapon", username( playerid ), Price );

			SetPVarInt( Player, "gunID", playerid );
			SetPVarInt( playerid, "gun", 24 );
			SetPVarInt( playerid, "slot", GetWeaponSlot( 24 ) );
			SetPVarInt( playerid, "gunPrice", Price );
			SetPVarInt( playerid, "gunMats", 150 );
    	}
    	default:
    	{
    		SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/sellgun [ playerid ] [ weapon name ] [ price ]" );
		    return SendClientMessage( playerid, COLOR_GREY, "Available weapon names: rifle, m4, deagle, ak47" );
    	}
    }
	return true;
}
CMD:sellmats( playerid, params[] )
{
	new Player, Amount, Price;
	if( sscanf( params, "uii", Player, Amount, Price ) )
		return SendClientMessage( playerid, -1, SYNTAX_MESSAGE"/sellmats [ playerid ] [amount] [price]" );

	if( Amount <= 0 || playerVariables[ playerid ][ pMaterials ] < Amount )		
		return SendClientMessage( playerid, -1, "You don't have enough mats." );

	if( !IsPlayerConnected( Player ) ) 						return SendClientMessage( playerid, COLOR_GREY, "That player it's not connected!" );
	if( playerVariables[ Player ][ pMoney ] < Price )		return SendClientMessage( playerid, -1, "This player does not have enough money for this mats!" );

	SetPVarInt( Player, "mAmount", Amount );
	SetPVarInt( Player, "mPrice", Price );
	SetPVarInt( Player, "mID", playerid );

	SendClientMessagef( Player, COLOR_LIGHTBLUE, "** %s wish to sell you %d mats for $%i. Type /accept mats if you wish to accept.", username( playerid ), Amount, Price);
	SendClientMessagef( playerid, COLOR_LIGHTBLUE, "** You wish to sell %d mats to %s, for $%i.", Amount, username( Player ), Price);
	return true;
}
CMD:selldrugs( playerid, params[] )
{
	new Player, Amount, Price;
	if( sscanf( params, "uii", Player, Amount, Price ) )
		return SendClientMessage( playerid, -1, SYNTAX_MESSAGE"/selldrugs [ playerid ] [amount] [price]" );

	if( Amount <= 0 || playerVariables[ playerid ][ pDrugs ] < Amount )
		return SendClientMessage( playerid, -1, "You don't have enough drugs." );

	if( !IsPlayerConnected( Player ) ) 						return SendClientMessage( playerid, COLOR_GREY, "That player it's not connected!" );
	if( playerVariables[ Player ][ pMoney ] < Price )		return SendClientMessage( playerid, -1, "This player does not have enough money for this ammount of drugs!" );

	SetPVarInt( Player, "dAmount", Amount );
	SetPVarInt( Player, "dPrice", Price );
	SetPVarInt( Player, "dID", playerid );

	SendClientMessagef( Player, COLOR_LIGHTBLUE, "** %s wish to sell you %dg of drugs for $%i. Type /accept drugs if you wish to accept.", username( playerid ), Amount, Price);
	SendClientMessagef( playerid, COLOR_LIGHTBLUE, "** You wish to sell %dg drugs to %s, for $%i.", Amount, username( Player ), Price);
	return true;
}
CMD:10fuel( playerid, params[] )
{
	new vehicleid = GetPlayerVehicleID( playerid );
	if( !IsPlayerInAnyVehicle( playerid ) )
		return SendClientMessage( playerid, COLOR_GREY, "Trebuie sa fii intr-o masina pentru a putea folosi comanda!" );

	serverVariables[ VehicleGas ][ vehicleid ] = serverVariables[ VehicleGas ][ vehicleid ] - 100.0;
	return true;
}
CMD:fillplane( playerid, params[] )
{
	new FuelID = GetBuildingEnterID( playerid, 0, 3, 30.0 ), vehicleid = GetPlayerVehicleID( playerid );
	if( !IsAPlaneModel( GetVehicleModel( vehicleid ) ) )
		return InfoTD_MSG( playerid, 5000, "Trebuie sa fii pilotul unui aparat de zbor!" );

	if( FuelID == -404 || GetGVarInt( "bus_Type", FuelID ) != 12 )
		return InfoTD_MSG( playerid, 5000, "Trebuie sa fii la maxim 30m fata de pompa de alimentare!" );

	if( serverVariables[ VehicleGas ][ vehicleid ] >= float( 99 ) )
		return InfoTD_MSG( playerid, 5000, "Trebuie sa ai sub 100 de litri de combustibil!" );

	if( GetPVarInt( playerid, "player_Fill" ) == 1 )
		return InfoTD_MSG( playerid, 5000, "Te afli in proces de alimentare, nu mai fa spam!" );

	TogglePlayerControllable( playerid, 0 );
	Announce_Player( playerid, 5000, 4, "~w~~h~va rugam asteptati~y~~h~..." );
	SetPVarInt( playerid, "player_Fill", 1 );
	SetTimerEx( "FillTimer", 5000, false, "idd", playerid, vehicleid, FuelID );
	return true;
}
CMD:fill( playerid, params[] )
{
	if( GetPlayerState( playerid ) != 2 ) return InfoTD_MSG( playerid, 5000, "Trebuie sa fii soferul unei masini!" );
	new FuelID = GetBuildingEnterID( playerid, 0, 3 ), vehicleid = GetPlayerVehicleID( playerid );
	if( FuelID == -404 || GetGVarInt( "bus_Type", FuelID ) != 6 )
	{
		if( playerVariables[ playerid ][ pGasCan ] != 0 )
		{
			if( playerVariables[ playerid ][ pGasCan ] < 20 )
				return SendClientMessage( playerid, COLOR_GREY, "Your gascan it's empty, please use /fillgascan near the gas station!" );

			if( serverVariables[ VehicleGas ][ vehicleid ] >= 50.0 )
				return SendClientMessage( playerid, COLOR_GREY, "Trebuie sa ai mai putin de 50%% combustibil in rezervor!" );

			playerVariables[ playerid ][ pGasCan ] = 1;
			serverVariables[ VehicleGas ][ vehicleid ] += 20.0;
			return SendClientMessage( playerid, COLOR_DARKPINK, "* You filled your car with 20%% fuel from your gas can." );
		}
		else return InfoTD_MSG( playerid, 5000, "Trebuie sa fii langa o pompa de alimentare!" );
	}
	if( IsABike( vehicleid ) )
		return InfoTD_MSG( playerid, 5000, "Nu poti alimenta o bicicleta!" );

	if( serverVariables[ VehicleGas ][ vehicleid ] >= float(99) )
		return InfoTD_MSG( playerid, 5000, "Ai deja plinul facut la aceasta masina!" );

	if( GetPVarInt( playerid, "player_Fill" ) == 1 )
		return InfoTD_MSG( playerid, 5000, "Te afli in proces de alimentare, nu mai fa spam!" );

	SetPVarInt( playerid, "player_Fill", 1 );
	TogglePlayerControllable( playerid, 0 );
	Announce_Player( playerid, 5000, 4, "~w~~h~va rugam asteptati~y~~h~..." );
	SetTimerEx( "FillTimer", 5000, false, "idd", playerid, vehicleid, FuelID );
	return true;
}
CMD:fillgascan( playerid, params[] )
{
	if( playerVariables[ playerid ][ pGasCan ] > 1 || playerVariables[ playerid ][ pGasCan ] == 0 )
		return SendClientMessage( playerid, COLOR_GREY, "Your gascan it's full or you don't have one [/buygascan]!" );

	new FuelID = GetBuildingEnterID( playerid, 0, 3 );
	if( FuelID == -404 || GetGVarInt( "bus_Type", FuelID ) != 6 )
		return InfoTD_MSG( playerid, 5000, "Trebuie sa fii langa o pompa de alimentare!" );

	if( IsPlayerInAnyVehicle( playerid ) )
		return SendClientMessage( playerid, COLOR_GREY, "Trebuie sa fii inafara masinii pentru a putea folosi comanda!" );

	new FuelPrice = 20 * GetGVarInt( "bus_Fuel", FuelID );
	SetGVarInt( "bus_Money", GetGVarInt( "bus_Money", FuelID ) + FuelPrice/2, FuelID );

	playerVariables[ playerid ][ pMoney ] -= FuelPrice;
	playerVariables[ playerid ][ pGasCan ] = 20;
	SendClientMessagef( playerid, COLOR_GREEN, "Ai platit $%d pentru a umple canistra cu benzina.", FuelPrice );
	return true;
}
CMD:buygascan( playerid, params[] )
{
	if( playerVariables[ playerid ][ pGasCan ] != 0 )
		return SendClientMessage( playerid, COLOR_GREY, "You already have a Gascan, use /fillgascan and /fill" );

	new FuelID = GetBuildingEnterID( playerid, 1, 3, 50.0 );
	if( FuelID == -404 || GetGVarInt( "bus_Type", FuelID ) != 6 )
		return InfoTD_MSG( playerid, 5000, "Trebuie sa fii in interiorul unei pompe de alimentare!" );

	SendClientMessage( playerid, COLOR_WHITE, "You have purchased a gas can for $1.000" );
	SetGVarInt( "bus_Money", GetGVarInt( "bus_Money", FuelID ) + 1000, FuelID );
	playerVariables[ playerid ][ pMoney ] -= 1000;
	playerVariables[ playerid ][ pGasCan ] = 1;
	return true;
}
CMD:buylevel( playerid, params[] )
{
	if( playerVariables[ playerid ][ pLevel ] < 0 )
		SendClientMessage( playerid, COLOR_GREY, "Your level it's invalid for this action!" );

	new expAmount = playerVariables[ playerid ][ pLevel ] * LEVEL_MULTYPLIER;
	if( playerVariables[ playerid ][ pRP ] < expAmount )
		return SendClientMessagef( playerid, COLOR_WHITE, "Ai nevoie de %d Respect Points, momentan ai doar [%d] !", expAmount, playerVariables[ playerid ][ pRP ] );

	if( GetPlayerNextLevelCost( playerid ) > playerVariables[ playerid ][ pMoney ] )
		return SendClientMessage( playerid, COLOR_GREY, "Nu ai destui bani pentru a cumpara level!" );

	//( playerid, 1052, 0.0, 0.0, 0.0 );
	// < Update the referral's bonus >
	CheckForReferral(playerid);
	// < Update player's level )
	playerVariables[ playerid ][ pMoney ] -= GetPlayerNextLevelCost( playerid );
	playerVariables[ playerid ][ pRP ] -= expAmount;
	playerVariables[ playerid ][ pLevel ]++;
	SetPlayerScore( playerid, playerVariables[ playerid ][ pLevel ] );
	SendClientMessagef( playerid, COLOR_TEAL, "Felicitari, acum ai promovat la level [%d]!", playerVariables[ playerid ][ pLevel ] );
	return true;
}

CMD:exam( playerid, params[] )
{
	if( playerVariables[ playerid ][ pCarLicense ] != 0 )	
		return SendClientMessage( playerid, COLOR_WHITE, "Ai deja o licenta valida de condus!" );

	if( GetPlayerInterior( playerid ) != 0 || GetPlayerVirtualWorld( playerid ) != 0 )
		return SendClientMessage( playerid, COLOR_WHITE, "Trebuie sa fii in virtual world 0 si interior 0!" );

	switch( playerVariables[ playerid ][ pCity ] )
	{
		case 0:
		{
			if( !IsPlayerInRangeOfPoint( playerid, 3.0, 1219.2964, -1813.3220, 16.5938 ) )
			{
				GPS_Location( playerid, "DMV LS", 1219.2964, -1813.3220, 16.5938 );
				return InfoTD_MSG( playerid, 7000, "~r~~h~ERROR: ~w~~h~Nu esti la DMV-ul din LS pentru a putea folosi comanda!" );
			}
		}
		case 1:
		{
			if(!IsPlayerInRangeOfPoint( playerid, 3.0, 1909.3464, 2350.3469, 10.9799 ))
		    {
		    	GPS_Location(playerid, "DMV LV", 1909.3464, 2350.3469, 10.9799);
		    	return InfoTD_MSG( playerid, 7000, "~r~~h~ERROR: ~w~~h~Nu esti la DMV-ul din LV pentru a putea folosi comanda!" );
		    }
		}
	}

	if( IsPlayerInAnyVehicle( playerid ) )                  return SendClientMessage( playerid, COLOR_WHITE, "Please exit from your vehicle!" );
	if( playerVariables[ playerid ][ pMoney ] < 250 )		return SendClientMessage( playerid, COLOR_WHITE, "You need 250$ to take the /exam" );
	if( playerVariables[ playerid ][ pTakeExam ] == 1 )		return SendClientMessage( playerid, COLOR_WHITE, "Esti deja in timpul unui examen!" );

	// < Set player's variables )
	ClearAnimationEx( playerid );
	DisableRemoteVehicleCollisions( playerid, true );
	DisablePlayerRaceCheckpoint( playerid );
	playerVariables[ playerid ][ pTakeExam ] = 1;
	playerVariables[ playerid ][ pRCP ] = 1000;
	playerVariables[ playerid ][ pMoney ] -= 250;
	SetPlayerVirtualWorld( playerid, 10000 + playerid );

	// < Create Vehicle / CP )
	playerVariables[ playerid ][ pDMVCP ] = 0;

	switch( playerVariables[ playerid ][ pCity ] )
	{
		case 0:
		{
			SetPlayerRaceCheckpoint( playerid, 0, gRandomDMV[ 0 ][ 0 ], gRandomDMV[ 0 ][ 1 ], gRandomDMV[ 0 ][ 2 ], gRandomDMV[ 1 ][ 0 ], gRandomDMV[ 1 ][ 1 ], gRandomDMV[ 1 ][ 2 ], 5.0 );
			playerVariables[ playerid ][ pJobVehicle ][ 0 ] = CreateVehicle( 401, 1263.0737, -1800.4418, 13.1173, 180.9541, -1, -1, -1 ); // Exam Vehicle
			SetVehicleVirtualWorld( playerVariables[ playerid ][ pJobVehicle ][ 0 ], 10000 + playerid );
		}
		case 1:
		{
			SetPlayerRaceCheckpoint( playerid, 0, gRandomDMVLV[ 0 ][ 0 ], gRandomDMVLV[ 0 ][ 1 ], gRandomDMVLV[ 0 ][ 2 ], gRandomDMVLV[ 1 ][ 0 ], gRandomDMVLV[ 1 ][ 1 ], gRandomDMVLV[ 1 ][ 2 ], 5.0 );
			playerVariables[ playerid ][ pJobVehicle ][ 0 ] = CreateVehicle( 401, 1891.5643, 2330.7317, 10.5376, -86.2201, -1, -1, -1 ); // Exam Vehicle
			SetVehicleVirtualWorld( playerVariables[ playerid ][ pJobVehicle ][ 0 ], 10000 + playerid );
		}
	}

	//LockVehicle( playerVariables[ playerid ][ pJobVehicle ][ 0 ] );
	SetGVarInt( "veh_Faction", 0, playerVariables[ playerid ][ pJobVehicle ][ 0 ] );
	SetVehicleNumberPlate( playerVariables[ playerid ][ pJobVehicle ][ 0 ], "EXAM CAR" );
	PutPlayerInVehicle( playerid, playerVariables[ playerid ][ pJobVehicle ][ 0 ], 0 );
	serverVariables[ VehicleGas ][ playerVariables[ playerid ][ pJobVehicle ][ 0 ] ] = 100.0;

	// < Tutorial )
	InfoTD_MSG( playerid, 15000, "Apasa tasta ~b~~h~2 ~w~~h~pentru a porni motorul!~n~Apasa ~y~~h~CTRL ~w~~h~pentru a aprinde farurile!~n~Urmareste ~r~~h~Checkpoints ~w~~h~pentru a termina traseul examenului!" );
	return true;
}
CMD:spawncars( playerid, params[] )
{
	if( !playerVariables[ playerid ][ pPremium ] )
		return SendClientMessage( playerid, COLOR_GREY, "You're not a Premium or Vip player, buy it from /shop !" );

	if( !GetPersonalVehiclesNumber( playerid ) )
		return SendClientMessage( playerid, COLOR_GREY, "Nu ai nicio masina personala!" );

	// < Spawn player vehicles )
	for( new slot=0; slot < MAX_SLOTS; slot++ )
		if( playerVariables[ playerid ][ Vehicle ][ slot ] != 0 )
			DeSpawnPlayerVehicle( slot, playerid ), SpawnPlayerVehicle( slot, playerid );

	return InfoTD_MSG( playerid, 5000, "Your vehicles has been respawned!" );
}
CMD:despawncars( playerid, params[] )
{
	if( !playerVariables[ playerid ][ pPremium ] )
		return SendClientMessage( playerid, COLOR_GREY, "You're not a Premium or Vip player, buy it from /shop !" );

	if( !GetPersonalVehiclesNumber( playerid ) )
		return SendClientMessage( playerid, COLOR_GREY, "Nu ai nicio masina personala!" );

	// < Spawn player vehicles )
	for( new slot=0; slot < MAX_SLOTS; slot++ )
		if( playerVariables[ playerid ][ Vehicle ][ slot ] != 0 )
			DeSpawnPlayerVehicle( slot, playerid );

	return InfoTD_MSG( playerid, 5000, "Your vehicles has been de-spawned!" );
}
alias:cars( "v", "mycars", "vehicles" );
CMD:cars( playerid, params[] )
{
	if( !GetPersonalVehiclesNumber( playerid ) )
		return SendClientMessage( playerid, COLOR_GREY, "Nu ai nicio masina personala!" );

	gsString[ 0 ] = EOS;

	new status[20];
	format( gsString, sizeof gsString, "Vehicul\tStare\tTimp Despawn\tOdometter\n" );
	for( new slot = 0; slot < MAX_SLOTS; slot++ )
	{
		if( playerVariables[ playerid ][ Vehicle ][ slot ] != 0 )
		{	
		    if(vehicleVariables[ slot ][ playerid ][ Vehicle ] != INVALID_PLAYER_ID) format(status, sizeof status, "%d", vehicleVariables[ slot ][ playerid ][ Vehicle ]);
		    else status = "not spawned";

		    status_string[ 0 ] = EOS;

            if( vehicleVariables[ slot ][ playerid ][ VehicleTimer ] == 0 )
                status_string = "{FF2020}no time for despawn";
		    else format( status_string, sizeof status_string, "%d min", floatround( vehicleVariables[ slot ][ playerid ][ VehicleTimer ] / 60, floatround_floor ));

			format( gsString, sizeof gsString, "%s%s [ID: %s]\t"COL_W"%s\t%s\t%0.2f KM\n", 
				gsString, VehicleName( vehicleVariables[ slot ][ playerid ][ VehicleModelID ] ), status, ( vehicleVariables[ slot ][ playerid ][ VehicleStatus ] ) ? ("{006600}disponibil") : ("{FF2020}indisponibil" ), status_string, vehicleVariables[ slot ][ playerid ][ VehicleOdometter ] );
		}
		else
		{
			if( playerVariables[ playerid ][ pVSlots ] > slot )
				format( gsString, sizeof gsString, "%s{fbef8a}[ empty ]\n", gsString );
			else
			{
				format( gsString, sizeof gsString, "%s{F0B301}[+] Add vehicle slot 20 PP\n", gsString );
				break;
			}
		}
	}
	ShowPlayerDialog( playerid, DIALOG_SHOW_VEHICLE_INFO, DIALOG_STYLE_TABLIST_HEADERS, "Your personal vehicles", gsString, "Select", "Cancel" );
	return true;
}
/*CMD:givekey( playerid, params[] )
{
	new vehicleid = GetPlayerVehicleID( playerid );
	new PlayerSlot = playerVariables[ playerid ][ VehicleSlot ];

	if( GetPlayerState( playerid ) != PLAYER_STATE_DRIVER ) 
		return SendClientMessage( playerid, COLOR_GREY, "You have to be in your personal vehicle!" );

	if( vehicleVariables[ PlayerSlot ][ playerid ][ Vehicle ] != vehicleid ) 
		return SendClientMessage( playerid, COLOR_GREY, "You can only park personal vehicles!" );

	new Player;
	if( sscanf( params, "u", Player ) ) 
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/givekey <playerID/Name>" );

	if( !IsPlayerConnected( Player ) )
		return SendClientMessage( playerid, COLOR_GREY, "Player it's disconnected!" );
	
	if( playerVariables[ Player ][ pVehicleKey ] != INVALID_VEHICLE_ID )
		return SendClientMessage( playerid, COLOR_GREY, "This player already have a set of keys!" );

	// < Let's set the variables )
	playerVariables[ Player ][ pVehicleKey ] = playerVariables[ playerid ][ Vehicle ][ PlayerSlot ];

	// < Info both players about keys )
	//( playerid, 1052, 0.0, 0.0, 0.0 );
	SendClientMessagef( playerid, COLOR_WHITE, "{B8FFDB}You have given %s the key to your vehicle", username( Player ) );
	SendClientMessagef( Player, COLOR_WHITE, "{B8FFDB}You have recieved the key to a vehicle from %s", username( playerid ) );
	nearByMessage( playerid, COLOR_GENANNOUNCE, NBM_DIST, "* %s takes out a set of keys, and tosses them to %s.", username( playerid ), username( Player ) );
	return true;
}*/
CMD:buycar( playerid, params[] )
{
	// < Make some checks )
	switch( playerVariables[ playerid ][ pCity ] )
	{
		case 0:
		{
			if( !IsPlayerInRangeOfPoint( playerid, 3.0, 327.0816, -1516.5175, 36.0391 ) )
			{
				GPS_Location( playerid, "DealerShip LS", 327.0816, -1516.5175, 36.0391 );
				return SendClientMessage( playerid, COLOR_GREY, "Trebuie sa fii la Dealership-ul din Los Santos pentru a folosi comanda!" );
			}
		}
		case 1:
		{
			if( !IsPlayerInRangeOfPoint( playerid, 3.0, 2435.2942, 1654.4897, 10.8203 ) )
			{
				GPS_Location( playerid, "DealerShip LV", 2435.2942, 1654.4897, 10.8203 );
				return SendClientMessage( playerid, COLOR_GREY, "Trebuie sa fii la Dealership-ul din Las Venturas pentru a folosi comanda!" );
			}
		}
	}
	if( playerVariables[ playerid ][ pLevel ] < 2 ) return SendClientMessage( playerid, COLOR_GREY, "Trebuie sa ai level 2 pentru a folosi comanda!" );
	if( GetPersonalVehiclesNumber( playerid ) >= MAX_SLOTS ) return SendClientMessage( playerid, COLOR_GREY, "Nu poti cumpara mai mult de 10 masini personale!" );

	// < Show Player Dealership >
	ShowPlayerDialog( playerid, DIALOG_SHOW_DEALER_LIST, DIALOG_STYLE_LIST, "Dealership Select", Dealer_String(), "Select", "Exit" );
	return true;
}
CMD:sellcar( playerid, params[] )
{

	// < Get curent player vehicle slot )
	new vehicleID = GetPlayerVehicleID( playerid ),
		PlayerSlot = playerVariables[ playerid ][ VehicleSlot ];

	switch( playerVariables[ playerid ][ pCity ] )
	{
		case 0:
		{
			if( !IsPlayerInRangeOfPoint( playerid, 30.0, 327.0816, -1516.5175, 36.0391 ) )
			{
				GPS_Location( playerid, "DealerShip LS", 327.0816, -1516.5175, 36.0391 );
				return SendClientMessage( playerid, COLOR_GREY, "Trebuie sa fii la 30m de un Dealership pentru a folosi comanda!" );
			}
		}
		case 1:
		{
			if( !IsPlayerInRangeOfPoint( playerid, 30.0, 2435.2942, 1654.4897, 10.8203 ) )
			{
				GPS_Location( playerid, "DealerShip LV", 2435.2942, 1654.4897, 10.8203 );
				return SendClientMessage( playerid, COLOR_GREY, "Trebuie sa fii la 30m de un Dealership pentru a folosi comanda!" );
			}
		}
	}
	if( vehicleVariables[ PlayerSlot ][ playerid ][ Vehicle ] != vehicleID )
		return InfoTD_MSG( playerid, 7000, "~r~~h~ERROR: ~w~~h~Trebuie sa fii in masina personala!" );

	if( vehicleVariables[ PlayerSlot ][ playerid ][ Sold ] == true )
		return SendClientMessage( playerid, COLOR_GREY, "You already sold this vehicle, please don't spam!" );

	new vipString[ 32 ];

	gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, ""COL_GRI"Trebuie sa confirmi aceasta actiune apasand butonul 'Confirm'\nVei primi jumatate din valoarea masinii tale!\n\nThis %c%s%s"COL_GRI"(ID: %d) is owned by %s\nOdometer: %0.2f km\nInsurance: $%s (%d points)\nVehicle Colors: %d, %d\nVehicle Price: $%s | %d PP", 
		( vehicleVariables[ PlayerSlot ][ playerid ][ VehicleVIP ] ) ? format( vipString, sizeof vipString, ""COL_YE"[VIP] " ) : format( vipString, sizeof vipString, "" ), vipString,
		VehicleName( vehicleVariables[ PlayerSlot ][ playerid ][ VehicleModelID ] ), 
		playerVariables[ playerid ][ Vehicle ][ PlayerSlot ], 
		username( vehicleVariables[ PlayerSlot ][ playerid ][ VehicleOwnerID ] ), 
		vehicleVariables[ PlayerSlot ][ playerid ][ VehicleOdometter ], 
		FormatNumber( vehicleVariables[ PlayerSlot ][ playerid ][ VehicleInsurance ] ), 
		vehicleVariables[ PlayerSlot ][ playerid ][ VehicleInsurancePoints ], 
		vehicleVariables[ PlayerSlot ][ playerid ][ VehicleColor ][ 0 ], 
		vehicleVariables[ PlayerSlot ][ playerid ][ VehicleColor ][ 1 ],
		FormatNumber( vehicleVariables[ PlayerSlot ][ playerid ][ Money ] ), vehicleVariables[ PlayerSlot ][ playerid ][ PP ] );
	ShowPlayerDialog( playerid, DIALOG_DEALER_CONFIRM_SELL, DIALOG_STYLE_MSGBOX, "Dealership", gsString, "Confirm", "Cancel" );
	return true;
}
function SellVehicle( playerid, PlayerSlot )
{
	// < Destroy the vehicle >
	OnPersonalVehicleDeleted( playerid, PlayerSlot, GetPlayerMysqlID(playerid), vehicleVariables[ PlayerSlot ][ playerid ][ VehicleModelID ] );
	return true;
}
CMD:removetuning( playerid, params[] )
{
	new vehicleid = GetPlayerVehicleID( playerid );
	new PlayerSlot = playerVariables[ playerid ][ VehicleSlot ];

	if( GetPlayerState( playerid ) != PLAYER_STATE_DRIVER ) return SendClientMessage( playerid, COLOR_GREY, "You have to be in your personal vehicle!" );
	if( vehicleVariables[ PlayerSlot ][ playerid ][ Vehicle ] != vehicleid ) return SendClientMessage( playerid, COLOR_GREY, "You have to be in your personal vehicle!" );

	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_personalvehicles` SET `vehiclePaintJob` = 3 WHERE `vehicleID` = %d", vehicleVariables[ PlayerSlot ][ playerid ][ VehicleID ] );
	mysql_tquery( g_Handle, gsQuery, "", "" );

	vehicleVariables[ PlayerSlot ][ playerid ][ VehiclePaintJobs ] = 3;
	ChangeVehiclePaintjob( vehicleid, 3 );

	for( new i = 0; i < 14; i++ )
	{
		new componentid = GetVehicleComponentInSlot( vehicleid, i );
		if( componentid != 0 )
			RemoveVehicleComponent( vehicleid, componentid );

		if( i >= 0 && i <= 12 )
			vehicleVariables[ PlayerSlot ][ playerid ][ VehicleMods ][ i ] = 0;
	}
	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_personalvehicles` SET `vehicleMods` = '0:0:0:0:0:0:0:0:0:0:0:0:0' WHERE `vehicleID` = %d", vehicleVariables[ PlayerSlot ][ playerid ][ VehicleID ] );
	mysql_tquery( g_Handle, gsQuery, "", "" );

	return SendClientMessagef( playerid, COLOR_WHITE, "Ai indepartat componentele de tuning de pe masina ta!" );
}
CMD:park( playerid, params[] )
{
	new vehicleid = GetPlayerVehicleID( playerid );
	new PlayerSlot = playerVariables[ playerid ][ VehicleSlot ];

	if( GetPlayerState( playerid ) != PLAYER_STATE_DRIVER ) return SendClientMessage( playerid, COLOR_GREY, "You have to be in your personal vehicle!" );
	if( vehicleVariables[ PlayerSlot ][ playerid ][ Vehicle ] != vehicleid ) return SendClientMessage( playerid, COLOR_GREY, "You can only park personal vehicles!" );
	if( IsPlayerInDynamicArea( playerid, Spawn_Zone[ 0 ] ) || IsPlayerInDynamicArea( playerid, Spawn_Zone[ 1 ] ) )
		return SendClientMessage( playerid, COLOR_GREY, "Nu poti parca masini in zona de Spawn!" ); 

	if(IsPlayerInRangeOfPoint(playerid, 70, 276.6882,-1643.3647,17.8658))
	{
		if(playerVariables[playerid][pRentAP] == 0 && GetGVarInt("bus_OwnerKey", HOTEL_DB_ID) != GetPlayerMysqlID(playerid))
			return SendClientMessage(playerid, -1, "Doar cei cu rent la hotel pot parca aici.");
	}

	GetVehiclePos( vehicleVariables[ PlayerSlot ][ playerid ][ Vehicle ], vehicleVariables[ PlayerSlot ][ playerid ][ Position ][ 0 ], vehicleVariables[ PlayerSlot ][ playerid ][ Position ][ 1 ], vehicleVariables[ PlayerSlot ][ playerid ][ Position ][ 2 ] );
	GetVehicleZAngle( vehicleVariables[ PlayerSlot ][ playerid ][ Vehicle ], vehicleVariables[ PlayerSlot ][ playerid ][ Rotation ] );
	SendClientMessagef( playerid, COLOR_WHITE, "You succesfully parked your %s", VehicleName( vehicleVariables[ PlayerSlot ][ playerid ][ VehicleModelID ] ) );

	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_personalvehicles` SET `vehiclePosX` = %.2f, `vehiclePosY` = %.2f, `vehiclePosZ` = %.2f, `vehiclePosRotation` = %.2f WHERE `vehicleID` = %d", vehicleVariables[ PlayerSlot ][ playerid ][ Position ][ 0 ], vehicleVariables[ PlayerSlot ][ playerid ][ Position ][ 1 ], vehicleVariables[ PlayerSlot ][ playerid ][ Position ][ 2 ], vehicleVariables[ PlayerSlot ][ playerid ][ Rotation ], playerVariables[ playerid ][ Vehicle ][ PlayerSlot ] );
	mysql_tquery( g_Handle, gsQuery, "", "" );
	#if defined DEBUG_SERVER
		printf( "[Debug /park]: %s", gsQuery );
	#endif
	DeSpawnPlayerVehicle( PlayerSlot, playerid );
	SpawnPlayerVehicle( PlayerSlot, playerid );
	PutPlayerInVehicle( playerid, vehicleVariables[ PlayerSlot ][ playerid ][ Vehicle ], 0 );

	GetVehicleParamsEx( vehicleVariables[ PlayerSlot ][ playerid ][ Vehicle ], engine, lights, alarm, doors, bonnet, boot, objective );
	SetVehicleParamsEx( vehicleVariables[ PlayerSlot ][ playerid ][ Vehicle ], VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, alarm, doors, bonnet, boot, objective );
	return true;
}
alias:carplate("vplate");
CMD:carplate( playerid, params[] )
{
	new vehicleid = GetPlayerVehicleID( playerid );
	new PlayerSlot = playerVariables[ playerid ][ VehicleSlot ];

	if( GetPlayerState( playerid ) != PLAYER_STATE_DRIVER ) return SendClientMessage( playerid, COLOR_GREY, "You have to be in your personal vehicle!" );
	if( vehicleVariables[ PlayerSlot ][ playerid ][ Vehicle ] != vehicleid ) return SendClientMessage( playerid, COLOR_GREY, "This is not your personal vehicle!" );
	if( playerVariables[ playerid ][ pMoney ] < 2500 ) return SendClientMessage( playerid, COLOR_GREY, "You don't have enough money! [$2.500]" );

	return ShowPlayerDialog( playerid, DIALOG_VEHICLE_PLATE, DIALOG_STYLE_INPUT, "Number Plate", "Enter new number plate:", "Change", "Cancel" );
}
CMD:vipnamecolor( playerid, params[] )
{
	new PlayerSlot = playerVariables[ playerid ][ VehicleSlot ];
	new vehicleid = GetPlayerVehicleID( playerid );

	if( GetPlayerState( playerid ) != PLAYER_STATE_DRIVER ) 
		return SendClientMessage( playerid, COLOR_GREY, "You have to be in your personal vehicle!" ); 

	if( vehicleVariables[ PlayerSlot ][ playerid ][ Vehicle ] != vehicleid ) 
		return SendClientMessage( playerid, COLOR_GREY, "This is not your personal vehicle!" );

	if( !vehicleVariables[ PlayerSlot ][ playerid ][ VehicleVIP ] )
		return SendClientMessage( playerid, COLOR_GREY, "Your vehicle it's not VIP!" );


	ShowPlayerDialog( playerid, DIALOG_VEHICLE_VIP_COLOR, DIALOG_STYLE_LIST, "Vip name color:", Vipname_color(), "Select", "Close" );
	return true;
}
CMD:vipname( playerid, params[] )
{
	new vehicleid = GetPlayerVehicleID( playerid ), PlayerSlot = playerVariables[ playerid ][ VehicleSlot ];

	if( GetPlayerState( playerid ) != PLAYER_STATE_DRIVER ) 
		return SendClientMessage( playerid, COLOR_GREY, "You have to be in your personal vehicle!" );

	if( vehicleVariables[ PlayerSlot ][ playerid ][ Vehicle ] != vehicleid ) 
		return SendClientMessage( playerid, COLOR_GREY, "This is not your personal vehicle!" );

	if( !vehicleVariables[ PlayerSlot ][ playerid ][ VehicleVIP ] )
		return SendClientMessage( playerid, COLOR_GREY, "Your vehicle it's not VIP!" );

	if( strlen( params ) > 11 )
		return SendClientMessage( playerid, COLOR_GREY, "Your text has more than 11 characters!" );

	new vehicleVIPText[ 21 ];
	if( sscanf( params, "s[12]", vehicleVIPText ) ) 
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/vipname <Text> (11 characters)" );

	if( !VerificaReclama( playerid, vehicleVIPText ) )        	return false;

	// < Destroy the curent text )
	DestroyVehicle_Text( playerid, PlayerSlot );

	// < Create the new one! )
	vehicleVariables[ PlayerSlot ][ playerid ][ VehicleVIPText ] = vehicleVIPText;
	SendClientMessage( playerid, COLOR_LIGHTRED, "Move your vehicle to see the new text!" );
	CreateVehicleText( playerid, PlayerSlot, vehicleVIPText );

	// < Update it on the mysql )
	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_personalvehicles` SET `vehicleVIPText` = '%e' WHERE `vehicleID` = %d", vehicleVIPText, playerVariables[ playerid ][ Vehicle ][ PlayerSlot ] );
	mysql_tquery( g_Handle, gsQuery, "", "" );
	return true;
}
CMD:vipneon( playerid, params[] )
{
	new vehicleID = GetPlayerVehicleID( playerid ),
		PlayerSlot = playerVariables[ playerid ][ VehicleSlot ];

	if( GetPlayerState( playerid ) != PLAYER_STATE_DRIVER ) 
		return SendClientMessage( playerid, COLOR_GREY, "You have to be in your personal vehicle!" );

	if( vehicleVariables[ PlayerSlot ][ playerid ][ Vehicle ] != vehicleID ) 
		return SendClientMessage( playerid, COLOR_GREY, "You can only change neon to your personal vehicle!" );

	if( !vehicleVariables[ PlayerSlot ][ playerid ][ VehicleVIP ] )
		return SendClientMessage( playerid, COLOR_GREY, "This personal vehicle it's not VIP!" );

	return ShowPlayerDialog( playerid, DIALOG_VEHICLE_VIP_NEON, DIALOG_STYLE_LIST, "VIP: Neon Color", "Blue\nWhite\nRed\nGreen\nPurple\nYellow", "Select", "Remove" );
}
CMD:vipwheels( playerid, params[] )
{
	new vehicleID = GetPlayerVehicleID( playerid ),
		PlayerSlot = playerVariables[ playerid ][ VehicleSlot ];

	if( GetPlayerState( playerid ) != PLAYER_STATE_DRIVER ) 
		return SendClientMessage( playerid, COLOR_GREY, "You have to be in your personal vehicle!" );

	if( vehicleVariables[ PlayerSlot ][ playerid ][ Vehicle ] != vehicleID ) 
		return SendClientMessage( playerid, COLOR_GREY, "You can only change rims to your personal vehicle!" );

	if( !vehicleVariables[ PlayerSlot ][ playerid ][ VehicleVIP ] )
		return SendClientMessage( playerid, COLOR_GREY, "This personal vehicle it's not VIP!" );

	return ShowPlayerDialog( playerid, DIALOG_VEHICLE_VIP_WHEELS, DIALOG_STYLE_LIST, "VIP Wheels", "Classic\nTwist\nSwitch\nDollar\nTrance", "Change", "Exit" );
}
CMD:lockcar( playerid, params[] )
{
	AHCheck( playerid, 1, 1 );

	if( !IsPlayerInAnyVehicle( playerid ) ) 
		return SendClientMessage( playerid, COLOR_GREY, "You're not driving any vehicle!" );

	new vehicleID = GetPlayerVehicleID( playerid );
	Announce_Player( playerid, 4000, 3, "~n~~n~~n~~n~~n~~n~~n~%s ~r~locked", VehicleName( GetVehicleModel( vehicleID ) ) );

	new g_engine, g_lights, g_alarm, g_doors, g_bonnet, g_boot, g_objective;
	GetVehicleParamsEx( vehicleID, g_engine, g_lights, g_alarm, g_doors, g_bonnet, g_boot, g_objective );
	SetVehicleParamsEx( vehicleID, g_engine, g_lights, g_alarm, VEHICLE_PARAMS_ON, g_bonnet, g_boot, g_objective );
	return true;
}
CMD:unlockcar( playerid, params[] )
{
	AHCheck( playerid, 1, 1 );

	if( !IsPlayerInAnyVehicle( playerid ) ) 
		return SendClientMessage( playerid, COLOR_GREY, "You're not driving any vehicle!" );

	new vehicleID = GetPlayerVehicleID( playerid );
	Announce_Player( playerid, 4000, 3, "~n~~n~~n~~n~~n~~n~~n~%s ~g~unlocked", VehicleName( GetVehicleModel( vehicleID ) ) );

	new g_engine, g_lights, g_alarm, g_doors, g_bonnet, g_boot, g_objective;
	GetVehicleParamsEx( vehicleID, g_engine, g_lights, g_alarm, g_doors, g_bonnet, g_boot, g_objective );
	SetVehicleParamsEx( vehicleID, g_engine, g_lights, g_alarm, VEHICLE_PARAMS_OFF, g_bonnet, g_boot, g_objective );
	return true;
}
CMD:lock( playerid, params[] )
{
	for( new slot=0; slot < MAX_SLOTS; slot++ )
	{
		if( CheckPlayerDistanceToVehicle( 2.5, playerid, vehicleVariables[ slot ][ playerid ][ Vehicle ] ) )
		{
			new vehicleID = vehicleVariables[ slot ][ playerid ][ Vehicle ];
			switch( vehicleVariables[ slot ][ playerid ][ VehicleLocked ] )
			{
				case 0:
				{
					vehicleVariables[ slot ][ playerid ][ VehicleLocked ] = 1;
					Announce_Player( playerid, 4000, 3, "~n~~n~~n~~n~~n~~n~~n~~h~%s ~r~locked", VehicleName( vehicleVariables[ slot ][ playerid ][ VehicleModelID ] ) );
					LockVehicle( vehicleID );
					SetVehicleParamsForPlayer(vehicleID, playerid, 0, 0);
				}
				case 1:
				{
					vehicleVariables[ slot ][ playerid ][ VehicleLocked ] = 0;
					Announce_Player( playerid, 4000, 3, "~n~~n~~n~~n~~n~~n~~n~~h~%s ~g~unlocked", VehicleName( vehicleVariables[ slot ][ playerid ][ VehicleModelID ] ) );
					UnLockVehicle( vehicleID );
					SetVehicleParamsForPlayer(vehicleID, playerid, 0, 0);
				}
			}
			gsQuery[ 0 ] = EOS;
			mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_personalvehicles` SET `vehicleLocked` = %d WHERE `vehicleOwner` = %d", vehicleVariables[ slot ][ playerid ][ VehicleLocked ], GetPlayerMysqlID(playerid) );
			mysql_tquery( g_Handle, gsQuery, "", "" );
			break;
		}
	}
	if( IsValidVehicle( playerVariables[ playerid ][ pCarRent ] ) )
	{
		if( CheckPlayerDistanceToVehicle( 2.5, playerid, playerVariables[ playerid ][ pCarRent ] ) )
		{
			new g_engine, g_lights, g_alarm, g_doors, g_bonnet, g_boot, g_objective;
			GetVehicleParamsEx( playerVariables[ playerid ][ pCarRent ], g_engine, g_lights, g_alarm, g_doors, g_bonnet, g_boot, g_objective );
			switch( g_doors )
			{
				case 0: LockVehicle( playerVariables[ playerid ][ pCarRent ] ), Announce_Player( playerid, 4000, 3, "~n~~n~~n~~n~~n~~n~~n~~h~RENTCAR ~r~locked" );
				case 1: UnLockVehicle( playerVariables[ playerid ][ pCarRent ] ), Announce_Player( playerid, 4000, 3, "~n~~n~~n~~n~~n~~n~~n~~h~RENTCAR ~g~unlocked" );
				default: UnLockVehicle( playerVariables[ playerid ][ pCarRent ] ), Announce_Player( playerid, 4000, 3, "~n~~n~~n~~n~~n~~n~~n~~h~RENTCAR ~g~unlocked" );
			}
		}
	}
	else if( IsValidVehicle( playerVariables[ playerid ][ pJobVehicle ][ 0 ] ))
	{
		if( CheckPlayerDistanceToVehicle( 5.0, playerid, playerVariables[ playerid ][ pJobVehicle ][ 0 ] ) )
		{
			new g_engine, g_lights, g_alarm, g_doors, g_bonnet, g_boot, g_objective;
			GetVehicleParamsEx( playerVariables[ playerid ][ pJobVehicle ][ 0 ], g_engine, g_lights, g_alarm, g_doors, g_bonnet, g_boot, g_objective );
			switch( g_doors )
			{
				case 0: LockVehicle( playerVariables[ playerid ][ pJobVehicle ][ 0 ] ), Announce_Player( playerid, 4000, 3, "~n~~n~~n~~n~~n~~n~~n~~h~JOB VEHICLE ~r~locked" );
				case 1: UnLockVehicle( playerVariables[ playerid ][ pJobVehicle ][ 0 ] ), Announce_Player( playerid, 4000, 3, "~n~~n~~n~~n~~n~~n~~n~~h~JOB VEHICLE ~g~unlocked" );
				default: LockVehicle( playerVariables[ playerid ][ pJobVehicle ][ 0 ] ), Announce_Player( playerid, 4000, 3, "~n~~n~~n~~n~~n~~n~~n~~h~JOB VEHICLE ~r~locked" );
			}
		}
	}
	return true;
}
CMD:sellcarto( playerid, params[] )
{
	new Player, Price, PlayerSlot = playerVariables[ playerid ][ VehicleSlot ], vehicleid = GetPlayerVehicleID( playerid ), Colors[ 2 ];

	if( vehicleVariables[ PlayerSlot ][ playerid ][ Vehicle ] != vehicleid ) return SendClientMessage( playerid, ~1, "Trebuie sa fii intr-o masina personala!" );
	if( sscanf( params, "ud", Player, Price ) ) return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/sellcarto [username/ID] [price]" );

	if( Price <= 0 )
		return SendClientMessage( playerid, COLOR_GREY, "Invalid vehicle Price, please use something > 0 !" );

	if( playerid == Player ) 
		return SendClientMessage( playerid, COLOR_GREY, "You can't sell the vehicle to yourself!" );

	if( !IsPlayerConnected( Player ) || !playerVariables[ Player ][ pLogged ] ) 
		return SendClientMessage( playerid, COLOR_GREY, "Player is not connected!" );

	if( GetPersonalVehiclesNumber( Player ) >= MAX_SLOTS ) 
		return SendClientMessage( playerid, COLOR_GREY, "Jucatorul are deja numarul maxim de masini personale!" );

	if( GetPersonalVehiclesNumber( Player ) == playerVariables[ Player ][ pVSlots ] ) 
		return SendClientMessage( playerid, COLOR_GREY, "Cumparatorul nu mai are sloturi libere! (/v)!" );

	if( playerVariables[ Player ][ pMoney ] < Price )
		return SendClientMessagef( playerid, COLOR_GREY, "%s(%i) nu are destui bani pentru a-ti cumpara masina!", username( Player ), Player );

	// < Check Price & Distance )
	new Float:Player_Pos[ 4 ];
	GetPlayerPos( Player, Player_Pos[ 0 ], Player_Pos[ 1 ], Player_Pos[ 2 ] );
	if( !IsPlayerInRangeOfPoint( Player, 10.0, Player_Pos[ 0 ], Player_Pos[ 1 ], Player_Pos[ 2 ] ) ) 
		return SendClientMessage( playerid, COLOR_GREY, "Jucatorul trebuie sa fie la cel putin 10m de masina ta!" );

	// < Load trade Variables )
	SendClientMessagef( playerid, COLOR_LIGHT, "[/sellcarto] Your Vehicle Trade offer has been send to %s[%d], wait his response!", username( Player ), Player );
	SetPVarInt( Player, "trade_Player", playerid ), SetPVarInt( Player, "trade_Price", Price ), SetPVarInt( Player, "trade_Slot", PlayerSlot );
	Colors[ 0 ] = vehicleVariables[ PlayerSlot ][ playerid ][ VehicleColor ][ 0 ], Colors[ 1 ] = vehicleVariables[ PlayerSlot ][ playerid ][ VehicleColor ][ 1 ];

	gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, ""COL_R"%s(%i) "COL_W"vrea sa iti vanda un "COL_YE"%s "COL_W"cu "COL_YE"%0.2f"COL_W"km\n", username( playerid ), playerid, VehicleName( vehicleVariables[ PlayerSlot ][ playerid ][ VehicleModelID ] ), vehicleVariables[ PlayerSlot ][ playerid ][ VehicleOdometter ] );
	format( gsString, sizeof gsString, "%s\n"COL_LYE"Colors: "COL_W"%d [Hidden: %s] / %d [Hidden: %s]", gsString, Colors[ 0 ], IsHiddenColor( Colors[ 0 ] ) ? ("{006600}Yes"COL_W"") : ("{FF2020}No"COL_W""), Colors[ 1 ], IsHiddenColor( Colors[ 1 ] ) ? ("{006600}Yes"COL_W"") : ("{FF2020}No"COL_W"") );
	format( gsString, sizeof gsString, "%s\n"COL_LYE"Insurance: "COL_W"Price: "COL_G"$"COL_W"%s | Points: "COL_LR"%d", gsString, FormatNumber( vehicleVariables[ PlayerSlot ][ playerid ][ VehicleInsurance ] ), vehicleVariables[ PlayerSlot ][ playerid ][ VehicleInsurance ] );
	format( gsString, sizeof gsString, "%s\n"COL_LYE"Vehicle V.I.P: "COL_W"%s", gsString, ( vehicleVariables[ PlayerSlot ][ playerid ][ VehicleVIP ] ) ? ("{006600}Yes") : ("{FF2020}No") );

	format( gsString, sizeof gsString, "%s\n"COL_LYE"Vehicle Price: "COL_G"$"COL_W"%s", gsString, FormatNumber( Price ) );
	ShowPlayerDialog( Player, DIALOG_DEALER_SELLCAR, DIALOG_STYLE_MSGBOX, "Sell Personal Vehicle", gsString, "Accepta", "Refuza" );
	return true;
}
CMD:carcolor( playerid, params[] )
{
	if( GetPlayerState( playerid ) != PLAYER_STATE_DRIVER ) return SendClientMessage( playerid, ~1, "You have to be in your personal vehicle!" );
	new colorType, colorValue, PlayerSlot = playerVariables[ playerid ][ VehicleSlot ], vehicleid = GetPlayerVehicleID( playerid );
	if( vehicleVariables[ PlayerSlot ][ playerid ][ Vehicle ] != vehicleid ) return SendClientMessage( playerid, ~1, "You can only color personal vehicles!" );

	if( sscanf( params, "dd", colorType, colorValue ) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/carcolor [colorType(1/2)] [colorValue]" );

	if( colorType < 1 || colorType > 2 )
		return SendClientMessage( playerid, COLOR_GREY, "Invalid color type syntax, please use /carcolor (1/2) [color]" );

	if( IsHiddenColor( colorValue ) )
	{
		if( !playerVariables[ playerid ][ pHiddenColors ] )
			return SendClientMessage( playerid, ~1, "Nu ai nicio culoare hidden pe acest cont. Foloseste comanda /shop pentru a cumpara!" );

		playerVariables[ playerid ][ pHiddenColors ]--;
		InfoTD_MSG( playerid, 7000, "Felicitari, ai folosit culoarea hidden: %d", colorValue );
	}
	// < log the action >
	gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, "Vehicle\\'s color [%d] has been changed to value [%d]", colorType, colorValue );
	InsertVehicleLog( playerVariables[ playerid ][ Vehicle ][ PlayerSlot ], GetPlayerMysqlID(playerid), gsString );

	switch( colorType )
	{
		case 1:
		{
			vehicleVariables[ PlayerSlot ][ playerid ][ VehicleColor ][ 0 ] = colorValue;
			gsQuery[ 0 ] = EOS;
			mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_personalvehicles` SET `vehicleCol1` = %d WHERE `vehicleID` = %d", colorValue, playerVariables[ playerid ][ Vehicle ][ PlayerSlot ] );
			mysql_tquery( g_Handle, gsQuery, "", "" );
			#if defined DEBUG_SERVER
				printf( "[Debug /carcolor]: %s", gsQuery );
			#endif
		}
		case 2:
		{
			vehicleVariables[ PlayerSlot ][ playerid ][ VehicleColor ][ 1 ] = colorValue;
			gsQuery[ 0 ] = EOS;
			mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_personalvehicles` SET `vehicleCol2` = %d WHERE `vehicleID` = %d", colorValue, playerVariables[ playerid ][ Vehicle ][ PlayerSlot ] );
			mysql_tquery( g_Handle, gsQuery, "", "" );
			#if defined DEBUG_SERVER
				printf( "[Debug /carcolor]: %s", gsQuery );
			#endif
		}
	}
	SendClientMessage( playerid, COLOR_YELLOW, "You've succesfull changed your car's color." );
	ChangeVehicleColor( vehicleid, vehicleVariables[ PlayerSlot ][ playerid ][ VehicleColor ][ 0 ], vehicleVariables[ PlayerSlot ][ playerid ][ VehicleColor ][ 1 ] );
	return true;
}
CMD:swapcolors( playerid, params[] )
{
	if( GetPlayerState( playerid ) != PLAYER_STATE_DRIVER ) return SendClientMessage( playerid, ~1, "You have to be in your personal vehicle!" );
	new vColor[ 2 ], PlayerSlot = playerVariables[ playerid ][ VehicleSlot ], vehicleid = GetPlayerVehicleID( playerid );
	if( vehicleVariables[ PlayerSlot ][ playerid ][ Vehicle ] != vehicleid ) return SendClientMessage( playerid, ~1, "You have to be in your personal vehicle!" );

	vColor[ 0 ] = vehicleVariables[ PlayerSlot ][ playerid ][ VehicleColor ][ 0 ];
	vColor[ 1 ] = vehicleVariables[ PlayerSlot ][ playerid ][ VehicleColor ][ 1 ];

	vehicleVariables[ PlayerSlot ][ playerid ][ VehicleColor ][ 0 ] = vColor[ 1 ];
	vehicleVariables[ PlayerSlot ][ playerid ][ VehicleColor ][ 1 ] = vColor[ 0 ];

	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_personalvehicles` SET `vehicleCol1` = %d, `vehicleCol2` = %d WHERE `vehicleID` = %d", vehicleVariables[ PlayerSlot ][ playerid ][ VehicleColor ][ 0 ], vehicleVariables[ PlayerSlot ][ playerid ][ VehicleColor ][ 1 ], playerVariables[ playerid ][ Vehicle ][ PlayerSlot ] );
	mysql_tquery( g_Handle, gsQuery, "", "" );
	#if defined DEBUG_SERVER
		printf( "[Debug /swapcolors]: %s", gsQuery );
	#endif
	SendClientMessage( playerid, COLOR_YELLOW, "You've succesfull swapped your car's colors." );
	ChangeVehicleColor( vehicleid, vehicleVariables[ PlayerSlot ][ playerid ][ VehicleColor ][ 0 ], vehicleVariables[ PlayerSlot ][ playerid ][ VehicleColor ][ 1 ] );
	return true;
}
CMD:checkv( playerid, params[] )
{
	AHCheck( playerid, 1, 3 );
	new Player;
	if( sscanf( params, "u", Player) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/checkv [PlayerID/Name]" );

	// < Make the checks )
	if( !IsPlayerConnected( Player ) )				return SendClientMessage( playerid, COLOR_GREY, "Player is not connected!" );
	if( !GetPersonalVehiclesNumber( Player ) )		return SendClientMessage( playerid, COLOR_GREY, "Jucatorul nu are nicio masina personala!" );

	SendClientMessage( playerid, COLOR_TEAL, "----------------------------------------------------------------" );
	SendClientMessagef( playerid, COLOR_LIGHTRED, "%s's Personal Vehicles!", playerVariables[ Player ][ pNormalName ] );
	// < Show Vehicle Info )
	for( new slot=0; slot < MAX_SLOTS; slot++ )
	{
		if( playerVariables[ Player ][ Vehicle ][ slot ] != 0 )
		{
			new vID = vehicleVariables[ slot ][ Player ][ Vehicle ];
			SendClientMessagef( playerid, ~1, "[ID:%d S:%d] %s | age: %d days | km: %.2f | colors: %d, %d", vID, slot, VehicleName( vehicleVariables[ slot ][ Player ][ VehicleModelID ] ), vehicleVariables[ slot ][ Player ][ VehicleAge ], vehicleVariables[ slot ][ Player ][ VehicleOdometter ], vehicleVariables[ slot ][ Player ][ VehicleColor ][ 0 ], vehicleVariables[ slot ][ Player ][ VehicleColor ][ 1 ] );
		}
	}
	SendClientMessage( playerid, COLOR_TEAL, "----------------------------------------------------------------" );
	return true;
}
CMD:resetplayervehicle( playerid, params[] )
{
	AHCheck( playerid, 7, 3 );

	new Player, vehicleSlot;
	if( sscanf( params, "ud", Player, vehicleSlot ) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/resetplayervehicles [PlayerID/Name] [vehicleSlot]" );

	// < Make the checks )
	if( !IsPlayerConnected( Player ) )				return SendClientMessage( playerid, COLOR_GREY, "Player is not connected!" );
	if( !GetPersonalVehiclesNumber( Player ) )		return SendClientMessage( playerid, COLOR_GREY, "Jucatorul nu are nicio masina personala!" );

	// < Delete from database )
	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "DELETE FROM `server_personalvehicles` WHERE `vehicleID` = %d", playerVariables[ Player ][ Vehicle ][ vehicleSlot ] );
	mysql_tquery( g_Handle, gsQuery, "", "" );

	// < Show Vehicle Info )
	if( playerVariables[ Player ][ Vehicle ][ vehicleSlot ] != 0 )
		OnPersonalVehicleDeleted( Player, vehicleSlot, GetPlayerMysqlID(Player), vehicleVariables[ vehicleSlot ][ Player ][ VehicleModelID ] );

	SendClientMessagef( playerid, COLOR_LIGHTRED, "Ai resetat vehiculul de pe slot-ul [%d] al jucatorului %s[%d]", vehicleSlot, playerVariables[ Player ][ pNormalName ], Player );
	SendClientMessagef( Player, COLOR_LIGHTRED, "Adminul %s[%d] ti-a resetat masina personala de pe slotul [%d]!", playerVariables[ playerid ][ pNormalName ], playerid, vehicleSlot );
	return true;
}
CMD:resetplayervehicles( playerid, params[] )
{
	AHCheck( playerid, 7, 3 );

	new Player;
	if( sscanf( params, "u", Player ) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/resetplayervehicles [PlayerID/Name]" );

	// < Make the checks )
	if( !IsPlayerConnected( Player ) )				return SendClientMessage( playerid, COLOR_GREY, "Player is not connected!" );
	if( !GetPersonalVehiclesNumber( Player ) )		return SendClientMessage( playerid, COLOR_GREY, "Jucatorul nu are nicio masina personala!" );

	// < Show Vehicle Info )
	for( new slot=0; slot < MAX_SLOTS; slot++ )
		if( playerVariables[ Player ][ Vehicle ][ slot ] != 0 )
			OnPersonalVehicleDeleted( Player, slot, GetPlayerMysqlID(Player), vehicleVariables[ slot ][ Player ][ VehicleModelID ] );

	// < Delete from database )
	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "DELETE FROM `server_personalvehicles` WHERE `vehicleOwner` = %d", GetPlayerMysqlID(Player) );
	mysql_tquery( g_Handle, gsQuery, "", "" );

	SendClientMessagef( playerid, COLOR_LIGHTRED, "Ai resetat toate vehiculele jucatorului %s[%d]", playerVariables[ Player ][ pNormalName ], Player );
	SendClientMessagef( Player, COLOR_LIGHTRED, "Adminul %s[%d] ti-a resetat toate masinile personale!", playerVariables[ playerid ][ pNormalName ], playerid );
	return true;
}
CMD:colors( playerid, params[] )
{
	gsBigString[ 0 ] = EOS;
	format( gsBigString, sizeof gsBigString, ""COL_W"Normal colors:\n");
	format( gsBigString, sizeof gsBigString, "%s{000000}000 {FFFFFF}001 {33BDCC}002 {FB0404}003 {5C6C62}004 {B07384}005 {E8A33B}006 {6F92A8}007 {C8C2AC}008 {727F6D}009 {707A7B}010 {7A7C71}011 {669999}012 {706E61}013 {D4D0AB}014 {A7A78F}015 {658A5F}016 {9A4042}017 {AA4354}018 {C8C09C}019\n", gsBigString );
	format( gsBigString, sizeof gsBigString, "%s{6B7B8A}020 {995B5E}021 {884C56}022 {B2A88F}023 {66685D}024 {5C5E53}025 {ABAA8E}026 {787065}027 {C7C2A9}028 {9E987E}029 {60453C}030 {704743}031 {C7C2A9}032 {A8A890}033 {94947C}034 {8B856F}035 {595B50}036 {5C6957}037 {ACB28E}038 {959B8F}039\n", gsBigString );
	format( gsBigString, sizeof gsBigString, "%s{403D34}040 {C7C2A9}041 {924648}042 {6F3039}043 {C7C2A9}044 {6F3E3A}045 {AA9E6E}046 {89815D}047 {C9C097}048 {D5D0B0}049 {A5A58D}050 {5D7962}051 {869284}052 {43505F}053 {535561}054 {988066}055 {A09F8D}056 {A2906C}057 {843C3D}058 {657373}059\n", gsBigString );
	format( gsBigString, sizeof gsBigString, "%s{A6A086}060 {997E53}061 {74393B}062 {9DA188}063 {CEC9A9}064 {B6AF61}065 {69524C}066 {979C96}067 {D4CE9C}068 {C8B191}069 {9E4849}070 {919C94}071 {706F5D}072 {A2A980}073 {6F3C3B}074 {414141}075 {ACA384}076 {AEA07B}077 {8C4541}078 {325068}079\n", gsBigString );
	format( gsBigString, sizeof gsBigString, "%s{935558}080 {AB9E77}081 {974C4C}082 {525F59}083 {735D52}084 {A84F63}085 {577C46}086 {5C7883}087 {804547}088 {AAA27E}089 {B2AC92}090 {565A59}091 {7C7B69}092 {337B7A}093 {3F6167}094 {4D5B5B}095 {BEB999}096 {99A99F}097 {92A298}098 {D6BB8C}099\n", gsBigString );
	format( gsBigString, sizeof gsBigString, "%s{6B9192}100 {525659}101 {C6A67D}102 {3D6473}103 {A38F6C}104 {838673}105 {376879}106 {AEA07B}107 {54697E}108 {686964}109 {8F7B60}110 {989785}111 {879691}112 {7A6957}113 {6E8467}114 {9E424F}115 {9C414E}116 {904446}117 {BEC0B2}118 {88735E}119\n", gsBigString );
	format( gsBigString, sizeof gsBigString, "%s{AB977C}120 {80373E}121 {767966}122 {715C40}123 {8E4244}124 {43586D}125 {E27791}126 {202020}127\n", gsBigString );
	format( gsBigString, sizeof gsBigString, "%s"COL_W"Hidden colors:\n", gsBigString );
	format( gsBigString, sizeof gsBigString, "%s{177318}128 {220605}129 {11537A}130 {452A0D}131 {561E1D}132 {020700}133 {252259}134 {2C89AA}135 {894DBE}136 {36973A}137 {B7B7B7}138 {474C8E}139 {84878C}140 {817867}141 {817B27}142 {69506E}143 {593D6F}144 {8DB96E}145 {825076}146 {6B286D}147\n", gsBigString );
	format( gsBigString, sizeof gsBigString, "%s{1D1D14}148 {1F1307}149 {202519}150 {2C4530}151 {1F4C97}152 {2E5F43}153 {1B9A4A}154 {1C9A97}155 {999977}156 {7C8499}157 {992E1E}158 {2E1E08}159 {122507}160 {9A3E4D}161 {1E4C99}162 {198182}163 {1A2A28}164 {156171}165 {1E6582}166 {6C4099}167\n", gsBigString );
	format( gsBigString, sizeof gsBigString, "%s{49190B}168 {79739A}169 {746D99}170 {53397B}171 {21230B}172 {3F190C}173 {46210E}174 {991F1E}175 {8D4C8E}176 {7F5B7F}177 {7B3E81}178 {3C1738}179 {723518}180 {7A1819}181 {833419}182 {8C301B}183 {7F3E54}184 {7B6D7E}185 {020C03}186 {072406}187\n", gsBigString );
	format( gsBigString, sizeof gsBigString, "%s{143112}188 {182F1A}189 {652A4E}190 {348456}191 {999691}192 {808C98}193 {99991D}194 {7E994C}195 {839393}196 {76831E}197 {2C3D99}198 {3B3A0A}199 {8A794E}200 {0E1F4A}201 {16371B}202 {15273B}203 {385774}204 {06081F}205 {071427}206 {203A4B}207\n", gsBigString );
	format( gsBigString, sizeof gsBigString, "%s{2C508A}208 {15426C}209 {0F3252}210 {26175D}211 {692115}212 {8C8C94}213 {526015}214 {090F03}215 {8D573B}216 {53888E}217 {985C52}218 {99581E}219 {993A62}220 {99904F}221 {9A311E}222 {0C1842}223 {521F1E}224 {42420C}225 {4D991D}226 {082A1C}227\n", gsBigString );
	format( gsBigString, sizeof gsBigString, "%s{95821C}228 {197F19}229 {3C141F}230 {745118}231 {893F8E}232 {7D1A6C}233 {0C370A}234 {28450D}235 {071E24}236 {784472}237 {8A6539}238 {732518}239 {319491}240 {57941D}241 {58163C}242 {1B8A2E}243 {38160D}244 {031904}245 {355D8E}246 {2E3F5A}247\n", gsBigString );
	format( gsBigString, sizeof gsBigString, "%s{531C2A}248 {4E0E29}249 {706D67}250 {3C3E43}251 {2E2D33}252 {7B7E7D}253 {4A4542}254 {28334F}255\n", gsBigString );
	ShowPlayerDialog( playerid, DIALOG_NULL, DIALOG_STYLE_MSGBOX, "Vehicle Colors list - /carcolor", gsBigString, "Close", "" );
	return true;
}
CMD:skills( playerid, params[] ) return String_PlayerSkills(playerid);
// < Bank Commands )
CMD:gpsbank( playerid, params[] ) return GPS_Location( playerid, "LV Bank", 2305.9866, -16.2027, 26.7496 );
CMD:deposit( playerid, params[] )
{
	new BusID = GetBuildingEnterID( playerid, 1, 3, 20.0 );
	if( GetGVarInt( "bus_Type", BusID ) != 3 ) // Tuning Business									
		return SendClientMessage( playerid, COLOR_GREY, "Trebuie sa fii intr-o banca, foloseste comanda /gps" );

	new Cash;
	if(sscanf(params, "d", Cash))
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/deposit [amount]" );

	if( Cash <= 0 )
		return SendClientMessage( playerid, COLOR_GREY, "Invalid amount specified." );

	if( playerVariables[ playerid ][ pMoney ] < Cash )
		return SendClientMessage( playerid, COLOR_GREY, "You don't have enough money for this transaction." );

	playerVariables[ playerid ][ pBankMoney ] += Cash;
	playerVariables[ playerid ][ pMoney ] -= Cash;

	SendClientMessagef( playerid, COLOR_DCHAT, "You have deposited $%s into your bank account. Your account balance is now $%s.", FormatNumber( Cash ), FormatNumber( playerVariables[ playerid ][ pBankMoney ] ) );
	return true;
}
CMD:withdraw( playerid, params[] )
{
	new BusID = GetBuildingEnterID( playerid, 1, 3, 20.0 );
	if( GetGVarInt( "bus_Type", BusID ) != 3 ) // Tuning Business									
		return SendClientMessage( playerid, COLOR_GREY, "Trebuie sa fii intr-o banca, foloseste comanda /gps" );

	new Cash;
	if(sscanf(params, "d", Cash))
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/withdraw [amount]" );

	if( Cash <= 0 )
		return SendClientMessage( playerid, COLOR_GREY, "Invalid amount specified." );

	if( playerVariables[ playerid ][ pBankMoney ] < Cash )
		return SendClientMessage( playerid, COLOR_GREY, "Your account balance is insufficient for this transaction." );

	playerVariables[ playerid ][ pMoney ] += Cash;
	playerVariables[ playerid ][ pBankMoney ] -= Cash;

	SendClientMessagef( playerid, COLOR_DCHAT, "You have withdrawn $%s from your bank account. Your account balance is now $%s.", FormatNumber( Cash ), FormatNumber( playerVariables[ playerid ][ pBankMoney ] ) );
	return true;
}
CMD:transfer( playerid, params[] )
{
	if( playerVariables[ playerid ][ pPlayTime ] < 1800 )
		return SendClientMessage( playerid, COLOR_GREY, "Trebuie sa ai cel putin 30 de minute jucate pentru a folosi comanda!" );

	if( playerVariables[ playerid ][ pBankMoney ] < 5 )
		return SendClientMessage( playerid, COLOR_GREY, "Your need level 5 to be able to transfer money!" );

	new BusID = GetBuildingEnterID( playerid, 1, 3, 20.0 );
	if( GetGVarInt( "bus_Type", BusID ) != 3 ) // Tuning Business									
		return SendClientMessage( playerid, COLOR_GREY, "Trebuie sa fii intr-o banca, foloseste comanda /gps" );

	new Player, Cash;
	if( sscanf( params, "ud", Player, Cash ) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/transfer [ playerid ] [amount]" );

	if( Cash <= 0 || playerVariables[ playerid ][ pBankMoney ] < Cash )
		return SendClientMessage( playerid, COLOR_GREY, "Your account balance is insufficient for this transaction." );

	if( !IsPlayerConnected( Player ) )
		return SendClientMessage( playerid, COLOR_GREY, "That player it's not connected!" );

	playerVariables[ playerid ][ pBankMoney ] -= Cash;
	playerVariables[ Player ][ pBankMoney ] += Cash;

	SendClientMessagef( playerid, COLOR_DCHAT, "You have transferred $%s into %s's account. Your account balance is now $%s.", FormatNumber( Cash ), username( Player ), FormatNumber( playerVariables[ playerid ][ pBankMoney ] ) );
	SendClientMessagef( Player, COLOR_DCHAT, "%s has transferred $%s into your account. Your account balance is now $%s.", username( playerid ), FormatNumber( Cash ), FormatNumber( playerVariables[ Player ][ pBankMoney ] ) );

	gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, "($): "COL_W"%s has transfered %s into %s's account.($)", username( playerid ), FormatNumber( Cash ), username( Player ) );
	submitToHelpersAndAdmins( gsString, COLOR_HOTORANGE );

	gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, "%s[user:%d] transfered $%s to %s[user:%d].", playerVariables[ playerid ][ pNormalName ], GetPlayerMysqlID(playerid), FormatNumber( Cash ), playerVariables[ Player ][ pNormalName ], GetPlayerMysqlID(Player) );
	InsertPlayerLog( GetPlayerMysqlID(playerid), GetPlayerMysqlID(Player), gsString );
	return true;
}
CMD:balance( playerid, params[] )
{
	new BusID = GetBuildingEnterID( playerid, 1, 3, 20.0 );
	if( GetGVarInt( "bus_Type", BusID ) != 3 ) // Tuning Business									
		return SendClientMessage( playerid, COLOR_GREY, "Trebuie sa fii intr-o banca, foloseste comanda /gps" );

	SendClientMessagef( playerid, COLOR_DCHAT, "Your current bank account balance is: $%s", FormatNumber( playerVariables[ playerid ][ pBankMoney ] ) );
	return true;
}
// < Clan System )
CMD:clan( playerid, params[] )
{
	if( !playerVariables[ playerid ][ pClan ] )
		return SendClientMessage( playerid, COLOR_GREY, "You don't have any Clan!" );

	ShowPlayerDialog( playerid, DIALOG_CLAN, DIALOG_STYLE_LIST, "Clan System", "Clan Help\nClan Members\nClan Settings\nClan Tag\n{F0B301}[+] Add 10 clan slots for 50 PP", "Select", "Close" );
	return true;
}
function OnClanCreated( playerid, clanName[] )
{
	new clanID = cache_insert_id();
	playerVariables[ playerid ][ pClan ] = clanID;
	playerVariables[ playerid ][ pClanRank ] = 7;

	InfoTD_MSG( playerid, 10000, "You have created clan ~r~~h~%s(ID:%d)~w~~h~~n~Use /cname for set the name of clan and /ctag to set the clan tag~n~Also you can change the clan color using /ccolor", clanName, clanID );
	mysql_pquery( g_Handle, "SELECT * FROM `server_clans`", "LoadServerClans" );

	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerClan` = %d, `playerClanRank` = 7, `playerClanJoined` = now() WHERE `id` = %d", clanID, GetPlayerMysqlID(playerid) );
	mysql_tquery( g_Handle, gsQuery, "", "" );
}
CMD:cname( playerid, params[] )
{
	if( playerVariables[ playerid ][ pClan ] == 0 )				return SendClientMessage( playerid, COLOR_WHITE, "Nu detii un clan si nu poti folosi comanda!" );
	if( playerVariables[ playerid ][ pClanRank ] != 7 )			return SendClientMessage( playerid, COLOR_WHITE, "Trebuie sa fii Leader-ul clanului pentru a folosi comanda!" );
	new clanName[ 24 ], escclanName[ 24 ];
	if( sscanf( params, "s[24]", clanName ) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/cname [ clanName ]") ;

	new clanID = playerVariables[ playerid ][ pClan ];
	mysql_escape_string( clanName, escclanName );
	SetGVarString( "clan_Name", escclanName, clanID );

	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_clans` SET `clanName` = '%s' WHERE `clanKey` = %d", escclanName, clanID );
	mysql_tquery( g_Handle, gsQuery, "", "" );

	SendClientMessagef( playerid, ~1, "You have changed the clan's name to %s.", escclanName );
	return true;
}
CMD:cinvite( playerid, params[] )
{
	if( !playerVariables[ playerid ][ pClan ] )					return SendClientMessage( playerid, COLOR_WHITE, "Nu detii un clan si nu poti folosi comanda!" );
	if( playerVariables[ playerid ][ pClanRank ] < 6 )			return SendClientMessage( playerid, COLOR_WHITE, "Trebuie sa fii Leader-ul clanului pentru a folosi comanda!" );
	if( GetGVarInt( "clan_Members", playerVariables[ playerid ][ pClan ] ) == GetGVarInt( "clan_Slots", playerVariables[ playerid ][ pClan ] ) )
		return SendClientMessagef( playerid, COLOR_WHITE, "Ai atins numarul maxim de sloturi. Foloseste /clan > 'Add 10 clan slots for 50 PP' pentru a cumpara 10 sloturi.", GetGVarInt( "clan_Slots", playerVariables[ playerid ][ pClan ] ) );

	new Player;
	if( sscanf( params, "u", Player ) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/cinvite [ playerID/Name ]") ;

	if( !IsPlayerConnected( Player ) ) 							return SendClientMessage( playerid, COLOR_WHITE, "Player it's not connected!" );
	if( playerVariables[ Player ][ pClan ] != 0 ) 				return SendClientMessage( playerid, COLOR_WHITE, "This player it's already in another clan!" );
	if( !ProxDetectorS( 5.0, playerid, Player ) )	            return SendClientMessage( playerid, COLOR_GREY,  "This player is not near you." );
	new clanID = playerVariables[ playerid ][ pClan ];

	SendClientMessagef( playerid, ~1, "You have invited %s to join your clan.", username( Player ) );
	SendClientMessage( Player, COLOR_BLUE, "Invitatie noua in clan:" );

	SendClientMessagef( Player, COLOR_BLUE, "%s te-a invitat in clanul %s Foloseste /accept cinvite pentru a accepta.", username( playerid ), GetGVarStringEx( "clan_Name", clanID ) );
	SetPVarInt( Player, "clanInviteID", clanID );
	SetPVarString( Player, "clanInviteName", username( playerid ) );
	return true;
}
CMD:claninfo( playerid, params[] )
{
	if( !playerVariables[ playerid ][ pClan ] )
		return SendClientMessage( playerid, COLOR_GREY, "You don't have a clan!" );

	SendClientMessagef( playerid, COLOR_YELLOW, "Your clan is %s and you have rank %d.", GetGVarStringEx( "clan_Name", playerVariables[ playerid ][ pClan ] ), playerVariables[ playerid ][ pClanRank ] );
	return true;
}
CMD:quitclan( playerid, params[] )
{
	if( !playerVariables[ playerid ][ pClan ] )				return SendClientMessage( playerid, COLOR_WHITE, "You don't have a clan to quit." );
	if( playerVariables[ playerid ][ pClanRank ] == 7 )		return SendClientMessage( playerid, COLOR_WHITE, "You can't left the clan when you are a clan leader." );
	new clanID = playerVariables[ playerid ][ pClan ];

	SendClientMessagef( playerid, COLOR_NICESKY, "You have left the clan %s.", GetGVarStringEx( "clan_Name", clanID ) );
	SetGVarInt( "clan_Members", GetGVarInt( "clan_Members", clanID ) - 1, clanID );

	gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, "%s has left the clan (/quitclan).", username( playerid ) );
	SendToClan( clanID, COLOR_GENANNOUNCE, gsString );
	InsertClanLog( playerid, clanID, gsString );

	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_clans` SET `clanMembers` = `clanMembers` - 1 WHERE `clanKey` = %d", clanID );
	mysql_tquery( g_Handle, gsQuery, "", "" );

	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerClan` = 0, `playerClanRank` = 0, `playerClanJoined` = 'N/A' WHERE `id` = %d", GetPlayerMysqlID(playerid) );
	mysql_tquery( g_Handle, gsQuery, "", "" );

    if(Iter_Contains(playerClans[clanID], playerid)) Iter_Remove(playerClans[clanID], playerid);

	playerVariables[ playerid ][ pClan ] = 0;
	playerVariables[ playerid ][ pClanRank ] = 0;
	playerVariables[ playerid ][ pClanTag ] = 0;
	SetPlayerName( playerid, playerVariables[ playerid ][ pNormalName ] );
	return true;
}
CMD:cmembers( playerid, params[] )
{
	if( !playerVariables[ playerid ][ pClan ] )
		return SendClientMessage( playerid, COLOR_TEAL, "You are not member of any Clan!" );

	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "SELECT * FROM `server_accounts` WHERE `playerClan` = %d ORDER BY `playerClanRank` DESC", playerVariables[ playerid ][ pClan ] );
	return mysql_pquery( g_Handle, gsQuery, "LoadClanMembers", "i", playerid );
}
CMD:setclanslots( playerid, params[] )
{
	AHCheck( playerid, 6, 5 );
	if(playerVariables[playerid][pAdminLevel] < 6) 
		return SendClientMessage( playerid, COLOR_GREY, "This admin it's higher than you!" );

	new clanID, clanSlots;
	if( sscanf( params, "dd", clanID, clanSlots ) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/setclanslots [ clanID ] [ clanSlots ]") ;

	if( GetGVarInt( "clan_Slots", clanID ) <= 15 && clanSlots < GetGVarInt( "clan_Slots", clanID ) )
		return SendClientMessage( playerid, COLOR_GREY, "Nu poti oferi mai putin de 15 sloturi acestui clan!" );

	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_clans` SET `clanSlots` = %d WHERE `clanKey` = %d", clanSlots, clanID );
	mysql_tquery( g_Handle, gsQuery, "", "" );

	SetGVarInt( "clan_Slots", clanSlots, clanID );
	AdminBroadCast( 6, COLOR_LIGHTRED, "AdmCmd: %s(%d) has changed clanID:%d's slots to: %d", playerVariables[ playerid ][ pNormalName ], playerVariables[ playerid ][ pAdminLevel ], clanID, clanSlots );
	InsertCMDLog( GetPlayerMysqlID(playerid), 0, "/setclanslots", "N/A" );
	return true;
}
// < House System Commands )
CMD:createhouse( playerid, params[] )
{
	AHCheck( playerid, 6, 5 );
	if(playerVariables[playerid][pAdminLevel] < 6) 
		return SendClientMessage( playerid, COLOR_GREY, "This admin it's higher than you!" );

	new Type, Price, hInterior, hLevel, Float:Interior[ 3 ];
	if( sscanf( params, "ddd", Type, Price, hLevel ) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/createhouse [ Type(1-3) ] [ Price ] [ Level ]") ;

	switch( Type )
	{
		case 1:
		{
			switch( random( 3 ) )
			{
				case 0: hInterior = 8, Interior[ 0 ] = -42.5845, Interior[ 1 ] = 1405.9449, Interior[ 2 ] = 1084.4297;
				case 1: hInterior = 6, Interior[ 0 ] = -68.7974, Interior[ 1 ] = 1351.4863, Interior[ 2 ] = 1080.2109;
				case 2: hInterior = 1, Interior[ 0 ] = 223.0311, Interior[ 1 ] = 1287.5242, Interior[ 2 ] = 1082.1406;
			}
		}
		case 2:
		{
			switch( random( 3 ) )
			{
				case 0: hInterior = 2, Interior[ 0 ] = 2455.6494, Interior[ 1 ] = -1706.0419, Interior[ 2 ] = 1013.5078;
				case 1: hInterior = 6, Interior[ 0 ] = 2196.6106, Interior[ 1 ] = -1204.4508, Interior[ 2 ] = 1049.0234;
				case 2: hInterior = 10, Interior[ 0 ] = 23.8610, Interior[ 1 ] = 1341.1788, Interior[ 2 ] = 1084.3750;
			}
		}
		case 3:
		{
			switch( random( 3 ) )
			{
				case 0: hInterior = 2, Interior[ 0 ] = 446.6682, Interior[ 1 ] = 1397.7236, Interior[ 2 ] = 1084.3047;
				case 1: hInterior = 4, Interior[ 0 ] = -261.3126, Interior[ 1 ] = 1456.9246, Interior[ 2 ] = 1084.3672;
				case 2: hInterior = 5, Interior[ 0 ] = 140.0765, Interior[ 1 ] = 1366.4824, Interior[ 2 ] = 1083.8594;
			}
		}
	}
	new Float:Player_Pos[ 3 ],
	    random_virtual = random(9999);
	GetPlayerPos( playerid, Player_Pos[ 0 ], Player_Pos[ 1 ], Player_Pos[ 2 ] );

	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "INSERT INTO `server_houses`(`houseInterior`, `houseVirtual`, `houseType`, `houseLevel`, `housePrice`, `houseEnterX`, `houseEnterY`, `houseEnterZ`, `houseExitX`, `houseExitY`, `houseExitZ`) VALUES" );
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "%s(%d, %d, %d, %d, %d, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f)", gsQuery, hInterior, random_virtual, Type, hLevel, Price, Player_Pos[ 0 ], Player_Pos[ 1 ], Player_Pos[ 2 ], Interior[ 0 ], Interior[ 1 ], Interior[ 2 ] );
	mysql_tquery( g_Handle, gsQuery, "CreateServerHouse", "iffffffddddd", playerid, Player_Pos[ 0 ], Player_Pos[ 1 ], Player_Pos[ 2 ], Interior[ 0 ], Interior[ 1 ], Interior[ 2 ], Type, Price, hInterior, hLevel, random_virtual );
	return true;
}
// < Anim System )
CMD:animlist( playerid, params[] )
{
	SendClientMessage( playerid, COLOR_GROVE, "Anim List" );
	SendClientMessage( playerid, COLOR_WHITE, "Lifejump : Exhaust : Carlock : Rcarjack1 : Lcarjack1 : Rcarjack2 : Lcarjack2 : Hoodfrisked" );
	SendClientMessage( playerid, COLOR_WHITE, "Lightcig : Tapcig : Bat : Lean : Clearanim : Dancing : Box : Lowthrow : Highthrow" );
	SendClientMessage( playerid, COLOR_WHITE, "Leftslap : Handsup : Fall : Fallback : Sup : Rap : Push : Akick : Lowbodypush" );
	SendClientMessage( playerid, COLOR_WHITE, "Spray : Headbutt : Pee : Koface : Kostomach : Kiss : Rollfall : Lay2 : Hitch" );
	SendClientMessage( playerid, COLOR_WHITE, "Beach : Medic : Scratch : Sit : Drunk : Bomb : Getarrested : Laugh : Lookout" );
	SendClientMessage( playerid, COLOR_WHITE, "Aim : Crossarms : Lay : Hide : Vomit : Eating : Wave : Shouting : Chant" );
	SendClientMessage( playerid, COLOR_WHITE, "Frisked : Exhausted : Injured : Slapass : Deal : Dealstance : Crack : Wank : Gro" );
	return SendClientMessage( playerid, COLOR_WHITE, "Sit : Chat : Fucku : Taichi : Knife : Basket : JumpWater" );
}
CMD:stopanim( playerid, params[] )
{
	if( IsPlayerInAnyVehicle( playerid ) ) return SendClientMessage( playerid, COLOR_GREY, "You can't use this command in a vehicle." );
	ClearAnimations( playerid );
	return true;
}
CMD:carhand( playerid, params[] ) 		{CheckPlayerAnim( playerid ); return ApplyAnimation( playerid, "CAR", "Tap_hand", 4.1, 0, 1, 1, 1, 1 );}
CMD:lifejump( playerid, params[] ) 		{CheckPlayerAnim( playerid ); return LoopingAnim( playerid, "PED", "EV_dive", 4.0, 0, 1, 1, 1, 0 );}
CMD:exhaust( playerid, params[] ) 		{CheckPlayerAnim( playerid ); return LoopingAnim( playerid, "PED", "IDLE_tired", 3.0, 1, 0, 0, 0, 0 );}
CMD:rcarjack1( playerid, params[] ) 	{CheckPlayerAnim( playerid ); return OnePlayAnim( playerid, "PED", "CAR_pulloutL_LHS", 4.0, 0, 0, 0, 0, 0 );}
CMD:lcarjack1( playerid, params[] ) 	{CheckPlayerAnim( playerid ); return OnePlayAnim( playerid, "PED", "CAR_pulloutL_RHS", 4.0, 0, 0, 0, 0, 0 );}
CMD:rcarjack2( playerid, params[] ) 	{CheckPlayerAnim( playerid ); return OnePlayAnim( playerid, "PED", "CAR_pullout_LHS", 4.0, 0, 0, 0, 0, 0 );}
CMD:lcarjack2( playerid, params[] ) 	{CheckPlayerAnim( playerid ); return OnePlayAnim( playerid, "PED", "CAR_pullout_RHS", 4.0, 0, 0, 0, 0, 0 );}
CMD:hoodfrisked( playerid, params[] ) 	{CheckPlayerAnim( playerid ); return LoopingAnim( playerid, "POLICE", "crm_drgbst_01", 4.0, 0, 1, 1, 1, 0 );}
CMD:lightcig( playerid, params[] )		{CheckPlayerAnim( playerid ); return OnePlayAnim( playerid, "SMOKING", "M_smk_in", 3.0, 0, 0, 0, 0, 0 );}
CMD:tapcig( playerid, params[] )		{CheckPlayerAnim( playerid ); return OnePlayAnim( playerid, "SMOKING", "M_smk_tap", 3.0, 0, 0, 0, 0, 0 );}
CMD:bat( playerid, params[] )			{CheckPlayerAnim( playerid ); return LoopingAnim( playerid, "BASEBALL", "Bat_IDLE", 4.0, 1, 1, 1, 1, 0 );}

CMD:lean( playerid, params[] )
{
	CheckPlayerAnim( playerid );

	new pAnim;
	if(sscanf(params, "d",pAnim)) return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/lean <1-2>" );
	switch( pAnim )
	{
		case 1: LoopingAnim( playerid, "GANGS", "leanIDLE", 4.0, 0, 1, 1, 1, 0 );
		case 2: LoopingAnim( playerid, "MISC", "Plyrlean_loop", 4.0, 0, 1, 1, 1, 0 );
		default: SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/lean <1-2>" );
	}
	return true;
}
CMD:clearanim( playerid, params[] )
{
	CheckPlayerAnim( playerid );
	return ApplyAnimation( playerid, "CARRY", "crry_prtial", 1.0, 0, 0, 0, 0, 0 );
}
CMD:dancing( playerid, params[] )
{
	CheckPlayerAnim( playerid );

	new pAnim;
	if(sscanf(params, "d",pAnim)) return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/dancing <1-7>" );
	switch( pAnim )
	{
		case 1: LoopingAnim( playerid, "STRIP", "strip_A", 4.1, 1, 1, 1, 1, 1 );
		case 2: LoopingAnim( playerid, "STRIP", "strip_B", 4.1, 1, 1, 1, 1, 1 );
		case 3: LoopingAnim( playerid, "STRIP", "strip_C", 4.1, 1, 1, 1, 1, 1 );
		case 4: LoopingAnim( playerid, "STRIP", "strip_D", 4.1, 1, 1, 1, 1, 1 );
		case 5: LoopingAnim( playerid, "STRIP", "strip_E", 4.1, 1, 1, 1, 1, 1 );
		case 6: LoopingAnim( playerid, "STRIP", "strip_F", 4.1, 1, 1, 1, 1, 1 );
		case 7: LoopingAnim( playerid, "STRIP", "strip_G", 4.1, 1, 1, 1, 1, 1 );
		default: SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/dancing <1-7>" );
	}
	return true;
}
CMD:pedmove( playerid, params[] )
{
	CheckPlayerAnim( playerid );

	new pAnim;
	if(sscanf(params, "d",pAnim)) return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/pedmove <1-26>" );
	switch( pAnim )
	{
		case 1: ApplyAnimation( playerid, "PED", "JOG_femaleA", 4.0, 1, 1, 1, 1, 1);
		case 2: ApplyAnimation( playerid, "PED", "JOG_maleA", 4.0, 1, 1, 1, 1, 1);
		case 3: ApplyAnimation( playerid, "PED", "WOMAN_walkfatold", 4.0, 1, 1, 1, 1, 1);
		case 4: ApplyAnimation( playerid, "PED", "run_fat", 4.0, 1, 1, 1, 1, 1);
		case 5: ApplyAnimation( playerid, "PED", "run_fatold", 4.0, 1, 1, 1, 1, 1);
		case 6: ApplyAnimation( playerid, "PED", "run_old", 4.0, 1, 1, 1, 1, 1);
		case 7: ApplyAnimation( playerid, "PED", "Run_Wuzi", 4.0, 1, 1, 1, 1, 1);
		case 8: ApplyAnimation( playerid, "PED", "swat_run", 4.0, 1, 1, 1, 1, 1);
		case 9: ApplyAnimation( playerid, "PED", "WALK_fat", 4.0, 1, 1, 1, 1, 1);
		case 10: ApplyAnimation( playerid, "PED", "WALK_fatold", 4.0, 1, 1, 1, 1, 1);
		case 11: ApplyAnimation( playerid, "PED", "WALK_gang1", 4.0, 1, 1, 1, 1, 1);
		case 12: ApplyAnimation( playerid, "PED", "WALK_gang2", 4.0, 1, 1, 1, 1, 1);
		case 13: ApplyAnimation( playerid, "PED", "WALK_old", 4.0, 1, 1, 1, 1, 1);
		case 14: ApplyAnimation( playerid, "PED", "WALK_shuffle", 4.0, 1, 1, 1, 1, 1);
		case 15: ApplyAnimation( playerid, "PED", "woman_run", 4.0, 1, 1, 1, 1, 1);
		case 16: ApplyAnimation( playerid, "PED", "WOMAN_runbusy", 4.0, 1, 1, 1, 1, 1);
		case 17: ApplyAnimation( playerid, "PED", "WOMAN_runfatold", 4.0, 1, 1, 1, 1, 1);
		case 18: ApplyAnimation( playerid, "PED", "woman_runpanic", 4.0, 1, 1, 1, 1, 1);
		case 19: ApplyAnimation( playerid, "PED", "WOMAN_runsexy", 4.0, 1, 1, 1, 1, 1);
		case 20: ApplyAnimation( playerid, "PED", "WOMAN_walkbusy", 4.0, 1, 1, 1, 1, 1);
		case 21: ApplyAnimation( playerid, "PED", "WOMAN_walkfatold", 4.0, 1, 1, 1, 1, 1);
		case 22: ApplyAnimation( playerid, "PED", "WOMAN_walknorm", 4.0, 1, 1, 1, 1, 1);
		case 23: ApplyAnimation( playerid, "PED", "WOMAN_walkold", 4.0, 1, 1, 1, 1, 1);
		case 24: ApplyAnimation( playerid, "PED", "WOMAN_walkpro", 4.0, 1, 1, 1, 1, 1);
		case 25: ApplyAnimation( playerid, "PED", "WOMAN_walksexy", 4.0, 1, 1, 1, 1, 1);
		case 26: ApplyAnimation( playerid, "PED", "WOMAN_walkshop", 4.0, 1, 1, 1, 1, 1);
		default: SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/pedmove [1-26]" );
	}
	return true;
}
CMD:box( playerid, params[] ) 			{CheckPlayerAnim( playerid ); return LoopingAnim( playerid, "GYMNASIUM", "GYMshadowbox", 4.0, 1, 1, 1, 1, 0 );}
CMD:lowthrow( playerid, params[] ) 		{CheckPlayerAnim( playerid ); return OnePlayAnim( playerid, "GRENADE", "WEAPON_throwu", 3.0, 0, 0, 0, 0, 0 );}
CMD:highthrow( playerid, params[] )
{
	CheckPlayerAnim( playerid );
	return OnePlayAnim( playerid, "GRENADE", "WEAPON_throw", 4.0, 0, 0, 0, 0, 0 );
}
CMD:leftslap( playerid, params[] )
{
	CheckPlayerAnim( playerid );
	return OnePlayAnim( playerid, "PED", "BIKE_elbowL", 4.0, 0, 0, 0, 0, 0 );
}
CMD:handsup( playerid, params[] )
{
	CheckPlayerAnim( playerid );
	return SetPlayerSpecialAction( playerid, SPECIAL_ACTION_HANDSUP );
}
CMD:fall( playerid, params[] )
{
	CheckPlayerAnim( playerid );
	return LoopingAnim( playerid, "PED", "KO_skid_front", 4.1, 0, 1 , 1, 1, 0 );
}
CMD:fallback( playerid, params[] )
{
	CheckPlayerAnim( playerid );
	return LoopingAnim( playerid, "PED", "FLOOR_hit_f", 4.0, 1, 0, 0, 0, 0 );
}
CMD:laugh( playerid, params[] )
{
	CheckPlayerAnim( playerid );
	return OnePlayAnim( playerid, "RAPPING", "Laugh_01", 4.0, 0, 0, 0, 0, 0 );
}
CMD:lookout( playerid, params[] )
{
	CheckPlayerAnim( playerid );
	return OnePlayAnim( playerid, "SHOP", "ROB_Shifty", 4.0, 0, 0, 0, 0, 0 );
}
CMD:aim( playerid, params[] )
{
	CheckPlayerAnim( playerid );
	return LoopingAnim( playerid, "SHOP", "ROB_Loop_Threat", 4.0, 1, 0, 0, 0, 0 );
}
CMD:crossarms( playerid, params[] )
{
	CheckPlayerAnim( playerid );
	return LoopingAnim( playerid, "COP_AMBIENT", "Coplook_loop", 4.0, 0, 1, 1, 1, -1 );
}
CMD:lay( playerid, params[] )
{
	CheckPlayerAnim( playerid );
	return LoopingAnim( playerid, "BEACH", "bather", 4.0, 1, 0, 0, 0, 0 );
}
CMD:hide( playerid, params[] )
{
	CheckPlayerAnim( playerid );
	return LoopingAnim( playerid, "ped", "cower", 3.0, 1, 0, 0, 0, 0 );
}
CMD:vomit( playerid, params[] )
{
	CheckPlayerAnim( playerid );
	return OnePlayAnim( playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0 );
}
CMD:wave( playerid, params[] )
{
	CheckPlayerAnim( playerid );
	return LoopingAnim( playerid, "ON_LOOKERS", "wave_loop", 4.0, 1, 0, 0, 0, 0 );
}
CMD:shouting( playerid, params[] )
{
	CheckPlayerAnim( playerid );
	return LoopingAnim( playerid, "RIOT", "RIOT_shout", 4.0, 1, 0, 0, 0, 0 );
}
CMD:chant( playerid, params[] )
{
	CheckPlayerAnim( playerid );
	return LoopingAnim( playerid, "RIOT", "RIOT_CHANT", 4.0, 1, 1, 1, 1, 0 );
}
CMD:frisked( playerid, params[] )
{
	CheckPlayerAnim( playerid );
	return LoopingAnim( playerid, "POLICE", "crm_drgbst_01", 4.0, 0, 1, 1, 1, 0 );
}
CMD:exhausted( playerid, params[] )
{
	CheckPlayerAnim( playerid );
	return LoopingAnim( playerid, "PED", "IDLE_tired", 3.0, 1, 0, 0, 0, 0 );
}
CMD:injured( playerid, params[] )
{
	CheckPlayerAnim( playerid );
	return LoopingAnim( playerid, "SWEET", "Sweet_injuredloop", 4.0, 1, 0, 0, 0, 0 );
}
CMD:slapass( playerid, params[] )
{
	CheckPlayerAnim( playerid );
	return OnePlayAnim( playerid, "SWEET", "sweet_ass_slap", 4.0, 0, 0, 0, 0, 0 );
}
CMD:deal( playerid, params[] )
{
	CheckPlayerAnim( playerid );
	return OnePlayAnim( playerid, "DEALER", "DEALER_DEAL", 4.0, 0, 0, 0, 0, 0 );
}
CMD:dealstance( playerid, params[] )
{
	CheckPlayerAnim( playerid );
	return LoopingAnim( playerid, "DEALER", "DEALER_IDLE", 4.0, 1, 0, 0, 0, 0 );
}
CMD:crack( playerid, params[] )
{
	CheckPlayerAnim( playerid );
	return LoopingAnim( playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0 );
}
CMD:wank( playerid, params[] )
{
	CheckPlayerAnim( playerid );
	return LoopingAnim( playerid, "PAULNMAC", "wank_loop", 1.800001, 1, 0, 0, 1, 600 );
}
CMD:salute( playerid, params[] )
{
	CheckPlayerAnim( playerid );
	return ApplyAnimation( playerid, "ON_LOOKERS", "Pointup_loop", 4.0, 1, 0, 0, 0, 0 );
}
CMD:gro( playerid, params[] )
{
	CheckPlayerAnim( playerid );
	return LoopingAnim( playerid, "BEACH", "ParkSit_M_loop", 4.0, 1, 0, 0, 0, 0 );
}
CMD:crabs( playerid, params[] )
{
	CheckPlayerAnim( playerid );
	return ApplyAnimation( playerid, "MISC", "Scratchballs_01", 4.0, 0, 0, 0, 0, 0 );
}
CMD:robman( playerid, params[] )
{
	CheckPlayerAnim( playerid );
	return ApplyAnimation( playerid, "SHOP", "ROB_Loop_Threat", 4.0, 1, 0, 0, 0, 0 );
}
CMD:finger( playerid, params[] )
{
	CheckPlayerAnim( playerid );
	return ApplyAnimation( playerid, "PED", "fucku", 4.0, 0, 0, 0, 0, 0 );
}
CMD:getjiggy( playerid, params[] )
{
	CheckPlayerAnim( playerid );

	new pAnim;
	if(sscanf(params, "d",pAnim)) return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/getjiggy [1-9]" );
	switch( pAnim )
	{
		case 1: ApplyAnimation( playerid, "DANCING", "DAN_Down_A", 4.0, 1, 0, 0, 0, 0 );
		case 2: ApplyAnimation( playerid, "DANCING", "DAN_Left_A", 4.0, 1, 0, 0, 0, 0 );
		case 3: ApplyAnimation( playerid, "DANCING", "DAN_Loop_A", 4.0, 1, 0, 0, 0, 0 );
		case 4: ApplyAnimation( playerid, "DANCING", "DAN_Right_A", 4.0, 1, 0, 0, 0, 0 );
		case 5: ApplyAnimation( playerid, "DANCING", "DAN_Up_A", 4.0, 1, 0, 0, 0, 0 );
		case 6: ApplyAnimation( playerid, "DANCING", "dnce_M_a", 4.0, 1, 0, 0, 0, 0 );
		case 7: ApplyAnimation( playerid, "DANCING", "dnce_M_b", 4.0, 1, 0, 0, 0, 0 );
		case 8: ApplyAnimation( playerid, "DANCING", "dnce_M_c", 4.0, 1, 0, 0, 0, 0 );
		case 9: ApplyAnimation( playerid, "DANCING", "dnce_M_d", 4.0, 1, 0, 0, 0, 0 );
		default: SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/getjiggy [1-9]" );
	}
	return true;
}
CMD:reload( playerid, params[] )
{
	CheckPlayerAnim( playerid );

	new pAnim;
	if(sscanf(params, "d",pAnim)) return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/reload - 1 (Desert Eagle), 2 (SPAS12), 3 (UZI/AK-47/M4A1)" );
	switch( pAnim )
	{
		case 1: ApplyAnimation( playerid, "PYTHON", "python_reload", 4.0, 0, 0, 0, 0, 0 );
		case 2: ApplyAnimation( playerid, "BUDDY", "buddy_reload", 4.0, 0, 0, 0, 0, 0 );
		case 3: ApplyAnimation( playerid, "UZI", "UZI_reload", 4.0, 0, 0, 0, 0, 0 );
		default: SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/reload - 1 (Desert Eagle), 2 (SPAS12), 3 (UZI/AK-47/M4A1)" );
	}
	return true;
}
CMD:sup( playerid, params[] )
{
	CheckPlayerAnim( playerid );

	new pAnim;
	if(sscanf(params, "d",pAnim)) return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/sup <1-3>" );
	switch( pAnim )
	{
		case 1: OnePlayAnim( playerid, "GANGS", "hndshkba", 4.0, 0, 0, 0, 0, 0 );
		case 2: OnePlayAnim( playerid, "GANGS", "hndshkda", 4.0, 0, 0, 0, 0, 0 );
		case 3: OnePlayAnim( playerid, "GANGS", "hndshkfa_swt", 4.0, 0, 0, 0, 0, 0 );
		default: SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/sup <1-3>" );
	}
	return true;
}
CMD:rap( playerid, params[] )
{
	CheckPlayerAnim( playerid );

	new pAnim;
	if(sscanf(params, "d", pAnim)) return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/rap <1-4>" );
	switch( pAnim )
	{
		case 1: LoopingAnim( playerid, "RAPPING", "RAP_A_Loop", 4.0, 1, 0, 0, 0, 0 );
		case 2: LoopingAnim( playerid, "RAPPING", "RAP_C_Loop", 4.0, 1, 0, 0, 0, 0 );
		case 3: LoopingAnim( playerid, "GANGS", "prtial_gngtlkD", 4.0, 1, 0, 0, 0, 0 );
		case 4: LoopingAnim( playerid, "GANGS", "prtial_gngtlkH", 4.0, 1, 0, 0, 1, 1 );
		default: SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/rap <1-4>" );
	}
	return true;
}
CMD:push( playerid, params[] )
{
	CheckPlayerAnim( playerid );
	return OnePlayAnim( playerid, "GANGS", "shake_cara", 4.0, 0, 0, 0, 0, 0 );
}
CMD:akick( playerid, params[] )
{
	CheckPlayerAnim( playerid );
	return OnePlayAnim( playerid, "POLICE", "Door_Kick", 4.0, 0, 0, 0, 0, 0 );
}
CMD:lowbodypush( playerid, params[] )
{
	CheckPlayerAnim( playerid );
	return OnePlayAnim( playerid, "GANGS", "shake_carSH", 4.0, 0, 0, 0, 0, 0 );
}
CMD:spray( playerid, params[] )
{
	CheckPlayerAnim( playerid );
	return OnePlayAnim( playerid, "SPRAYCAN", "spraycan_full", 4.0, 0, 0, 0, 0, 0 );
}
CMD:headbutt( playerid, params[] )
{
	CheckPlayerAnim( playerid );
	return OnePlayAnim( playerid, "WAYFARER", "WF_Fwd", 4.0, 0, 0, 0, 0, 0 );
}
CMD:pee( playerid, params[] )
{
	CheckPlayerAnim( playerid );
	return SetPlayerSpecialAction( playerid, SPECIAL_ACTION_PISSING );
}
CMD:koface( playerid, params[] )
{
	CheckPlayerAnim( playerid );
	return LoopingAnim( playerid, "PED", "KO_shot_face", 4.0, 0, 1, 1, 1, 0 );
}
CMD:kostomach( playerid, params[] )
{
	CheckPlayerAnim( playerid );
	return LoopingAnim( playerid, "PED", "KO_shot_stom", 4.0, 0, 1, 1, 1, 0 );
}
CMD:kiss( playerid, params[] )
{
	CheckPlayerAnim( playerid );
	return LoopingAnim( playerid, "KISSING", "Grlfrd_Kiss_02", 1.800001, 1, 0, 0, 1, 600 );
}
CMD:rollfall( playerid, params[] )
{
	CheckPlayerAnim( playerid );
	return LoopingAnim( playerid, "PED", "BIKE_fallR", 4.0, 0, 1, 1, 1, 0 );
}
CMD:lay2( playerid, params[] )
{
	CheckPlayerAnim( playerid );
	return LoopingAnim( playerid, "SUNBATHE", "Lay_Bac_in", 3.0, 0, 1, 1, 1, 0 );
}
CMD:hitch( playerid, params[] )
{
	CheckPlayerAnim( playerid );
	return LoopingAnim( playerid, "MISC", "Hiker_Pose", 4.0, 1, 0, 0, 0, 0 );
}
CMD:beach( playerid, params[] )
{
	CheckPlayerAnim( playerid );
	return LoopingAnim( playerid, "BEACH", "SitnWait_loop_W", 4.1, 0, 1, 1, 1, 1 );
}
CMD:amedic( playerid, params[] )
{
	CheckPlayerAnim( playerid );
	return LoopingAnim( playerid, "MEDIC", "CPR", 4.1, 0, 1, 1, 1, 1 );
}
CMD:scratch( playerid, params[] )
{
	CheckPlayerAnim( playerid );
	return LoopingAnim( playerid, "MISC", "Scratchballs_01", 4.0, 1, 0, 0, 0, 0 );
}
CMD:sit( playerid, params[] )
{
	CheckPlayerAnim( playerid );
	return LoopingAnim( playerid, "PED", "SEAT_idle", 4.0, 1, 0, 0, 0, 0 );
}
CMD:drunk( playerid, params[] )
{
	CheckPlayerAnim( playerid );
	return LoopingAnim( playerid, "PED", "WALK_DRUNK", 4.0, 1, 1, 1, 1, 0 );
}
CMD:bomb( playerid, params[] )
{
	CheckPlayerAnim( playerid );
	ClearAnimations( playerid );
	return OnePlayAnim( playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0 );
}
CMD:getarrested( playerid, params[] )
{
	CheckPlayerAnim( playerid );
	return LoopingAnim( playerid, "ped", "ARRESTgun", 4.0, 0, 1, 1, 1, -1 );
}
CMD:chat( playerid, params[] )
{
	CheckPlayerAnim( playerid );
	return OnePlayAnim( playerid, "PED", "IDLE_CHAT", 4.0, 0, 0, 0, 0, 0 );
}
CMD:fucku( playerid, params[] )
{
	CheckPlayerAnim( playerid );
	return OnePlayAnim( playerid, "PED", "fucku", 4.0, 0, 0, 0, 0, 0 );
}
CMD:taichi( playerid, params[] )
{
	CheckPlayerAnim( playerid );
	return LoopingAnim( playerid, "PARK", "Tai_Chi_Loop", 4.0, 1, 0, 0, 0, 0 );
}
CMD:knife( playerid, params[] )
{
	CheckPlayerAnim( playerid );

	new pAnim;
	if(sscanf(params, "d",pAnim)) return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/knife <1-4>" );
	switch( pAnim )
	{
		case 1: LoopingAnim( playerid, "KNIFE", "KILL_Knife_Ped_Damage", 4.0, 0, 1, 1, 1, 0 );
		case 2: LoopingAnim( playerid, "KNIFE", "KILL_Knife_Ped_Die", 4.0, 0, 1, 1, 1, 0 );
		case 3: OnePlayAnim( playerid, "KNIFE", "KILL_Knife_Player", 4.0, 0, 0, 0, 0, 0 );
		case 4: LoopingAnim( playerid, "KNIFE", "KILL_Partial", 4.0, 0, 1, 1, 1, 1 );
		default: SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/knife <1-4>" );
	}
	return true;
}
CMD:basket( playerid, params[] )
{
	CheckPlayerAnim( playerid );

	new pAnim;
	if(sscanf(params, "d",pAnim)) return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/basket <1-6>" );
	switch( pAnim )
	{
		case 1: LoopingAnim( playerid, "BSKTBALL", "BBALL_idleloop", 4.0, 1, 0, 0, 0, 0 );
		case 2: OnePlayAnim( playerid, "BSKTBALL", "BBALL_Jump_Shot", 4.0, 0, 0, 0, 0, 0 );
		case 3: OnePlayAnim( playerid, "BSKTBALL", "BBALL_pickup", 4.0, 0, 0, 0, 0, 0 );
		case 4: LoopingAnim( playerid, "BSKTBALL", "BBALL_run", 4.1, 1, 1, 1, 1, 1);
		case 5: LoopingAnim( playerid, "BSKTBALL", "BBALL_def_loop", 4.0, 1, 0, 0, 0, 0 );
		case 6: LoopingAnim( playerid, "BSKTBALL", "BBALL_Dnk", 4.0, 1, 0, 0, 0, 0 );
		default: SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/basket <1-6>" );
	}
	return true;
}
CMD:dance( playerid, params[] )
{
	CheckPlayerAnim( playerid );

	new pAnim;
	if(sscanf(params, "d",pAnim)) return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/dance <1-4>" );
	switch( pAnim )
	{
		case 1: SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DANCE1 );
		case 2: SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DANCE2 );
		case 3: SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DANCE3 );
		case 4: SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DANCE4 );
		default: SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/dance <1-4>" );
	}
	return true;
}
CMD:smoke( playerid, params[] )
{
	CheckPlayerAnim( playerid );

	new pAnim;
	if(sscanf(params, "d",pAnim)) return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/smoke <1-2>" );
	switch( pAnim )
	{
		case 1: ApplyAnimation( playerid, "SMOKING", "M_smk_in", 4.0, 0, 0, 0, 0, 0 );
		case 2: ApplyAnimation( playerid, "SMOKING", "M_smklean_loop", 4.0, 1, 0, 0, 0, 0 );
		default: SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/smoke <1-2>" );
	}
	return true;
}
CMD:jumpwater( playerid, params[] )
{
	CheckPlayerAnim( playerid );
	return ApplyAnimation( playerid, "DAM_JUMP", "DAM_LAUNCH", 2, 0, 1, 1, 0, 0 );
}
// < Server Functions >
function FindTimer( playerid )
{
	new findID = playerVariables[ playerid ][ pFindPlayer ], findString[ 128 ], findZone, Float:findPos[ 3 ], Float:findDistance;
	if( !IsPlayerConnected( findID ) || !IsPlayerConnected( playerid ) )
	{
		DisablePlayerCheckpoint( playerid );
		playerVariables[ playerid ][ pCP ] = 0;
		KillTimer( playerVariables[ playerid ][ pFindPlayerTimer ] );
		return PlayerTextDrawHide( playerid, PlayerText:FIND_TD );
	}
	if( GetPlayerInterior( findID ) != 0 )
	{
		new businessID = GetBuildingEnterID( findID, 1, 3, 100.0 );
		new houseID = GetBuildingEnterID( findID, 1, 2, 50 );

		if( businessID != -404 )
		{
			findDistance = GetPlayerDistanceFromPoint( playerid, GetGVarFloat( "bus_EnterX", businessID ), GetGVarFloat( "bus_EnterY", businessID ), GetGVarFloat( "bus_EnterZ", businessID ) );
			SetPlayerCheckpoint( playerid, GetGVarFloat( "bus_EnterX", businessID ), GetGVarFloat( "bus_EnterY", businessID ), GetGVarFloat( "bus_EnterZ", businessID ), 3.0 );
			format( findString, sizeof findString, "TARGET: ~r~%s ~w~(%d)~n~DISTANCE: ~r~%.2fM ~w~(BIZ: %d)", playerVariables[ findID ][ pNormalName ], findID, findDistance, businessID );
		}
		else if( houseID != -404 )
		{
			findDistance = GetPlayerDistanceFromPoint( playerid, GetGVarFloat( "house_EnterX", houseID ), GetGVarFloat( "house_EnterY", houseID ), GetGVarFloat( "house_EnterZ", houseID ) );
			SetPlayerCheckpoint( playerid, GetGVarFloat( "house_EnterX", houseID ), GetGVarFloat( "house_EnterY", houseID ), GetGVarFloat( "house_EnterZ", houseID ), 3.0 );
			format( findString, sizeof findString, "TARGET: ~r~%s ~w~(%d)~n~DISTANCE: ~r~%.2fM ~w~(HOUSE: %d)", playerVariables[ findID ][ pNormalName ], findID, findDistance, houseID );
		}
		else
		{
			if( IsPlayerInZone( findID, "Los Santos" ) ) findZone = 0;
			else if( IsPlayerInZone( findID, "Las Venturas" ) ) findZone = 1;
			else if( IsPlayerInZone( findID, "San Fierro" ) ) findZone = 2;

			GetPlayerPos( findID, findPos[ 0 ], findPos[ 1 ], findPos[ 2 ] ), SetPlayerCheckpoint( playerid, findPos[ 0 ], findPos[ 1 ], findPos[ 2 ], 3.0 );
			findDistance = GetPlayerDistanceFromPoint( playerid, findPos[ 0 ], findPos[ 1 ], findPos[ 2 ] );
			format( findString, sizeof findString, "TARGET: ~r~%s ~w~(%d)~n~DISTANCE: ~r~%.2fM ~w~(%s)", playerVariables[ findID ][ pNormalName ], findID, findDistance, Player_Zones[ findZone ] );
		}
	}
	else
	{
		if( IsPlayerInZone( findID, "Los Santos" ) ) findZone = 0;
		else if( IsPlayerInZone( findID, "Las Venturas" ) ) findZone = 1;
		else if( IsPlayerInZone( findID, "San Fierro" ) ) findZone = 2;

		GetPlayerPos( findID, findPos[ 0 ], findPos[ 1 ], findPos[ 2 ] ), SetPlayerCheckpoint( playerid, findPos[ 0 ], findPos[ 1 ], findPos[ 2 ], 3.0 );
		findDistance = GetPlayerDistanceFromPoint( playerid, findPos[ 0 ], findPos[ 1 ], findPos[ 2 ] );
		format( findString, sizeof findString, "TARGET: ~r~%s ~w~(%d)~n~DISTANCE: ~r~%.2fM ~w~(%s)", playerVariables[ findID ][ pNormalName ], findID, findDistance, Player_Zones[ findZone ] );
	}
	PlayerTextDrawSetString( playerid, PlayerText:FIND_TD, findString );
	PlayerTextDrawShow( playerid, PlayerText:FIND_TD );
	return true;
}
function OnPlayerBanCreated( playerKey )
{
	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerBanned` = %d WHERE `id` = %d", cache_insert_id(), playerKey );
	mysql_tquery( g_Handle, gsQuery, "", "" );
}
function CreateServerHouse( playerid, Float:x, Float:y, Float:z, Float:xx, Float:yy, Float:zz, Type, Price, hInterior, hLevel, hVirtual )
{
	new HouseID = cache_insert_id();
	Iter_Add(ServerHouses, HouseID);
	InfoTD_MSG( playerid, 5000, "A fost creata casa cu ID: ~r~~h~%d", HouseID );
	SetGVarInt( "HousePickup", CreateDynamicPickup( 1273, 23, x, y, z ), HouseID );
    pickupInfo[ GetGVarInt( "HousePickup", HouseID ) ][house_pickups] = HouseID;

    SetGVarFloat( "house_EnterX", 				x, HouseID );
	SetGVarFloat( "house_EnterY", 				y, HouseID );
	SetGVarFloat( "house_EnterZ", 				z, HouseID );

    SetGVarInt( "house_OwnerKey ",              0, HouseID);
	SetGVarInt( "house_Price", 					Price, HouseID );
	SetGVarInt( "house_Interior", 			    hInterior, HouseID );
	SetGVarInt( "house_Type", 				    Type, HouseID );
	SetGVarInt( "house_Level", 				    hLevel, HouseID );
	SetGVarInt( "house_Virtual", 				hVirtual, HouseID );

	SetGVarFloat( "house_ExitX", 				xx, HouseID );
	SetGVarFloat( "house_ExitY", 				yy, HouseID );
	SetGVarFloat( "house_ExitZ", 				zz, HouseID );
	SetGVarString( "house_Owner",               "Nobody",     HouseID );

	gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, ""COL_W"House "COL_R"%d\n"COL_W"Owner: "COL_R"%s\n"COL_W"Size: "COL_R"%s\n"COL_W"Level: "COL_R"%d\n"COL_W"Price: "COL_R"$%s\n"COL_R"Type /buyhouse to buy this house", HouseID, GetGVarStringEx( "house_Owner", HouseID ), HouseSize[ GetGVarInt( "house_Type", HouseID ) ], GetGVarInt( "house_Level", HouseID ), FormatNumber(GetGVarInt( "house_Price", HouseID )) );
	SetGVarInt( "House3DText", _:CreateDynamic3DTextLabel( gsString, ~1, x,y,z, 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1 ), HouseID );
	SetGVarInt( "HousePickup", CreateDynamicPickup( 1273, 23, GetGVarFloat( "house_EnterX", HouseID ), GetGVarFloat( "house_EnterY", HouseID ), GetGVarFloat( "house_EnterZ", HouseID ) ), HouseID );
}
function KickPlayer( playerid )
{
	if( IsPlayerConnected( playerid ) ) return Kick( playerid );
	return true;
}
function SpawnPlayerEx( playerid ) return FIXES_SpawnPlayer( playerid );
stock changeEngineStatus(playerid) {
	new vehID = GetPlayerVehicleID( playerid ),
		vehModel = GetVehicleModel( vehID );

	GetVehicleParamsEx( vehID, engine, lights, alarm, doors, bonnet, boot, objective );
	if( !IsABike( vehID ) && vehID != INVALID_VEHICLE_ID )
	{
		if( gettime() - GetPVarInt( playerid, "engine_Timer" ) <= 2 )
			return SendClientMessage( playerid, COLOR_PURPLE, "* Poti porni/opri motorul o data la 2 secunde!" );

		switch( engine )
		{
			case VEHICLE_PARAMS_ON:
			{
				SetVehicleParamsEx( vehID, VEHICLE_PARAMS_OFF, lights, alarm, doors, bonnet, boot, objective );
				nearByMessage( playerid, COLOR_PURPLE, NBM_DIST, "* %s stops the engine of his %s.", playerVariables[ playerid ][ pNormalName ], VehicleName( vehModel ) );
			}
			case VEHICLE_PARAMS_OFF:
			{
				if( serverVariables[ VehicleGas ][ vehID ] <= 0.0 )	
					return SendClientMessage( playerid, COLOR_GREY, "Your vehicle gastank it's empty!" );

				SetVehicleParamsEx( vehID, VEHICLE_PARAMS_ON, lights, alarm, doors, bonnet, boot, objective );
				nearByMessage( playerid, COLOR_PURPLE, NBM_DIST, "* %s starts the engine of his %s.", playerVariables[ playerid ][ pNormalName ], VehicleName( vehModel ) );
			}
			default:
			{
				if( serverVariables[ VehicleGas ][ vehID ] <= 0.0 )	
					return SendClientMessage( playerid, COLOR_GREY, "Your vehicle gastank it's empty!" );

				SetVehicleParamsEx( vehID, VEHICLE_PARAMS_ON, lights, alarm, doors, bonnet, boot, objective );
				nearByMessage( playerid, COLOR_PURPLE, NBM_DIST, "* %s starts the engine of his %s.", playerVariables[ playerid ][ pNormalName ], VehicleName( vehModel ) );
			}
		}
		// < check the new timer >
		SetPVarInt( playerid, "engine_Timer", gettime() );
	}
	return 1;
}

stock CheckForReferral(playerid)
{
	if( playerVariables[ playerid ][ pReferral ] != 0 )
	{
		new pID = GetPlayerIDFromKey( playerVariables[ playerid ][ pReferral ] ),
			expAmount = playerVariables[ playerid ][ pLevel ] * LEVEL_MULTYPLIER,
			bonusMoney = floatround( GetPlayerNextLevelCost( playerid ) / 200 * 100, floatround_round ),
			bonusRP = floatround( expAmount * 0.2, floatround_round );

		if( pID != INVALID_PLAYER_ID )
		{
			playerVariables[ pID ][ pRP ] += bonusRP;
			playerVariables[ pID ][ pMoney ] += bonusMoney;
			SendClientMessagef( pID, COLOR_LIGHTGREEN, "REFERRAL SYSTEM: "COL_W"You have earned $%s and %d Respect Points from %s(%i)", FormatNumber( bonusMoney ), bonusRP, playerVariables[ playerid ][ pNormalName ], playerid );
		}
		else
		{
			gsQuery[ 0 ] = EOS;
			mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerBonusMoney` = `playerBonusMoney` + %d, `playerBonusRP` = `playerBonusRP` + %d WHERE `id` = %d", bonusMoney, bonusRP, playerVariables[ playerid ][ pReferral ] );
			mysql_tquery( g_Handle, gsQuery, "", "" );
		}
		SendClientMessagef( playerid, COLOR_LIGHTGREEN, "REFERRAL SYSTEM: "COL_W"You have earned $%s and %d Respect Points because you playing with a refferal", FormatNumber( bonusMoney ), bonusRP);
		playerVariables[ playerid ][ pRP ] += bonusRP;
		playerVariables[ playerid ][ pMoney ] += bonusMoney;
	}
	return 1;
}

stock CommandKickPlayer( playerid, Player, Reason[], type )
{
	if( gettime() - GetPVarInt( playerid, "kick_Timer" ) <= 180 && playerVariables[ playerid ][ pAdminLevel ] < 8 )
		return SendClientMessagef( playerid, ~1, "* Trebuie sa astepti %d secunde pentru a folosi comanda!", 10 - (gettime() - GetPVarInt( playerid, "kick_Timer" )) );
  
    if( !VerificaReclama( playerid, Reason ) )              	return false;

	if( !IsPlayerConnected( Player ) )							return SendClientMessage( playerid, COLOR_GREY, "Player is not connected!" );
	if( playerVariables[ Player ][ pKicked ] )					return SendClientMessage( playerid, COLOR_GREY, "This players has been already kicked/banned!" );
	if( playerVariables[ Player ][ pAdminLevel ] >= 6 && playerVariables[ playerid ][ pAdminLevel ] < 8)			return SendClientMessage( playerid, COLOR_GREY, "This admin it's higher than you!" );
	if( strlen( Reason ) < 5 || strlen( Reason ) > 64 )			return SendClientMessage( playerid, COLOR_GREY, "Invalid reason size. Between 5 and 64 characters !" );
	if( Player == playerid )									return SendClientMessage( playerid, COLOR_GREY, "You can't kick yourself!" );
	if( playerVariables[ Player ][ pAdminLevel ] > playerVariables[ playerid ][ pAdminLevel ] )
		return AdminBroadCast(8, COLOR_ULTRARED, "%s(level admin:%d) a incercat sa ii dea kick lui %s(admin level:%d)", username(playerid), playerVariables[playerid][pAdminLevel],
			username(Player), playerVariables[Player][pAdminLevel]);

    if(playerVariables[Player][pAdminLevel] != 0 && playerVariables[playerid][pAdminLevel] < 8)
		return AdminBroadCast(8, COLOR_ULTRARED, "%s(level admin:%d) a incercat sa ii dea kick lui %s(admin level:%d)", username(playerid), playerVariables[playerid][pAdminLevel],
			username(Player), playerVariables[Player][pAdminLevel]);

	switch( type )
	{
		case false: // Global
		{
			SendClientMessageToAllf( COLOR_LIGHTRED, "Admin %s(%i) has kicked %s(%i) for reason: %s", playerVariables[ playerid ][ pNormalName ], playerid, playerVariables[ Player ][ pNormalName ], Player, Reason );
		}
		case true: // Silent
		{
			AdminBroadCast( 1, COLOR_RED2, "Admin %s(%i) has silent kicked %s(%i) for reason: %s", playerVariables[ playerid ][ pNormalName ], playerid, playerVariables[ Player ][ pNormalName ], Player, Reason );
		}
	}
	SetPVarInt( playerid, "kick_Timer", gettime() );
	InsertPlayerPunish( Player, playerid, 6, 0, Reason ); // kick
	return KickEx( Player );
}
stock AdminBotKickPlayer(Player, Reason[], type )
{
	if( !IsPlayerConnected( Player ) )							return 1;
	if( playerVariables[ Player ][ pKicked ] )					return 1;
	if( playerVariables[ Player ][ pAdminLevel ] >= 6 )			return 1;
	if( strlen( Reason ) < 5 || strlen( Reason ) > 64 )			return 1;

	switch( type )
	{
		case false: // Global
		{
			SendClientMessageToAllf( COLOR_LIGHTRED, "AdmBot kicked %s(%i) for reason: %s", username(Player), Player, Reason );
		}
		case true: // Silent
		{
			AdminBroadCast( 1, COLOR_RED2, "AdmBot has silent kicked %s(%i) for reason: %s", username(Player), Player, Reason );
		}
	}
	InsertPlayerPunish( Player, -1, 6, 0, Reason ); // kick
	return KickEx( Player );
}
#if defined HEIST_SYSTEM
stock CheckHeistFail( playerid, reason[] )
{
	if( playerVariables[ playerid ][ pHeistOwner ] != INVALID_PLAYER_ID )
	{
		new heistOwner = playerVariables[ playerid ][ pHeistOwner ];
		if(Iter_Count(Heists[heistOwner]) == 0) return 1;
		foreach(new i : Heists[heistOwner])
		{
			if(heistOwner == i ) // < destroy the Heist Vehicle >
			{
				serverVariables[VehicleOwnerHeist][playerVariables[i][pHeistVehicle]] = -1;
				DestroyVehicle_( playerVariables[ i ][ pHeistVehicle ] ), playerVariables[ i ][ pHeistVehicle ] = INVALID_VEHICLE_ID;
				playerVariables[i][pHeistCount] = 0;
			}
			SendClientMessagef(i, -1, "Heist-ul a fost anulat din cauza lui "COL_R"%s "COL_W"! "COL_BLUE"Motiv: "COL_W"%s", playerVariables[ playerid ][ pNormalName ], reason );

			// < reset heist vars >
			playerVariables[ i ][ pHeistOwner ] = INVALID_PLAYER_ID;
			playerVariables[ i ][ pHeistStatus ] = 0;
			playerVariables[ i ][ pHeistKey ] = 0;
			playerVariables[i][pHeistBizz] = 0;
			playerVariables[ i ][ pRobStatus ] = 0;
			serverVariables[ rob_players ] --;
			playerVariables[ i ][ pCP ] = 0;
			DisablePlayerCheckpoint( i );

			if( IsPlayerAttachedObjectSlotUsed( i, INDEX_ROB ) )
				RemovePlayerAttachedObject( i, INDEX_ROB );
		}	
		Iter_Clear(Heists[playerid]);
	}
	return 1;
}
#endif
stock Tutorial( playerid, Step[], Text[] )
{
	PlayerTextDrawSetString( playerid, TUT_TD[ 0 ], Step );
	PlayerTextDrawSetString( playerid, TUT_TD[ 1 ], Text );

	PlayerTextDrawShow( playerid, TUT_TD[ 0 ] );
	PlayerTextDrawShow( playerid, TUT_TD[ 1 ]);

	return true;
}
stock HideTutorial(playerid)
{
	PlayerTextDrawHide(playerid, TUT_TD[ 0 ]);
	PlayerTextDrawHide(playerid, TUT_TD[ 1 ]);

	return true;
}
stock LeavePlayerPaintball( playerid, reason[], leaving )
{
	new paintID = playerVariables[ playerid ][ pPaintBall ];

	SendClientMessage( playerid, COLOR_WHITE, "Leaving the paintball arena..." );
	playerVariables[ playerid ][ pPaintBall ] = -1;
	playerVariables[ playerid ][ pPaintBallKills ] = 0;
	playerVariables[ playerid ][ pPaintBallDeaths ] = 0;
	playerVariables[ playerid ][ pPaintBallLevel ] = 0;
	playerVariables[ playerid ][ pPaintBallLeaving ] = leaving;
	playerVariables[ playerid ][ pPaintBallVotedMap ] = false;
	playerVariables[ playerid ][ pPaintBallVotedWeapon ] = false;
	SetPlayerWorldBounds( playerid, 20000.0000, -20000.0000, 20000.0000, -20000.0000 );

	FIXES_SpawnPlayer( playerid );
	ClearPlayerKillTab( playerid );
	paintballVariables[ paintID ][ paintPlayers ]--;

	gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, "%s has left the paintball arena, reason: %s", username( playerid ), reason );
	SendMessageToArena( paintID, COLOR_YELLOW, gsString );

	PlayerTextDrawHide( playerid, PlayerText:MINIGAME_TD );
	InfoTD_MSG( playerid, 5000, "You have left the Paintball Arena!" );
	ResetServerWeapons( playerid );
}
stock SlapPlayer( playerid, Float:height )
{
	new Float:player_positionX, Float:player_positionY, Float:player_positionZ;
	GetPlayerPos( playerid, player_positionX, player_positionY, player_positionZ );
	SetPlayerPos( playerid, player_positionX, player_positionY, player_positionZ + height );
}
stock SendMessageToArena( paintID, color, message[] )
{
	foreach(new i : playerPaint[paintID])
		SendClientMessage( i, color, message );
}

AntiFlood_Check( playerid, bool:inc=true )
{
	AntiFlood_Data[playerid][floodRate] += inc ? RATE_INC : 0;
	AntiFlood_Data[playerid][floodRate] = AntiFlood_Data[playerid][floodRate] - ( GetTickCount() - AntiFlood_Data[playerid][lastCheck] );
	AntiFlood_Data[playerid][lastCheck] = GetTickCount();
	AntiFlood_Data[playerid][floodRate] = AntiFlood_Data[playerid][floodRate] < 0 ? 0 : AntiFlood_Data[playerid][floodRate];

	if ( AntiFlood_Data[playerid][floodRate] >= RATE_MAX )
	{
		#if THRESOLD_ACTION == 1
		    AdminBroadCast( 1, COLOR_HOTORANGE, "* [ANTI FLOOD]: %s(%i) - "COL_LR"was kicked for probably flooding.", username( playerid ), playerid );
			Kick(playerid);
		#elseif THRESOLD_ACTION == 2
			AdminBroadCast( 1, COLOR_HOTORANGE, "* [ANTI FLOOD]: %s(%i) - "COL_LR"was kicked for probably flooding.", username( playerid ), playerid );
			Kick(playerid);
		#else
			SendClientMessage(playerid, COLOR_LIGHTRED, "Please stop spam." );
		#endif

		return false;
	}

	return true;
}

AntiFlood_InitPlayer( playerid )
{
	AntiFlood_Data[playerid][lastCheck] = GetTickCount();
	AntiFlood_Data[playerid][floodRate] = 0;
}

stock ChangePlayerPhoneNumber( const playerid, const new_number) 
{
    new old_number = playerVariables[ playerid ][ pPhoneNumber ];

    if(old_number != 0)
    {
        phoneNumbers[ old_number ] = 0;
        VECTOR_set_val( phone_numbers, old_number, 0 );
    }

    phoneNumbers[ new_number ] = GetPlayerMysqlID( playerid );
    playerVariables[ playerid ][ pPhoneNumber ] = new_number;

    VECTOR_set_val( phone_numbers, new_number, playerid + 1 );
    return 1;
}

stock PhoneNumberExists( const number ) 
{
    if( phoneNumbers[ number ] != 0 ) return 1;
    return 0;
}

stock BuyPlayerNumber( const playerid )
{
	new number_phone = 10000 + random( 89999 );

	if( PhoneNumberExists( number_phone ) )
		return BuyPlayerNumber( playerid );

    ChangePlayerPhoneNumber(playerid, number_phone);

	InfoTD_MSG( playerid, 5000, "Ai cumparat un ~r~~h~Telefon ~w~~h~cu suma de $150~n~Numarul tau de telefon este: ~y~~h~%d", playerVariables[ playerid ][ pPhoneNumber ] );

    return true;
}
stock GetGamblingMaxim( playerid )
{
    new maxim_gambling;
    switch( playerVariables[playerid][pGamblingSkill] )
    {
        case 1: maxim_gambling = 5000000;
        case 2: maxim_gambling = 15000000;
        case 3: maxim_gambling = 40000000;
        case 4: maxim_gambling = 60000000;
        case 5: maxim_gambling = 100000000;
    }
    return maxim_gambling;
}

stock GetMaximRouletteForPlayer( playerid )
{
    new maxim_gambling;
    switch( playerVariables[playerid][pGamblingSkill] )
    {
        case 1: maxim_gambling = 10000000;
        case 2: maxim_gambling = 25000000;
        case 3: maxim_gambling = 50000000;
        case 4: maxim_gambling = 75000000;
    }
    return maxim_gambling;
}

stock SetGamblingStake( playerid, money )
{
    playerVariables[playerid][pGamblingNextLevel] -= money;
}    

stock SetGamblingLevel( playerid, level )
{
    playerVariables[playerid][pGamblingSkill] = level;
}

stock SetGamblingForNextLevel( playerid )
{
    playerVariables[playerid][pGamblingNextLevel] = GetMaximRouletteForPlayer( playerid );
}

stock GetGamblingForNextSkill( playerid )
    return playerVariables[playerid][pGamblingNextLevel];

stock GetGamblingLevel( playerid )
    return playerVariables[playerid][pGamblingSkill];
stock SleepPlayer( playerid, sleep_type )
{
	switch( sleep_type )
	{
		case 1:
		{
			playerVariables[ playerid ][ pSleeping ] = true;
			TogglePlayerControllable( playerid, false );
			SendClientMessage( playerid, COLOR_WHITE, "Acum poti ramane AFK fara a primi kick. Foloseste /sleep din nou cand vrei sa revii in joc." );
			SendClientMessage( playerid, COLOR_WHITE, "Minimizarea jocului (alt-tab) poate provoca unele buguri. Este recomandat sa apesi ESC inainte de a minimiza jocul." );
			LoopingAnim( playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0 );
		}
		case 2:
		{
			playerVariables[ playerid ][ pSleeping ] = false;
			TogglePlayerControllable( playerid, true );
			ClearAnimations( playerid );
			SendClientMessage( playerid, COLOR_WHITE, "Bine ai revenit!" );
		}
	}
}

stock DestroyVehicle_( vehicleid )
{
	serverVariables[ VehicleRadio ][ vehicleid ] = 0;
	DestroyVehicle( vehicleid );
	return vehicleid;
}
stock Remove_Admin_Car( vehicleid )
{
	Iter_Remove( ServerSpawnCars, vehicleid );
	DestroyVehicle_( vehicleid );

	return vehicleid;
}
stock GetVehicleRelativePos( vehicleid, &Float:x, &Float:y, &Float:z, Float:xoff=0.0, Float:yoff=0.0, Float:zoff=0.0 )
{
	new Float:rot;
	GetVehicleZAngle(vehicleid, rot);
	rot = 360 - rot;
	GetVehiclePos(vehicleid, x, y, z);
	x = floatsin(rot,degrees) * yoff + floatcos(rot,degrees) * xoff + x;
	y = floatcos(rot,degrees) * yoff - floatsin(rot,degrees) * xoff + y;
	z = zoff + z;
}

stock CheckPlayerRadar(playerid)
{
	if(playerVariables[ playerid ][ pRadarON ] == 1 || GetPVarInt(playerid, "coming_ticket_radar") == 1)
    {
        playerVariables[ playerid ][ pWarnings] ++;
    	if(playerVariables[ playerid ][ pWarnings ] >= 3) ServerBanPlayer( playerid, 3, 0, "[3/3] Warns" );
    	else 
    	{
    		gsString[0] = EOS;
    		format(gsString, sizeof gsString, "Ai primit warn, motiv: neplata amenda sau te-ai deconectat inaintea confiscarii licentei!", playerVariables[ playerid ][ pWarnings ]);
		    InsertPlayerMail(GetPlayerMysqlID(playerid), gsString);
    	}
		playerVariables[ playerid ][ pRadarON ] = 0;
		SetPVarInt(playerid, "coming_ticket_radar", 0);
    }
}

stock ResetJobHolds( playerid, vehicleid )
{
	switch( playerVariables[ playerid ][ pJob ] )
	{
		case 3:
		{
			SetTimerEx("SetPizzaBack", 100, 0, "ddd", playerid, vehicleid, 1);
			SetTimerEx("SetPizzaBack", 500, 0, "ddd", playerid, vehicleid, 2);
			SetTimerEx("SetPizzaBack", 1000, 0, "ddd", playerid, vehicleid, 3);
		}
		case 14:
		{
			DestroyDynamicObject( GetPVarInt( playerid, "job_Hold1" ) ), DeletePVar( playerid, "job_Hold1" );
			DestroyDynamicObject( GetPVarInt( playerid, "job_Hold2" ) ), DeletePVar( playerid, "job_Hold2" );
			DestroyDynamicObject( GetPVarInt( playerid, "job_Hold3" ) ), DeletePVar( playerid, "job_Hold3" );
			DestroyDynamicObject( GetPVarInt( playerid, "job_Hold4" ) ), DeletePVar( playerid, "job_Hold4" );
			DestroyDynamicObject( GetPVarInt( playerid, "job_Hold5" ) ), DeletePVar( playerid, "job_Hold5" );
		}
	}
}

function SetPizzaBack(playerid, vehicleid, caz)
{
	switch(caz)
	{
		case 1:
		{
			DestroyDynamicObject( GetPVarInt( playerid, "job_Hold1" ) ), DeletePVar( playerid, "job_Hold1" );
			if(playerVariables[playerid][jSkill][3] >= 2)
			{
				DestroyDynamicObject( GetPVarInt( playerid, "job_Hold2" ) ), DeletePVar( playerid, "job_Hold2" );
			}
			if(playerVariables[playerid][jSkill][3] >= 3)
			{
				DestroyDynamicObject( GetPVarInt( playerid, "job_Hold3" ) ), DeletePVar( playerid, "job_Hold3" );
			}
			if(playerVariables[playerid][jSkill][3] >= 4)
			{
				DestroyDynamicObject( GetPVarInt( playerid, "job_Hold4" ) ), DeletePVar( playerid, "job_Hold4" );
			}
			if(playerVariables[playerid][jSkill][3] >= 5)
			{
				DestroyDynamicObject( GetPVarInt( playerid, "job_Hold5" ) ), DeletePVar( playerid, "job_Hold5" );
			}
		}
		case 2:
		{
			SetPVarInt( playerid, "job_Hold1", CreateDynamicObject( 19571, 0.00000, 0.00000, 0.00000,   0.00000, 0.00000, 0.00000) );
			if(playerVariables[playerid][jSkill][3] >= 2)
			{
				SetPVarInt( playerid, "job_Hold2", CreateDynamicObject( 19571, 0.00000, 0.00000, 0.00000,   0.00000, 0.00000, 0.00000) );
			}
			if(playerVariables[playerid][jSkill][3] >= 3)
			{
				SetPVarInt( playerid, "job_Hold3", CreateDynamicObject( 19571, 0.00000, 0.00000, 0.00000,   0.00000, 0.00000, 0.00000) );
			}
			if(playerVariables[playerid][jSkill][3] >= 4)
			{
				SetPVarInt( playerid, "job_Hold4", CreateDynamicObject( 19571, 0.00000, 0.00000, 0.00000,   0.00000, 0.00000, 0.00000) );
			}
			if(playerVariables[playerid][jSkill][3] >= 5)
			{
				SetPVarInt( playerid, "job_Hold5", CreateDynamicObject( 19571, 0.00000, 0.00000, 0.00000,   0.00000, 0.00000, 0.00000) );
			}
		}
		case 3:
		{
			AttachDynamicObjectToVehicle( GetPVarInt( playerid, "job_Hold1" ), vehicleid, 0.00790, -0.74110, 0.53510,   90.00000, 0.00000, 0.00000 );
			if(playerVariables[playerid][jSkill][3] >= 2)
			{
				AttachDynamicObjectToVehicle( GetPVarInt( playerid, "job_Hold2" ), vehicleid, 0.00790, -0.74110, 0.58710,   90.00000, 0.00000, 0.00000 );
			}
			if(playerVariables[playerid][jSkill][3] >= 3)
			{
				AttachDynamicObjectToVehicle( GetPVarInt( playerid, "job_Hold3" ), vehicleid, 0.00790, -0.74110, 0.63910,   90.00000, 0.00000, 0.00000 );
			}
			if(playerVariables[playerid][jSkill][3] >= 4)
			{
				AttachDynamicObjectToVehicle( GetPVarInt( playerid, "job_Hold4" ), vehicleid, 0.00790, -0.74110, 0.69110,   90.00000, 0.00000, 0.00000 );
			}
			if(playerVariables[playerid][jSkill][3] >= 5)
			{
				AttachDynamicObjectToVehicle( GetPVarInt( playerid, "job_Hold5" ), vehicleid, 0.00790, -0.74110, 0.74310,   90.00000, 0.00000, 0.00000 );
			}
		}
	}
	return 1;	
}

stock TogglePlayerGetGift( playerid, bool:status )
{
	switch( status )
	{
		case true:
		{
			for( new i = 0; i <= 4; i++ )
				PlayerTextDrawShow( playerid, PlayerText:GETGIFT_TD[ i ] );

			SelectTextDraw( playerid, COLOR_PURPLE );
		}
		case false:
		{
			for( new i = 0; i <= 4; i++ )
				PlayerTextDrawHide( playerid, PlayerText:GETGIFT_TD[ i ] );
		}
	}
}
stock TogglePlayerPIN( playerid, bool:status )
{
	switch( status )
	{
		case true:
		{
			SelectTextDraw( playerid, COLOR_LIGHTRED );

			playerVariables[ playerid ][ pTempPIN ] = EOS;
			playerVariables[ playerid ][ pTempPINCount ] = 0;
			PlayerTextDrawSetString( playerid, PIN_TD[12], "_" );
			PlayerTextDrawSetString( playerid, PIN_TD[ 13 ], "TYPE_PIN" ), PlayerTextDrawBoxColor( playerid, PIN_TD[ 13 ], -1711275777 ); // Make it RED

			for( new i = 0; i <= 13; i++ )
				PlayerTextDrawShow( playerid, PlayerText:PIN_TD[ i ] );
		}
		case false:
		{
			PlayerTextDrawSetString( playerid, PIN_TD[12], "_" );
			playerVariables[ playerid ][ pTempPIN ] = EOS;
			playerVariables[ playerid ][ pTempPINCount ] = 0;

			for( new i = 0; i <= 13; i++ )
				PlayerTextDrawHide( playerid, PlayerText:PIN_TD[ i ] );
		}
	}
}
stock OpenPlayerGift( playerid )
{
	// < Check the giftbox time >
	if( playerVariables[ playerid ][ pGiftBoxTime ] != 0 )
		return SendClientMessagef( playerid, COLOR_YELLOW, "Mai poti folosi aceasta comanda peste %s minute. Timpul de asteptare scade si in afk/sleep !", TimeConvert( playerVariables[ playerid ][ pGiftBoxTime ] ) );

	// < Load gift variables >
	new gift_prize = RandomChance( randomEx( 6, 8 ), random( 6 ), 70 ), gift_value = 0;

	// < Switch betwen values >
	switch( gift_prize )
	{
		case 0: // Money
		{
			GivePlayerMoneyGift( playerid );
		}
		case 1: // Licenses
		{
			gift_value = RandomChance( 5, randomEx2(1, 3), 100 );
			playerVariables[ playerid ][ pRP ] += gift_value;

/*			gsString[ 0 ] = EOS;
			format( gsString, sizeof gsString, "Ai castigat %d respect points.", gift_value );*/
			nearByMessage( playerid, COLOR_GENANNOUNCE, NBM_DIST, "(( Giftbox: %s a castigat %d respect points din giftbox! Felicitari! ))", playerVariables[ playerid ][ pNormalName ], gift_value );
			InsertGiftLog( GetPlayerMysqlID(playerid), playerVariables[ playerid ][ pNormalName ], gift_value, 2 );
			/*playerVariables[ playerid ][ pCarLicense ] = 100;
			playerVariables[ playerid ][ pGunLicense ] = 100;
			playerVariables[ playerid ][ pFlyLicense ] = 100;
			playerVariables[ playerid ][ pBoatLicense ] = 100;

			gsString[ 0 ] = EOS;
			format( gsString, sizeof gsString, "Ai castigat toate licentele pentru 100 de ore din giftbox." );
			SendClientMessageToAllf( COLOR_GENANNOUNCE, "(( Giftbox: %s a castigat toate licentele pentru 100 de ore din giftbox! Felicitari! ))", playerVariables[ playerid ][ pNormalName ] );
			InsertGiftLog( GetPlayerMysqlID(playerid), playerVariables[ playerid ][ pNormalName ], gift_value, 1 );*/
		}
		case 2: // Fireworks
		{
			gift_value = RandomChance( 10, randomEx2(1, 5), 100 );
			playerVariables[ playerid ][ pFireworks ] += gift_value;

/*			gsString[ 0 ] = EOS;
			format( gsString, sizeof gsString, "Ai castigat %d fireworks din giftbox.", gift_value );*/
			nearByMessage( playerid, COLOR_GENANNOUNCE, NBM_DIST, "(( Giftbox: %s a castigat %d fireworks din giftbox! Felicitari! ))", playerVariables[ playerid ][ pNormalName ], gift_value );
			InsertGiftLog( GetPlayerMysqlID(playerid), playerVariables[ playerid ][ pNormalName ], gift_value, 2 );
			SendClientMessage(playerid, COLOR_YELLOW, "Use /placefirework for use!");
		}
		case 3: // Hidden Colors
		{
			if( playerVariables[ playerid ][ pHiddenColors ] < 10 )
			{
				gift_value = RandomChance( 2, 1, 100 );
				playerVariables[ playerid ][ pHiddenColors ] += gift_value;
				UpdateGiftStatus( 3, gift_value );
				InsertGiftLog( GetPlayerMysqlID(playerid), playerVariables[ playerid ][ pNormalName ], gift_value, 3 );

				switch( gift_value )
				{
					case 1:
					{
/*						gsString[ 0 ] = EOS;
						format( gsString, sizeof gsString, "Ai castigat %d culoare hidden din giftbox.", gift_value );*/
						SendClientMessageToAllf( COLOR_GENANNOUNCE, "(( Giftbox: %s a castigat %d culoare hidden din giftbox! Felicitari! ))", playerVariables[ playerid ][ pNormalName ], gift_value );
					}
					case 2:
					{
/*						gsString[ 0 ] = EOS;
						format( gsString, sizeof gsString, "Ai castigat %d culori hidden din giftbox.", gift_value );*/
						SendClientMessageToAllf( COLOR_GENANNOUNCE, "(( Giftbox: %s a castigat %d culori hidden din giftbox! Felicitari! ))", playerVariables[ playerid ][ pNormalName ], gift_value );
					}
				}
			}
			else GivePlayerMoneyGift( playerid );
		}
		case 4: // Materials
		{
			gift_value = RandomChance( 20000, randomEx2(4000, 10000), 100 );
			playerVariables[ playerid ][ pMaterials ] += gift_value;
			UpdateGiftStatus( 4, gift_value );

/*			gsString[ 0 ] = EOS;
			format( gsString, sizeof gsString, "Ai castigat %s materiale din giftbox.", FormatNumber( gift_value ) );*/
			nearByMessage( playerid, COLOR_GENANNOUNCE, NBM_DIST, "(( Giftbox: %s a castigat %d materials din giftbox! Felicitari! ))", playerVariables[ playerid ][ pNormalName ], gift_value );
			InsertGiftLog( GetPlayerMysqlID(playerid), playerVariables[ playerid ][ pNormalName ], gift_value, 4 );
		}
		case 5: // Clear Warns
		{
			if( playerVariables[ playerid ][ pWarnings ] != 0 )
			{
/*				gsString[ 0 ] = EOS;
				format( gsString, sizeof gsString, "Ai castigat clear warns din giftbox.", gift_value );*/
				nearByMessage( playerid, COLOR_GENANNOUNCE, NBM_DIST, "(( Giftbox: %s a castigat clear warns din giftbox! Felicitari! ))", playerVariables[ playerid ][ pNormalName ] );
				InsertGiftLog( GetPlayerMysqlID(playerid), playerVariables[ playerid ][ pNormalName ], gift_value, 5 );
				playerVariables[ playerid ][ pWarnings ] = 0;
			}
			else GivePlayerMoneyGift( playerid );
		}
		case 6: // Premium Points
		{
			//GivePlayerMoneyGift( playerid );
			if( playerVariables[ playerid ][ pPremiumPoints ] < 20 )
			{
				gift_value = RandomChance( randomEx2(5, 10), randomEx2(5, 10), 100 );
				if( gift_value > 20 )
					gift_value = 5;

				playerVariables[ playerid ][ pPremiumPoints ] += gift_value;
				UpdateGiftStatus( 6, gift_value );

				gsString[ 0 ] = EOS;
				format( gsString, sizeof gsString, "Ai castigat %d premium points din giftbox.", gift_value );
				SendClientMessageToAllf( COLOR_GENANNOUNCE, "(( Giftbox: %s a castigat %d premium points din giftbox! Felicitari! ))", playerVariables[ playerid ][ pNormalName ], gift_value );
				InsertGiftLog( GetPlayerMysqlID(playerid), playerVariables[ playerid ][ pNormalName ], gift_value, 6 );
			}
			else GivePlayerMoneyGift( playerid );
		}
		case 7: // Personal Vehicle
		{
			if( GetPlayerFreeVehicleSlot( playerid ) + 1 > playerVariables[ playerid ][ pVSlots ] || GetPersonalVehiclesNumber( playerid ) > 3 )
			{
				GivePlayerMoneyGift( playerid );
			}
			else
			{
				gift_value = GIFT_VEHICLE;
				GivePlayerPersonalVehicle( playerid, gift_value );
				UpdateGiftStatus( 7 );

/*				gsString[ 0 ] = EOS;
				format( gsString, sizeof gsString, "Ai castigat un %s personal din giftbox.\nFoloseste comanda /v pentru a-ti localiza masina!", VehicleName( gift_value ) );*/
				SendClientMessageToAllf( COLOR_GENANNOUNCE, "(( Giftbox: %s a castigat un %s din giftbox! Felicitari! ))", playerVariables[ playerid ][ pNormalName ], VehicleName( gift_value ) );
				InsertGiftLog( GetPlayerMysqlID(playerid), playerVariables[ playerid ][ pNormalName ], gift_value, 7 );
			}
		}
		case 8: // Vehicle Slots
		{
			if( playerVariables[ playerid ][ pVSlots ] < MAX_SLOTS )
			{
				playerVariables[ playerid ][ pVSlots ]++;
				UpdateGiftStatus( 8 );

/*				gsString[ 0 ] = EOS;
				format( gsString, sizeof gsString, "Ai castigat 1 vehicle slot din giftbox.", gift_value );*/
				SendClientMessageToAllf( COLOR_GENANNOUNCE, "(( Giftbox: %s a castigat 1 vehicle slot din giftbox! Felicitari! ))", playerVariables[ playerid ][ pNormalName ] );
				InsertGiftLog( GetPlayerMysqlID(playerid), playerVariables[ playerid ][ pNormalName ], gift_value, 8 );
			}
			else GivePlayerMoneyGift( playerid );
		}
	}
	UpdateGiftStatus( 100 );
	playerVariables[ playerid ][ pGiftBoxTime ] = 10800;
	//ShowPlayerDialog( playerid, DIALOG_NULL, DIALOG_STYLE_MSGBOX, "Premiu Giftbox", gsString, "Close", "" );
	SendClientMessagef( playerid, COLOR_YELLOW, "Mai poti folosi aceasta comanda peste %s minute. Timpul de asteptare scade si in afk/sleep !", TimeConvert( playerVariables[ playerid ][ pGiftBoxTime ] ) );
	return true;
}
stock CheckAdvertising( playerid, text[] )
{
	#pragma unused playerid
	for( new x; x <= serverVariables[ forbidWordsCount ]; x++ )
		if( strfind(strtr(text, " ", ""), forbidWords[ x ], true) != -1 )
			return true;
	return false;
}
stock CheckSuspectKill( killerid, playerid )
{
	new pSentence, pTicket, pCount;
	switch( playerVariables[ playerid ][ pWanted ] )
	{
		case 1: pSentence = 5 * 60, pTicket = 350;
		case 2: pSentence = 10 * 60, pTicket = 650;
		case 3: pSentence = 15 * 60, pTicket = 850;
		case 4: pSentence = 20 * 60, pTicket = 1200;
		case 5: pSentence = 25 * 60, pTicket = 1500;
		case 6: pSentence = 30 * 60, pTicket = 2000;
	}
	// < Put player in jail )
	playerVariables[ playerid ][ pPrisonTime ] = pSentence;
	playerVariables[ playerid ][ pMoney ] -= pTicket;
	playerVariables[ playerid ][ pCrimeReason ] = EOS;
	format( playerVariables[ playerid ][ pCrimeReason ], 250, "N/A" );
	SendClientMessagef( playerid, COLOR_LIGHTRED, "* You where killed and arrested for %d seconds and you lost $%s", pSentence, FormatNumber( pTicket ) );

	foreach( new i : playerFaction[ FACTION_COP ] )
	{
		if( IsPlayerInRangeOfPlayer( i, playerid, 50.0 ) && playerVariables[ i ][ pOnDuty ] )
		{
			pCount++;
			Announce_Player( i, 5000, 1, "~b~running suspect bonus!" );
			playerVariables[ i ][ pMoney ] += pTicket;
			playerVariables[ i ][ pFactionRunners ]++;
			//( i, 1058, 0.0, 0.0, 0.0 );
			SendClientMessagef( i, COLOR_BLUE, "Ai primit $%s pentru prinderea suspectului %s!", FormatNumber( pTicket ), username( playerid ) );

			if( playerVariables[ i ][ pFindPlayer ] == playerid )
			{
				DisablePlayerCheckpoint( i );
				playerVariables[ i ][ pCP ] = 0;
				KillTimer( playerVariables[ i ][ pFindPlayerTimer ] );
				playerVariables[ i ][ pFindPlayer ] = INVALID_PLAYER_ID;
				Iter_Remove( playerFinds[ playerid ], i );
				PlayerTextDrawHide( i, PlayerText:FIND_TD );

				if( killerid != i )
					GameTextForPlayer( i, "~r~target has died!", 5000, 1 );	
			}
		}
	}
	switch( pCount )
	{
		case 1:
		{
			gsString[ 0 ] = EOS;
			format( gsString, sizeof gsString, "Dispatch: %s[%d] has been killed by %s and will be in jail for %d seconds.", username( playerid ), playerid, username( killerid ), pSentence );
			sendDepartmentMessage( COLOR_RADIOCHAT, gsString );
			nearByMessage( playerid, COLOR_PURPLE, NBM_DIST, "* %s is now in jail! Thanks to: %s!", username( playerid ), username( killerid ) );
		}
		default:
		{
			gsString[ 0 ] = EOS;
			format( gsString, sizeof gsString, "Dispatch: %s[%d] has been killed and will be in jail for %d seconds.", username( playerid ), playerid, pSentence );
			sendDepartmentMessage( COLOR_RADIOCHAT, gsString );
			nearByMessage( playerid, COLOR_PURPLE, NBM_DIST, "* %s is now in jail thanks to our Cops!", username( playerid ) );
		}
	}
}
stock GivePlayerPremiumPoints( playerid, valuePP )
{
	playerVariables[ playerid ][ pPremiumPoints ] += valuePP;

	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerPremiumPoints` = %d, `playerPPBought` = `playerPPBought` + %d WHERE `id` = %d", playerVariables[ playerid ][ pPremiumPoints ], valuePP, GetPlayerMysqlID(playerid) );
	mysql_tquery( g_Handle, gsQuery, "", "" );
}
stock TakePlayerPremiumPoints( playerid, valuePP )
{
	playerVariables[ playerid ][ pPremiumPoints ] -= valuePP;

	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerPremiumPoints` = %d, `playerPPSpend` = `playerPPSpend` + %d WHERE `id` = %d", playerVariables[ playerid ][ pPremiumPoints ], valuePP, GetPlayerMysqlID(playerid) );
	mysql_tquery( g_Handle, gsQuery, "", "" );
}
stock BuyPlayerCash( playerid, valueMoney, valuePP )
{
	if( playerVariables[ playerid ][ pPremiumPoints ] < valuePP )	
		return SendClientMessagef( playerid, COLOR_GREY, "Nu ai destule Puncte Premium! (%d PP)", valuePP );

	playerVariables[ playerid ][ pMoney ] += valueMoney;
	TakePlayerPremiumPoints( playerid, valuePP );
	SendClientMessagef( playerid, COLOR_RED, "(!) You have bougth $%s! (-%d Premium Points)", FormatNumber( valueMoney ), valuePP );

	gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, "%s[user:%d] bought $%s for %d PP. [/shop]", playerVariables[ playerid ][ pNormalName ], GetPlayerMysqlID(playerid), FormatNumber( valueMoney ), valuePP );
	submitToAdmins(gsString, COLOR_YELLOW);
	InsertPlayerLog( GetPlayerMysqlID(playerid), 0, gsString );
	return true;	
}
stock BuyPlayerClearFP( playerid, clearFP, clearPP )
{
	if( playerVariables[ playerid ][ pPremiumPoints ] < clearPP )	return SendClientMessagef( playerid, COLOR_GREY, "Nu ai destule Puncte Premium! (%d PP)", clearPP );
	if( !playerVariables[ playerid ][ pFP ] ) 						return SendClientMessage( playerid, COLOR_GREY, "Nu ai Faction Punish pe acest cont!" );

	if( playerVariables[ playerid ][ pFP ] < clearFP )
		playerVariables[ playerid ][ pFP ] = 0;
	else playerVariables[ playerid ][ pFP ] -= clearFP;

	TakePlayerPremiumPoints( playerid, clearPP );
	SendClientMessagef( playerid, COLOR_RED, "(!) You have cleared %d faction punish! (-%d Premium Points)", clearPP );

	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerFP` = %d WHERE `id` = %d", playerVariables[ playerid ][ pFP ], GetPlayerMysqlID(playerid) );
	mysql_tquery( g_Handle, gsQuery, "", "" );

	gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, "%s[user:%d] bought Clear %d FP for %d PP. [/shop]", playerVariables[ playerid ][ pNormalName ], GetPlayerMysqlID(playerid), clearFP, clearPP );
	submitToAdmins(gsString, COLOR_YELLOW);
	InsertPlayerLog( GetPlayerMysqlID(playerid), 0, gsString );
	return true;
}
stock ShowPlayerHackIsland( playerid, const hackReason[] )
{
	InfoTD_MSG( playerid, 5000, "You have been banned for using: %s!", hackReason );
	GameTextForPlayer( playerid, "~r~~h~HACK DETECTED", 10000, 1 );
	TogglePlayerControllable( playerid, false );
	SetPlayerPos( playerid, 5222.7686, -1572.4196, 5.8639 );
	SetPlayerFacingAngle( playerid, 3.8343 );
	SetCameraBehindPlayer( playerid );
}
stock ClosePlayerReport( playerid, Player, rText[] )
{
	AdminBroadCast( 1, COLOR_GREY, "%s closed Report from %s [%d, level %d]: %s", username( playerid ), username( Player ), Player, playerVariables[ Player ][ pLevel ], rText );
	InsertCMDLog( GetPlayerMysqlID(playerid), GetPlayerMysqlID(Player), "/cr", rText );
	SendClientMessagef( Player, COLOR_ATTACK, "* Adminul %s ti-a raspuns la report: %s", username( playerid ), rText );

    if(Iter_Contains(server_reports, Player)) Iter_Remove(server_reports, Player), server_reports--;
	playerVariables[ Player ][ pReported ] = 0;
	playerVariables[ playerid ][ pReportAccepted ] = -1;
	playerVariables[ Player ][ pReportAccepted ] = -1;
	playerVariables[ playerid ][ pAdminReports ]++;
}
stock UpdateApartment(apartment_id)
{
	gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, ""COL_W"Apartment: "COL_R"%d\n"COL_W"Rent: "COL_R"$%s\n"COL_W"Doors: "COL_R"%s\n"COL_W"Renters: "COL_R"%d\n"COL_R"Type /rent apartment for rent.", apartment_id, FormatNumber(GetGVarInt( "apartment_RENT", apartment_id )), GetGVarInt("apartment_LOCK", apartment_id) == 1 ? "Locked" : "Unlocked", GetGVarInt("apartment_RENTERS", apartment_id));
	UpdateDynamic3DTextLabelText( Text3D:GetGVarInt( "apartment_3DTEXT", apartment_id ), ~1, gsString );
}
stock UpdateHouseText( X, type )
{
	switch( type )
	{
		case 0: // Bought
		{
			gsString[ 0 ] = EOS;
			format( gsString, sizeof gsString, "HouseID: "COL_R"%d\n"COL_R"%s\n"COL_W"Owner: "COL_R"%s\n"COL_W"Size: "COL_R"%s "COL_W"| Level: "COL_R"%d\n"COL_YE"Rent: %d$ (/rent room)", X, GetGVarStringEx( "house_Name", X ), GetGVarStringEx( "house_Owner", X ), HouseSize[ GetGVarInt( "house_Type", X ) ], GetGVarInt( "house_Level", X ), GetGVarInt( "house_Rent", X ) );
			UpdateDynamic3DTextLabelText( Text3D:GetGVarInt( "House3DText", X ), ~1, gsString );
		}
		case 1: // Sold
		{
			gsString[ 0 ] = EOS;
			format( gsString, sizeof gsString, ""COL_W"House "COL_R"%d\n"COL_W"Owner: "COL_R"%s\n"COL_W"Size: "COL_R"%s\n"COL_W"Level: "COL_R"%d\n"COL_W"Price: "COL_R"$%s\n"COL_R"Type /buyhouse to buy this house", X, GetGVarStringEx( "house_Owner", X ), HouseSize[ GetGVarInt( "house_Type", X ) ], GetGVarInt( "house_Level", X ), FormatNumber(GetGVarInt( "house_Price", X )) );
			UpdateDynamic3DTextLabelText( Text3D:GetGVarInt( "House3DText", X ), ~1, gsString );
		}
		case 2: // Bid
		{
			gsString[ 0 ] = EOS;
			format( gsString, sizeof gsString, "HouseID: "COL_R"%d\n"COL_W"Owner: "COL_R"%s\n"COL_W"Size: "COL_R"%s "COL_W"| Level: "COL_R"%d\n"COL_W"House will be auctioned!", X, GetGVarStringEx( "house_Owner", X ), HouseSize[ GetGVarInt( "house_Type", X ) ], GetGVarInt( "house_Level", X ) );
			UpdateDynamic3DTextLabelText( Text3D:GetGVarInt( "House3DText", X ), ~1, gsString );
		}
	}
}

stock UpdateBusinessText( X )
{
	gsString[0] = EOS;
	switch( GetGVarInt( "bus_Type", X ) )
	{
		case 6: // Gas Station
		{
			if(GetBusinessTurfID(X) == 0)
			{
				switch( GetGVarInt( "bus_Status", X ) )
				{
					case 0: format( gsString, sizeof gsString, ""COL_B"%s\n{FFFFFF}Business "COL_B"#%d\n{FFFFFF}Fuel Price: "COL_B"$%d {FFFFFF}(/fill)\n{FFFFFF}Price: "COL_B"$%s\nLevel: %d\n{FFFFFF}Owner: "COL_B"%s\n"COL_B"Press F to enter", GetGVarStringEx( "bus_Name", X ), X, GetGVarInt( "bus_Fuel", X ), FormatNumber( GetGVarInt( "bus_Price", X ) ), GetGVarInt( "bus_Level", X ), GetGVarStringEx( "bus_Owner", X ) );
					case 1: format( gsString, sizeof gsString, ""COL_B"%s\n{FFFFFF}Business "COL_B"#%d\n{FFFFFF}Fuel Price: "COL_B"$%d {FFFFFF}(/fill)\n{FFFFFF}Price: "COL_B"$%s\nLevel: %d\n{FFFFFF}Owner: "COL_B"%s\n"COL_B"This business is locked!", GetGVarStringEx( "bus_Name", X ), X, GetGVarInt( "bus_Fuel", X ), FormatNumber( GetGVarInt( "bus_Price", X ) ), GetGVarInt( "bus_Level", X ), GetGVarStringEx( "bus_Owner", X ) );
				}
			}
			else
			{
				switch( GetGVarInt( "bus_Status", X ) )
				{
					case 0: format( gsString, sizeof gsString, ""COL_B"%s\n{FFFFFF}Business "COL_B"#%d\n{FFFFFF}Fuel Price: "COL_B"$%d {FFFFFF}(/fill)\n{FFFFFF}Price: "COL_B"$%s\nLevel: %d\n{FFFFFF}Owner: "COL_B"%s\n{FFFFFF}Extortion: {690808}%d%%\n"COL_B"Press F to enter", GetGVarStringEx( "bus_Name", X ), X, GetGVarInt( "bus_Fuel", X ), FormatNumber( GetGVarInt( "bus_Price", X ) ), 
						GetGVarInt( "bus_Level", X ), GetGVarStringEx( "bus_Owner", X ), GetGVarInt("faction_busExtortion", GetGVarInt("turf_Owner", GetBusinessTurfID(X))) );
					case 1: format( gsString, sizeof gsString, ""COL_B"%s\n{FFFFFF}Business "COL_B"#%d\n{FFFFFF}Fuel Price: "COL_B"$%d {FFFFFF}(/fill)\n{FFFFFF}Price: "COL_B"$%s\nLevel: %d\n{FFFFFF}Owner: "COL_B"%s\n{FFFFFF}Extortion: {690808}%d%%\n"COL_B"This business is locked!", GetGVarStringEx( "bus_Name", X ), X, GetGVarInt( "bus_Fuel", X ), FormatNumber( GetGVarInt( "bus_Price", X ) ), 
						GetGVarInt( "bus_Level", X ), GetGVarStringEx( "bus_Owner", X ), GetGVarInt("faction_busExtortion", GetGVarInt("turf_Owner", GetBusinessTurfID(X))) );
				}
			}
			SetGVarInt( "Business_Zone", CreateDynamicCircle( GetGVarFloat( "bus_EnterX", X ), GetGVarFloat( "bus_EnterY", X ), 50, -1, -1, -1 ), X );
		}
		case 5: // PNS
		{
			if(GetBusinessTurfID(X) == 0)
			{
				format( gsString, sizeof gsString, ""COL_B"%s\n{FFFFFF}Business "COL_B"#%d\n{FFFFFF}Enter Fee: "COL_B"$%d\n{FFFFFF}Price: "COL_B"$%s\n{FFFFFF}Level: "COL_B"%d\n{FFFFFF}Owner: "COL_B"%s\n\n"COL_B"This business has no interior!", GetGVarStringEx( "bus_Name", X ), X, GetGVarInt( "bus_Fee", X ), FormatNumber( GetGVarInt( "bus_Price", X ) ), GetGVarInt( "bus_Level", X ), GetGVarStringEx( "bus_Owner", X ) );
			}
			else
			{
				format( gsString, sizeof gsString, ""COL_B"%s\n{FFFFFF}Business "COL_B"#%d\n{FFFFFF}Enter Fee: "COL_B"$%d\n{FFFFFF}Price: "COL_B"$%s\n{FFFFFF}Level: "COL_B"%d\n{FFFFFF}Owner: "COL_B"%s\n{FFFFFF}Extortion: {690808}%d%%\n\n"COL_B"This business has no interior!", GetGVarStringEx( "bus_Name", X ), X, GetGVarInt( "bus_Fee", X ), FormatNumber( GetGVarInt( "bus_Price", X ) ), 
					GetGVarInt( "bus_Level", X ), GetGVarStringEx( "bus_Owner", X ), GetGVarInt("faction_busExtortion", GetGVarInt("turf_Owner", GetBusinessTurfID(X))) );
			}
			SetGVarInt( "Business_Zone", CreateDynamicCircle( GetGVarFloat( "bus_EnterX", X ), GetGVarFloat( "bus_EnterY", X ), 50, -1, -1, -1 ), X );
		}
		case 11: // Tuning
		{
			if(GetBusinessTurfID(X) == 0)
			{
				format( gsString, sizeof gsString, ""COL_B"%s\n{FFFFFF}Business "COL_B"#%d\n{FFFFFF}Tuning Fee: "COL_B"$%s\n{FFFFFF}Price: "COL_B"$%s\n{FFFFFF}Level: "COL_B"%d\n{FFFFFF}Owner: "COL_B"%s\n\n"COL_LR"No interior!", GetGVarStringEx( "bus_Name", X ), X, FormatNumber( GetGVarInt( "bus_Fee", X ) ), FormatNumber( GetGVarInt( "bus_Price", X ) ), GetGVarInt( "bus_Level", X ), GetGVarStringEx( "bus_Owner", X ) );
			}
			else
			{
				format( gsString, sizeof gsString, ""COL_B"%s\n{FFFFFF}Business "COL_B"#%d\n{FFFFFF}Tuning Fee: "COL_B"$%d\n{FFFFFF}Price: "COL_B"$%s\n{FFFFFF}Level: "COL_B"%d\n{FFFFFF}Owner: "COL_B"%s\n{FFFFFF}Extortion: {690808}%d%%\n\n"COL_LR"No interior!", GetGVarStringEx( "bus_Name", X ), X, GetGVarInt( "bus_Fee", X ), FormatNumber( GetGVarInt( "bus_Price", X ) ), 
					GetGVarInt( "bus_Level", X ), GetGVarStringEx( "bus_Owner", X ), GetGVarInt("faction_busExtortion", GetGVarInt("turf_Owner", GetBusinessTurfID(X))) );
			}
			SetGVarInt( "Business_Zone", CreateDynamicCircle( GetGVarFloat( "bus_EnterX", X ), GetGVarFloat( "bus_EnterY", X ), 50, -1, -1, -1 ), X );
		}
		case 12: // Airport Fuel Pump
		{
			if(GetBusinessTurfID(X) == 0)
			{
				format( gsString, sizeof gsString, ""COL_B"%s\n{FFFFFF}Business "COL_B"#%d\n{FFFFFF}Fuel Price: "COL_B"$%d/L {FFFFFF}(/fillplane)\n{FFFFFF}Price: "COL_B"$%s\n{FFFFFF}Level: "COL_B"%d\n{FFFFFF}Owner: "COL_B"%s", GetGVarStringEx( "bus_Name", X ), X, GetGVarInt( "bus_Fuel", X ), FormatNumber( GetGVarInt( "bus_Price", X ) ), GetGVarInt( "bus_Level", X ), GetGVarStringEx( "bus_Owner", X ) );
			}
			else
			{
				format( gsString, sizeof gsString, ""COL_B"%s\n{FFFFFF}Business "COL_B"#%d\n{FFFFFF}Fuel Price: "COL_B"$%d/L {FFFFFF}(/fillplane)\n{FFFFFF}Price: "COL_B"$%s\n{FFFFFF}Level: "COL_B"%d\n{FFFFFF}Owner: "COL_B"%s\n{FFFFFF}Extortion: {690808}%d%%", GetGVarStringEx( "bus_Name", X ), X, GetGVarInt( "bus_Fuel", X ), FormatNumber( GetGVarInt( "bus_Price", X ) ), 
					GetGVarInt( "bus_Level", X ), GetGVarStringEx( "bus_Owner", X ), GetGVarInt("faction_busExtortion", GetGVarInt("turf_Owner", GetBusinessTurfID(X))) );
			}
			SetGVarInt( "Business_Zone", CreateDynamicCircle( GetGVarFloat( "bus_EnterX", X ), GetGVarFloat( "bus_EnterY", X ), 50, -1, -1, -1 ), X );
		}
		case 16: // hotel
		{
			switch(GetGVarInt("bus_OwnerKey", X))
			{
				case 0:
				{
					format( gsString, sizeof gsString, ""COL_B"{FFFFFF}Hotel LURK\n{FFFFFF}Hotel price: "COL_B"$%s\n{FFFFFF}Hotel Level: "COL_B"%d\n{FFFFFF}Type "COL_B"/buyhotel {FFFFFF}for buy the hotel",
						FormatNumber(GetGVarInt("bus_Price", X)), GetGVarInt("bus_Level", X));
				}
				default:
				{
					format( gsString, sizeof gsString, ""COL_B"{FFFFFF}Hotel LURK\n{FFFFFF}Hotel Level: "COL_B"%d\n{FFFFFF}Hotel Owner "COL_B"%s",
						GetGVarInt("bus_Level", X), GetGVarStringEx("bus_Owner", X));
				}
			}
			SetGVarInt( "Business_Zone", CreateDynamicCircle( GetGVarFloat( "bus_EnterX", X ), GetGVarFloat( "bus_EnterY", X ), 50, -1, -1, -1 ), X );
		}
		default:
		{
			if(GetBusinessTurfID(X) == 0)
			{
				switch( GetGVarInt( "bus_Status", X ) )
				{
					case 0: format( gsString, sizeof gsString, ""COL_B"%s\n{FFFFFF}Business "COL_B"#%d\n{FFFFFF}Enter Fee: "COL_B"$%d\n{FFFFFF}Price: "COL_B"$%s\n{FFFFFF}Level: "COL_B"%d\n{FFFFFF}Owner: "COL_B"%s\n\n"COL_B"Press F to enter", GetGVarStringEx( "bus_Name", X ), X, GetGVarInt( "bus_Fee", X ), FormatNumber( GetGVarInt( "bus_Price", X ) ), GetGVarInt( "bus_Level", X ), GetGVarStringEx( "bus_Owner", X ));
					case 1: format( gsString, sizeof gsString, ""COL_B"%s\n{FFFFFF}Business "COL_B"#%d\n{FFFFFF}Enter Fee: "COL_B"$%d\n{FFFFFF}Price: "COL_B"$%s\n{FFFFFF}Owner: "COL_B"%s\n\n"COL_B"This business is locked!", GetGVarStringEx( "bus_Name", X ), X, GetGVarInt( "bus_Fee", X ), FormatNumber( GetGVarInt( "bus_Price", X ) ), GetGVarStringEx( "bus_Owner", X ));
				}
			}
			else
			{
				switch( GetGVarInt( "bus_Status", X ) )
				{
					case 0: format( gsString, sizeof gsString, ""COL_B"%s\n{FFFFFF}Business "COL_B"#%d\n{FFFFFF}Enter Fee: "COL_B"$%d\n{FFFFFF}Price: "COL_B"$%s\n{FFFFFF}Level: "COL_B"%d\n{FFFFFF}Owner: "COL_B"%s\n{FFFFFF}Extortion: {690808}%d%%\n\n"COL_B"Press F to enter", GetGVarStringEx( "bus_Name", X ), X, GetGVarInt( "bus_Fee", X ), FormatNumber( GetGVarInt( "bus_Price", X ) ), 
						GetGVarInt( "bus_Level", X ), GetGVarStringEx( "bus_Owner", X ), GetGVarInt("faction_busExtortion", GetGVarInt("turf_Owner", GetBusinessTurfID(X))));
					case 1: format( gsString, sizeof gsString, ""COL_B"%s\n{FFFFFF}Business "COL_B"#%d\n{FFFFFF}Enter Fee: "COL_B"$%d\n{FFFFFF}Price: "COL_B"$%s\n{FFFFFF}Owner: "COL_B"%s\n{FFFFFF}Extortion: {690808}%d%%\n\n"COL_B"This business is locked!", GetGVarStringEx( "bus_Name", X ), X, GetGVarInt( "bus_Fee", X ), 
						FormatNumber( GetGVarInt( "bus_Price", X ) ), GetGVarStringEx( "bus_Owner", X ), GetGVarInt("faction_busExtortion", GetGVarInt("turf_Owner", GetBusinessTurfID(X))));
				}
			}
		}

	}
	UpdateDynamic3DTextLabelText( Text3D:GetGVarInt( "Business3DText", X ), 0xFFFF66FF, gsString );
}
stock GivePlayerHelmet( playerid )
{
	// < Check if this skin even has a helmet preset and store the player's skin in a variable for performance )
	new helm_skin = GetPlayerSkin( playerid );
	if( HelmetPos[ helm_skin ][ 0 ] == 0.0 ) return false;

	// < Generate Random Helmet Object )
	new objectID;
	switch( random( 4 ) )
	{
		case 0: objectID = 18645;
		case 1: objectID = 18979;
		case 2: objectID = 18977;
		case 3: objectID = 18978;
	}
	// < Modify the helmet scale )
	static Float:HelmetScaleX = 1.0, Float:HelmetScaleY = 1.0, Float:HelmetScaleZ = 1.0;
	if( HelmetPos[ helm_skin ][ 6 ] > 0.0 ) HelmetScaleX = HelmetPos[ helm_skin ][ 6 ];
	if( HelmetPos[ helm_skin ][ 7 ] > 0.0 ) HelmetScaleY = HelmetPos[ helm_skin ][ 7 ];
	if( HelmetPos[ helm_skin ][ 8 ] > 0.0 ) HelmetScaleZ = HelmetPos[ helm_skin ][ 8 ];

	// < Attach the helmet to the player )
	SetPlayerAttachedObject( playerid, INDEX_HAT, objectID, 2, HelmetPos[ helm_skin ][ 0 ], HelmetPos[ helm_skin ][ 1 ], HelmetPos[ helm_skin ][ 2 ], HelmetPos[ helm_skin ][ 3 ], HelmetPos[ helm_skin ][ 4 ], HelmetPos[ helm_skin ][ 5 ], HelmetScaleX, HelmetScaleY, HelmetScaleZ );
	return true;
}
stock IsFactionLeaderOnline( factionID )
{
	foreach(new i : server_leaders)
		if( playerVariables[ i ][ pFaction ] == factionID && playerVariables[ i ][ pFactionRank ] == 7 ) return true;

	return false;
}
stock GetTaxiDriverEarnings( playerid )
{
	return Iter_Count( getDriverEarnings[ playerid ] );
}
#if defined UBERSYS
stock GetUberDriverEarnings( playerid )
{
	return Iter_Count( playerUber[ playerid ] );
}
#endif
stock ShowPlayerShopDialog( playerid )
{
	gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, "Weapon\tPrice\tAmmo\n" );
	for( new i = 0; i < sizeof(SHOP_WEAPONS); i++ )
		format( gsString, sizeof gsString, "%s%s\t$%d\t%d\n", gsString, SHOP_WEAPONS[ i ][ weapon_Name ], SHOP_WEAPONS[ i ][ weapon_Price ], SHOP_WEAPONS[ i ][ weapon_Bullets ] );

	return ShowPlayerDialog( playerid, DIALOG_BUY_GUN, DIALOG_STYLE_TABLIST_HEADERS, "SHOP: Weapons", gsString, "Buy", "Exit" );
}
stock GiveChristmasHat( playerid, type )
{
	switch( type )
	{
		case 1:
		{
			if( IsPlayerAttachedObjectSlotUsed( playerid, 1 ) ) RemovePlayerAttachedObject( playerid, 1 );
			SetPlayerAttachedObject( playerid, 1, 19065, 15, -0.025, -0.04, 0.23, 0, 0, 270, 2, 2, 2 );
		}
		case 2:
		{
			if( IsPlayerAttachedObjectSlotUsed( playerid, 1 ) ) RemovePlayerAttachedObject( playerid, 1 );
			SetPlayerAttachedObject( playerid, 1, 19065, 2, 0.120000, 0.040000, -0.003500, 0, 100, 100, 1.4, 1.4, 1.4 );
		}
	}
}
stock LoadPlayerInterpolateCamera( playerid, cameraType = 0 )
{
	switch( cameraType )
	{
		case 0:
		{
			TogglePlayerSpectating( playerid, true );
			

			// < Move player's camera >
			InterpolateCameraPos(playerid, -2584.939453, -263.340026, 71.215316, -2779.980224, 486.282104, 79.403007, 20000);
			InterpolateCameraLookAt(playerid, -2588.043945, -259.590667, 70.073143, -2777.938232, 482.469940, 76.893569, 12000);
		}
		case 1:
		{
			SetPlayerCameraPos( playerid, 555.2475, -1549.2821, 37.8465 );
			SetPlayerCameraLookAt( playerid, 554.6566, -1548.4771, 37.5665 );

			// < Spawn gara LS >
			//SetPlayerCameraPos( playerid, 1830.9386, -1837.7693, 32.7384 );
			//SetPlayerCameraLookAt( playerid, 1830.2800, -1838.5179, 32.1734 );
		}
	}
}
stock GetPlayerCityID( playerid )
{
	new findZone = 0;
	if( IsPlayerInZone( playerid, "Los Santos" ) ) findZone = 0;
	else if( IsPlayerInZone( playerid, "Las Venturas" ) ) findZone = 1;
	else if( IsPlayerInZone( playerid, "San Fierro" ) ) findZone = 2;
	return findZone;
}
stock CheckServerBIDDays()
{
	// < Empty the table )
	mysql_tquery( g_Handle, "TRUNCATE `server_bids`", "", "" );

	// < Check for houses )
	mysql_tquery( g_Handle, "SELECT `playerHouse` FROM `server_accounts` WHERE UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(`playerLastOnline`) > "BID_CHECK_DAYS"*(24*60*60) AND `playerHouse` != 0", "CheckBID_House", "" );

	// < Check for business )
	mysql_tquery( g_Handle, "SELECT `playerBusiness` FROM `server_accounts` WHERE UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(`playerLastOnline`) > "BID_CHECK_DAYS"*(24*60*60) AND `playerBusiness` != 0", "CheckBID_Business", "" );

	// < Insert into the database )
	foreach( new b : ServerBusiness )
		if( GetGVarInt( "bus_OwnerKey", b ) == 1 )
		{
			gsQuery[ 0 ] = EOS;
			mysql_format( g_Handle, gsQuery, sizeof gsQuery, "INSERT INTO `server_bids`(`bidType`, `bidValue`) VALUES (1, %d)", b );
			mysql_tquery( g_Handle, gsQuery, "", "" );
		}
	foreach( new h : ServerHouses )
		if( GetGVarInt( "house_OwnerKey", h ) == 1 )
		{
			gsQuery[ 0 ] = EOS;
			mysql_format( g_Handle, gsQuery, sizeof gsQuery, "INSERT INTO `server_bids`(`bidType`, `bidValue`) VALUES (0, %d)", h );
			mysql_tquery( g_Handle, gsQuery, "", "" );
		}
}
stock StartServerBids()
{
	new GetTime[ 3 ];
	gettime( GetTime[ 0 ], GetTime[ 1 ], GetTime[ 2 ] );
	serverVariables[ currentBIDTimer ] = -1;

	if( GetTime[ 0 ] >= 20 && GetTime[ 0 ] < 23 )
		SetTimer( "LoadServerBID", 30000, false );
}
function LoadServerBID()
{
	mysql_pquery( g_Handle, "SELECT * FROM `server_bids` ORDER BY `bidKey` DESC LIMIT 1", "LoadServerBids", "" );
}
stock GetBidTypeString( bidKey )
{
	new stringBID[ 32 ];
	stringBID = GetGVarInt( "bid_Type", bidKey ) ? ("business(afacere)") : ("house(casa)");
	return stringBID;
}
stock DeleteTradePVars( playerid )
{
	DeletePVar( playerid, "trade_Player" );
	DeletePVar( playerid, "trade_Slot" );
	DeletePVar( playerid, "trade_Price" );
}
stock CreateVehicleVipColor( id )
{
	gsString[ 0 ] = EOS;

	switch( id )
	{
		case 0: gsString = "{FFFFFF}";
		case 1: gsString = "{0BA10B}"; 
		case 2: gsString = "{D1FF99}";
		case 3: gsString = "{FF3D98}";
		case 4: gsString = "{F9FF3D}";
		case 5: gsString = "{FFEF85}";			
		case 6: gsString = "{3DE5FF}";			
		case 7: gsString = "{FFAB3D}";			
		case 8: gsString = "{A13DFF}";			
		case 9: gsString = "{FFC27D}";			
		case 10: gsString = "{FFA3A3}";			
		case 11: gsString = "{C5A3FF}";	
	}

	return gsString;
}
stock CreateVehicleText( playerid, slot, const vText[] )
{
	gsString[ 0 ] = EOS;
	format( gsString, sizeof ( gsString ), "%s%s", vehicleVariables[ slot ][ playerid ][ vehicleVIPColor ], vText );
	switch( vehicleVariables[ slot ][ playerid ][ VehicleModelID ] )
	{
		case 411: // Infernus
		{
			SetGVarInt( "vehicle_VIPText", CreateDynamicObject( 19327, 0, 0, 0, 0, 0, 0, 0 ), playerVariables[ playerid ][ Vehicle ][ slot ] );
			SetDynamicObjectMaterialText( GetGVarInt( "vehicle_VIPText", playerVariables[ playerid ][ Vehicle ][ slot ] ), 0, gsString, OBJECT_MATERIAL_SIZE_256x128, "Arial", 24, 1, 0xFFFFFFFF, 0, 1 );
			AttachDynamicObjectToVehicle( GetGVarInt( "vehicle_VIPText", playerVariables[ playerid ][ Vehicle ][ slot ] ), vehicleVariables[ slot ][ playerid ][ Vehicle ], -0.02040, -1.88730, 0.24480, -84.71710, 0.00000, 0.00000 );
		}
		case 541: // Bullet
		{
			SetGVarInt( "vehicle_VIPText", CreateDynamicObject( 19327, 0, 0, 0, 0, 0, 0, 0 ), playerVariables[ playerid ][ Vehicle ][ slot ] );
			SetDynamicObjectMaterialText( GetGVarInt( "vehicle_VIPText", playerVariables[ playerid ][ Vehicle ][ slot ] ), 0, gsString, OBJECT_MATERIAL_SIZE_256x128, "Arial", 24, 1, 0xFFFFFFFF, 0, 1 );
			AttachDynamicObjectToVehicle( GetGVarInt( "vehicle_VIPText", playerVariables[ playerid ][ Vehicle ][ slot ] ), vehicleVariables[ slot ][ playerid ][ Vehicle ], -0.0204, -1.77730, 0.35680, -77.71710, 0.00000, 0.00000 );
		}
		case 560: // Sultan
		{
			SetGVarInt( "vehicle_VIPText", CreateDynamicObject( 19327, 0, 0, 0, 0, 0, 0, 0 ), playerVariables[ playerid ][ Vehicle ][ slot ] );
			SetDynamicObjectMaterialText( GetGVarInt( "vehicle_VIPText", playerVariables[ playerid ][ Vehicle ][ slot ] ), 0, gsString, OBJECT_MATERIAL_SIZE_256x128, "Arial", 24, 1, 0xFFFFFFFF, 0, 1 );
			AttachDynamicObjectToVehicle( GetGVarInt( "vehicle_VIPText", playerVariables[ playerid ][ Vehicle ][ slot ] ), vehicleVariables[ slot ][ playerid ][ Vehicle ], -0.02520, -2.00390, 0.37480, -86.71710, 0.00000, 0.00000 );
		}
	}
}
stock CreateVehicleNeon( playerid, slot )
{
	switch( vehicleVariables[ slot ][ playerid ][ VehicleModelID ] )
	{
		case 411: // Infernus
		{
			SetGVarInt( "vehicle_Neon1", CreateDynamicObject( VehicleNeon[ vehicleVariables[ slot ][ playerid ][ VehicleVIPNeon ] ], 0, 0, 0, 0, 0, 0, 0 ), playerVariables[ playerid ][ Vehicle ][ slot ] );
			SetGVarInt( "vehicle_Neon2", CreateDynamicObject( VehicleNeon[ vehicleVariables[ slot ][ playerid ][ VehicleVIPNeon ] ], 0, 0, 0, 0, 0, 0, 0 ), playerVariables[ playerid ][ Vehicle ][ slot ] );
			AttachDynamicObjectToVehicle( GetGVarInt( "vehicle_Neon1", playerVariables[ playerid ][ Vehicle ][ slot ] ), vehicleVariables[ slot ][ playerid ][ Vehicle ], 0.964843, -0.284423, -0.520000, 0.00000, 0.00000, 0.00000 );
			AttachDynamicObjectToVehicle( GetGVarInt( "vehicle_Neon2", playerVariables[ playerid ][ Vehicle ][ slot ] ), vehicleVariables[ slot ][ playerid ][ Vehicle ], -0.964843, -0.284423, -0.520000, 0.00000, 0.00000, 0.00000 );
		}
		case 541: // Bullet
		{
			SetGVarInt( "vehicle_Neon1", CreateDynamicObject( VehicleNeon[ vehicleVariables[ slot ][ playerid ][ VehicleVIPNeon ] ], 0, 0, 0, 0, 0, 0, 0 ), playerVariables[ playerid ][ Vehicle ][ slot ] );
			SetGVarInt( "vehicle_Neon2", CreateDynamicObject( VehicleNeon[ vehicleVariables[ slot ][ playerid ][ VehicleVIPNeon ] ], 0, 0, 0, 0, 0, 0, 0 ), playerVariables[ playerid ][ Vehicle ][ slot ] );
			AttachDynamicObjectToVehicle( GetGVarInt( "vehicle_Neon1", playerVariables[ playerid ][ Vehicle ][ slot ] ), vehicleVariables[ slot ][ playerid ][ Vehicle ], 0.890625, -0.081054, -0.420004, 0.00000, 0.00000, 0.00000 );
			AttachDynamicObjectToVehicle( GetGVarInt( "vehicle_Neon2", playerVariables[ playerid ][ Vehicle ][ slot ] ), vehicleVariables[ slot ][ playerid ][ Vehicle ], -0.890625, -0.081054, -0.420004, 0.00000, 0.00000, 0.00000 );
		}
		case 560: // Sultan
		{
			SetGVarInt( "vehicle_Neon1", CreateDynamicObject( VehicleNeon[ vehicleVariables[ slot ][ playerid ][ VehicleVIPNeon ] ], 0, 0, 0, 0, 0, 0, 0 ), playerVariables[ playerid ][ Vehicle ][ slot ] );
			SetGVarInt( "vehicle_Neon2", CreateDynamicObject( VehicleNeon[ vehicleVariables[ slot ][ playerid ][ VehicleVIPNeon ] ], 0, 0, 0, 0, 0, 0, 0 ), playerVariables[ playerid ][ Vehicle ][ slot ] );
			AttachDynamicObjectToVehicle( GetGVarInt( "vehicle_Neon1", playerVariables[ playerid ][ Vehicle ][ slot ] ), vehicleVariables[ slot ][ playerid ][ Vehicle ], 0.981567, -0.039062, -0.400004, 0.00000, 0.00000, 0.00000 );
			AttachDynamicObjectToVehicle( GetGVarInt( "vehicle_Neon2", playerVariables[ playerid ][ Vehicle ][ slot ] ), vehicleVariables[ slot ][ playerid ][ Vehicle ], -0.981567, -0.039062, -0.400004, 0.00000, 0.00000, 0.00000 );
		}
	}
}
stock DestroyVehicle_Neon( playerid, slot )
{
	DestroyDynamicObject( GetGVarInt( "vehicle_Neon1", playerVariables[ playerid ][ Vehicle ][ slot ] ) );
	DestroyDynamicObject( GetGVarInt( "vehicle_Neon2", playerVariables[ playerid ][ Vehicle ][ slot ] ) );
	DeleteGVar( "vehicle_Neon1", playerVariables[ playerid ][ Vehicle ][ slot ] );
	DeleteGVar( "vehicle_Neon2", playerVariables[ playerid ][ Vehicle ][ slot ] );
}
stock DestroyVehicle_Text( playerid, slot )
{
	DestroyDynamicObject( GetGVarInt( "vehicle_VIPText", playerVariables[ playerid ][ Vehicle ][ slot ] ) );
	DeleteGVar( "vehicle_VIPText", playerVariables[ playerid ][ Vehicle ][ slot ] );
}
stock SendRaceArenaMessage( color, const string[] )
{
	foreach(new i : Racers)
		SendClientMessage( i, color, string );
}

stock ResetRaceArena()
{
	// < Reset the Race Arena >
	raceVariables[ raceStatus ] = 0;
	raceVariables[ raceStarted ] = 0;
	raceVariables[ raceTimer ] = 0;
	raceVariables[raceVoting] = 0;
	raceVariables[noonevoted1] = 0;
	raceVariables[noonevoted2] = 0;
	raceVariables[noonevoted3] = 0;
	raceVariables[raceTimerPreparate] = 0;
	raceVariables[racePlayers] = 0;
	raceVariables[raceTrack] = -1;
	raceVariables[raceVehicle] = -1;
	raceVariables[raceVehicleIDE] = -1;
	raceVariables[raceType] = -1;

	raceVariables[raceVehicleID][0] = -1;
	raceVariables[raceVehicleID][1] = -1;
	raceVariables[raceVehicleID][2] = -1;
	raceVariables[raceVehicleID][3] = -1;

	raceVariables[raceVoteVehicle][0] = -1;
	raceVariables[raceVoteVehicle][1] = -1;
	raceVariables[raceVoteVehicle][2] = -1;
	raceVariables[raceVoteVehicle][3] = -1;
	raceVariables[raceVoteVehicle][4] = -1;
	raceVariables[raceVoteVehicle][5] = -1;

	raceVariables[raceVoteTrack][0] = -1;
	raceVariables[raceVoteTrack][1] = -1;
	raceVariables[raceVoteTrack][2] = -1;
	raceVariables[raceVoteTrack][3] = -1;

	raceVariables[raceVoteType][0] = -1;
	raceVariables[raceVoteType][1] = -1;

	raceVariables[ PositionRaceFinish ] = 0;
}

stock RemovePlayerFromRaceArena(playerid)
{
	Iter_Remove(Racers, playerid);

	raceVariables[ racePlayers ]--;
	playerVariables[ playerid ][ pRCP ] = 0;
	DisablePlayerRaceCheckpoint( playerid );
	playerVariables[ playerid ][ pRaceArena ] = 0;
	playerVariables[ playerid ][ pRaceArenaLeaving ] = true;
	DestroyVehicle_(raceCar[playerid]);
	raceCar[playerid] = INVALID_VEHICLE_ID;
	Delete3DTextLabel( raceVariables[ raceText ][playerid] );
	SetCameraBehindPlayer( playerid );

	playerVariables[playerid][pRaceVotedVehicleID] = 0;
	playerVariables[playerid][pRaceVotedVehicle] = 0;
	playerVariables[playerid][pRaceVotedType] = 0;
	playerVariables[playerid][pRaceVotedMap] = 0;

	DisableRemoteVehicleCollisions( playerid, false );
	PlayerTextDrawHide( playerid, PlayerText:MINIGAME_TD );
	SpawnPlayer( playerid );
}
stock IsMultipler( number1, number2 )
{
	if( number1 % number2 == 0 ) return true;
	return false;
}
stock FIXES_SpawnPlayer( playerid )
{
	new vehicleID = GetPlayerVehicleID( playerid );
	if( vehicleID )
	{
		new Float:x, Float:y, Float:z;
		GetVehiclePos( vehicleID, x, y, z ),
		SetPlayerPos( playerid, x, y, z );
	}
	return SpawnPlayer( playerid );
}
stock ShowPlayerLicenses( Player, playerid )
{
	new licenseText[ 64 ];
	SendClientMessage( Player, COLOR_WHITE, "--------------------------------------------------------------" );
	SendClientMessagef( Player, COLOR_GREY, "%s's licenses:", username( playerid ) );
	SendClientMessagef( Player, COLOR_GREY, "** Driving license:%c%s.", ( playerVariables[ playerid ][ pCarLicense ] ) ? format( licenseText, sizeof licenseText, "Passed (expires in %d hours)", playerVariables[ playerid ][ pCarLicense ] ) : format( licenseText, sizeof licenseText, "Not passed" ), licenseText );
	SendClientMessagef( Player, COLOR_GREY, "** Weapons license:%c%s.", ( playerVariables[ playerid ][ pGunLicense ] ) ? format( licenseText, sizeof licenseText, "Passed (expires in %d hours)", playerVariables[ playerid ][ pGunLicense ] ) : format( licenseText, sizeof licenseText, "Not passed" ), licenseText );
	SendClientMessagef( Player, COLOR_GREY, "** Fly license:%c%s.", ( playerVariables[ playerid ][ pFlyLicense ] ) ? format( licenseText, sizeof licenseText, "Passed (expires in %d hours)", playerVariables[ playerid ][ pFlyLicense ] ) : format( licenseText, sizeof licenseText, "Not passed" ), licenseText );
	SendClientMessagef( Player, COLOR_GREY, "** Boat license:%c%s.", ( playerVariables[ playerid ][ pBoatLicense ] ) ? format( licenseText, sizeof licenseText, "Passed (expires in %d hours)", playerVariables[ playerid ][ pBoatLicense ] ) : format( licenseText, sizeof licenseText, "Not passed" ), licenseText );
	SendClientMessage( Player, COLOR_WHITE, "--------------------------------------------------------------" );
	return true;
}
stock IsPlayerFalling( playerid )
{
	new Float:Velocity[ 3 ];
	GetPlayerVelocity( playerid, Velocity[ 0 ], Velocity[ 1 ], Velocity[ 2 ] );
	return ( Velocity[ 2 ] != 0.0 );
}
stock OnWeaponDropInit()
{
	foreach(new i : Player)
	{
		for( new a = 0; a < 14; a++ )
		{
			WeaponDrop[ i ][ a ] 	  = -1;
			WeaponData[ i ][ a ][ 0 ] = -1;
			WeaponData[ i ][ a ][ 1 ] = -1;
		}
		playerVariables[ i ][ pWeaponTimer ] = -1;
	}
	return true;
}
stock OnWeaponDropPickup( playerid, pickupid )
{
	if( !playerVariables[ playerid ][ pFactionWar ] ) return true;
	foreach(new i : Player)
	{
		if( HealthDrop[ i ] == pickupid )
		{
			//( playerid, 1150, 0.0, 0.0, 0.0 );
			GivePlayerHealth( playerid, 25 ), DestroyDynamicPickup( HealthDrop[ i ] );
			InfoTD_MSG( playerid, 3000, "You have picked up 25 percent Health from %s's body!", playerVariables[ i ][ pNormalName ] );
		}
		for( new a = 0; a < 13; a++ )
		{
			if( WeaponDrop[ i ][ a ] == pickupid )
			{
				WeaponDrop[ i ][ a ] = -1;
				DestroyDynamicPickup( pickupid );
				GivePlayerServerWeapon( playerid, WeaponData[ i ][ a ][ 0 ], WeaponData[ i ][ a ][ 1 ] );
				WeaponData[ i ][ a ][ 0 ] = -1;
				WeaponData[ i ][ a ][ 1 ] = -1;
			}
		}
		if( WeaponDrop[ i ][ 13 ] == pickupid )
		{
			WeaponDrop[ i ][ 13 ] = -1;
			DestroyDynamicPickup( pickupid );
			WeaponData[ i ][ 13 ][ 0 ] = -1;
			WeaponData[ i ][ 13 ][ 1 ] = -1;
		}
	}
	return true;
}
stock OnWeaponDrop( playerid )
{
	RemovePickups( playerid );
	new Float:x, Float:y, Float:z, dropped;
	GetPlayerPos( playerid, x, y, z );

	for( new i = 0; i < 13; i++ )
	{
		new weapon, ammo;
		GetPlayerWeaponData( playerid, i, weapon, ammo );
		if( ( ammo > 0 || weapon == 1 ) && weapon != 0 )
		{
			new model = GetModel( weapon );
			if( model != -1 )
			{
				WeaponData[ playerid ][ i ][ 0 ] = weapon;
				WeaponData[ playerid ][ i ][ 1 ] = ammo;
				dropped++;
			}
		}
	}
	if( dropped > 0 )
	{
		new radius;
		switch( dropped )
		{
			case 3: radius = 1;
			case 6: radius = 2;
			case 9: radius = 3;
			case 8: radius = 4;
		}
		new Float:degree, Float:tmp;
		degree = 360.0 / ( float( dropped ) );
		tmp = degree;

		if( playerVariables[ playerid ][ pWeaponTimer ] != -1 )
			KillTimer( playerVariables[ playerid ][ pWeaponTimer ] );

		playerVariables[ playerid ][ pWeaponTimer ] = SetTimerEx( "RemovePickups", WEAPON_RESPAWN_TIME*1000, 0, "d", playerid );
		HealthDrop[ playerid ] = CreateDynamicPickup( 1240, 1, x + 3, y + 2, z, GetPlayerVirtualWorld( playerid ) );
		for( new i = 0; i < 13; i++ )
		{
			if( ( WeaponData[ playerid ][ i ][ 1 ] > 0 || WeaponData[ playerid ][ i ][ 0 ] == 1 ) && WeaponData[ playerid ][ i ][ 0 ] > 0 )
			{
				new model = GetModel( WeaponData[ playerid ][ i ][ 0 ] );
				if( model != -1 )
				{
					WeaponDrop[ playerid ][ i ] = CreateDynamicPickup( model, 1, x + ( floatsin( degree, degrees )*radius ), y + ( floatcos( degree, degrees ) * radius ), z, GetPlayerVirtualWorld( playerid ) );
					#if defined DEBUG_SERVER
						SendClientMessagef( playerid, ~1, "[Drop Debug] A fost plasat arma cu model %d in locul mortii!", model );
					#endif
					degree = degree + tmp;
				}
			}
		}
	}
	return true;
}
stock GetModel( weaponid )
{
	switch( weaponid )
	{
		case 1:  return 331;
		case 2:  return 333;
		case 3:  return 334;
		case 4:  return 335;
		case 5:  return 336;
		case 6:  return 337;
		case 7:  return 338;
		case 8:  return 339;
		case 9:  return 341;
		case 10: return 321;
		case 11: return 322;
		case 12: return 323;
		case 13: return 324;
		case 14: return 325;
		case 15: return 326;
		case 16: return 342;
		case 17: return 343;
		case 18: return 344;
		case 22: return 346;
		case 23: return 347;
		case 24: return 348;
		case 25: return 349;
		case 26: return 350;
		case 27: return 351;
		case 28: return 352;
		case 29: return 353;
		case 30: return 355;
		case 31: return 356;
		case 32: return 372;
		case 33: return 357;
		case 34: return 358;
		case 35: return 359;
		case 36: return 360;
		case 37: return 361;
		case 38: return 362;
		case 39: return 363;
		case 40: return 364;
		case 41: return 365;
		case 42: return 366;
		case 43: return 367;
		case 44: return 368;
		case 45: return 369;
		case 46: return 371;
		default: return -1;
	}
	return -1;
}
stock CountChasingCops( playerid )
{
	new count_find = 0;
	foreach( new i : playerFaction[ FACTION_COP ] )
	    if( playerVariables[ i ][ pFindPlayer ] == playerid)
	    	count_find++;
	return count_find;    
}
/*stock cache_get_field_content_int( row, field_name[], MySQL:connectionHandle )
{
	#pragma unused connectionHandle
	new retval = cellmin;
	cache_get_value_name_int(row, field_name, retval);
	return retval;
}
function Float:cache_get_field_content_float( row, field_name[], MySQL:connectionHandle )
{
	#pragma unused connectionHandle
	new Float:retval = cellmin;
	cache_get_value_name_float(row, field_name, retval);
	return retval;
}*/
stock cache_get_value_name_int( row, field_name[], &destination) 
	return destination = cache_get_field_content_int( row, field_name );
	
stock AddZeroToTime( value )
{
	new valueString[ 16 ];
	if( value < 10 )
		format( valueString, sizeof valueString, "0%d", value );
	else format( valueString, sizeof valueString, "%d", value );

	return valueString;
}
stock IsVehicleSeatUsed( vehicleid, seat )
{
	foreach(new i : Player) 
		if( IsPlayerInVehicle( i, vehicleid ) && GetPlayerVehicleSeat( i ) == seat ) return true;

	return false;
}
stock GetVehicleEmptySeat( vehicleID )
{
	new vehicleSeats = GetVehicleMaxPassengers( vehicleID );
	for( new freeSeat; freeSeat <= vehicleSeats; freeSeat++ )
		if( !IsVehicleSeatUsed( vehicleID, freeSeat ) )
			return freeSeat;

	return INVALID_VEHICLE_ID;
}
stock GetVehicleMaxPassengers( vehicleID )
{
	new vehicleModele = GetVehicleModel( vehicleID );
	if( 400 <= vehicleModele <= 611 )
	{
		static s_MaxPassengers[] =
		{
			271782163, 288428337, 288559891, -2146225407, 327282960, 271651075, 268443408, 286339857, 319894289, 823136512, 805311233,
			285414161, 286331697, 268513553, 18026752, 286331152, 286261297, 286458129, 856765201, 286331137, 856690995, 269484528,
			51589393, -15658689, 322109713, -15527663, 65343
		};
		return ( ( s_MaxPassengers[ ( vehicleModele -= 400 ) >>> 3 ] >>> ( ( vehicleModele & 7 ) << 2 ) ) & 0xF );
	}
	return 0xF;
}
stock ClearAnimationEx( playerid )
{
	ClearAnimations( playerid );
	SetPlayerSpecialAction( playerid, SPECIAL_ACTION_NONE );
}
stock VehicleName( modelID )
{
	new vName[ 32 ];
	if( modelID < 400 || modelID > 611 )
		vName = "INVALID Model";
	else
		format( vName, sizeof vName, "%s", VehicleNames[ modelID - 400 ] );
	return vName;
}
stock LockVehicle( vehicleid )
{
	new g_engine, g_lights, g_alarm, g_doors, g_bonnet, g_boot, g_objective;
	GetVehicleParamsEx( vehicleid, g_engine, g_lights, g_alarm, g_doors, g_bonnet, g_boot, g_objective );
	SetVehicleParamsEx( vehicleid, g_engine, g_lights, g_alarm, VEHICLE_PARAMS_ON, g_bonnet, g_boot, g_objective );
}
stock UnLockVehicle( vehicleid )
{
	new g_engine, g_lights, g_alarm, g_doors, g_bonnet, g_boot, g_objective;
	GetVehicleParamsEx( vehicleid, g_engine, g_lights, g_alarm, g_doors, g_bonnet, g_boot, g_objective );
	SetVehicleParamsEx( vehicleid, g_engine, g_lights, g_alarm, VEHICLE_PARAMS_OFF, g_bonnet, g_boot, g_objective );
}
stock SelectRandomGarbage( playerid )
{
	new randomGarbage = random( sizeof gRandomGarbage );
	if( randomGarbage != playerVariables[ playerid ][ pJobLastCP ] )
	{
		playerVariables[ playerid ][ pJobLastCP ] = randomGarbage;
		SetPlayerCheckpoint( playerid, gRandomGarbage[ randomGarbage ][ 0 ], gRandomGarbage[ randomGarbage ][ 1 ], gRandomGarbage[ randomGarbage ][ 2 ], 10.0 );
	}
	else SelectRandomGarbage( playerid );
}
stock UpdateFactionSafe( FactionID )
{
	switch( GetFactionType( FactionID ) )
	{
		case 1:
		{
			gsString[ 0 ] = EOS;
			format( gsString, sizeof gsString, "Faction Safe\n%s\n\nMaterials: %s\nMoney: %s", GetGVarStringEx( "faction_Name", FactionID ), FormatNumber(GetGVarInt( "faction_Materials", FactionID )), FormatNumber(GetGVarInt( "faction_Money", FactionID )) );
			UpdateDynamic3DTextLabelText( Text3D:GetGVarInt( "FactionSeif3DText", FactionID ), 0xFFFF66FF, gsString );
		}
		case 2:
		{
			gsString[ 0 ] = EOS;
			format( gsString, sizeof gsString, "Faction Safe\n%s\n\nMaterials: %s\nMoney: %s\nDrugs: %s", GetGVarStringEx( "faction_Name", FactionID ), FormatNumber(GetGVarInt( "faction_Materials", FactionID )), FormatNumber(GetGVarInt( "faction_Money", FactionID )), FormatNumber(GetGVarInt( "faction_Drugs", FactionID )) );
			UpdateDynamic3DTextLabelText( Text3D:GetGVarInt( "FactionSeif3DText", FactionID ), 0xFFFF66FF, gsString );
		}
	}
}
stock GetFactionType( factionID )
{
	switch( factionID )
	{
		case 0: return 0;
		case 1..6: return 1;
		case 7..10: return 2;
		default: return 1;
	}
	return true;
}
stock CheckPlayerQuest( playerid, questType )
{
	for( new questID = 0; questID < 2; questID++ )
	{
		if( playerVariables[ playerid ][ pQuest ][ questID ] == questType && playerVariables[ playerid ][ pQuestProgress ][ questID ] != playerVariables[ playerid ][ pQuestValue ][ questID ] )
		{
			playerVariables[ playerid ][ pQuestProgress ][ questID ]++;
			if( playerVariables[ playerid ][ pQuestProgress ][ questID ] == playerVariables[ playerid ][ pQuestValue ][ questID ] )
			{
				new randomPrize[ 2 ];
				randomPrize[ 0 ] = randomEx( 1, 5 );
				randomPrize[ 1 ] = randomEx( 5000, 15000 );

				//( playerid, 1058, 0.0, 0.0, 0.0 );
				playerVariables[ playerid ][ pRP ] += randomPrize[ 0 ];
				playerVariables[ playerid ][ pMoney ] += randomPrize[ 1 ];
				SendClientMessagef( playerid, COLOR_YELLOW, "Misiune: Felicitari %s, ai terminat Quest-ul si ai primit [%d] Respect Points si $%s", playerVariables[ playerid ][ pNormalName ], randomPrize[ 0 ], FormatNumber( randomPrize[ 1 ] ) );
			}
		}
	}
}
stock ShowPlayerQuests( playerid )
{
	for( new questID = 0; questID < 2; questID++ )
	{
		switch( playerVariables[ playerid ][ pQuest ][ questID ] )
		{
			case QUEST_PAINTBALL: SendClientMessagef( playerid, COLOR_YELLOW, "Misiune: Omoara %d jucatori la Paintball. | Progres: %d/%d", playerVariables[ playerid ][ pQuestValue ][ questID ], playerVariables[ playerid ][ pQuestProgress ][ questID ], playerVariables[ playerid ][ pQuestValue ][ questID ] );
			case QUEST_ROB: SendClientMessagef( playerid, COLOR_YELLOW, "Misiune: Jefuieste o afacere. | Progres: %d/%d", playerVariables[ playerid ][ pQuestProgress ][ questID ], playerVariables[ playerid ][ pQuestValue ][ questID ] );
			case QUEST_FARMER: SendClientMessagef( playerid, COLOR_YELLOW, "Misiune: Colecteaza %d saci cu faina de la Farmer. | Progres: %d/%d", playerVariables[ playerid ][ pQuestValue ][ questID ], playerVariables[ playerid ][ pQuestProgress ][ questID ], playerVariables[ playerid ][ pQuestValue ][ questID ] );
			case QUEST_SWEEPER: SendClientMessagef( playerid, COLOR_YELLOW, "Misiune: Termina un traseu la job-ul Sweeper. | Progres: %d/%d", playerVariables[ playerid ][ pQuestProgress ][ questID ], playerVariables[ playerid ][ pQuestValue ][ questID ] );
			case QUEST_PILOT: SendClientMessagef( playerid, COLOR_YELLOW, "Misiune: Zboara la %d aeroporturi cu Pilot Job. | Progres: %d/%d", playerVariables[ playerid ][ pQuestValue ][ questID ], playerVariables[ playerid ][ pQuestProgress ][ questID ], playerVariables[ playerid ][ pQuestValue ][ questID ] );
			case QUEST_CHILLIAD: SendClientMessagef( playerid, COLOR_YELLOW, "Misiune: Mergi pana pe muntele Chilliad. | Progres: %d/%d", playerVariables[ playerid ][ pQuestProgress ][ questID ], playerVariables[ playerid ][ pQuestValue ][ questID ] );
			case QUEST_DRUGS: SendClientMessagef( playerid, COLOR_YELLOW, "Misiune: Foloseste %d droguri pentru a primi viata. | Progres: %d/%d", playerVariables[ playerid ][ pQuestValue ][ questID ], playerVariables[ playerid ][ pQuestProgress ][ questID ], playerVariables[ playerid ][ pQuestValue ][ questID ] );
			case QUEST_CARJACK: SendClientMessagef( playerid, COLOR_YELLOW, "Misiune: Jefuieste %d masini cu job-ul Car Jacker. | Progres: %d/%d", playerVariables[ playerid ][ pQuestValue ][ questID ], playerVariables[ playerid ][ pQuestProgress ][ questID ], playerVariables[ playerid ][ pQuestValue ][ questID ] );
			case QUEST_TRUCKER: SendClientMessagef( playerid, COLOR_YELLOW, "Misiune: Transporta %d remorci la job-ul Trucker. | Progres: %d/%d", playerVariables[ playerid ][ pQuestValue ][ questID ], playerVariables[ playerid ][ pQuestProgress ][ questID ], playerVariables[ playerid ][ pQuestValue ][ questID ] );
		}
	}
}
stock GeneratePlayerQuests( playerid )
{
	new randomQuest;
	randomQuest = random( MAX_QUESTS );
	if( randomQuest == QUEST_ROB && playerVariables[ playerid ][ pFaction ] == 1 )
		randomQuest = QUEST_CHILLIAD;

	playerVariables[ playerid ][ pQuest ][ 0 ] = randomQuest;
	switch( playerVariables[ playerid ][ pQuest ][ 0 ] )
	{
		case QUEST_PAINTBALL: 	playerVariables[ playerid ][ pQuestValue ][ 0 ] = randomEx( 10, 30 );
		case QUEST_ROB:			playerVariables[ playerid ][ pQuestValue ][ 0 ] = 1;
		case QUEST_FARMER: 		playerVariables[ playerid ][ pQuestValue ][ 0 ] = randomEx( 3, 7 );
		case QUEST_SWEEPER: 	playerVariables[ playerid ][ pQuestValue ][ 0 ] = 1;
		case QUEST_PILOT:		playerVariables[ playerid ][ pQuestValue ][ 0 ] = randomEx( 3, 10 );
		case QUEST_CHILLIAD:	playerVariables[ playerid ][ pQuestValue ][ 0 ] = 1;
		case QUEST_DRUGS:		playerVariables[ playerid ][ pQuestValue ][ 0 ] = randomEx( 2, 4 );
		case QUEST_CARJACK:		playerVariables[ playerid ][ pQuestValue ][ 0 ] = randomEx( 3, 7 );
		case QUEST_TRUCKER:		playerVariables[ playerid ][ pQuestValue ][ 0 ] = randomEx( 3, 8 );
	}
	GenerateRandomQuest( playerid );
}
stock GenerateRandomQuest( playerid )
{
	new randomQuest = random( MAX_QUESTS );
	if( randomQuest == QUEST_ROB && playerVariables[ playerid ][ pFaction ] == 1 )
		randomQuest = QUEST_CHILLIAD;

	if( randomQuest != playerVariables[ playerid ][ pQuest ][ 0 ] )
	{
		playerVariables[ playerid ][ pQuest ][ 1 ] = randomQuest;
		switch( playerVariables[ playerid ][ pQuest ][ 1 ] )
		{
			case QUEST_PAINTBALL: 	playerVariables[ playerid ][ pQuestValue ][ 1 ] = randomEx( 10, 30 );
			case QUEST_ROB:			playerVariables[ playerid ][ pQuestValue ][ 1 ] = 1;
			case QUEST_FARMER: 		playerVariables[ playerid ][ pQuestValue ][ 1 ] = randomEx( 3, 10 );
			case QUEST_SWEEPER: 	playerVariables[ playerid ][ pQuestValue ][ 1 ] = 1;
			case QUEST_PILOT:		playerVariables[ playerid ][ pQuestValue ][ 1 ] = randomEx( 3, 10 );
			case QUEST_CHILLIAD:	playerVariables[ playerid ][ pQuestValue ][ 1 ] = 1;
			case QUEST_DRUGS:		playerVariables[ playerid ][ pQuestValue ][ 1 ] = randomEx( 2, 4 );
			case QUEST_CARJACK:		playerVariables[ playerid ][ pQuestValue ][ 1 ] = randomEx( 3, 7 );
			case QUEST_TRUCKER:		playerVariables[ playerid ][ pQuestValue ][ 1 ] = randomEx( 3, 8 );
		}
		// < Update the Quests )
		playerVariables[ playerid ][ pQuestProgress ][ 0 ] = 0;
		playerVariables[ playerid ][ pQuestProgress ][ 1 ] = 0;

		gsQuery[ 0 ] = EOS;
		mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerQuest` = '%d:%d', `playerQuestValue` = '%d:%d', `playerQuestProgress` = '0:0', `playerQuestTime` = UNIX_TIMESTAMP() WHERE `id` = %d", 
			playerVariables[ playerid ][ pQuest ][ 0 ], playerVariables[ playerid ][ pQuest ][ 1 ],
			playerVariables[ playerid ][ pQuestValue ][ 0 ], playerVariables[ playerid ][ pQuestValue ][ 1 ], GetPlayerMysqlID(playerid) );
		mysql_tquery( g_Handle, gsQuery, "", "" );

		#if defined DEBUG_SERVER
			SendClientMessagef( playerid, COLOR_LIGHTRED, "Quest 1: %d | Quest 2: %d", playerVariables[ playerid ][ pQuest ][ 0 ], playerVariables[ playerid ][ pQuest ][ 1 ] );
		#endif
	}
	else return GenerateRandomQuest( playerid );
	return true;
}
stock GetDay( day, month, year )
{
	if( month < 3 )
	{
		month += 12;
		year--;
	}
	return (((13*month+3)/5 + day + year + year/4 - year/100 + year/400) % 7)+1;
}
stock GetDisconnectReason( reason )
{
	new disconnectReason[ 10 ];
	switch( reason )
	{
		case 0: disconnectReason = "crash";
		case 1: disconnectReason = "quit";
		case 2: disconnectReason = "kick/ban";
	}
	return disconnectReason;
}
stock UpdateGiftStatus( itemID, itemValue = 0 )
{
	switch( itemID )
	{
		case 0: // Money
		{
			gsQuery[ 0 ] = EOS;
			mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_stats` SET `giftMoney` = `giftMoney` + %d", itemValue );
			mysql_tquery( g_Handle, gsQuery, "", "" );
		}
		case 3: // Hidden Colors
		{
			gsQuery[ 0 ] = EOS;
			mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_stats` SET `giftHiddens` = `giftHiddens` + %d", itemValue );
			mysql_tquery( g_Handle, gsQuery, "", "" );
		}
		case 4: // Materials
		{
			gsQuery[ 0 ] = EOS;
			mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_stats` SET `giftMaterials` = `giftMaterials` + %d", itemValue );
			mysql_tquery( g_Handle, gsQuery, "", "" );
		}
		case 6: // Premium Points
		{
			gsQuery[ 0 ] = EOS;
			mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_stats` SET `giftPremium` = `giftPremium` + %d", itemValue );
			mysql_tquery( g_Handle, gsQuery, "", "" );
		}
		case 7: // Vehicles
		{
			mysql_tquery( g_Handle, "UPDATE `server_stats` SET `giftVehicles` = `giftVehicles` + 1" );
		}
		case 8: // Vehicle Slots
		{
			mysql_tquery( g_Handle, "UPDATE `server_stats` SET `giftVSlots` = `giftVSlots` + 1" );
		}
		case 100: // Update Opens
		{
			mysql_tquery( g_Handle, "UPDATE `server_stats` SET `giftOpen` = `giftOpen` + 1" );
		}
	}
}
stock GivePlayerMoneyGift( playerid )
{
	new gift_value = RandomChance( 25000, randomEx2(30000, 50000), 100 );
	playerVariables[ playerid ][ pMoney ] += gift_value;
	UpdateGiftStatus( 0, gift_value );

/*	gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, "Ai castigat $%s din giftbox.", FormatNumber( gift_value ) );*/
	nearByMessage( playerid, COLOR_GENANNOUNCE, NBM_DIST, "(( Giftbox: %s a castigat $%s din giftbox! Felicitari! ))", playerVariables[ playerid ][ pNormalName ], FormatNumber( gift_value ) );
	InsertGiftLog( GetPlayerMysqlID(playerid), playerVariables[ playerid ][ pNormalName ], gift_value, 0 );
}
stock GetPlayerFreeVehicleSlot( playerid )
{
	new v_slot;
	for( new slot=0; slot < MAX_SLOTS; slot++ )
	{
		if( playerVariables[ playerid ][ Vehicle ][ slot ] == 0 )
		{
			v_slot = slot;
			break;
		}
	}
	return v_slot;
}
stock GivePlayerPersonalVehicle( playerid, v_model, v_source = 0 )
{
	new v_slot = GetPlayerFreeVehicleSlot( playerid );
	if( v_slot + 1 > playerVariables[ playerid ][ pVSlots ] )
		return InfoTD_MSG( playerid, 7000, "~r~~h~ERROR: ~w~~h~You can't receive the bonus vehicle!~n~~w~~h~You have to buy more vehicle slots /v !" );

	// < Update this variable for PutPlayerInVehicle >
	playerVariables[ playerid ][ VehicleSlot ] = v_slot;

	// < Load it's base variables >
	vehicleVariables[ v_slot ][ playerid ][ VehicleTimer ] 		= VEHICLE_DESPAWN_TIMER;
	vehicleVariables[ v_slot ][ playerid ][ VehicleOwnerID ]	= playerid;
	vehicleVariables[ v_slot ][ playerid ][ VehicleStatus ]		= 1; // Spawned
	vehicleVariables[ v_slot ][ playerid ][ VehicleModelID ] 	= v_model;
	vehicleVariables[ v_slot ][ playerid ][ VehicleOwner ] 		= GetPlayerMysqlID(playerid);
	vehicleVariables[ v_slot ][ playerid ][ VehicleColor ][ 0 ] = random( 127 );
	vehicleVariables[ v_slot ][ playerid ][ VehicleColor ][ 1 ] = random( 127 );
	vehicleVariables[ v_slot ][ playerid ][ VehicleOdometter ] 	= 0;
	vehicleVariables[ v_slot ][ playerid ][ VehicleInsurance ] 	= 1000;
	vehicleVariables[ v_slot ][ playerid ][ VehicleInsurancePoints ] = 10;
	vehicleVariables[ v_slot ][ playerid ][ VehicleFuel ]       = 200;
	vehicleVariables[ v_slot ][ playerid ][ Money ] 			= 0;
	vehicleVariables[ v_slot ][ playerid ][ PP ] 				= 0;
	vehicleVariables[ v_slot ][ playerid ][ Sold ]				= false;
	vehicleVariables[ v_slot ][ playerid ][ VehicleVIPWheel ]	= -1;
	vehicleVariables[ v_slot ][ playerid ][ VehicleAge ]    	= 0;
	vehicleVariables[ v_slot ][ playerid ][ VehicleVIP ]		= 0;

	// < Search the source >
	switch( v_source )
	{
		case 0:
		{
			new garajRandom = playerVariables[ playerid ][ pCity ] ? randomEx( 4, 7 ) : randomEx( 0, 3 );
			vehicleVariables[ v_slot ][ playerid ][ Position ][ 0 ] 	= gRandomDSGaraj[ garajRandom ][ 0 ];
			vehicleVariables[ v_slot ][ playerid ][ Position ][ 1 ] 	= gRandomDSGaraj[ garajRandom ][ 1 ];
			vehicleVariables[ v_slot ][ playerid ][ Position ][ 2 ] 	= gRandomDSGaraj[ garajRandom ][ 2 ];
			vehicleVariables[ v_slot ][ playerid ][ Rotation ] 			= gRandomDSGaraj[ garajRandom ][ 3 ];
			vehicleVariables[ v_slot ][ playerid ][ Vehicle ] = CreateVehicle( v_model, gRandomDSGaraj[ garajRandom ][ 0 ], gRandomDSGaraj[ garajRandom ][ 1 ], gRandomDSGaraj[ garajRandom ][ 2 ], gRandomDSGaraj[ garajRandom ][ 3 ], 
				vehicleVariables[ v_slot ][ playerid ][ VehicleColor ][ 0 ], vehicleVariables[ v_slot ][ playerid ][ VehicleColor ][ 1 ], -1 );

			vehicleVariables[ v_slot ][ playerid ][ VehicleLocked ] 	= 0;
			UnLockVehicle( vehicleVariables[ v_slot ][ playerid ][ Vehicle ] );
		}
		case 1:
		{
			new garajRandom = playerVariables[ playerid ][ pCity ] ? randomEx( 4, 7 ) : randomEx( 0, 3 );
			vehicleVariables[ v_slot ][ playerid ][ Position ][ 0 ] 	= gRandomDSGaraj[ garajRandom ][ 0 ];
			vehicleVariables[ v_slot ][ playerid ][ Position ][ 1 ] 	= gRandomDSGaraj[ garajRandom ][ 1 ];
			vehicleVariables[ v_slot ][ playerid ][ Position ][ 2 ] 	= gRandomDSGaraj[ garajRandom ][ 2 ];
			vehicleVariables[ v_slot ][ playerid ][ Rotation ] 			= gRandomDSGaraj[ garajRandom ][ 3 ];
			vehicleVariables[ v_slot ][ playerid ][ Vehicle ] = CreateVehicle( v_model, gRandomDSGaraj[ garajRandom ][ 0 ], gRandomDSGaraj[ garajRandom ][ 1 ], gRandomDSGaraj[ garajRandom ][ 2 ], gRandomDSGaraj[ garajRandom ][ 3 ], 
				vehicleVariables[ v_slot ][ playerid ][ VehicleColor ][ 0 ], vehicleVariables[ v_slot ][ playerid ][ VehicleColor ][ 1 ], -1 );

			vehicleVariables[ v_slot ][ playerid ][ VehicleLocked ] 	= 1;
			LockVehicle( vehicleVariables[ v_slot ][ playerid ][ Vehicle ] );
			playerVariables[ playerid ][ pCP ] = 5005;
			SetPlayerCheckpoint( playerid, gRandomDSGaraj[ garajRandom ][ 0 ], gRandomDSGaraj[ garajRandom ][ 1 ], gRandomDSGaraj[ garajRandom ][ 2 ], 3.0 );
		}
	}
	// < Create Personal Vehicle >
	serverVariables[ VehicleGas ][ vehicleVariables[ v_slot ][ playerid ][ Vehicle ] ] = 200;
	SetGVarInt( "veh_Faction", 0, vehicleVariables[ v_slot ][ playerid ][ Vehicle ] );

	// < Set his Number Plate >
	format( vehicleVariables[ v_slot ][ playerid ][ VehiclePlate ], 64, "%s", playerVariables[ playerid ][ pNormalName ] );
	SetVehicleToRespawn( vehicleVariables[ v_slot ][ playerid ][ Vehicle ] );
	SetVehicleNumberPlate( vehicleVariables[ v_slot ][ playerid ][ Vehicle ], vehicleVariables[ v_slot ][ playerid ][ VehiclePlate ] );

	// < Put player in his new personal vehicle >
	//PutPlayerInVehicle( playerid, vehicleVariables[ v_slot ][ playerid ][ Vehicle ], 0 );

	// < Update Vehicles Stock >
	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_dealer` SET `onserver` = `onserver` + 1 WHERE `carID` = %d", v_model );
	mysql_tquery( g_Handle, gsQuery, "", "" );

	// < Insert into Database >
	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "INSERT INTO `server_personalvehicles` (vehicleModelID, vehicleOwner, vehicleNumberPlate, Money, PP) VALUES (%d, %d, '%s', 0, 0)", v_model, GetPlayerMysqlID(playerid), vehicleVariables[ v_slot ][ playerid ][ VehiclePlate ] );
	mysql_tquery( g_Handle, gsQuery, "OnPersonalVehicleCreated", "dddds", playerid, v_slot, 0, 0, VehicleName( v_model ) );
	return true;
}
stock Faction_UninvitePlayer( playerid, Player, FP, Reason[] )
{
	// < Announce the faction )
	gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, "%s was uninvited by Leader %s from faction %s (rank %d) after %d days with %d FP. Reason: %s", playerVariables[ Player ][ pNormalName ], playerVariables[ playerid ][ pNormalName ], GetGVarStringEx( "faction_Name", playerVariables[ Player ][ pFaction ] ), playerVariables[ Player ][ pFactionRank ], playerVariables[ Player ][ pFactionDays ], FP, Reason );
	SendToFaction( playerVariables[ Player ][ pFaction ], COLOR_GENANNOUNCE, gsString );
	SendClientMessage( playerid, COLOR_GREY, "L-ai dat afara pe acel player din factiunea din care facea parte!" );
	InsertFactionLog( gsString, playerVariables[ playerid ][ pFaction ], Player, playerVariables[ Player ][ pNormalName ], GetPlayerMysqlID(playerid), playerVariables[ playerid ][ pNormalName ] );
	ResetPlayerFactionRaport( GetPlayerMysqlID(Player) );

	// < Update Panel Info )
	gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, "was uninvited by Leader %s from faction %s (rank %d) after %d days with %d FP. Reason: %s", playerVariables[ playerid ][ pNormalName ], GetGVarStringEx( "faction_Name", playerVariables[ Player ][ pFaction ] ), playerVariables[ Player ][ pFactionRank ], playerVariables[ Player ][ pFactionDays ], FP, Reason );
	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "INSERT INTO `server_feed`(`playerKey`,`playerName`,`logText`) VALUES (%d, '%s', '%s')", GetPlayerMysqlID(Player), playerVariables[ Player ][ pNormalName ], gsString );
	mysql_tquery( g_Handle, gsQuery, "", "" );

	// < Send player E-Mail )
	gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, "%s te-a dat afara din factiunea %s cu %d FP si Reason: %s", playerVariables[ playerid ][ pNormalName ], GetGVarStringEx( "faction_Name", playerVariables[ Player ][ pFaction ] ), FP, Reason );
	InsertPlayerMail( GetPlayerMysqlID(Player), gsString );

	// < Update faction members )
	switch( playerVariables[ Player ][ pFactionRank ] )
	{
		case 7:
		{
			gsQuery[ 0 ] = EOS;
			mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_factions` SET `factionMembers` = `factionMembers` - 1, `factionLeaders` = `factionLeaders` - 1 WHERE `factionKey` = %d", playerVariables[ Player ][ pFaction ] );
			mysql_tquery( g_Handle, gsQuery, "", "" );
			SetGVarInt( "faction_Members", GetGVarInt( "faction_Members", playerVariables[ Player ][ pFaction ] ) - 1, playerVariables[ Player ][ pFaction ] );
			SetGVarInt( "faction_Leaders", GetGVarInt( "faction_Leaders", playerVariables[ Player ][ pFaction ] ) - 1, playerVariables[ Player ][ pFaction ] );
		}
		default:
		{
			gsQuery[ 0 ] = EOS;
			mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_factions` SET `factionMembers` = `factionMembers` - 1 WHERE `factionKey` = %d", playerVariables[ Player ][ pFaction ] );
			mysql_tquery( g_Handle, gsQuery, "", "" );
			SetGVarInt( "faction_Members", GetGVarInt( "faction_Members", playerVariables[ Player ][ pFaction ] ) - 1, playerVariables[ Player ][ pFaction ] );
		}
	}
	if( playerVariables[ playerid ][ pSpawnType ] == 1 )
		playerVariables[ playerid ][ pSpawnType ] = 0;
	if( playerVariables[ playerid ][ pUndercover ] == 1 )
		playerVariables[ playerid ][ pUndercover ] = 0;

    new FactionID = playerVariables[ Player ][ pFaction ];
	switch(playerVariables[ Player ][ pFaction ])
	{
		case 1,2: Iter_Remove(Departments, Player), Iter_Remove(playerFaction[FactionID], Player);
		case 4: Iter_Remove(server_instructors, Player), server_instructors--, Iter_Remove(playerFaction[FactionID], Player);
		case 5: Iter_Remove(server_reporters, Player), server_reporters--, Iter_Remove(playerFaction[FactionID], Player);
		default: Iter_Remove(playerFaction[FactionID], Player);
	}


	// < Reset Player Variables )
	ResetServerWeapons( Player );
	SetPlayerHealth( Player, 100 );
	SetPlayerArmour( Player, 0 );
	playerVariables[ Player ][ pFW ] = 0;
	playerVariables[ Player ][ pFP ] = FP;
	playerVariables[ Player ][ pFaction ] = 0;
	playerVariables[ Player ][ pFactionRank ] = 0;
	switch( playerVariables[ Player ][ pSex ])
	{
		case 1: playerVariables[ Player ][ pSkin ] = CIVIL_SKIN_MALE;
		case 2: playerVariables[ Player ][ pSkin ] = CIVIL_SKIN_FEMALE;
	}
	SetPlayerFactionColor( Player );
	SetPlayerFactionSkin( Player );
	SpawnPlayerEx( Player );

	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerFaction` = 0, `playerFactionRank` = 0, `playerFactionDays` = 0, `playerFW` = 0, `playerFP` = %d, `playerSkin` = %d WHERE `id` = %d", FP, playerVariables[ Player ][ pSkin ], GetPlayerMysqlID(Player) );
	mysql_tquery( g_Handle, gsQuery, "", "" );
}
stock LimitString( text_line[] )
{
	new _Final[ LIMIT_LENGHT+3 ];
	strmid( _Final, text_line, 0, 50 );
	format( _Final, sizeof _Final, "%s...", _Final );
	return _Final;
}
stock FlipPlayerVehicle( playerid )
{
	new Float:A, Float:vPOS[ 3 ], vID = GetPlayerVehicleID( playerid );
	GetVehiclePos( vID, vPOS[ 0 ], vPOS[ 1 ], vPOS[ 2 ] );
	GetVehicleZAngle( vID, A );
	SetVehiclePos( vID, vPOS[ 0 ], vPOS[ 1 ], vPOS[ 2 ] );
	SetVehicleZAngle( vID, A );
	//( playerid, 1057, 0.0, 0.0, 0.0 );
}
stock ResetServerWeapons( playerid )
{
	ResetPlayerWeapons( playerid );
	playerVariables[ playerid ][ pLastWeaponID ] = INVALID_PLAYER_ID;
	WeaponSystem[ playerid ][ WEAPON_BRASSKNUCKLE ] = 0;
	WeaponSystem[ playerid ][ WEAPON_GOLFCLUB ] = 0;
	WeaponSystem[ playerid ][ WEAPON_NITESTICK ] = 0;
	WeaponSystem[ playerid ][ WEAPON_KNIFE ] = 0;
	WeaponSystem[ playerid ][ WEAPON_BAT ] = 0;
	WeaponSystem[ playerid ][ WEAPON_SHOVEL ] = 0;
	WeaponSystem[ playerid ][ WEAPON_POOLSTICK ] = 0;
	WeaponSystem[ playerid ][ WEAPON_KATANA ] = 0;
	WeaponSystem[ playerid ][ WEAPON_CHAINSAW ] = 0;
	WeaponSystem[ playerid ][ WEAPON_DILDO ] = 0;
	WeaponSystem[ playerid ][ WEAPON_DILDO2 ] = 0;
	WeaponSystem[ playerid ][ WEAPON_VIBRATOR ] = 0;
	WeaponSystem[ playerid ][ WEAPON_VIBRATOR2 ] = 0;
	WeaponSystem[ playerid ][ WEAPON_FLOWER ] = 0;
	WeaponSystem[ playerid ][ WEAPON_CANE ] = 0;
	WeaponSystem[ playerid ][ WEAPON_GRENADE ] = 0;
	WeaponSystem[ playerid ][ WEAPON_TEARGAS ] = 0;
	WeaponSystem[ playerid ][ WEAPON_MOLTOV ] = 0;
	WeaponSystem[ playerid ][ WEAPON_COLT45 ] = 0;
	WeaponSystem[ playerid ][ WEAPON_SILENCED ] = 0;
	WeaponSystem[ playerid ][ WEAPON_DEAGLE ] = 0;
	WeaponSystem[ playerid ][ WEAPON_SHOTGUN ] = 0;
	WeaponSystem[ playerid ][ WEAPON_SAWEDOFF ] = 0;
	WeaponSystem[ playerid ][ WEAPON_SHOTGSPA ] = 0;
	WeaponSystem[ playerid ][ WEAPON_UZI ] = 0;
	WeaponSystem[ playerid ][ WEAPON_MP5 ] = 0;
	WeaponSystem[ playerid ][ WEAPON_AK47 ] = 0;
	WeaponSystem[ playerid ][ WEAPON_M4 ] = 0;
	WeaponSystem[ playerid ][ WEAPON_TEC9 ] = 0;
	WeaponSystem[ playerid ][ WEAPON_RIFLE ] = 0;
	WeaponSystem[ playerid ][ WEAPON_SNIPER ] = 0;
	WeaponSystem[ playerid ][ WEAPON_ROCKETLAUNCHER ] = 0;
	WeaponSystem[ playerid ][ WEAPON_HEATSEEKER ] = 0;
	WeaponSystem[ playerid ][ WEAPON_FLAMETHROWER ] = 0;
	WeaponSystem[ playerid ][ WEAPON_MINIGUN ] = 0;
	WeaponSystem[ playerid ][ WEAPON_SATCHEL ] = 0;
	WeaponSystem[ playerid ][ WEAPON_BOMB ] = 0;
	WeaponSystem[ playerid ][ WEAPON_SPRAYCAN ] = 0;
	WeaponSystem[ playerid ][ WEAPON_FIREEXTINGUISHER ] = 0;
	WeaponSystem[ playerid ][ WEAPON_CAMERA ] = 0;
	WeaponSystem[ playerid ][ 44 ] = 0; // Night Vision
	WeaponSystem[ playerid ][ 45 ] = 0; // Thermal Vision
	WeaponSystem[ playerid ][ WEAPON_PARACHUTE ] = 0;
}
stock GivePlayerServerWeapon( playerid, weaponID, weaponAmmo )
{
	// Check the player's weapon
	new lastWeaponID = playerVariables[ playerid ][ pLastWeaponID ];
	if( lastWeaponID != INVALID_PLAYER_ID && GetWeaponSlot( playerVariables[ playerid ][ pLastWeaponID ] ) == GetWeaponSlot( weaponID ) )
	{
		if( lastWeaponID == weaponID )
		{
			if( WeaponSystem[ playerid ][ weaponID ] <= 0 )
			{
				WeaponSystem[ playerid ][ weaponID ] = weaponAmmo;
				GivePlayerWeapon( playerid, weaponID, WeaponSystem[ playerid ][ weaponID ] );
			}
			else
			{
				WeaponSystem[ playerid ][ weaponID ] += weaponAmmo;
				if( WeaponSystem[ playerid ][ weaponID ] >= 9000 )
				{
					WeaponSystem[ playerid ][ weaponID ] = 500;
					SetPlayerAmmo( playerid, weaponID, 0 );
					GivePlayerWeapon( playerid, weaponID, WeaponSystem[ playerid ][ weaponID ] );
				}
				else GivePlayerWeapon( playerid, weaponID, weaponAmmo );
			}
		}
		else
		{
			WeaponSystem[ playerid ][ lastWeaponID ] = 0;
			SetPlayerAmmo( playerid, lastWeaponID, 0 );

			WeaponSystem[ playerid ][ weaponID ] = weaponAmmo;
			GivePlayerWeapon( playerid, weaponID, WeaponSystem[ playerid ][ weaponID ] );
		}
		#if defined DEBUG_SERVER
			SendClientMessagef( playerid, ~1, "[give 1] Ai primit %d gloante pentru arma cu ID: %d [Last: %d]", WeaponSystem[ playerid ][ weaponID ], weaponID, lastWeaponID );
		#endif
	}
	else
	{
		WeaponSystem[ playerid ][ weaponID ] = weaponAmmo;
		GivePlayerWeapon( playerid, weaponID, WeaponSystem[ playerid ][ weaponID ] );
		#if defined DEBUG_SERVER
			SendClientMessagef( playerid, ~1, "[give 2] Ai primit %d gloante pentru arma cu ID: %d", WeaponSystem[ playerid ][ weaponID ], weaponID );
		#endif
	}
	// Set player's last weapon used
	playerVariables[ playerid ][ pLastWeaponID ] = weaponID;
}
stock GetWeaponNameEx( weapid )
{
	new weapName[ 32 ];
	if( GetWeaponName( weapid, weapName, sizeof weapName ) )
		return weapName;
	else
		weapName = "Unknown";
	return weapName;
}
stock ServerBanPlayer( ban_player, ban_days, ban_type = 0, ban_reason[] )
{
	switch( ban_type )
	{
		case 0:
		{
			gsQuery[ 0 ] = EOS;
			mysql_format( g_Handle, gsQuery, sizeof gsQuery, "INSERT INTO `server_bans` (`banName`, `banAdmin`, `banReason`, `banAddress`, `banDays`, `banUnix`) VALUES('%s', 'Server', '%s', '%s', %d, UNIX_TIMESTAMP() + %d * 86400)", 
				playerVariables[ ban_player ][ pNormalName ], ban_reason, GetPlayerIPEx( ban_player ), ban_days, ban_days );
			mysql_tquery( g_Handle, gsQuery, "OnPlayerBanCreated", "d", GetPlayerMysqlID(ban_player) );
			InsertPlayerPunish( ban_player, -1, 1, ban_days, ban_reason );

			SendClientMessageToAllf( COLOR_LIGHTRED, "%s(%i) has been banned by AdmBot for %d days with Reason: %s", playerVariables[ ban_player ][ pNormalName ], ban_player, ban_days, ban_reason );
			SendClientMessage( ban_player, COLOR_LIGHTRED, "-----------------------------------[ Ban System ]-----------------------------------" );
			SendClientMessagef( ban_player, COLOR_LIGHTRED, "Ai fost banat %d zile de adminul: "COL_W"Server", ban_days );
			SendClientMessagef( ban_player, COLOR_LIGHTRED, "Motivul pentru care ai primit ban: "COL_W"%s", ban_reason );
			SendClientMessage( ban_player, COLOR_LIGHTRED, "If you consider this a mistake, make an un-ban request: "COL_W""SERVER_PANEL"" );
			SendClientMessage( ban_player, COLOR_LIGHTRED, "--------------------------------------------------------------------------------------------------" );

			TogglePlayerControllable( ban_player, false );
			KickEx( ban_player );
		}
		case 1:
		{
			gsQuery[ 0 ] = EOS;
			mysql_format( g_Handle, gsQuery, sizeof gsQuery, "INSERT INTO `server_bans` (`banName`, `banAdmin`, `banReason`, `banAddress`, `banDays`, `banUnix`, `banSerial`, `banType`) VALUES('%s', 'Server', '%s', '%s', 0, 0, '%s', 1)",
				playerVariables[ ban_player ][ pNormalName ], ban_reason, GetPlayerIPEx( ban_player ), GetPlayerSerial( ban_player ) );
			mysql_tquery( g_Handle, gsQuery, "OnPlayerBanCreated", "d", GetPlayerMysqlID(ban_player) );
			InsertPlayerPunish( ban_player, -1, 1, 0, ban_reason );

			SendClientMessageToAllf( COLOR_LIGHTRED, "%s(%i) has been permanently banned by AdmBot with Reason: %s", playerVariables[ ban_player ][ pNormalName ], ban_player, ban_reason );
			SendClientMessage( ban_player, COLOR_LIGHTRED, "-----------------------------------[ Ban System ]-----------------------------------" );
			SendClientMessagef( ban_player, COLOR_LIGHTRED, "Ai fost banat permanent pe IP de catre AdmBot" );
			SendClientMessagef( ban_player, COLOR_LIGHTRED, "Motivul pentru care ai primit ban: "COL_W"%s", ban_reason );
			SendClientMessage( ban_player, COLOR_LIGHTRED, "If you consider this a mistake, make an un-ban request: "COL_W""SERVER_PANEL"" );
			SendClientMessage( ban_player, COLOR_LIGHTRED, "--------------------------------------------------------------------------------------------------" );

			TogglePlayerControllable( ban_player, false );
			KickEx( ban_player );
		}
	}
}
stock GetTotalLivePlayers( playerid )
{
	return Iter_Count( livePlayers[ playerid ] );
}
stock OnePlayAnim( playerid, animlib[], animname[], Float:Speed, looping, lockx, locky, lockz, lp )
{
	ApplyAnimation( playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp );
	return true;
}
stock LoopingAnim( playerid, animlib[], animname[], Float:Speed, looping, lockx, locky, lockz, lp )
{
	playerVariables[ playerid ][ pLoopingAnim ] = 1;
	ApplyAnimation( playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp );
	return true;
}
stock StopLoopingAnim( playerid )
{
	playerVariables[ playerid ][ pLoopingAnim ] = 0;
	ApplyAnimation( playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
}
stock CalculatePaintballWinner( paintID )
{
	new paintScore = 0, bestID;
	foreach(new i : playerPaint[paintID])
		if( playerVariables[ i ][ pPaintBallKills ] > paintScore )
			paintScore = playerVariables[ i ][ pPaintBallKills ], bestID = i;

	return bestID;
}
stock CalculateBestScore( faction )
{
	new bestscore = 0, bestid;
	foreach(new i : playerFaction[ faction ])
	{
		new score = playerVariables[ i ][ pFactionWarKills ] - playerVariables[ i ][ pFactionWarDeaths ];
		if( score >= bestscore )
			bestscore = score, bestid = i;
	}
	return bestid;
}
stock CalculateWorstScore( faction )
{
	new bestscore = 0, bestid;
	foreach(new i : playerFaction[ faction ])
	{
		new score = playerVariables[ i ][ pFactionWarKills ] - playerVariables[ i ][ pFactionWarDeaths ];
		if( score <= bestscore )
			bestscore = score, bestid = i;
	}
	return bestid;
}
stock ClearPlayerKillTab( playerid )
{
	for( new i=0; i<10; i++ )
		SendDeathMessageToPlayer( playerid, 202, 202, 202 );
}
stock UpdateRaceArenaTextDraws()
{
	foreach(new i : Racers)
	{
		PlayerTextDrawSetString( i, PlayerText:MINIGAME_TD, raceVariables[ raceString ] ), PlayerTextDrawShow( i, PlayerText:MINIGAME_TD );
	}
}
stock UpdatePaintTextDraws( paintID )
{
	foreach(new i : playerPaint[paintID])
	{
		// < Update Paint TD )
		PlayerTextDrawSetString( i, PlayerText:MINIGAME_TD, paintballVariables[ paintID ][ paintString ] );
		PlayerTextDrawShow( i, PlayerText:MINIGAME_TD );
	}
}
stock SelectVotedArena( paintID )
{
	new voteScore = 0, voteMap = 0;
	for( new i=0; i<=3; i++ )
	{
		if( paintballVariables[ paintID ][ paintVoteMap ][ i ] > voteScore )
		{
			voteScore = paintballVariables[ paintID ][ paintVoteMap ][ i ];
			voteMap = i;
		}
	}
	paintballVariables[ paintID ][ paintArena ] = voteMap;
}
stock GetVoteScoreWeapon( paintID )
{
	new voteScore = 0, voteWeapon = 0;
	for( new i=0; i<=2; i++ )
	{
		if( paintballVariables[ paintID ][ paintVoteWeapon ][ i ] > voteScore )
		{
			voteScore = paintballVariables[ paintID ][ paintVoteWeapon ][ i ];
			voteWeapon = i;
		}
	}
	return voteWeapon;
}
stock ResetArenaVotes( paintID )
{
	paintballVariables[ paintID ][ paintVoteMap ][ 0 ] = 0;
	paintballVariables[ paintID ][ paintVoteMap ][ 1 ] = 0;
	paintballVariables[ paintID ][ paintVoteMap ][ 2 ] = 0;
	paintballVariables[ paintID ][ paintVoteMap ][ 3 ] = 0;

	paintballVariables[ paintID ][ paintVoteWeapon ][ 0 ] = 0;
	paintballVariables[ paintID ][ paintVoteWeapon ][ 1 ] = 0;
	paintballVariables[ paintID ][ paintVoteWeapon ][ 2 ] = 0;
}
stock GivePlayerGunGameWeapon( playerid )
{
	new levelPaint = floatround( playerVariables[ playerid ][ pPaintBallKills ] / 2 );
	switch( levelPaint )
	{
		case 0: GivePlayerServerWeapon( playerid, 22, 999 );
		case 1: GivePlayerServerWeapon( playerid, 23, 999 );
		case 2: GivePlayerServerWeapon( playerid, 25, 999 );
		case 3: GivePlayerServerWeapon( playerid, 27, 999 );
		case 4: GivePlayerServerWeapon( playerid, 28, 999 );
		case 5: GivePlayerServerWeapon( playerid, 29, 999 );
		case 6: GivePlayerServerWeapon( playerid, 26, 999 );
		case 7: GivePlayerServerWeapon( playerid, 31, 999 );
		case 8: GivePlayerServerWeapon( playerid, 4, 999 );
	}
}
stock SetPlayerArenaPosition( playerid )
{
	switch( paintballVariables[ playerVariables[ playerid ][ pPaintBall ] ][ paintArena ] )
	{
		case 0:
		{
			SetPlayerInterior( playerid, 1 );
			new randPaint = random( sizeof( gRandomMeat ) );
			SetPlayerPos( playerid, gRandomMeat[ randPaint ][ 0 ], gRandomMeat[ randPaint ][ 1 ], gRandomMeat[ randPaint ][ 2 ] );
			SetPlayerWorldBounds( playerid, 20000.0000, -20000.0000, 20000.0000, -20000.0000 );
		}
		case 1:
		{
			SetPlayerInterior( playerid, 0 );
			new randPaint = random( sizeof( gRandomTenis ) );
			SetPlayerPos( playerid, gRandomTenis[ randPaint ][ 0 ], gRandomTenis[ randPaint ][ 1 ], gRandomTenis[ randPaint ][ 2 ] );
			SetPlayerWorldBounds( playerid, -2712.6086, -2791.5818, -230.3428, -274.0900 );
		}
		case 2:
		{
			SetPlayerInterior( playerid, 10 );
			new randPaint = random( sizeof( gRandomRCArena ) );
			SetPlayerPos( playerid, gRandomRCArena[ randPaint ][ 0 ], gRandomRCArena[ randPaint ][ 1 ], gRandomRCArena[ randPaint ][ 2 ] );
			SetPlayerWorldBounds( playerid, 20000.0000, -20000.0000, 20000.0000, -20000.0000 );
		}
		case 3:
		{
			SetPlayerInterior( playerid, 17 );
			new randPaint = random( sizeof( gRandomSharman ) );
			SetPlayerPos( playerid, gRandomSharman[ randPaint ][ 0 ], gRandomSharman[ randPaint ][ 1 ], gRandomSharman[ randPaint ][ 2 ] );
			SetPlayerWorldBounds( playerid, 20000.0000, -20000.0000, 20000.0000, -20000.0000 );
		}
	}
	SetPlayerColor( playerid, COLOR_HOTORANGE );
	SetPlayerVirtualWorld( playerid, 1500 + playerVariables[ playerid ][ pPaintBall ] );
	SetPlayerSkin( playerid, 86 );
}
stock GivePlayerWeaponPack( playerid, paintID )
{
	switch( paintID )
	{
		case 0: // Clasic
		{
			switch( paintballVariables[ paintID ][ paintWeaponSet ] )
			{
				case 0: // Grenade, Deagle, M4, Spray
				{
					GivePlayerServerWeapon( playerid, 16, 1 );
					GivePlayerServerWeapon( playerid, 24, 500 );
					GivePlayerServerWeapon( playerid, 31, 500 );
					GivePlayerServerWeapon( playerid, 41, 500 );
				}
				case 1: GivePlayerServerWeapon( playerid, 5, 1 ); // Baseball Bat
				case 2: GivePlayerServerWeapon( playerid, 9, 500 ); // Chainsaw
			}
		}
		case 1: GivePlayerGunGameWeapon( playerid );
		case 2: GivePlayerServerWeapon( playerid, 24, 500 );
		case 3: // Headshot Only
		{
			GivePlayerServerWeapon( playerid, 31, 500 );
			GivePlayerServerWeapon( playerid, 24, 500 );
		}
	}
}
stock SelectRandomHelper()
{
	new countVariable, helperID;
	foreach(new i : server_helpers)
	{
		if( playerVariables[ i ][ pHelperDuty ] && playerVariables[ i ][ pNewbieQuestion ] == INVALID_PLAYER_ID )
			countVariable++;
	}
	if( countVariable > 0 )
	{
		helperID = Iter_Random(server_helpers);
		if( playerVariables[ helperID ][ pHelperDuty ] && playerVariables[ helperID ][ pNewbieQuestion ] == INVALID_PLAYER_ID )
			return helperID;
		else return SelectRandomHelper();
	}
	else
	{
		helperID = INVALID_PLAYER_ID;
	}
	return helperID;
}

stock GetActiveQuestions()
{
	return server_newbies;
}
stock GetPlayerIDFromKey( playerKey )
{
	new i = playerKeys[ playerKey ];

	return i;
}
stock ShowPlayerRadioDialog( playerid )
{
	gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, ""COL_R"Stop Radio\n" );
	for( new i=0; i<sizeof(SERVER_RADIO); i++)
		format( gsString, sizeof gsString, "%s"COL_W"%s\n", gsString, SERVER_RADIO[ i ][ Radio_Name ] );

	return ShowPlayerDialog( playerid, DIALOG_RADIO, DIALOG_STYLE_LIST, "Radio List", gsString, "Select", "Exit" );
}
stock PlayAudioStreamForPlayersInCar( vehicleid, url[], type=1 )
{
	switch( type )
	{
		case 0:
		{
			foreach( new i : vehiclePlayerStream[vehicleid] )
					StopAudioStreamForPlayer( i );
		}
		case 1:
		{
			foreach( new i : vehiclePlayerStream[vehicleid] )
			{
				StopAudioStreamForPlayer( i );
				PlayAudioStreamForPlayer( i, url );
			}		
		}
	}
}
stock UpdatePlayerHUDS( playerid )
{
	if( playerVariables[ playerid ][ pHud ][ 0 ] == 1 )
	{
		new fpsString[ 16 ];
		format( fpsString, 16, "FPS: ~y~~h~%d", playerVariables[ playerid ][ pFPS ] );
		PlayerTextDrawSetString( playerid, PLAYER_TD[ 6 ], fpsString );

		if( playerVariables[ playerid ][ pPaintBall ] != -1 )
			PlayerTextDrawHide( playerid, PLAYER_TD[ 6 ] );
		else PlayerTextDrawShow( playerid, PLAYER_TD[ 6 ] );
	}
	else PlayerTextDrawHide( playerid, PLAYER_TD[ 6 ] );
	if( playerVariables[ playerid ][ pHud ][ 1 ] == 1 )
	{
		new hpString[ 16 ], Float:hHealth;
		GetPlayerHealth( playerid, hHealth );
		PlayerTextDrawShow( playerid, PLAYER_TD[ 7 ] );
		format( hpString, 16, "%.0f", hHealth );
		PlayerTextDrawSetString( playerid, PLAYER_TD[ 7 ], hpString );
		PlayerTextDrawShow( playerid, PLAYER_TD[ 7 ] );
	}
	else PlayerTextDrawHide( playerid, PLAYER_TD[ 7 ] );
	if( playerVariables[ playerid ][ pHud ][ 2 ] == 1 )
	{
		new armoString[ 16 ], Float:aArmour;
		GetPlayerArmour( playerid, aArmour );
		PlayerTextDrawShow( playerid, PLAYER_TD[ 8 ] );
		format( armoString, 16, "%.0f", aArmour );
		PlayerTextDrawSetString( playerid, PLAYER_TD[ 8 ], armoString );
		PlayerTextDrawShow( playerid, PLAYER_TD[ 8 ] );
		if( aArmour < 1 )
			PlayerTextDrawHide( playerid, PLAYER_TD[ 8 ] );
	}
	else PlayerTextDrawHide( playerid, PLAYER_TD[ 8 ] );
	if( playerVariables[ playerid ][ pHud ][ 3 ] == 1 )
	{
		PlayerTextDrawShow( playerid, PlayerText:PLAYER_TD[ 10 ] );
	}
	else {
		PlayerTextDrawHide( playerid, PLAYER_TD[ 10 ] );
	}
	if( playerVariables[ playerid ][ pHud ][ 4 ] == 1 && playerVariables [ playerid ][ pAdminLevel ] > 0)
	{
		PlayerTextDrawShow( playerid, SERVER_TD[ 2 ] );
	}
	else PlayerTextDrawHide( playerid, SERVER_TD[ 2 ] );
}
stock MutePlayer( Player, playerid, Minutes, Reason[] )
{
	InsertPlayerPunish( Player, playerid, 2, Minutes, Reason );
	playerVariables[ Player ][ pMuted ] = Minutes * 60;
	SendClientMessageToAllf( COLOR_LIGHTRED, "%s has been muted by %s for %d minutes, reason: %s.", username( Player ), username( playerid ), Minutes, Reason );
	SendClientMessagef( Player, -1, "You have been muted by %s!", username( playerid ) );
}
stock ResetPlayerFactionRaport( playerKey )
{
	new playerid = GetPlayerIDFromKey( playerKey );
	if( IsPlayerConnected( playerid ) )
	{
		playerVariables[ playerid ][ pFactionRunners ] = 0;
		playerVariables[ playerid ][ pFactionTickets ] = 0;
		playerVariables[ playerid ][ pFactionDrugs ] = 0;
		playerVariables[ playerid ][ pFactionLicenses ] = 0;
		playerVariables[ playerid ][ pFactionDepositedMoney ] = 0;
		playerVariables[ playerid ][ pFactionDepositedDrugs ] = 0;
		playerVariables[ playerid ][ pFactionDepositedMats ] = 0;
		playerVariables[ playerid ][ pFactionOrders ] = 0;
		playerVariables[ playerid ][ pFactionLicensesGiven ] = 0;
		playerVariables[ playerid ][ pFactionPatients ] = 0;
		playerVariables[ playerid ][ pFactionContracts ] = 0;
		playerVariables[ playerid ][ pFactionNews ] = 0;
		playerVariables[ playerid ][ pFactionFreeNews ] = 0;
		playerVariables[ playerid ][ pFactionLives ] = 0;
		playerVariables[ playerid ][ pFactionNewsSessions ] = 0;
		playerVariables[ playerid ][ pFactionMatsUsed ] = 0;
		playerVariables[ playerid ][ pFactionWarKills ] = 0;
		playerVariables[ playerid ][ pFactionWarDeaths ] = 0;
	}
	gsQuery[ 0 ] = EOS;
	strcat( gsQuery, "UPDATE `server_accounts` SET" );
	strcat( gsQuery, "`playerRunners` = 0," );
	strcat( gsQuery, "`playerTickets` = 0," );
	strcat( gsQuery, "`playerConfiscateDrugs` = 0," );
	strcat( gsQuery, "`playerConfiscateLicenses` = 0," );
	strcat( gsQuery, "`playerDeposited` = 0," );
	strcat( gsQuery, "`playerOrders` = 0," );
	strcat( gsQuery, "`playerGivenLicenses` = 0," );
	strcat( gsQuery, "`playerPatientsHealed` = 0," );
	strcat( gsQuery, "`playerContracts` = 0," );
	strcat( gsQuery, "`playerNews` = 0," );
	strcat( gsQuery, "`playerFreeNews` = 0," );
	strcat( gsQuery, "`playerNewsSessions` = 0," );
	strcat( gsQuery, "`playerLives` = 0," );
	strcat( gsQuery, "`playerDepositedDrugs` = 0," );
	strcat( gsQuery, "`playerDepositedMats` = 0," );
	strcat( gsQuery, "`playerMaterialsUsed` = 0," );
	strcat( gsQuery, "`playerWarKills` = 0," );
	strcat( gsQuery, "`playerWarDeaths` = 0" );
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "%s WHERE `id` = %d", gsQuery, playerKey );
	mysql_tquery( g_Handle, gsQuery, "", "" );
}
stock CountChars( string[] )
{
	new idx, offset, length = strlen( string ), result[ 264 ];
	while ((idx < length) && (string[idx] <= ' '))
	{
		idx++;
	}
	offset = idx;
	while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
	{
		result[idx - offset] = string[idx];
		idx++;
	}
	result[idx - offset] = EOS;
	return idx;
}

stock KickEx( playerid )
{
	playerVariables[ playerid ][ pKicked ] = true;
	return SetTimerEx( "KickPlayer", 1000, false, "d", playerid );
}
stock SpawnPlayerTimer( playerid ) 
	return SetTimerEx( "SpawnPlayerEx", 500, false, "d", playerid );

stock IsACBUGWeapon( playerid )
{
	new wID = GetPlayerWeapon ( playerid ) ;
	if( wID == 24 || wID == 25 || wID == 27 || wID == 34 ) return true;
	return false;
}
stock GetPlayerNextLevelCost( playerid )
{
	new playerLevel = playerVariables[ playerid ][ pLevel ],
		playerCost = playerLevel * 2000;
	return playerCost;
}
stock ShowPlayerStats( playerid, Player )
{
	new playerExpamount = playerVariables[ playerid ][ pLevel ] * LEVEL_MULTYPLIER,
		playerAdmin = playerVariables[ playerid ][ pAdminLevel ],
		playerHelper = playerVariables[ playerid ][ pHelper ],
		playerKey = GetPlayerMysqlID(playerid),
		Float:playerOnline = float( playerVariables[ playerid ][ pPlayTime ] + playerVariables[ playerid ][ pAFKTime ] ) / 3600.0,
		playerClan = playerVariables[ playerid ][ pClan ],
		playerClanRank = playerVariables[ playerid ][ pClanRank ],
		playerRobPoints;

	switch( playerVariables[ playerid ][ pPremium ] )
	{
		case 0: playerRobPoints = 10;
		case 1: playerRobPoints = 8;
	}
	// Show Player Stats
	SendClientMessagef( Player, ~1, "(%d) %s | Admin: %d | Helper: %d | Playing hours: %0.2f | Phone no: %d | Job: %s | Warns: %d/3", playerKey, username( playerid ), playerAdmin, playerHelper, playerOnline, playerVariables[ playerid ][ pPhoneNumber ], GetGVarStringEx( "job_Name", playerVariables[ playerid ][ pJob ] ), playerVariables[ playerid ][ pWarnings ] );
	SendClientMessagef( Player, ~1, "Level: %d | Respect Points: %d/%d | Next level price: $%s | Money: $%s | Bank money: $%s", playerVariables[ playerid ][ pLevel ], playerVariables[ playerid ][ pRP ], playerExpamount, FormatNumber(GetPlayerNextLevelCost( playerid )), FormatNumber(playerVariables[ playerid ][ pMoney ]), FormatNumber(playerVariables[ playerid ][ pBankMoney ]) );
	SendClientMessagef( Player, ~1, "Faction: %s | Faction Rank: %d | Faction Punish: %d/60 | Faction Warns: %d/3", GetGVarStringEx( "faction_Name", playerVariables[ playerid ][ pFaction ] ), playerVariables[ playerid ][ pFactionRank ], playerVariables[ playerid ][ pFP ], playerVariables[ playerid ][ pFW ] );
	SendClientMessagef( Player, ~1, "Interior: %d | Virtual World: %d | FPS: %d | Ping: %d | Status: %s | Objects in range: %d", GetPlayerInterior( playerid ), GetPlayerVirtualWorld( playerid ), playerVariables[ playerid ][ pFPS ], GetPlayerPing( playerid ), Player_Status[ playerVariables[ Player ][ pSpawned ] ], Streamer_CountVisibleItems( playerid, STREAMER_TYPE_OBJECT ) );
	if( playerClan != 0 )
	{
		svString[ 0 ] = EOS;
		format( svString, sizeof svString, "clan_Rank%d", playerClanRank );
		SendClientMessagef( Player, ~1, "Clan: %s(%s) | Rank: %d (%s)", GetGVarStringEx( "clan_Name", playerClan ), GetGVarStringEx( "clan_Tag", playerClan ), playerClanRank, GetGVarStringEx( svString, playerClan ) );
	}
	SendClientMessagef( Player, ~1, "Free points: %d/2 | Rob points: %d/%d | Arrests: %d | Crimes: %d | Credit: $%d | Phone book: %s", playerVariables[ playerid ][ pFreePoints ], playerVariables[ playerid ][ pRobPoints ], playerRobPoints, playerVariables[ playerid ][ pArrests ], playerVariables[ playerid ][ pCrimes ], playerVariables[ playerid ][ pPhoneCredit ], ( playerVariables[ playerid ][ pPhoneBook ] ) ? ("Yes") : ("No") );
	SendClientMessagef( Player, ~1, "Materials: %d | Drugs: %d | Fireworks: %d total (%d normal, 0 free ) | Hiddens: %d | Job boost: %d hours", playerVariables[ playerid ][ pMaterials ], playerVariables[ playerid ][ pDrugs ], playerVariables[ playerid ][ pFireworks ], playerVariables[ playerid ][ pFireworks ], playerVariables[ playerid ][ pHiddenColors ], playerVariables[ playerid ][ pJobHype ] );
	SendClientMessagef( Player, ~1, "%d/%d vehicles | House: %d | Bizz: %d | Premium: %s (%d points) | VIP: %s | City: %s", 
		GetPersonalVehiclesNumber( playerid ), playerVariables[ playerid ][ pVSlots ], playerVariables[ playerid ][ pHouse ], playerVariables[ playerid ][ pBusiness ], ( playerVariables[ playerid ][ pPremium ] ) ? ("Yes") : ("No"), 
		playerVariables[ playerid ][ pPremiumPoints ], ( playerVariables[ playerid ][ pPremium ] != 2 ? ("No") : ("Yes")), ( playerVariables[ playerid ][ pCity ] ) ? ("Las Venturas") : ("Los Santos") );
	if(playerVariables[playerid][pYoutuber] == 1)
	{
		SendClientMessagef(Player, -1, "Youtuber | Refferal ID: %d", playerVariables[playerid][pReferralString]);
	}
	if(GetGVarInt("bus_OwnerKey", HOTEL_DB_ID) == GetPlayerMysqlID(playerid))
	{
		SendClientMessagef(Player, -1, "Hotel Owner: Yes");
	}
	return true;
}
stock doesVehicleExist( const vehicleid )
{
	if( GetVehicleModel( vehicleid ) >= 400 ) return true;
	return false;
}
stock GetDistancePlayerVeh( playerid, veh )
{
	new Float:Floats[ 7 ];
	GetPlayerPos(playerid, Floats[0], Floats[1], Floats[2]);
	GetVehiclePos(veh, Floats[3], Floats[4], Floats[5]);
	Floats[ 6 ] = floatsqroot((Floats[3]-Floats[0])*(Floats[3]-Floats[0])+(Floats[4]-Floats[1])*(Floats[4]-Floats[1])+(Floats[5]-Floats[2])*(Floats[5]-Floats[2]));
	return floatround( Floats[ 6 ] );
}
stock GetVehicleFromBehind( vehicleid )
{
	new Float:fCoords[ 7 ];
	GetVehiclePos( vehicleid, fCoords[ 0 ], fCoords[ 1 ], fCoords[ 2 ] );
	GetVehicleZAngle( vehicleid, fCoords[ 3 ] );

	for( new i = 1; i != MAX_VEHICLES; i++ )
	{
		if( i != vehicleid && GetVehiclePos( i, fCoords[ 4 ], fCoords[ 5 ], fCoords[ 6 ] ) )
		{
			if( floatabs( fCoords[ 0 ] - fCoords[ 4 ] ) < 10 && floatabs( fCoords[ 1 ] - fCoords[ 5 ] ) < 10 && floatabs( fCoords[ 2 ] - fCoords[ 6 ] ) < 10 )
				return i;
		}
	}
	return INVALID_VEHICLE_ID;
}
stock GetClosestVehicle( playerid, Float:dis )
{
	new Float:X, Float:Y, Float:Z;
	if( GetPlayerPos( playerid, X, Y, Z ) )
	{
		new vehicleid = INVALID_VEHICLE_ID;
		for(new v, Float:temp, Float:VX, Float:VY, Float:VZ; v != MAX_VEHICLES; v++)
		{
			if(GetVehiclePos(v, VX, VY, VZ))
			{
				VX -= X, VY -= Y, VZ -= Z;
				temp = VX * VX + VY * VY + VZ * VZ;
				if(temp < dis) dis = temp, vehicleid = v;
			}
		}
		dis = floatpower(dis, 0.5);
		return vehicleid;
	}
	return INVALID_VEHICLE_ID;
}
function Float:GetVehicleHealthEx( vehicleid )
{
	new Float:vHP;
	GetVehicleHealth( vehicleid, vHP );
	return vHP;
}
stock Float:GetDistanceBetweenPoints( Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2 )
	return floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));

stock GetNumberOfPlayersOnThisIP( test_ip[] )
{
	new ip_count = 0;
	foreach(new i : Player)
		if( !strcmp( playerVariables[ i ][ pIPAddress ], test_ip ) )
			ip_count++;
	return ip_count;
}
function InsertPlayerPunishPanel( playerKey, adminKey, username[], adminName[], value, type, complaint, reason[] )
{
	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "INSERT INTO `server_punish` (`punishPlayerID`, `punishAdminID`, `punishPlayer`, `punishAdmin`, `punishValue`, `punishType`, `punishComplaint`, `punishReason`)\
		VALUES (%d, %d, '%s', '%s', %d, %d, %d, '%s')", playerKey, adminKey, username, adminName, value, type, complaint, reason );
	mysql_tquery( g_Handle, gsQuery, "", "" );

	return true;
}
function InsertPlayerPunish( playerid, adminid, type, value, reason[])
{
	new adminKey, adminName[ 24 ];
	if( adminid == -1 )
		adminKey = -1, adminName = "Server";
	else
		adminKey = GetPlayerMysqlID(adminid), adminName = playerVariables[ adminid ][ pNormalName ];

	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "INSERT INTO `server_punish` (`punishPlayerID`, `punishAdminID`, `punishPlayer`, `punishAdmin`, `punishValue`, `punishType`, `punishReason`)\
		VALUES (%d, %d, '%s', '%s', %d, %d, '%s')", GetPlayerMysqlID(playerid), adminKey, playerVariables[ playerid ][ pNormalName ], adminName, value, type, reason );
	mysql_tquery( g_Handle, gsQuery, "", "" );

	return true;
}
function InsertPlayerMail( playerKey, mailText[] )
{
	// < Insert the E-Mail )
	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "INSERT INTO `server_emails` (`playerKey`, `emailText`) VALUES (%d, '%s')", playerKey, mailText );
	mysql_tquery( g_Handle, gsQuery, "", "" );

	// < Update Mail Status )
	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerMail` = 1 WHERE `id` = %d", playerKey );
	mysql_tquery( g_Handle, gsQuery, "", "" );
	return true;
}
function InsertClanLog( playerid, clanID, logText[] )
{
	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "INSERT INTO `server_clanlogs` (`logClan`, `logPlayerKey`, `logText`) VALUES (%d, %d, '%s')", clanID, GetPlayerMysqlID(playerid), logText );
	mysql_tquery( g_Handle, gsQuery, "", "" );
	return true;
}
function InsertAHLog( adminKey, adminName[], playerKey, username[], text[] )
{
	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "INSERT INTO `server_adminlogs` (`logPlayerKey`, `logPlayer`, `logAdminKey`, `logAdmin`, `logText`) VALUES (%d, '%s', %d, '%s', '%s')", adminKey, adminName, playerKey, username, text );
	mysql_tquery( g_Handle, gsQuery, "", "" );
	return true;
}

stock IsPlayerTaxiDriver( playerid )
{
	switch( playerVariables[ playerid ][ pFaction ] )
	{
		case 3: return true;
		default: return false;
	}
	return false;
}
stock IsPlayerCop( playerid )
{
	switch( playerVariables[ playerid ][ pFaction ] )
	{
		case 1: return true;
		default: return false;
	}
	return false;
}
stock LeaderChat(color,const string[])
{
	foreach(new i : server_leaders)
		if( playerVariables[ i ][ pTog ][ 8 ] == 1 )
			SendClientMessage( i, color, string );	
	return true;
}
stock ProxDetectorS( Float:radi, playerid, targetid )
{
	if( IsPlayerConnected( playerid ) && IsPlayerConnected( targetid ) )
	{
		new Float:posx, Float:posy, Float:posz,
			Float:oldposx, Float:oldposy, Float:oldposz,
			Float:tempposx, Float:tempposy, Float:tempposz;

		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		GetPlayerPos(targetid, posx, posy, posz);
		tempposx = (oldposx -posx);
		tempposy = (oldposy -posy);
		tempposz = (oldposz -posz);
		if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi))) return true;
	}
	return false;
}
stock SendSplitMessage(playerid, color, final[])
{
	new len = strlen(final),
		_iL = len / EX_SPLITLENGTHH;
	if( ( len % EX_SPLITLENGTHH ) ) _iL++;
	new _Line[EX_SPLITLENGTHH+5];
	new _:_i@Index;
	while( _i@Index < _iL )
	{
		if( _i@Index == 0 )
			strmid( _Line, final, ( _i@Index * EX_SPLITLENGTHH ), ( _i@Index * EX_SPLITLENGTHH ) + EX_SPLITLENGTHH );
		else
			strmid( _Line, final, ( _i@Index * EX_SPLITLENGTHH ), ( _i@Index * EX_SPLITLENGTHH ) + EX_SPLITLENGTHH );

		if( _iL > 1 )
		{
			if( _i@Index > 0 )
			{
				format( _Line, sizeof _Line, "... %s", _Line );
			}
		}
		SendClientMessage( playerid, color, _Line );
		_i@Index++;
	}
	return true;
}
stock GivePlayerHealth( playerid, Float:health )
{
	if( GetPlayerHealthEx( playerid ) + health > 99.0 )
		SetPlayerHealth( playerid, 100 );
	else SetPlayerHealth( playerid, GetPlayerHealthEx( playerid ) + health );
}
stock ResetBankActors()
{
	for( new actorID=0; actorID < sizeof( Actor_Rob ); actorID++ )
		ClearActorAnimations( actorID ), ActorHandsup[ actorID ] = false;
}
stock Announce( playerid, zString[], liTime, liStile )
{
	GameTextForPlayer( playerid, zString, liTime, liStile );
	return true;
}
stock IsPlayerFloodingCMD( playerid )
	return ( GetTickCount() - playerVariables[ playerid ][ pCMDTime ] < 3000 );

stock IsPlayerFlooding( playerid )
	return ( GetTickCount() - playerVariables[ playerid ][ pChatTime ] < 1000 );

stock IsNumeric( string[] )
{
	for( new i = 0, j = strlen( string ); i < j; i++ )
		if( string[ i ] > '9' || string[ i ] < '0' )
			return false;

	return true;
}

stock WarnPlayer( playerid, const reason[] )
{
	gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, "AdmWarn: %s(%i) may be advertising with message: %s", username( playerid ), playerid, reason );
	submitToHelpersAndAdmins( gsString, COLOR_HOTORANGE );
	SendClientMessage( playerid, COLOR_ULTRARED, "Reclama {7A7A7A}» {BABABA}Este posibil ca textul tau sa contina o reclama!" );
	return false;
}
stock Checkusername( playerid, pzName[] )
{
	if( stringContainsIP( pzName, true, false ) ) return BanEx( playerid, "#IP Name #1" ), false;
	if( strfind( pzName, "7777", true) != -1 ) 	return BanEx( playerid, "#IP Name #2" ), false;
	if( CheckAdvertising( playerid, pzName ) )	return BanEx( playerid, "#Advertise Name" ), false;

	foreach( new i : ServerClans)
	{
		if( strfind( pzName, GetGVarStringEx( "clan_Tag", i ), true) != -1 )
		{
			gsString[ 0 ] = EOS;
			format( gsString, sizeof gsString, "AdmWarn: %s has been kicked. Reason: Clan Tag in Name!", username( playerid ) );
			submitToAdmins(gsString, COLOR_LIGHTRED);

			SendClientMessagef( playerid, COLOR_GREY, "You have been kicked, reason: Clan tag %s in your name!", GetGVarStringEx( "clan_Tag", i ) );
			KickEx( playerid );
			return false;
		}
	}
	return true;
}
stock VerificaReclama( playerid, text[] )
{
	if( stringContainsIP( text, true, false ) )	return WarnPlayer( playerid, text ), playerVariables[ playerid ][ pMuted ] += 30, false;
	if( CountStringNumbersEx( text, 7 ) >= 4 )  return WarnPlayer( playerid, text ), playerVariables[ playerid ][ pMuted ] += 30, false;
	if( CheckAdvertising( playerid, text ) )	return WarnPlayer( playerid, text ), playerVariables[ playerid ][ pMuted ] += 30, false;
	//if( CountStringNumbers( text ) >= 10 )      return WarnPlayer( playerid, text ), playerVariables[ playerid ][ pMuted ] = 5, false;
	return true;
}
stock CountStringNumbers( string[] )
{
	new adtext[ 256 ], numberCount;
	for( new i; i<strlen( string ); ++i )
	{
		strmid(adtext, string, i, i+1);
		if( IsNumeric( adtext ) )
		{
			numberCount++;
			continue;
		}
	}
	return numberCount;
}
stock CountStringNumbersEx( string[], number )
{
	new adtext[ 256 ], numberCount;
	for( new i; i<strlen( string ); ++i )
	{
		strmid(adtext, string, i, i+1);
		if( strval( adtext ) == number )
		{
			numberCount++;
			continue;
		}
	}
	return numberCount;
}
stock GetMembersOnTurf( faction, turf )
{
	new membersCount = 0;
	foreach(new i : playerFaction[ faction ])
	{
		if( IsPlayerInDynamicArea( i, GetGVarInt( "TurfREC", turf ) ) )
			membersCount++;
	}		
	return membersCount;
}
stock HideFactionWarTD( playerid )
{
	PlayerTextDrawHide( playerid, WAR_TD[ 0 ] );
	PlayerTextDrawHide( playerid, WAR_TD[ 1 ] );
	PlayerTextDrawHide( playerid, WAR_TD[ 2 ] );
}
stock ShowFactionWarTD( playerid )
{
	PlayerTextDrawShow( playerid, WAR_TD[ 0 ] );
	PlayerTextDrawShow( playerid, WAR_TD[ 1 ] );
	PlayerTextDrawShow( playerid, WAR_TD[ 2 ] );
}
stock GetPlayerTurfID( playerid )
{
	foreach( new x : ServerTurfs )
		if( IsPlayerInDynamicArea( playerid, GetGVarInt( "TurfREC", x ) ) ) return x;
	return false;
}
stock GetBusinessTurfID(ID)
{
	foreach(new x : ServerTurfs)
	{
		if(IsPointInDynamicArea(GetGVarInt( "TurfREC", x), GetGVarFloat("bus_EnterX", ID), GetGVarFloat("bus_EnterY", ID), GetGVarFloat("bus_EnterZ", ID))) 
			return x;
	}
	return 0;
}

stock InsertFactionLog( logText[], logFaction, logPlayer, logusername[], logLeader = 0, logLeaderName[] )
{
	new escapeString[ 256 ];
	mysql_escape_string( logText, escapeString );

	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "INSERT INTO `server_factionlog`(`logText`, `logFaction`, `logPlayer`, `logPlayerName`, `logLeader`, `logLeaderName`) VALUES ('%s', %d, %d, '%s', %d, '%s')", escapeString, logFaction, logPlayer, logusername, logLeader, logLeaderName );
	mysql_tquery( g_Handle, gsQuery, "", "" );
}
stock InsertVehicleLog( vehicleKey, playerKey, logAction[] )
{
	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "INSERT INTO `server_logs_vehicles`(`logVehicle`, `logPlayer`, `logText`) VALUES (%d, %d, '%s')", vehicleKey, playerKey, logAction );
	mysql_tquery( g_Handle, gsQuery, "", "" );
}
stock InsertPlayerLog( logPlayerID, logPlayer=0, logAction[] )
{
	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "INSERT INTO `server_logs_player`(`logPlayerID`, `logPlayer`, `logAction`) VALUES (%d, %d, '%s')", logPlayerID, logPlayer, logAction );
	mysql_tquery( g_Handle, gsQuery, "", "" );
}
stock InsertChatLog( logPlayerID, logChat[], logText[] )
{
	new escapeString[ 256 ];
	mysql_escape_string( logText, escapeString );

	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "INSERT INTO `server_logs_chat`(`logPlayerID`, `logText`, `logChat`) VALUES (%d, '%e', '%s')", logPlayerID, escapeString, logChat );
	mysql_tquery( g_Handle, gsQuery, "", "" );
}
stock InsertCMDLog( logPlayerID, logPlayer=0, logCMD[], logText[] )
{
	new escapeString[ 256 ];
	mysql_escape_string( logText, escapeString );

	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "INSERT INTO `server_logs_cmds`(`logPlayerID`, `logPlayer`, `logCMD`, `logText`) VALUES (%d, %d, '%s', '%e')", logPlayerID, logPlayer, logCMD, escapeString );
	mysql_tquery( g_Handle, gsQuery, "", "" );
}
stock InsertGiftLog( logPlayerID, logPlayer[], logValue, logType )
{
	new logText[ 128 ];
	switch( logType )
	{
		case 0: format( logText, sizeof logText, "%s has found $%s in the giftbox.", logPlayer, FormatNumber( logValue ) );
		case 1: format( logText, sizeof logText, "%s has got 100 hours for all licenses from the giftbox.", logPlayer );
		case 2: format( logText, sizeof logText, "%s has found %d Fireworks in the giftbox.", logPlayer, logValue );
		case 3: format( logText, sizeof logText, "%s has found %d Hidden Color(s) in the giftbox.", logPlayer, logValue );
		case 4: format( logText, sizeof logText, "%s has found %s Materials in the giftbox.", logPlayer, FormatNumber( logValue ) );
		case 5: format( logText, sizeof logText, "%s has got a Clear Warns from the giftbox.", logPlayer );
		case 6: format( logText, sizeof logText, "%s has found %d Premium Points in the giftbox.", logPlayer, logValue );
		case 7: format( logText, sizeof logText, "%s has found a(n) %s in the giftbox.", logPlayer, VehicleName( logValue ) );
		case 8: format( logText, sizeof logText, "%s has got 1 Vehicle slot from the giftbox.", logPlayer );
	}
	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "INSERT INTO `server_gifts`(`giftPlayer`, `giftPlayerName`, `giftText`) VALUES (%d, '%s', '%s')", logPlayerID, logPlayer, logText );
	mysql_tquery( g_Handle, gsQuery, "", "" );
}
stock UpdateJobStats( jobID, jobValue = 0 )
{
	switch( jobID )
	{
		case 1: mysql_tquery( g_Handle, "UPDATE `server_stats` SET `statsTruck` = `statsTruck` + 1" );
		case 2: mysql_tquery( g_Handle, "UPDATE `server_stats` SET `statsSack` = `statsSack` + 1" );
		case 3: mysql_tquery( g_Handle, "UPDATE `server_stats` SET `statsPizza` = `statsPizza` + 1" );
		case 5:
		{
			gsQuery[ 0 ] = EOS;
			mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_stats` SET `statsArms` = `statsArms` + %d", jobValue );
			mysql_tquery( g_Handle, gsQuery, "", "" );
		}
		case 8: mysql_tquery( g_Handle, "UPDATE `server_stats` SET `statsFish` = `statsFish` + 1" );
		case 10: mysql_tquery( g_Handle, "UPDATE `server_stats` SET `statsTow` = `statsTow` + 1" );
	}
}
stock IsAPlane( carid )
{
	new result = 0, modelID = GetVehicleModel( carid );
	switch( modelID )
	{
		case 417, 425, 447, 460, 464, 465, 469, 476, 487, 488, 497, 511, 512, 513, 519, 520, 548, 553, 563, 577, 592, 593: result = modelID;
		default: result = 0;
	}
	return result;
}
stock IsAPlaneModel( modelID )
{
	switch( modelID )
	{
		case 417, 425, 447, 460, 464, 465, 469, 476, 487, 488, 497, 511, 512, 513, 519, 520, 548, 553, 563, 577, 592, 593: return true;
		default: return false;
	}
	return false;
}
stock IsABoat( carid )
{
	new result = 0, modelID = GetVehicleModel( carid );
	switch( modelID )
	{
		case 430, 446, 452, 453, 454, 472, 473, 484, 493, 595: result = modelID;
		default: result = 0;
	}
	return result;
}
stock IsABike( vehicleID )
{
	new modelID = GetVehicleModel( vehicleID );
	switch( modelID )
	{
		case 509, 510, 481: return true;
	}
	return false;
}
stock IsABikeAndMotorBike( vehicleID )
{
	new modelID = GetVehicleModel( vehicleID );
	switch( modelID )
	{
		case 509, 510, 581, 522, 521, 523, 586, 481, 462, 448, 461, 463, 468, 471: return true;
	}
	return false;
}
stock LoadSafeGoldBars()
{
	for( new i=0; i < sizeof(GOLD_SAFE); i++ )
		if( IsValidObject( GOLD_SAFE[ i ] ) )
			DestroyObject( GOLD_SAFE[ i ] );

	// < Gold Bars )
	GOLD_SAFE[ 0 ] = CreateObject(1212, 2143.22144, 1638.14697, 993.53967,   0.00000, 0.00000, -87.95995);
	GOLD_SAFE[ 1 ] = CreateObject(1212, 2143.01782, 1637.77771, 993.53967,   0.00000, 0.00000, -87.89995);
	GOLD_SAFE[ 2 ] = CreateObject(1212, 2145.04565, 1638.12903, 993.53967,   0.00000, 0.00000, -87.89995);
	GOLD_SAFE[ 3 ] = CreateObject(1212, 2144.80713, 1637.65771, 993.53967,   0.00000, 0.00000, -87.89995);
	GOLD_SAFE[ 4 ] = CreateObject(1212, 2144.45947, 1638.24316, 993.53967,   0.00000, 0.00000, -87.89995);
	GOLD_SAFE[ 5 ] = CreateObject(1212, 2144.08130, 1638.18640, 993.53967,   0.00000, 0.00000, -87.89995);
	GOLD_SAFE[ 6 ] = CreateObject(1212, 2143.42114, 1637.27588, 993.53967,   0.00000, 0.00000, -87.89995);
	GOLD_SAFE[ 7 ] = CreateObject(1212, 2143.34424, 1637.65259, 993.53967,   0.00000, 0.00000, -87.89995);
	GOLD_SAFE[ 8 ] = CreateObject(1212, 2143.80225, 1637.29199, 993.53967,   0.00000, 0.00000, -87.89995);
	GOLD_SAFE[ 9 ] = CreateObject(1212, 2143.61987, 1637.78430, 993.53967,   0.00000, 0.00000, -87.89995);
	GOLD_SAFE[ 10 ] = CreateObject(1212, 2143.59473, 1638.30481, 993.53967,   0.00000, 0.00000, -87.89995);
	GOLD_SAFE[ 11 ] = CreateObject(1212, 2145.35522, 1637.94092, 993.53967,   0.00000, 0.00000, -87.89995);
	GOLD_SAFE[ 12 ] = CreateObject(1212, 2144.98462, 1637.30334, 993.53967,   0.00000, 0.00000, -87.89995);
	GOLD_SAFE[ 13 ] = CreateObject(1212, 2144.34668, 1637.67554, 993.53967,   0.00000, 0.00000, -87.89995);
	GOLD_SAFE[ 14 ] = CreateObject(1212, 2144.06006, 1637.38232, 993.53967,   0.00000, 0.00000, -87.89995);
	GOLD_SAFE[ 15 ] = CreateObject(1212, 2144.54150, 1637.38379, 993.53967,   0.00000, 0.00000, -87.89995);
	GOLD_SAFE[ 16 ] = CreateObject(1212, 2144.74487, 1638.21375, 993.53967,   0.00000, 0.00000, -87.89995);
	GOLD_SAFE[ 17 ] = CreateObject(19941, 2143.91650, 1637.80017, 993.53601,   0.00000, 0.00000, -87.18002);
	GOLD_SAFE[ 18 ] = CreateObject(19941, 2143.83081, 1638.33813, 993.53601,   0.00000, 0.00000, -87.18002);
	GOLD_SAFE[ 19 ] = CreateObject(19941, 2144.27515, 1638.27710, 993.53601,   0.00000, 0.00000, -87.48001);
	GOLD_SAFE[ 20 ] = CreateObject(19941, 2144.57568, 1637.87000, 993.53601,   0.00000, 0.00000, -87.90000);
	GOLD_SAFE[ 21 ] = CreateObject(19941, 2143.19434, 1637.38770, 993.53601,   0.00000, 0.00000, -86.94002);
	GOLD_SAFE[ 22 ] = CreateObject(19941, 2143.01904, 1638.14111, 993.53601,   0.00000, 0.00000, -87.24001);
	GOLD_SAFE[ 23 ] = CreateObject(19941, 2143.63623, 1637.32776, 993.53601,   0.00000, 0.00000, -87.18002);
	GOLD_SAFE[ 24 ] = CreateObject(19941, 2143.44238, 1638.06030, 993.53601,   0.00000, 0.00000, -87.54002);
	GOLD_SAFE[ 25 ] = CreateObject(19941, 2144.33545, 1637.31995, 993.53601,   0.00000, 0.00000, -88.62002);
	GOLD_SAFE[ 26 ] = CreateObject(19941, 2144.73804, 1637.29810, 993.53601,   0.00000, 0.00000, -89.34000);
	GOLD_SAFE[ 27 ] = CreateObject(19941, 2145.11987, 1637.71533, 993.53601,   0.00000, 0.00000, -87.66001);
	GOLD_SAFE[ 28 ] = CreateObject(19941, 2145.29102, 1637.50171, 993.53601,   0.00000, 0.00000, -87.42001);
	GOLD_SAFE[ 29 ] = CreateObject(19941, 2144.15479, 1637.83215, 993.53601,   0.00000, 0.00000, -86.10001);
	GOLD_SAFE[ 30 ] = CreateObject(19941, 2143.36426, 1638.43921, 993.53601,   0.00000, 0.00000, -87.18002);
	GOLD_SAFE[ 31 ] = CreateObject(19941, 2144.63403, 1638.45325, 993.53601,   0.00000, 0.00000, -88.13999);
	GOLD_SAFE[ 32 ] = CreateObject(19941, 2144.57568, 1637.87000, 993.53601,   0.00000, 0.00000, -87.90000);
	GOLD_SAFE[ 33 ] = CreateObject(19941, 2144.93506, 1638.44592, 993.53601,   0.00000, 0.00000, -88.13999);
}
/*stock GetWeaponSlot( weaponid )
{
	switch(weaponid)
	{
		case 0, 1: return false;
		case 2 .. 9: return true;
		case 22 .. 24: return 2;
		case 25 .. 27: return 3;
		case 28, 29, 32: return 4;
		case 30, 31: return 5;
		case 33, 34: return 6;
		case 35 .. 38: return 7;
		case 16, 17, 18, 39, 40: return 8;
		case 41 .. 43: return 9;
		case 10 .. 15: return 10;
		case 44 .. 46: return 11;
	}
	return -1;
}*/
stock ShowPlayerID( playerid, targetid )
{
	new fps[10];
	format(fps, sizeof(fps), "%d", playerVariables[ targetid ][ pFPS ]);
	if( playerVariables[ targetid ][ pClan ] != 0 )
	{
		switch( playerVariables[ targetid ][ pClanTag ] )
		{
			case 1:
			{
				new ClanID = playerVariables[ targetid ][ pClan ];

				if( playerVariables[ targetid ][ pFaction ] != 0 )
					SendClientMessagef( playerid, COLOR_WHITE, "(%d) {%s}%s"COL_W"%s | Level %d | Faction: %s (rank %d) | Ping: %d | FPS: %s | AFK: %d seconds", 
						targetid, GetGVarStringEx( "clan_Color", ClanID ), GetGVarStringEx( "clan_Tag", ClanID ), playerVariables[ targetid ][ pNormalName ], playerVariables[ targetid ][ pLevel ], 
						GetGVarStringEx( "faction_Name", playerVariables[ targetid ][ pFaction ] ), playerVariables[ targetid ][ pFactionRank ], GetPlayerPing( targetid ), 
						fps, playerVariables[ targetid ][ pAFKTimeNow ] );
				else
					SendClientMessagef( playerid, COLOR_WHITE, "(%d) {%s}%s"COL_W"%s | Level %d | Faction: None | Ping: %d | FPS: %s | AFK: %d seconds", 
						targetid, GetGVarStringEx( "clan_Color", ClanID ), GetGVarStringEx( "clan_Tag", ClanID ), playerVariables[ targetid ][ pNormalName ], playerVariables[ targetid ][ pLevel ], GetPlayerPing( targetid ), 
						fps, playerVariables[ targetid ][ pAFKTimeNow ] );
			}
			case 2:
			{
				new ClanID = playerVariables[ targetid ][ pClan ];
				if( playerVariables[ targetid ][ pFaction ] != 0 )
					SendClientMessagef( playerid, COLOR_WHITE, "(%d) %s{%s}%s "COL_W"| Level %d | Faction: %s (rank %d) | Ping: %d | FPS: %s | AFK: %d seconds", 
						targetid, playerVariables[ targetid ][ pNormalName ], GetGVarStringEx( "clan_Color", ClanID ), GetGVarStringEx( "clan_Tag", ClanID ), playerVariables[ targetid ][ pLevel ], 
						GetGVarStringEx( "faction_Name", playerVariables[ targetid ][ pFaction ] ), playerVariables[ targetid ][ pFactionRank ], GetPlayerPing( targetid ), 
						fps, playerVariables[ targetid ][ pAFKTimeNow ] );
				else
					SendClientMessagef( playerid, COLOR_WHITE, "(%d) %s{%s}%s "COL_W"| Level %d | Faction: None | Ping: %d | FPS: %s | AFK: %d seconds", 
						targetid, playerVariables[ targetid ][ pNormalName ], GetGVarStringEx( "clan_Color", ClanID ), GetGVarStringEx( "clan_Tag", ClanID ), playerVariables[ targetid ][ pLevel ], GetPlayerPing( targetid ), 
						fps, playerVariables[ targetid ][ pAFKTimeNow ] );
			}
			default:
			{
				if( playerVariables[ targetid ][ pFaction ] != 0 )
					SendClientMessagef( playerid, COLOR_WHITE, "(%d) %s "COL_W"| Level %d | Faction: %s (rank %d) | Ping: %d | FPS: %s | AFK: %d seconds", 
						targetid, playerVariables[ targetid ][ pNormalName ], playerVariables[ targetid ][ pLevel ], GetGVarStringEx( "faction_Name", playerVariables[ targetid ][ pFaction ] ), 
						playerVariables[ targetid ][ pFactionRank ], GetPlayerPing( targetid ), fps, playerVariables[ targetid ][ pAFKTimeNow ] );
				else
					SendClientMessagef( playerid, COLOR_WHITE, "(%d) %s "COL_W"| Level %d | Faction: None | Ping: %d | FPS: %s | AFK: %d seconds", 
						targetid, playerVariables[ targetid ][ pNormalName ], playerVariables[ targetid ][ pLevel ], GetPlayerPing( targetid ), fps, playerVariables[ targetid ][ pAFKTimeNow ] );
			}
		}
	}
	else
	{
		if( playerVariables[ targetid ][ pFaction ] != 0 )
			SendClientMessagef( playerid, COLOR_WHITE, "(%d) %s | Level %d | Faction: %s (rank %d) | Ping: %d | FPS: %s | AFK: %d seconds", targetid, playerVariables[ targetid ][ pNormalName ], playerVariables[ targetid ][ pLevel ], 
				GetGVarStringEx( "faction_Name", playerVariables[ targetid ][ pFaction ] ), playerVariables[ targetid ][ pFactionRank ], GetPlayerPing( targetid ), fps, playerVariables[ targetid ][ pAFKTimeNow ] );
		else
			SendClientMessagef( playerid, COLOR_WHITE, "(%d) %s | Level %d | Faction: None | Ping: %d | FPS: %s | AFK: %d seconds", targetid, playerVariables[ targetid ][ pNormalName ], playerVariables[ targetid ][ pLevel ], 
				GetPlayerPing( targetid ), fps, playerVariables[ targetid ][ pAFKTimeNow ] );
	}
	return true;
}
stock ArrestPlayer( playerid, time )
{
	DisablePlayerCheckpoint( playerid );
	playerVariables[ playerid ][ pCP ] = 0;
	playerVariables[ playerid ][ pRCP ] = 0;

	playerVariables[ playerid ][ pArrests ]++;
	StopAudioStreamForPlayer( playerid );
	playerVariables[ playerid ][ pPrisonTime ] = time;
	ResetServerWeapons( playerid );

	TogglePlayerControllable( playerid, true );

	playerVariables[ playerid ][ pWanted ] = 0;
	Iter_Remove(server_wanteds, playerid);
	server_wanteds--;
	playerVariables[ playerid ][ pWantedTime ] = 0;
	SetPlayerArmour( playerid, 0 );

	SetPlayerWantedLevel( playerid, 0 );
	PlayerTextDrawHide( playerid, PLAYER_TD[ 3 ] );

	SetPlayerInterior( playerid, 6 );
	//SetPlayerVirtualWorld( playerid, 6500 );

	new spawn = random( sizeof( JailSpawns ) );
	SetPlayerPos( playerid, JailSpawns[spawn][0], JailSpawns[spawn][1], JailSpawns[spawn][2] );
	SetPlayerFacingAngle( playerid, 0 );

	KillTimer( playerVariables[ playerid ][ pPrisonTimer ] );
	playerVariables[ playerid ][ pPrisonTimer ] = SetTimerEx( "JailTimer", 1000, true, "d", playerid );
}

stock Time_Calculate(secunde)
{
	new time = secunde;
	new ora = time/3600;
	time = time%3600;
	new minute = time/60;
	time = time%60;
	new secunde2 = time;
	new string[10];
	format(string,sizeof(string),"%02d:%02d:%02d",ora,minute,secunde2);
	return string;
}

stock Calculate_Time(secunde)
{
	new time = secunde;
	time = time%3600;
	new minute = time/60;
	time = time%60;
	new secunde2 = time;
	new string[10];
	format(string,sizeof(string),"%02d:%02d",minute,secunde2);
	return string;
}   


stock TimeConvert( time )
{
	new minutes, seconds, string[ 128 ];
	if(time > 59){
		minutes = floatround(time/60);
		seconds = floatround(time - minutes*60);
		if(seconds>9)format(string,sizeof(string),"%d:%d",minutes,seconds);
		else format(string,sizeof(string),"%d:0%d",minutes,seconds);
	}
	else{
		seconds = floatround(time);
		if(seconds>9)format(string,sizeof(string),"0:%d",seconds);
		else format(string,sizeof(string),"0:0%d",seconds);
	}
	return string;
}
stock ConvertTime(&cts, &ctm=-1,&cth=-1,&ctd=-1,&ctw=-1,&ctmo=-1,&cty=-1)
{
	#define PLUR(%0,%1,%2) (%0),((%0) == 1)?((#%1)):((#%2))

	#define CTM_cty 31536000
	#define CTM_ctmo 2628000
	#define CTM_ctw 604800
	#define CTM_ctd 86400
	#define CTM_cth 3600
	#define CTM_ctm 60

	#define CT(%0) %0 = cts / CTM_%0; cts %= CTM_%0

	new strii[128];

	if(cty != -1 && (cts/CTM_cty))
	{
		CT(cty); CT(ctmo); CT(ctw); CT(ctd); CT(cth); CT(ctm);
		format(strii, sizeof(strii), "%d %s, %d %s, %d %s, %d %s, %d %s, %d %s, and %d %s",PLUR(cty,"year","years"),PLUR(ctmo,"month","months"),PLUR(ctw,"week","weeks"),PLUR(ctd,"day","days"),PLUR(cth,"hour","hours"),PLUR(ctm,"minute","minutes"),PLUR(cts,"second","seconds"));
		return strii;
	}
	if(ctmo != -1 && (cts/CTM_ctmo))
	{
		cty = 0; CT(ctmo); CT(ctw); CT(ctd); CT(cth); CT(ctm);
		format(strii, sizeof(strii), "%d %s, %d %s, %d %s, %d %s, %d %s, and %d %s",PLUR(ctmo,"month","months"),PLUR(ctw,"week","weeks"),PLUR(ctd,"day","days"),PLUR(cth,"hour","hours"),PLUR(ctm,"minute","minutes"),PLUR(cts,"second","seconds"));
		return strii;
	}
	if(ctw != -1 && (cts/CTM_ctw))
	{
		cty = 0; ctmo = 0; CT(ctw); CT(ctd); CT(cth); CT(ctm);
		format(strii, sizeof(strii), "%d %s, %d %s, %d %s, %d %s, and %d %s",PLUR(ctw,"week","weeks"),PLUR(ctd,"day","days"),PLUR(cth,"hour","hours"),PLUR(ctm,"minute","minutes"),PLUR(cts,"second","seconds"));
		return strii;
	}
	if(ctd != -1 && (cts/CTM_ctd))
	{
		cty = 0; ctmo = 0; ctw = 0; CT(ctd); CT(cth); CT(ctm);
		format(strii, sizeof(strii), "%d %s, %d %s, %d %s, and %d %s",PLUR(ctd,"day","days"),PLUR(cth,"hour","hours"),PLUR(ctm,"minute","minutes"),PLUR(cts,"second","seconds"));
		return strii;
	}
	if(cth != -1 && (cts/CTM_cth))
	{
		cty = 0; ctmo = 0; ctw = 0; ctd = 0; CT(cth); CT(ctm);
		format(strii, sizeof(strii), "%d %s, %d %s, and %d %s",PLUR(cth,"hour","hours"),PLUR(ctm,"minute","minutes"),PLUR(cts,"second","seconds"));
		return strii;
	}
	if(ctm != -1 && (cts/CTM_ctm))
	{
		cty = 0; ctmo = 0; ctw = 0; ctd = 0; cth = 0; CT(ctm);
		format(strii, sizeof(strii), "%d %s, and %d %s",PLUR(ctm,"minute","minutes"),PLUR(cts,"second","seconds"));
		return strii;
	}
	cty = 0; ctmo = 0; ctw = 0; ctd = 0; cth = 0; ctm = 0;
	format(strii, sizeof(strii), "%d %s", PLUR(cts,"second","seconds"));
	return strii;
}
stock timec(timestamp, compare = -1)
{
	if (compare == -1) {
		compare = gettime();
	}
	new
		n,
		Float:d = (timestamp > compare) ? timestamp - compare : compare - timestamp,
		returnstr[32];

	if (d < 60) {
		format(returnstr, sizeof(returnstr), "< 1 minute");
		return returnstr;
	} else if (d < 3600) { // 3600 = 1 hour
		n = floatround(floatdiv(d, 60.0), floatround_floor);
		format(returnstr, sizeof(returnstr), "minute");
	} else if (d < 86400) { // 86400 = 1 day
		n = floatround(floatdiv(d, 3600.0), floatround_floor);
		format(returnstr, sizeof(returnstr), "hour");
	} else if (d < 2592000) { // 2592000 = 1 month
		n = floatround(floatdiv(d, 86400.0), floatround_floor);
		format(returnstr, sizeof(returnstr), "day");
	} else if (d < 31536000) { // 31536000 = 1 year
		n = floatround(floatdiv(d, 2592000.0), floatround_floor);
		format(returnstr, sizeof(returnstr), "month");
	} else {
		n = floatround(floatdiv(d, 31536000.0), floatround_floor);
		format(returnstr, sizeof(returnstr), "year");
	}
	if (n == 1) {
		format(returnstr, sizeof(returnstr), "1 %s", returnstr);
	} else {
		format(returnstr, sizeof(returnstr), "%d %ss", n, returnstr);
	}
	return returnstr;
}
stock businessTypeMessages( const businessid, const playerid )
{
	switch( GetGVarInt( "bus_Type", businessid ) )
	{
		case 1: SendClientMessage( playerid, COLOR_GREY, "Welcome! "COL_W"The commands of this Business are as follows: /buy" );
		case 2: SendClientMessage( playerid, COLOR_GREY, "Welcome! "COL_W"The commands of this Business are as follows: /buygun" );
		case 3: SendClientMessage( playerid, COLOR_GREY, "Welcome! "COL_W"The commands of this Business are as follows: /deposit, /transfer, /withdraw, "COL_LR"/startrob" );
		case 4: SendClientMessage( playerid, COLOR_GREY, "Welcome! "COL_W"The commands of this Business are as follows: /buyclothes($1.000), /buyglasses($500), /buyhat($500)" );
		case 6: SendClientMessage( playerid, COLOR_GREY, "Welcome! "COL_W"The commands of this Business are as follows: /buygascan" );
		case 7: SendClientMessage( playerid, COLOR_GREY, "Welcome! "COL_W"The commands of this Business are as follows: /eat" );
		case 8: SendClientMessage( playerid, COLOR_GREY, "Welcome! "COL_W"The commands of this Business are as follows: /ad <news>" );
		case 9: SendClientMessage( playerid, COLOR_GREY, "Welcome! "COL_W"The commands of this Business are as follows: /dice" );
		case 10: SendClientMessage( playerid, COLOR_GREY, "Welcome! "COL_W"The commands of this Business are as follows: /buydrink" );
	}
}
stock ShowFactionHelp( playerid )
{
	switch( playerVariables[ playerid ][ pFaction ] )
	{
		case 0: ShowPlayerDialog( playerid, DIALOG_HELP_BACK, DIALOG_STYLE_MSGBOX, "Faction Commands", "You are not from any group!", "Exit", "Back" );
		case 1: ShowPlayerDialog( playerid, DIALOG_HELP_BACK, DIALOG_STYLE_MSGBOX, "Faction Commands", Help_Police(), "Exit", "Back" );
		case 2: ShowPlayerDialog( playerid, DIALOG_HELP_BACK, DIALOG_STYLE_MSGBOX, "Faction Commands", Help_Paramedic(), "Exit", "Back" );
		case 3: ShowPlayerDialog( playerid, DIALOG_HELP_BACK, DIALOG_STYLE_MSGBOX, "Faction Commands", Help_Taxi(), "Exit", "Back" );
		case 4: ShowPlayerDialog( playerid, DIALOG_HELP_BACK, DIALOG_STYLE_MSGBOX, "Faction Commands", Help_SchoolInstructors(), "Exit", "Back" );
		case 5: ShowPlayerDialog( playerid, DIALOG_HELP_BACK, DIALOG_STYLE_MSGBOX, "Faction Commands", Help_NewsReporters(), "Exit", "Back" );
		case 6: ShowPlayerDialog( playerid, DIALOG_HELP_BACK, DIALOG_STYLE_MSGBOX, "Faction Commands", Help_Hitman(), "Exit", "Back" );
		case 7..10: ShowPlayerDialog( playerid, DIALOG_HELP_BACK, DIALOG_STYLE_MSGBOX, "Faction Commands", Help_Mafii(), "Exit", "Back" );
	}
}
stock SelectNextAirport( playerid )
{
	if( IsPlayerInRangeOfPoint( playerid, 500.0, 1931.3154, -2428.1130, 13.7668 ) ) // Los Santos
	{
		DisablePlayerRaceCheckpoint( playerid );
		switch( random( 3 ) )
		{
			case 0: SetPlayerCheckpointGPS( playerid, "LV Airport", 1322.7965, 1338.9646, 10.9210 ); // LV
			case 1: SetPlayerCheckpointGPS( playerid, "SF Airport", -1335.5999, -221.0418, 14.1484 ); // SF
			case 2: SetPlayerCheckpointGPS( playerid, "AA Airport", 414.7618, 2508.5496, 16.4844 ); // AA
		}
		#if defined DEBUG_SERVER
			print( "[SNA-Debug] A fost detectat aeroportul LS" );
		#endif
	}
	else if( IsPlayerInRangeOfPoint( playerid, 500.0, 1322.7965, 1338.9646, 10.9210 ) ) // Las Ventura
	{
		DisablePlayerRaceCheckpoint( playerid );
		switch( random( 3 ) )
		{
			case 0: SetPlayerCheckpointGPS( playerid, "LS Airport", 1931.3154, -2428.1130, 13.7668 ); // LS
			case 1: SetPlayerCheckpointGPS( playerid, "SF Airport", -1335.5999, -221.0418, 14.1484 ); // SF
			case 2: SetPlayerCheckpointGPS( playerid, "AA Airport", 414.7618, 2508.5496, 16.4844 ); // AA
		}
		#if defined DEBUG_SERVER
			print( "[SNA-Debug] A fost detectat aeroportul LV" );
		#endif
	}
	else if( IsPlayerInRangeOfPoint( playerid, 500.0, -1335.5999, -221.0418, 14.1484 ) ) // San Fierro
	{
		DisablePlayerRaceCheckpoint( playerid );
		switch( random( 3 ) )
		{
			case 0: SetPlayerCheckpointGPS( playerid, "LS Airport", 1931.3154, -2428.1130, 13.7668 ); // LS
			case 1: SetPlayerCheckpointGPS( playerid, "LV Airport", 1322.7965, 1338.9646, 10.9210 ); // LV
			case 2: SetPlayerCheckpointGPS( playerid, "AA Airport", 414.7618, 2508.5496, 16.4844 ); // AA
		}
		#if defined DEBUG_SERVER
			print( "[SNA-Debug] A fost detectat aeroportul SF" );
		#endif
	}
	else if( IsPlayerInRangeOfPoint( playerid, 500.0, 414.7618, 2508.5496, 16.4844 ) ) // Abandoned
	{
		DisablePlayerRaceCheckpoint( playerid );
		switch( random( 3 ) )
		{
			case 0: SetPlayerCheckpointGPS( playerid, "LS Airport", 1931.3154, -2428.1130, 13.7668 ); // LS
			case 1: SetPlayerCheckpointGPS( playerid, "LV Airport", 1322.7965, 1338.9646, 10.9210 ); // LV
			case 2: SetPlayerCheckpointGPS( playerid, "SF Airport", -1335.5999, -221.0418, 14.1484 ); // SF
		}
		#if defined DEBUG_SERVER
			print( "[SNA-Debug] A fost detectat aeroportul AA" );
		#endif
	}
	playerVariables[ playerid ][ pRCP ] = 8020;
}
stock SetPlayerCheckpointGPS( playerid, gpsName[], Float:gpsX, Float:gpsY, Float:gpsZ )
{
	GPS_Location( playerid, gpsName, gpsX, gpsY, gpsZ, 1 );
	SetPlayerRaceCheckpoint( playerid, 4, gpsX, gpsY, gpsZ, gpsX, gpsY, gpsZ, 20.0 );
}
stock UpdateScadeWanted( playerid, level )
{
	if( playerVariables[ playerid ][ pWanted ] != 0 )
	{
		gsString[ 0 ] = EOS;
		format( gsString, 128, "wanted scade in: ~r~%s minute", TimeConvert( level ) );
		PlayerTextDrawSetString( playerid, PLAYER_TD[ 3 ], gsString ) ;
		PlayerTextDrawShow( playerid, PLAYER_TD[ 3 ] );
	}
	else PlayerTextDrawHide( playerid, PLAYER_TD[ 3 ] );
}
stock GivePlayerPayday( playerid, paydayHour )
{
	if( playerVariables[ playerid ][ pLogged ] )
	{
		// < Set payday time and player variables )
		playerVariables[ playerid ][ pPayday ]++;
		playerVariables[ playerid ][ pFactionSessionStatus ] = 0;

		// < Calculate the value )
		new
			PremiumBonus = 0,
			ServerTax = 10,
			#if defined PET
			PetPay = ( playerVariables[playerid][pPetLevel] * 1000 ),
			#endif
			BankInterest = floatround( (0.03/100) * playerVariables[ playerid ][ pBankMoney ], floatround_round),
			PayCheck = ( 750 * playerVariables[ playerid ][ pLevel ] ) + randomEx( 1000, 3000 );

		if( playerVariables[ playerid ][ pPremium ] )
			PremiumBonus = randomEx( 1000, 4000 );

		new TotalPay = PremiumBonus + BankInterest + PayCheck - ServerTax;

		#if defined PET
		if(playerVariables[playerid][pPet] != 0)
		{
			TotalPay += PetPay;
			playerVariables[playerid][pPetPoints]++;
			//SendClientMessagef(playerid, COLOR_WHITE, "You have received %d$ by owning a Pet and 1 point to upgrade the Pet's level(you have %d points)", PetPay, playerVariables[playerid][pPetPoints]);
		}
		#endif

		// < Initiate the payday )
		SendClientMessage( playerid, COLOR_TEAL, "|-------------------[ PAYDAY / BANK STATEMENT ]-----------------|" );
		SendClientMessagef( playerid, COLOR_GREY, "Paycheck: $%s | Premium bonus: $%s", FormatNumber( PayCheck ), FormatNumber( PremiumBonus ) );
		#if defined PET
		SendClientMessagef( playerid, COLOR_GREY, "Pet Bonus: $%s",  FormatNumber(PetPay));
		#endif
		SendClientMessagef( playerid, COLOR_GREY, "Tax: -$%d", ServerTax );
		SendClientMessagef( playerid, COLOR_GREY, "Balance: $%s", FormatNumber( playerVariables[ playerid ][ pBankMoney ] ) );
		SendClientMessagef( playerid, COLOR_GREY, "Interest Rate: 0.03%%" );
		SendClientMessagef( playerid, COLOR_GREY, "Interest Gained: $%s", FormatNumber( BankInterest ) );

		if( playerVariables[ playerid ][ pRentAP ] != 0 && GetGVarInt("bus_OwnerKey", HOTEL_DB_ID) != GetPlayerMysqlID(playerid))
		{
			new rentAPP = playerVariables[ playerid ][ pRentAP ];
			if( playerVariables[ playerid ][ pMoney ] < GetGVarInt( "apartment_RENT", rentAPP ) )
			{
				SendClientMessagef( playerid, COLOR_GREY, "Rent: You were evicted, no money to pay the rent for Apartment: %d", rentAPP );

				if( playerVariables[ playerid ][ pSpawnType ] == 3 )
		            playerVariables[ playerid ][ pSpawnType ] = 0;

				gsQuery[ 0 ] = EOS;
				mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerApartment` = 0, `playerSpawnType` = 0 WHERE `id` = %d", GetPlayerMysqlID(playerid) );
				mysql_tquery( g_Handle, gsQuery, "", "" );
				SetGVarInt("apartment_RENTERS", GetGVarInt("apartment_RENTERS", rentAPP) - 1, rentAPP);
				UpdateApartment(rentAPP);

				playerVariables[ playerid ][ pRentAP ] = 0;
			}
			else
			{
				SendClientMessagef( playerid, COLOR_GREY, "Rent: You payed $%s to the owner of Apartment", FormatNumber( GetGVarInt( "apartment_RENT", rentAPP ) ) );
				playerVariables[ playerid ][ pMoney ] -= GetGVarInt( "apartment_RENT", rentAPP );
				SetGVarInt( "bus_Money", GetGVarInt( "bus_Money", HOTEL_DB_ID ) + GetGVarInt( "apartment_RENT", rentAPP ), HOTEL_DB_ID );
			}
		}

		if( playerVariables[ playerid ][ pRentRoom ] != 0 )
		{
			new rentRoom = playerVariables[ playerid ][ pRentRoom ];
			if( playerVariables[ playerid ][ pMoney ] < GetGVarInt( "house_Rent", rentRoom ) )
			{
				SendClientMessagef( playerid, COLOR_GREY, "Rent: You were evicted, no money to pay the rent for House: %d", rentRoom );
				Iter_Remove(playerRenters[rentRoom], playerid);
				playerVariables[ playerid ][ pRentRoom ] = 0;

				if( playerVariables[ playerid ][ pSpawnType ] == 2 )
		            playerVariables[ playerid ][ pSpawnType ] = 0;

				gsQuery[ 0 ] = EOS;
				mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerRent` = 0, `playerSpawnType` = 0 WHERE `id` = %d", GetPlayerMysqlID(playerid) );
				mysql_tquery( g_Handle, gsQuery, "", "" );
			}
			else
			{
				SendClientMessagef( playerid, COLOR_GREY, "Rent: You payed $%s to the owner of House: %d", FormatNumber( GetGVarInt( "house_Rent", rentRoom ) ), rentRoom );
				playerVariables[ playerid ][ pMoney ] -= GetGVarInt( "house_Rent", rentRoom );
				SetGVarInt( "house_Money", GetGVarInt( "house_Money", rentRoom ) + GetGVarInt( "house_Rent", rentRoom ), rentRoom );
			}
		}
		if( playerVariables[ playerid ][ pFactionRank ] == 7 )
		{
			playerVariables[ playerid ][ pBankMoney ] += 10000;
			SendClientMessage( playerid, COLOR_GREY, "Ai primit $10.000 salariu de Leader." );
		}
		if( playerVariables[ playerid ][ pBusiness ] != 0 )
		{
			playerVariables[ playerid ][ pBankMoney ] += 5000;
			SendClientMessage( playerid, COLOR_GREY, "Ai primit $5.000 bonus pentru administrarea unui business." );
		}
		if(playerVariables[playerid][pJobHype] != 0)
		{
			playerVariables[playerid][pJobHype]--;
			if(playerVariables[playerid][pJobHype] == 0)
			{
				SendClientMessage( playerid, COLOR_YELLOW, "Job Boost-ul tau a expirat, poti cumpara unul nou din /shop !" );
			}
		}
		// < Verify Licenses )
		if( playerVariables[ playerid ][ pCarLicense ] > 0 )
		{
			playerVariables[ playerid ][ pCarLicense ]--;
			if( !playerVariables[ playerid ][ pCarLicense ] )
				SendClientMessage( playerid, COLOR_YELLOW, "* Licenta ta de condus a expirat recent. Acum poti merge din nou la scoala de soferi pentru a lua licenta din nou." );
		}
		if( playerVariables[ playerid ][ pGunLicense ] > 0 )
		{
			playerVariables[ playerid ][ pGunLicense ]--;
			if( !playerVariables[ playerid ][ pGunLicense ] )
				SendClientMessage( playerid, COLOR_YELLOW, "* Licenta ta de arme a expirat recent. Acum poti da din nou testul cu un instructor pentru a lua licenta din nou." );
		}
		if( playerVariables[ playerid ][ pFlyLicense ] > 0 )
		{
			playerVariables[ playerid ][ pFlyLicense ]--;
			if( !playerVariables[ playerid ][ pFlyLicense ] )
				SendClientMessage( playerid, COLOR_YELLOW, "* Licenta ta de zbor a expirat recent. Acum poti da din nou testul cu un instructor pentru a lua licenta din nou." );
		}
		if( playerVariables[ playerid ][ pBoatLicense ] > 0 )
		{
			playerVariables[ playerid ][ pBoatLicense ]--;
			if( !playerVariables[ playerid ][ pBoatLicense ] )
				SendClientMessage( playerid, COLOR_YELLOW, "* Licenta ta de arme a expirat recent. Acum poti da din nou testul cu un instructor pentru a lua licenta din nou." );
		}
		// < Check Premium )
		switch( playerVariables[ playerid ][ pPremium ] )
		{
			case 1,2:
			{
				if( IsPlayerCop( playerid ) )
					playerVariables[ playerid ][ pFreePoints ] += 2;
				else
					playerVariables[ playerid ][ pRobPoints ] += 2;

				playerVariables[ playerid ][ pRP ] += 2;
				if( playerVariables[ playerid ][ pFP ] > 0 )
					playerVariables[ playerid ][ pFP ] -= 2;
			}
			case 0:
			{
				if( IsPlayerCop( playerid ) )
					playerVariables[ playerid ][ pFreePoints ]++;
				else
					playerVariables[ playerid ][ pRobPoints ]++;

				playerVariables[ playerid ][ pRP ]++;
				if( playerVariables[ playerid ][ pFP ] > 0 )
					playerVariables[ playerid ][ pFP ]--;
			}
		}
		playerVariables[ playerid ][ pBankMoney ] += TotalPay;
		SendClientMessage( playerid, COLOR_TEAL, "|------------------------------------------------------------------------------|" );
		SendClientMessagef( playerid, COLOR_GREY, "New Balance: $%s", FormatNumber(playerVariables[ playerid ][ pBankMoney ]) );

		// < Give player Bonus! )
		if( paydayHour == 02 && playerVariables[ playerid ][ pLogged ] )
			playerVariables[ playerid ][ pPremiumPoints ]++, SendClientMessage( playerid, COLOR_LIGHTBLUE, "BONUS System: "COL_W"It's 02:00 and you received 1 Premium Point!" );
    }
}
stock GetPlayerOnlineHours( playerid )
	return floatround((playerVariables[ playerid ][ pPlayTime ] + playerVariables[ playerid ][ pAFKTime ]) / 3600, floatround_round);

stock UpdateJobBox( playerid, workers, jInfo[], {Float, _}:...)
{
	#define BYTES_PER_CELL 4
	static const STATIC_ARGS = 3;
	new n = (numargs() - STATIC_ARGS) * BYTES_PER_CELL;
	if(n)
	{
		new
			arg_start,
			arg_end,
			buffer[256];

		#emit CONST.alt		jInfo
		#emit LCTRL			5
		#emit ADD
		#emit STOR.S.pri	arg_start

		#emit LOAD.S.alt	n
		#emit ADD
		#emit STOR.S.pri	arg_end

		do
		{
			#emit LREF.S.pri arg_end
			#emit PUSH.pri
			arg_end -= BYTES_PER_CELL;
		}
		while (arg_end > arg_start);

		#emit PUSH.S		jInfo
		#emit PUSH.C		256
		#emit PUSH.ADR		buffer

		n += BYTES_PER_CELL * 3;
		#emit PUSH.S		n
		#emit SYSREQ.C		format

		n += BYTES_PER_CELL;
		#emit LCTRL			4
		#emit LOAD.S.alt	n
		#emit ADD
		#emit SCTRL			4

		PlayerTextDrawSetString( playerid, JOB_TD[ 3 ], buffer ) ;
		PlayerTextDrawShow( playerid, JOB_TD[ 3 ] );
	}
	else
	{
		PlayerTextDrawSetString( playerid, JOB_TD[ 3 ], jInfo ) ;
		PlayerTextDrawShow( playerid, JOB_TD[ 3 ] );
	}
	new JobID = playerVariables[ playerid ][ pJob ];
	PlayerTextDrawSetString( playerid, JOB_TD[ 1 ], GetGVarStringEx( "job_Name", JobID ) );

	gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, "job skill: ~y~%d/5 ~w~~h~next skill: ~y~%s", playerVariables[ playerid ][ jSkill ][ JobID ], ForNextLevel( playerid, JobID ) );
	PlayerTextDrawSetString( playerid, JOB_TD[ 2 ], gsString ) ;
	//playerVariables[ playerid ][ pTotalEarnings ] += playerVariables[ playerid ][ pJobValue ];

	gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, "WORKERS~l~: ~y~~h~%d ~l~II ~w~~h~TOTAL CASTIG~l~: ~w~~h~%s~g~~h~$", workers, FormatNumber( playerVariables[ playerid ][ pTotalEarnings ] ) );
	PlayerTextDrawSetString( playerid, JOB_TD[ 4 ], gsString ) ;
	PlayerTextDrawShow( playerid, JOB_TD[ 4 ] );

	ShowPlayerJobTextdraws( playerid );
}
stock GetRandomHouseCP( playerid )
{
	new randomHouse = randomEx(1, MAX_HOUSES);
	if( randomHouse == playerVariables[ playerid ][ pRandomCP ] )
		return GetRandomHouseCP( playerid );
	return randomHouse;
}
stock GetRandomBusinessCP()
{
	new randomBusiness = randomEx( 1, 52 );
	if( GetGVarInt( "bus_Type", randomBusiness ) == 1)
		return randomBusiness;
	else return GetRandomBusinessCP();
}
stock PayPlayerJob( playerid, jobid )
{
	// < Give Player Cash for job >
	switch( jobid )
	{
		case 1: // Trucker  
		{
			switch( playerVariables[ playerid ][ jSkill ][ jobid ] )
			{
				case 1: playerVariables[ playerid ][ pJobValue ] = RandomChance( randomEx(15000, 18000), randomEx2(13000, 15000), 100 );
				case 2: playerVariables[ playerid ][ pJobValue ] = RandomChance( randomEx(20000, 23000), randomEx2(18000, 20000), 100 );
				case 3: playerVariables[ playerid ][ pJobValue ] = RandomChance( randomEx(25000, 28000), randomEx2(23000, 25000), 100 );
				case 4: playerVariables[ playerid ][ pJobValue ] = RandomChance( randomEx(30000, 33000), randomEx2(28000, 30000), 100 );
				case 5: playerVariables[ playerid ][ pJobValue ] = RandomChance( randomEx(35000, 38000), randomEx2(32000, 35000), 100 );
			}
			if( playerVariables[ playerid ][ pJobValue ] > 500000 ) return PayPlayerJob( playerid, jobid );
			playerVariables[ playerid ][ pMoney ] += playerVariables[ playerid ][ pJobValue ];

			if(playerVariables[playerid][pJobHype] != 0)
			{
				playerVariables[playerid][pJobValue2] = RandomChance( randomEx(5000, 8000), randomEx2(3000, 5000), 100 );
				playerVariables[ playerid ][ pMoney ] += playerVariables[playerid][pJobValue2];
				SendClientMessagef(playerid, 0x0E4682FF, "[JOB-BOOST] {FFFFFF}Ai primit %s$ pentru ca ai un job boost activ.", FormatNumber(playerVariables[playerid][pJobValue2]));
			}

			// < Update Player Skills >
			UpdateJobStats( jobid );
			UpdatePlayerSkill( playerid, jobid );
			CheckPlayerQuest( playerid, QUEST_TRUCKER );

			Announce_Player( playerid, 3000, 1, "~r~Ai castigat~n~~w~$%s", FormatNumber(playerVariables[ playerid ][ pJobValue ]) );
			#if defined DEBUG_SERVER
				printf( "Player %s[%i] has received $%s from Trucked job!", username( playerid ), playerid, FormatNumber( playerVariables[ playerid ][ pJobValue ] ) );
			#endif
		}
		case 2: // Farmer
		{
			switch( playerVariables[ playerid ][ jSkill ][ jobid ] )
			{
				case 1: playerVariables[ playerid ][ pJobValue ] = RandomChance( randomEx(15000, 18000), randomEx2(13000, 15000), 100 );
				case 2: playerVariables[ playerid ][ pJobValue ] = RandomChance( randomEx(20000, 23000), randomEx2(22000, 24000), 100 );
				case 3: playerVariables[ playerid ][ pJobValue ] = RandomChance( randomEx(25000, 28000), randomEx2(27000, 29000), 100 );
				case 4: playerVariables[ playerid ][ pJobValue ] = RandomChance( randomEx(30000, 33000), randomEx2(32000, 34000), 100 );
				case 5: playerVariables[ playerid ][ pJobValue ] = RandomChance( randomEx(35000, 38000), randomEx2(37000, 39000), 100 );
			}
			if( playerVariables[ playerid ][ pJobValue ] > 500000 ) return PayPlayerJob( playerid, jobid );
			//playerVariables[ playerid ][ pMoney ] += playerVariables[ playerid ][ pJobValue ];

			if(playerVariables[playerid][pJobHype] != 0)
			{
				playerVariables[playerid][pJobValue2] = randomEx(3000, 5000);
				playerVariables[ playerid ][ pMoney ] += playerVariables[playerid][pJobValue2];
				SendClientMessagef(playerid, 0x0E4682FF, "[JOB-BOOST] {FFFFFF}Ai primit %s$ pentru ca ai un job boost activ.", FormatNumber(playerVariables[playerid][pJobValue2]));
			}

			// < Update Player Skills >
			UpdateJobStats( jobid );
			UpdatePlayerSkill( playerid, jobid );

			#if defined DEBUG_SERVER
				printf( "Player %s(%i) has received $%s from Farmer job!", username( playerid ), playerid, FormatNumber( playerVariables[ playerid ][ pJobValue ] ) );
			#endif
		}
		case 3: // Pizza
		{
			switch( playerVariables[ playerid ][ jSkill ][ jobid ] )
			{
				case 1: playerVariables[ playerid ][ pJobValue ] = RandomChance( randomEx(2000, 7000), randomEx2(2500, 2800), 100 );
				case 2: playerVariables[ playerid ][ pJobValue ] = RandomChance( randomEx(2000, 7000), randomEx2(2900, 3200), 100 );
				case 3: playerVariables[ playerid ][ pJobValue ] = RandomChance( randomEx(2000, 7000), randomEx2(3300, 3600), 100 );
				case 4: playerVariables[ playerid ][ pJobValue ] = RandomChance( randomEx(7000, 10000), randomEx2(3800, 4400), 100 );
				case 5: playerVariables[ playerid ][ pJobValue ] = RandomChance( randomEx(10000, 20000), randomEx2(4600, 5000), 100 );
			}
			if( playerVariables[ playerid ][ pJobValue ] > 500000 ) return PayPlayerJob( playerid, jobid );
			playerVariables[ playerid ][ pMoney ] += playerVariables[ playerid ][ pJobValue ];

			if(playerVariables[playerid][pJobHype] != 0)
			{
				playerVariables[playerid][pJobValue2] = randomEx(1000, 3000);
				playerVariables[ playerid ][ pMoney ] += playerVariables[playerid][pJobValue2];
				SendClientMessagef(playerid, 0x0E4682FF, "[JOB-BOOST] {FFFFFF}Ai primit %s$ pentru ca ai un job boost activ.", FormatNumber(playerVariables[playerid][pJobValue2]));
			}

			// < Update Player Skills >
			UpdateJobStats( jobid );
			UpdatePlayerSkill( playerid, jobid );
			Announce_Player( playerid, 3000, 1, "~r~Ai castigat~n~~w~$%s", FormatNumber(playerVariables[ playerid ][ pJobValue ]) );
			#if defined DEBUG_SERVER
				printf( "Player %s(%i) has received $%s from Pizza job!", username( playerid ), playerid, FormatNumber( playerVariables[ playerid ][ pJobValue ] ) );
			#endif
		}
		case 4: // Pilot
		{
			switch( playerVariables[ playerid ][ jSkill ][ jobid ] )
			{
				case 1: playerVariables[ playerid ][ pJobValue ] = RandomChance( randomEx(2000, 7000), randomEx2(800, 1000), 100 );
				case 2: playerVariables[ playerid ][ pJobValue ] = RandomChance( randomEx(2000, 7000), randomEx2(1500, 1800), 100 );
				case 3: playerVariables[ playerid ][ pJobValue ] = RandomChance( randomEx(2000, 7000), randomEx2(1800, 2000), 100 );
				case 4: playerVariables[ playerid ][ pJobValue ] = RandomChance( randomEx(7000, 10000), randomEx2(2000, 2300), 100 );
				case 5: playerVariables[ playerid ][ pJobValue ] = RandomChance( randomEx(10000, 20000), randomEx2(4500, 6500), 100 );
			}
			if( playerVariables[ playerid ][ pJobValue ] > 500000 ) return PayPlayerJob( playerid, jobid );
			playerVariables[ playerid ][ pMoney ] += playerVariables[ playerid ][ pJobValue ];

			if(playerVariables[playerid][pJobHype] != 0)
			{
				playerVariables[playerid][pJobValue2] = randomEx(3000, 5000);
				playerVariables[ playerid ][ pMoney ] += playerVariables[playerid][pJobValue2];
				SendClientMessagef(playerid, 0x0E4682FF, "[JOB-BOOST] {FFFFFF}Ai primit %s$ pentru ca ai un job boost activ.", FormatNumber(playerVariables[playerid][pJobValue2]));
			}

			// < Update Player Skills >
			CheckPlayerQuest( playerid, QUEST_PILOT );
			UpdatePlayerSkill( playerid, jobid );
			Announce_Player( playerid, 3000, 1, "~r~Ai castigat~n~~w~$%s", FormatNumber(playerVariables[ playerid ][ pJobValue ]) );
			#if defined DEBUG_SERVER
				printf( "Player %s(%i) has received $%s from Pilot job!", username( playerid ), playerid, FormatNumber( playerVariables[ playerid ][ pJobValue ] ) );
			#endif
		}
		case 5: // Arms Dealer
		{
			switch( playerVariables[ playerid ][ jSkill ][ jobid ] )
			{
				case 1: playerVariables[ playerid ][ pJobValue ] = RandomChance( 3000, 500, 100 );
				case 2: playerVariables[ playerid ][ pJobValue ] = RandomChance( 3000, 600, 100 );
				case 3: playerVariables[ playerid ][ pJobValue ] = RandomChance( 3000, 700, 100 );
				case 4: playerVariables[ playerid ][ pJobValue ] = RandomChance( 3000, 1000, 100 );
				case 5: playerVariables[ playerid ][ pJobValue ] = RandomChance( 3000, 1300, 100 );
			}
			if( playerVariables[ playerid ][ pJobValue ] > 500000 ) return PayPlayerJob( playerid, jobid );
			playerVariables[ playerid ][ pMaterials ] += playerVariables[ playerid ][ pJobValue ];

			if(playerVariables[playerid][pJobHype] != 0)
			{
				playerVariables[playerid][pJobValue2] = RandomChance( 1000, 500, 100 );
				playerVariables[ playerid ][ pMaterials ] += playerVariables[playerid][pJobValue2];
				SendClientMessagef(playerid, 0x0E4682FF, "[JOB-BOOST] {FFFFFF}Ai primit %s materiale pentru ca ai un job boost activ.", FormatNumber(playerVariables[playerid][pJobValue2]));
			}

			// < Update Player Skills >
			UpdateJobStats( jobid, playerVariables[ playerid ][ pJobValue ] );
			UpdatePlayerSkill( playerid, jobid );
			Announce_Player( playerid, 3000, 1, "~r~Ai castigat~n~~w~~h~%s ~y~~h~Materials", FormatNumber(playerVariables[ playerid ][ pJobValue ]) );
			#if defined DEBUG_SERVER
				printf( "Player %s(%i) has received %s Materials from Arms Dealer job!", username( playerid ), playerid, FormatNumber( playerVariables[ playerid ][ pJobValue ] ) );
			#endif
		}
		case 6: // Car Jacker
		{
			switch( playerVariables[ playerid ][ jSkill ][ jobid ] )
			{
				case 1: playerVariables[ playerid ][ pJobValue ] = RandomChance( 10000, 200, 100 );
				case 2: playerVariables[ playerid ][ pJobValue ] = RandomChance( 10000, 500, 100 );
				case 3: playerVariables[ playerid ][ pJobValue ] = RandomChance( 10000, 700, 100 );
				case 4: playerVariables[ playerid ][ pJobValue ] = RandomChance( 10000, 900, 100 );
				case 5: playerVariables[ playerid ][ pJobValue ] = RandomChance( 10000, 1100, 100 );
			}
			if( playerVariables[ playerid ][ pJobValue ] > 500000 ) return PayPlayerJob( playerid, jobid );
			playerVariables[ playerid ][ pMoney ] += playerVariables[ playerid ][ pJobValue ];

			if(playerVariables[playerid][pJobHype] != 0)
			{
				playerVariables[playerid][pJobValue2] = RandomChance( randomEx(5000, 8000), randomEx2(3000, 5000), 100 );
				playerVariables[ playerid ][ pMoney ] += playerVariables[playerid][pJobValue2];
				SendClientMessagef(playerid, 0x0E4682FF, "[JOB-BOOST] {FFFFFF}Ai primit %s$ pentru ca ai un job boost activ.", FormatNumber(playerVariables[playerid][pJobValue2]));
			}

			// < Update Player Skills >
			CheckPlayerQuest( playerid, QUEST_CARJACK );
			UpdatePlayerSkill( playerid, jobid );
			Announce_Player( playerid, 3000, 1, "~r~Ai castigat~n~~w~~h~$%s", FormatNumber(playerVariables[ playerid ][ pJobValue ]) );
			#if defined DEBUG_SERVER
				printf( "Player %s(%i) has received %s Money from Car Jacker job!", username( playerid ), playerid, FormatNumber( playerVariables[ playerid ][ pJobValue ] ) );
			#endif
		}
		case 8: // Fisher
		{
			switch( playerVariables[ playerid ][ jSkill ][ jobid ] )
			{
				case 1: playerVariables[ playerid ][ pJobValue ] = playerVariables[ playerid ][ pFishesValue ] * 950;
				case 2: playerVariables[ playerid ][ pJobValue ] = playerVariables[ playerid ][ pFishesValue ] * 1100;
				case 3: playerVariables[ playerid ][ pJobValue ] = playerVariables[ playerid ][ pFishesValue ] * 1300;
				case 4: playerVariables[ playerid ][ pJobValue ] = playerVariables[ playerid ][ pFishesValue ] * 1600;
				case 5: playerVariables[ playerid ][ pJobValue ] = playerVariables[ playerid ][ pFishesValue ] * 1900;
			}
			if( playerVariables[ playerid ][ pJobValue ] > 10000 )
				playerVariables[ playerid ][ pJobValue ] = randomEx(7000, 16000);

			playerVariables[ playerid ][ pMoney ] += playerVariables[ playerid ][ pJobValue ];
			playerVariables[ playerid ][ pFishesValue ] = 0;
			playerVariables[ playerid ][ pFishes ] = 0;

			if(playerVariables[playerid][pJobHype] != 0)
			{
				playerVariables[playerid][pJobValue2] = RandomChance( randomEx(5000, 8000), randomEx2(3000, 5000), 100 );
				playerVariables[ playerid ][ pMoney ] += playerVariables[playerid][pJobValue2];
				SendClientMessagef(playerid, 0x0E4682FF, "[JOB-BOOST] {FFFFFF}Ai primit %s$ pentru ca ai un job boost activ.", FormatNumber(playerVariables[playerid][pJobValue2]));
			}

			// < Update Player Skills >
			UpdateJobStats( jobid );
			UpdatePlayerSkill( playerid, jobid );
			Announce_Player( playerid, 3000, 1, "~r~Ai castigat~n~~w~~h~$%s", FormatNumber( playerVariables[ playerid ][ pJobValue ] ) );
		}
		case 10: // Mechanic
		{
			switch( playerVariables[ playerid ][ jSkill ][ jobid ] )
			{
				case 1: playerVariables[ playerid ][ pJobValue ] = RandomChance( randomEx(2000, 7000), randomEx2(300, 600), 100 );
				case 2: playerVariables[ playerid ][ pJobValue ] = RandomChance( randomEx(2000, 7000), randomEx2(600, 1000), 100 );
				case 3: playerVariables[ playerid ][ pJobValue ] = RandomChance( randomEx(2000, 7000), randomEx2(1000, 1700), 100 );
				case 4: playerVariables[ playerid ][ pJobValue ] = RandomChance( randomEx(7000, 10000), randomEx2(1700, 2300), 100 );
				case 5: playerVariables[ playerid ][ pJobValue ] = RandomChance( randomEx(10000, 20000), randomEx2(2300, 3500), 100 );
			}
			if( playerVariables[ playerid ][ pJobValue ] > 500000 ) return PayPlayerJob( playerid, jobid );
			playerVariables[ playerid ][ pMoney ] += playerVariables[ playerid ][ pJobValue ];

			if(playerVariables[playerid][pJobHype] != 0)
			{
				playerVariables[playerid][pJobValue2] = RandomChance( randomEx(5000, 8000), randomEx2(3000, 5000), 100 );
				playerVariables[ playerid ][ pMoney ] += playerVariables[playerid][pJobValue2];
				SendClientMessagef(playerid, 0x0E4682FF, "[JOB-BOOST] {FFFFFF}Ai primit %s$ pentru ca ai un job boost activ.", FormatNumber(playerVariables[playerid][pJobValue2]));
			}

			// < Update Player Skills >
			UpdateJobStats( jobid );
			UpdatePlayerSkill( playerid, jobid );
			Announce_Player( playerid, 3000, 1, "~r~Ai castigat~n~~w~$%s", FormatNumber(playerVariables[ playerid ][ pJobValue ]) );
			#if defined DEBUG_SERVER
				printf( "Player %s(%i) has received $%s from Mechanic job!", username( playerid ), playerid, FormatNumber( playerVariables[ playerid ][ pJobValue ] ) );
			#endif
		}
		case 11: // Sweeper
		{
			switch( playerVariables[ playerid ][ jSkill ][ jobid ] )
			{
				case 1: playerVariables[ playerid ][ pJobValue ] = randomEx2(500, 520);
				case 2: playerVariables[ playerid ][ pJobValue ] = randomEx2(530, 550);
				case 3: playerVariables[ playerid ][ pJobValue ] = randomEx2(560, 580);
				case 4: playerVariables[ playerid ][ pJobValue ] = randomEx2(590, 610);
				case 5: playerVariables[ playerid ][ pJobValue ] = randomEx2(620, 640);
			}
			if( playerVariables[ playerid ][ pJobValue ] > 500000 ) return PayPlayerJob( playerid, jobid );
			playerVariables[ playerid ][ pMoney ] += playerVariables[ playerid ][ pJobValue ];
			// < Update Player Skills >
			UpdateJobStats( jobid );
			#if defined DEBUG_SERVER
				printf( "Player %s(%i) has received $%s from Sweeper job!", username( playerid ), playerid, FormatNumber( playerVariables[ playerid ][ pJobValue ] ) );
			#endif
		}
		case 12: // Garbage
		{
			switch( playerVariables[ playerid ][ jSkill ][ jobid ] )
			{
				case 1: playerVariables[ playerid ][ pJobValue ] = randomEx2(15000, 17000);
				case 2: playerVariables[ playerid ][ pJobValue ] = randomEx2(18000, 20000);
				case 3: playerVariables[ playerid ][ pJobValue ] = randomEx2(21000, 23000);
				case 4: playerVariables[ playerid ][ pJobValue ] = randomEx2(25000, 28000);
				case 5: playerVariables[ playerid ][ pJobValue ] = randomEx2(30000, 33000);
			}
			if( playerVariables[ playerid ][ pJobValue ] > 500000 ) return PayPlayerJob( playerid, jobid );
			playerVariables[ playerid ][ pMoney ] += playerVariables[ playerid ][ pJobValue ];

			if(playerVariables[playerid][pJobHype] != 0)
			{
				playerVariables[playerid][pJobValue2] = RandomChance( randomEx(5000, 8000), randomEx2(3000, 5000), 100 );
				playerVariables[ playerid ][ pMoney ] += playerVariables[playerid][pJobValue2];
				SendClientMessagef(playerid, 0x0E4682FF, "[JOB-BOOST] {FFFFFF}Ai primit %s$ pentru ca ai un job boost activ.", FormatNumber(playerVariables[playerid][pJobValue2]));
			}

			// < Update Player Skills >
			UpdateJobStats( jobid );
			#if defined DEBUG_SERVER
				printf( "Player %s(%i) has received $%s from Garbage job!", username( playerid ), playerid, FormatNumber( playerVariables[ playerid ][ pJobValue ] ) );
			#endif
		}
		case 14: // Transporter
		{
			switch( playerVariables[ playerid ][ jSkill ][ jobid ] )
			{
				case 1: playerVariables[ playerid ][ pJobValue ] = RandomChance( randomEx(31000, 33000), randomEx2(28000, 30000), 100 );
				case 2: playerVariables[ playerid ][ pJobValue ] = RandomChance( randomEx(34000, 36000), randomEx2(31000, 33000), 100 );
				case 3: playerVariables[ playerid ][ pJobValue ] = RandomChance( randomEx(37000, 39000), randomEx2(34000, 36000), 100 );
				case 4: playerVariables[ playerid ][ pJobValue ] = RandomChance( randomEx(42000, 45000), randomEx2(38000, 40000), 100 );
				case 5: playerVariables[ playerid ][ pJobValue ] = RandomChance( randomEx(47000, 50000), randomEx2(42000, 45000), 100 );
			}
			if( playerVariables[ playerid ][ pJobValue ] > 500000 ) return PayPlayerJob( playerid, jobid );
			playerVariables[ playerid ][ pMoney ] += playerVariables[ playerid ][ pJobValue ];

			if(playerVariables[playerid][pJobHype] != 0)
			{
				playerVariables[playerid][pJobValue2] = RandomChance( randomEx(5000, 8000), randomEx2(3000, 5000), 100 );
				playerVariables[ playerid ][ pMoney ] += playerVariables[playerid][pJobValue2];
				SendClientMessagef(playerid, 0x0E4682FF, "[JOB-BOOST] {FFFFFF}Ai primit %s$ pentru ca ai un job boost activ.", FormatNumber(playerVariables[playerid][pJobValue2]));
			}

			// < Update Player Skills >
			UpdatePlayerSkill( playerid, jobid );
			#if defined DEBUG_SERVER
				printf( "Player %s(%i) has received $%s from Transporter job!", username( playerid ), playerid, FormatNumber( playerVariables[ playerid ][ pJobValue ] ) );
			#endif
		}
	}
	playerVariables[ playerid ][ pJobValue2 ] = 0;
	// < Update the total earnings >
	playerVariables[ playerid ][ pTotalEarnings ] += playerVariables[ playerid ][ pJobValue ];
	return true;
}
stock UpdatePlayerSkill( playerid, jobid )
{
	playerVariables[ playerid ][ jSkillPoints ][ jobid ] ++;
	switch( playerVariables[ playerid ][ jSkillPoints ][ jobid ] )
	{
		case 0 .. 24: playerVariables[ playerid ][ jSkill ][ jobid ] = ( 1 );
		case 25 .. 99: playerVariables[ playerid ][ jSkill ][ jobid ] = ( 2 );
		case 100 .. 249: playerVariables[ playerid ][ jSkill ][ jobid ] = ( 3 );
		case 250 .. 499: playerVariables[ playerid ][ jSkill ][ jobid ] = ( 4 );
		case 500: 
		{
			playerVariables[ playerid ][ jSkill ][ jobid ] = ( 5 );
			CheckForReferral(playerid);
		}
		default: playerVariables[ playerid ][ jSkill ][ jobid ] = ( 5 );
	}
}
stock LoadPlayerSkill( playerid, jobid )
{
	switch( playerVariables[ playerid ][ jSkillPoints ][ jobid ] )
	{
		case 0 .. 24: playerVariables[ playerid ][ jSkill ][ jobid ] = ( 1 );
		case 25 .. 99: playerVariables[ playerid ][ jSkill ][ jobid ] = ( 2 );
		case 100 .. 249: playerVariables[ playerid ][ jSkill ][ jobid ] = ( 3 );
		case 250 .. 499: playerVariables[ playerid ][ jSkill ][ jobid ] = ( 4 );
		default: playerVariables[ playerid ][ jSkill ][ jobid ] = ( 5 );
	}
}
stock ForNextLevel( playerid, jobid )
{
	new JobSkillPoints[10];
	switch( playerVariables[ playerid ][ jSkill ][ jobid ] )
	{
		case 1: format(JobSkillPoints, 10, "%d", (25 - playerVariables[ playerid ][ jSkillPoints ][ jobid ]));
		case 2: format(JobSkillPoints, 10, "%d", (100 - playerVariables[ playerid ][ jSkillPoints ][ jobid ]));
		case 3: format(JobSkillPoints, 10, "%d", (250 - playerVariables[ playerid ][ jSkillPoints ][ jobid ]));
		case 4: format(JobSkillPoints, 10, "%d", (500 - playerVariables[ playerid ][ jSkillPoints ][ jobid ]));
		case 5: format(JobSkillPoints, 10, "MAX-SKILL");
	}
	return JobSkillPoints;
}
stock RandomChance( rare, most, probability )
{
	new NMB = random( probability ) ? most : rare;
	#if defined DEBUG_SERVER
		printf( "[RandomChance] generated the number: %d with( rare: %d, most: %d, probability: %d )", NMB, rare, most, probability );
	#endif
	return NMB;
}
stock randomEx( const r_min, const r_max )
{
	new r_rand = random( r_max - r_min) + r_min;
	return r_rand;
}
stock randomEx2( const s_min, const s_max )
{
	new s_rand = random( s_max - s_min) + s_min;
	return s_rand;
}
stock ShowPlayerJobTextdraws( playerid )
{
	for( new i=0; i<sizeof(JOB_TD); i++ )
		PlayerTextDrawShow( playerid, JOB_TD[ i ] );
}
stock HidePlayerJobTextdraws( playerid )
{
	for( new i=0; i<sizeof(JOB_TD); i++ )
		PlayerTextDrawHide( playerid, JOB_TD[ i ] );
}
stock submitToAdmins( string[], color )
{
	foreach (new i : server_admins)
		SendClientMessage( i, color, string );
	return true;
}
stock submitToHelpersAndAdmins( string[], color )
{
	foreach(new i : Staff)
		SendClientMessage( i, color, string );
	return true;
}
stock ResetPlayerVariables( playerid )
{
	#if defined DEBUG_SERVER
		printf( "[ResetPlayerVariables] has been called for player: %s(%i)", username( playerid ), playerid );
	#endif
	if( playerVariables[ playerid ][ pCarRent ] != INVALID_VEHICLE_ID )
		DestroyVehicle_( playerVariables[ playerid ][ pCarRent ] ), playerVariables[ playerid ][ pCarRent ] = INVALID_VEHICLE_ID;

	playerVariables[ playerid ][ pFaggioVehicle ] = INVALID_VEHICLE_ID;
	#if defined HEIST_SYSTEM
		playerVariables[ playerid ][ pHeistVehicle ] = INVALID_VEHICLE_ID;
	#endif
	playerVariables[ playerid ][ pJobVehicle ][ 0 ] = INVALID_VEHICLE_ID;
	playerVariables[ playerid ][ pJobVehicle ][ 1 ] = INVALID_VEHICLE_ID;
	playerVariables[ playerid ][ pSpectating ] = INVALID_PLAYER_ID;
	playerVariables[ playerid ][ pKillerID ] = INVALID_PLAYER_ID;
	playerVariables[ playerid ][ pKillerID2 ] = INVALID_PLAYER_ID;
	playerVariables[ playerid ][ pFindPlayer ] = INVALID_PLAYER_ID;
	playerVariables[ playerid ][ pNewbieQuestion ] = INVALID_PLAYER_ID;
	playerVariables[ playerid ][ pTakingLive ] = INVALID_PLAYER_ID;
	playerVariables[ playerid ][ pLiveOffer ] = INVALID_PLAYER_ID;
	playerVariables[ playerid ][ pRefillOffer ] = INVALID_PLAYER_ID;
	playerVariables[ playerid ][ pRepairOffer ] = INVALID_PLAYER_ID;
	playerVariables[ playerid ][ pDiceOffer ] = INVALID_PLAYER_ID;
	playerVariables[ playerid ][ pDiceOffer2 ] = INVALID_PLAYER_ID;
	playerVariables[ playerid ][ pPhoneLast ] = INVALID_PLAYER_ID;
	playerVariables[ playerid ][ pFreeOffer ] = INVALID_PLAYER_ID;
	playerVariables[ playerid ][ pPhoneCall ] = INVALID_PLAYER_ID;

	PlayerVelocCheck[playerid][0] = 0.0;
	PlayerVelocCheck[playerid][1] = 0.0;
	PlayerVelocCheck[playerid][2] = 0.0;


	playerVariables[playerid][E_FK_DEATHSPAM] = -1;
	playerVariables[playerid][FK_DEATHSPAM] = 0;
    playerVariables[ playerid ][ pTimePlayed ] = 0;
    playerVariables[ playerid ][ pWeaponTimer ] = -1;

	playerVariables[playerid][pBonusTaken] = 0;

	targetVehicleID[playerid] = -1;
	playerVariables[playerid][pGamblingSkill] = 1;
    SetGamblingForNextLevel( playerid );
	#if defined OBJECT_QUEST
	foreach( new objID : QuestObjects )
		playerVariables[ playerid ][ pQuestObject ][ objID ] = 0;
	#endif

	// < Reset the player's skills >
	for( new jobID = 1; jobID < MAX_JOBS; jobID++ )
		playerVariables[ playerid ][ jSkill ][ jobID ] = 0;

	FNCCount[playerid] = 0;
	FNCBY[playerid] = INVALID_PLAYER_ID;

	// < Reset personal vehicles >
	for( new slot=0; slot < MAX_SLOTS; slot++ )
	{
		if( IsValidVehicle( vehicleVariables[ slot ][ playerid ][ Vehicle ] ) )
			DestroyVehicle_( vehicleVariables[ slot ][ playerid ][ Vehicle ] ), vehicleVariables[ slot ][ playerid ][ Vehicle ] = INVALID_VEHICLE_ID;

		vehicleVariables[ slot ][ playerid ][ Vehicle ] 			= INVALID_VEHICLE_ID;
		playerVariables[ playerid ][ Vehicle ][ slot ]  			= 0;
		vehicleVariables[ slot ][ playerid ][ VehicleTimer ] 		= 0;
		vehicleVariables[ slot ][ playerid ][ VehicleOwnerID ]		= INVALID_PLAYER_ID;
		vehicleVariables[ slot ][ playerid ][ VehicleStatus ]		= 0;
		vehicleVariables[ slot ][ playerid ][ VehicleModelID ] 		= 0;
		vehicleVariables[ slot ][ playerid ][ VehicleOwner ] 		= 0;
		vehicleVariables[ slot ][ playerid ][ VehicleColor ][ 0 ] 	= 0;
		vehicleVariables[ slot ][ playerid ][ VehicleColor ][ 1 ] 	= 0;
		vehicleVariables[ slot ][ playerid ][ VehicleOdometter ] 	= 0;
		vehicleVariables[ slot ][ playerid ][ VehicleLocked ] 		= 0;
		vehicleVariables[ slot ][ playerid ][ VehicleInsurance ] 	= 0;
		vehicleVariables[ slot ][ playerid ][ VehicleInsurancePoints ] = 0;
		vehicleVariables[ slot ][ playerid ][ VehicleFuel ]         = 0;
		vehicleVariables[ slot ][ playerid ][ VehicleAge ]    		= 0;
		vehicleVariables[ slot ][ playerid ][ VehicleVIP ]			= 0;
		vehicleVariables[ slot ][ playerid ][ VehicleVIPWheel ]		= -1;
		vehicleVariables[ slot ][ playerid ][ Money ] 				= 0;
		vehicleVariables[ slot ][ playerid ][ PP ] 					= 0;
		vehicleVariables[ slot ][ playerid ][ VehicleVIPNeon ] 		= INVALID_VEHICLE_ID;
		vehicleVariables[ slot ][ playerid ][ Position ][ 0 ] 		= 1444.2604;
		vehicleVariables[ slot ][ playerid ][ Position ][ 1 ] 		= -2450.5342;
		vehicleVariables[ slot ][ playerid ][ Position ][ 2 ] 		= 13.5547;
		vehicleVariables[ slot ][ playerid ][ Rotation ] 			= 181.2094;
	}
	// < Others >
	ResetServerWeapons( playerid );

	#if defined HEIST_SYSTEM
	// < heist variables >
	playerVariables[ playerid ][ pHeistOwner ] = INVALID_PLAYER_ID;
	playerVariables[ playerid ][ pHeistKey ] = 0;
	#endif

	// < Paintball Reset >
	playerVariables[ playerid ][ pPaintball ] = 0;
	playerVariables[ playerid ][ pPaintKills ] = 0;
	playerVariables[ playerid ][ pPaintDeaths ] = 0;
    
	playerVariables[ playerid ][ pSpectatingFaction ] = 0;
    playerVariables[ playerid ][ pSpeedBoost ] = 0;
	playerVariables[ playerid ][ pPizzaBoxes ] = 0;
	playerVariables[ playerid ][ pAFKPosTimer ] = 0;
	playerVariables[ playerid ][ pPaydayStatus ] = 0;
	playerVariables[ playerid ][ pLiveStatus ] = false;
	playerVariables[ playerid ][ pTog ][ 0 ] = 0;
	playerVariables[ playerid ][ pTog ][ 1 ] = 0;
	playerVariables[ playerid ][ pTog ][ 2 ] = 0;
	playerVariables[ playerid ][ pTog ][ 3 ] = 0;
	playerVariables[ playerid ][ pTog ][ 4 ] = 0;
	playerVariables[ playerid ][ pTog ][ 5 ] = 0;
	playerVariables[ playerid ][ pTog ][ 6 ] = 0;
	playerVariables[ playerid ][ pTog ][ 7 ] = 0;
	playerVariables[ playerid ][ pTog ][ 8 ] = 0;
	playerVariables[ playerid ][ pTog ][ 9 ] = 0;

	playerVariables[ playerid ][ pHat ] = 0;
	playerVariables[ playerid ][ pGlasses ] = 0;
	playerVariables[ playerid ][ pHatStatus ] = false;
	playerVariables[ playerid ][ pGlassesStatus ] = false;
	playerVariables[ playerid ][ pTeleport ] = false;

	playerVariables[ playerid ][ pVIP ] = 0;
	playerVariables[ playerid ][ pAFKHits ] = 0;
	playerVariables[ playerid ][ pCP ] = 0;
	playerVariables[ playerid ][ pRCP ] = 0;
	playerVariables[ playerid ][ pAdminReports ] = 0;
	playerVariables[ playerid ][ pJobTimer ] = 0;
	playerVariables[ playerid ][ pRaceArenaLeaving ] = false;
	playerVariables[ playerid ][ pLastWeaponID ] = INVALID_PLAYER_ID;
	playerVariables[ playerid ][ pSpawnedTimer ] = true;
	playerVariables[ playerid ][ pCity ] = 0; // Los Santos
	playerVariables[ playerid ][ pSeatBelt ] = false;
	playerVariables[ playerid ][ pHelmet ] = false;
	playerVariables[ playerid ][ pKicked ] = false;
	playerVariables[ playerid ][ pRaceArena ] = 0;
	playerVariables[ playerid ][ pRaceArenaCP ] = 0;
	playerVariables[ playerid ][ pReferral ] = 0;
	playerVariables[ playerid ][ pReportType ] = 0;
	playerVariables[ playerid ][ pEnterTime ] = 0;
	playerVariables[ playerid ][ pUseDrugs ] = 0;
	playerVariables[ playerid ][ pKey ] = 0;
	playerVariables[ playerid ][ pSpawnType ] = 0;
	playerVariables[ playerid ][ pGasCan ] = 0;
	playerVariables[ playerid ][ pNotifications ] = 0;
	playerVariables[ playerid ][ pFailLogin ] = 0;
	playerVariables[ playerid ][ pLogged ] = false;
	playerVariables[ playerid ][ pPaintBallVotedMap ] = false;
	playerVariables[ playerid ][ pPaintBallVotedWeapon ] = false;
	playerVariables[ playerid ][ pPaintBallLevel ] = 0;
	playerVariables[ playerid ][ pPaintBall ] = -1;
	playerVariables[ playerid ][ pPaintBallKills ] = 0;
	playerVariables[ playerid ][ pPaintBallDeaths ] = 0;
	playerVariables[ playerid ][ pPaintBallLeaving ] = 0;
	playerVariables[ playerid ][ pWTalkieFRQ ] = 0;
	playerVariables[ playerid ][ pWTalkie ] = 0;
	playerVariables[ playerid ][ pWTalkieStatus ] = 0;
	playerVariables[ playerid ][ pBlocked ]= 0;
	playerVariables[ playerid ][ pKillerTime ] = 0;
	playerVariables[ playerid ][ pLoopingAnim ] = 0;
	playerVariables[ playerid ][ pHud ][ 0 ] = 0;
	playerVariables[ playerid ][ pHud ][ 1 ] = 0;
	playerVariables[ playerid ][ pHud ][ 2 ] = 0;
	playerVariables[ playerid ][ pHud ][ 3 ] = 0;
	playerVariables[ playerid ][ pHud ][ 4 ] = 0;
	playerVariables[ playerid ][ pHud ][ 5 ] = 0;
	playerVariables[ playerid ][ pHud ][ 6 ] = 0;
	playerVariables[ playerid ][ pHud ][ 7 ] = 0;
	playerVariables[ playerid ][ pHud ][ 8 ] = 0;
	playerVariables[ playerid ][ pHud ][ 9 ] = 0;
	playerVariables[ playerid ][ pDrunkLevelLast ] = 0;
	playerVariables[ playerid ][ pFPS ] = 0;
	playerVariables[ playerid ][ pHelperTokens ] = 0;
	playerVariables[ playerid ][ pHelperColor ] = 0;
	playerVariables[ playerid ][ pAdminColor ] = 0;
	playerVariables[ playerid ][ pPremium ] = 0;
	playerVariables[ playerid ][ pPremiumPoints ] = 0;
	playerVariables[ playerid ][ pPremiumColor ] = 0;
	playerVariables[ playerid ][ pLastBusiness ] = 0;
	playerVariables[ playerid ][ pLastBusinessTimer ] = 0;
	playerVariables[ playerid ][ pFactionRunners ] = 0;
	playerVariables[ playerid ][ pFactionTickets ] = 0;
	playerVariables[ playerid ][ pFactionDrugs ] = 0;
	playerVariables[ playerid ][ pFactionLicenses ] = 0;
	playerVariables[ playerid ][ pFactionDepositedMoney ] = 0;
	playerVariables[ playerid ][ pFactionDepositedDrugs ] = 0;
	playerVariables[ playerid ][ pFactionDepositedMats ] = 0;
	playerVariables[ playerid ][ pFactionOrders ] = 0;
	playerVariables[ playerid ][ pFactionLicensesGiven ] = 0;
	playerVariables[ playerid ][ pFactionPatients ] = 0;
	playerVariables[ playerid ][ pFactionContracts ] = 0;
	playerVariables[ playerid ][ pFactionNews ] = 0;
	playerVariables[ playerid ][ pFactionFreeNews ] = 0;
	playerVariables[ playerid ][ pFactionLives ] = 0;
	playerVariables[ playerid ][ pFactionNewsSessions ] = 0;
	playerVariables[ playerid ][ pFactionMatsUsed ] = 0;
	playerVariables[ playerid ][ pRefillPrice ] = 0;
	playerVariables[ playerid ][ pRepairPrice ] = 0;
	playerVariables[ playerid ][ pRentAP ] = 0;

	// < set register licenses >
	playerVariables[ playerid ][ pGunLicense ] = 0;
	playerVariables[ playerid ][ pCarLicense ] = 0;
	playerVariables[ playerid ][ pFlyLicense ] = 10;
	playerVariables[ playerid ][ pBoatLicense ] = 10;

	playerVariables[ playerid ][ pGiftBoxTime ] = 0;
	playerVariables[ playerid ][ pFireworks ] = 0;
	playerVariables[ playerid ][ pJobHype ] = 0;
	playerVariables[ playerid ][ pFactionLW ] = 0;
	playerVariables[ playerid ][ pSaveTime ] = 0;
	playerVariables[ playerid ][ pAdminDuty ] = 0;
	playerVariables[ playerid ][ pHiddenColors ] = 0;
	playerVariables[ playerid ][ pWarnings ] = 0;
	playerVariables[ playerid ][ pAdTime ] = 0;
	playerVariables[ playerid ][ pClan ] = 0;
	playerVariables[ playerid ][ pClanRank ] = 0;
	playerVariables[ playerid ][ pClanDays ] = 0;
	playerVariables[ playerid ][ pClanWarns ] = 0;
	playerVariables[ playerid ][ pClanTag ] = 0;
	playerVariables[ playerid ][ pSelectRank ] = 0;
	playerVariables[ playerid ][ pPlayTime ] = 0;
	playerVariables[ playerid ][ pAFKTime ] = 0;
	playerVariables[ playerid ][ pAFKTimeNow ] = 0;
	playerVariables[ playerid ][ pSleeping ] = false;
	playerVariables[ playerid ][ pCrimes ] = 0;
	playerVariables[ playerid ][ pTakeFaggio ] = 0;
	playerVariables[ playerid ][ pFly ] = 0;
	playerVariables[ playerid ][ pRMuted ] = 0;
	playerVariables[ playerid ][ pNMuted ] = 0;
	playerVariables[ playerid ][ pFreezed ] = 0;
	playerVariables[ playerid ][ pHelper ] = 0;
	playerVariables[ playerid ][ pHelperDuty ] = 0;
	playerVariables[ playerid ][ pAdminLevel ] = 0;
	playerVariables[ playerid ][ pMuted ] = 0;
	playerVariables[ playerid ][ pTurfs ] = 0;
	playerVariables[ playerid ][ pReportTimer ] = 0;
	playerVariables[ playerid ][ pReportAccepted ] = -1;
	playerVariables[ playerid ][ pReported ] = 0;
	playerVariables[ playerid ][ pUndercover ] = 0;
	playerVariables[ playerid ][ pHeadChasing ] = INVALID_PLAYER_ID;
	playerVariables[ playerid ][ pHeadChased ] = INVALID_PLAYER_ID;
	playerVariables[ playerid ][ pHeadValue ] = 0;
	playerVariables[ playerid ][ pHeadTaken ] = 0;
	playerVariables[ playerid ][ pArrests ] = 0;
	playerVariables[ playerid ][ pRobs ] = 0;
	playerVariables[ playerid ][ pRobPoints ] = 0;
	playerVariables[ playerid ][ pFreePoints ] = 0;
	playerVariables[ playerid ][ pSpawned ] = 0;
	playerVariables[ playerid ][ pRobStatus ] = 0;
	switch( playerVariables[ playerid ][ pSex ])
	{
		case 1: playerVariables[ playerid ][ pSkin ] = CIVIL_SKIN_MALE;
		case 2: playerVariables[ playerid ][ pSkin ] = CIVIL_SKIN_FEMALE;
	}
	playerVariables[ playerid ][ pFactionWar ] = 0;
	playerVariables[ playerid ][ pFactionWarKills ] = 0;
	playerVariables[ playerid ][ pFactionWarDeaths ] = 0;
	playerVariables[ playerid ][ pBusiness ] = 0;
	playerVariables[ playerid ][ pHouse ] = 0;
	playerVariables[ playerid ][ pRentRoom ] = 0;
	playerVariables[ playerid ][ pPayday ] = 0;
	playerVariables[ playerid ][ pRP ] = 0;
	playerVariables[ playerid ][ pFactionWar ] = 0;
	playerVariables[ playerid ][ pTakeExam ] = 0;
	playerVariables[ playerid ][ pNewbieRequesting ] = 0;
	playerVariables[ playerid ][ pNewbieTime ] = 0;
	playerVariables[ playerid ][ pHelpedPlayers ] = 0;
	playerVariables[ playerid ][ pTotalEarnings ] = 0;
	playerVariables[ playerid ][ pFishing ] = 0;
	playerVariables[ playerid ][ pBusiness ] = 0;
	playerVariables[ playerid ][ pFishes ] = 0;
	playerVariables[ playerid ][ pFishesValue ] = 0;
	playerVariables[ playerid ][ pPrisonTime ] = 0;
	playerVariables[ playerid ][ pPhone ] = 0;
	playerVariables[ playerid ][ pPhoneNumber ] = 0;
	playerVariables[ playerid ][ pPhoneCredit ] = 0;
	playerVariables[ playerid ][ pPhoneStatus ] = 1;
	playerVariables[ playerid ][ pPhoneBook ] = 0;
	playerVariables[ playerid ][ pFirstSpawn ] = 0;
	playerVariables[ playerid ][ pFirstNormalSpawn ] = false;
	playerVariables[ playerid ][ pJobValue ] = 0;
	playerVariables[ playerid ][ pJobValue2 ] = 0;
	playerVariables[ playerid ][ pDMVCP ] = 0;
	playerVariables[ playerid ][ pTaxiDriver ] = 0;
	playerVariables[ playerid ][ pTaxiValue ] = 0;
	playerVariables[ playerid ][ pTaxiClient ] = INVALID_PLAYER_ID;
	#if defined UBERSYS
	playerVariables[ playerid ][ pUberOnClient ] = INVALID_PLAYER_ID;
	playerVariables[ playerid ][ pUberCalled ] = 0;
	playerVariables[ playerid ][ pUberAccepted ] = 0;
	playerVariables[ playerid ][ pUberOnWork ] = 0;
	playerVariables[ playerid ][ pUberPrice ] = 0;
	playerVariables[ playerid ][ pUberFinalCost ] = 0;
	playerVariables[ playerid ][ pUberDistance ] = 0.0;
	SetPVarInt(playerid, "UberDriverID", INVALID_PLAYER_ID);
	#endif
	playerVariables[ playerid ][ pTaxiAccept ] = 0;
	playerVariables[ playerid ][ pTaxiCall ] = 0;
	playerVariables[ playerid ][ pMedicAccept ] = 0;
	playerVariables[ playerid ][ pMedicCall ] = 0;
	playerVariables[ playerid ][ pMedicClient ] = INVALID_PLAYER_ID;
	playerVariables[ playerid ][ pMechanicClient ] = INVALID_PLAYER_ID;
	playerVariables[ playerid ][ pDoingJob ] = 0;
	playerVariables[ playerid ][ pLevel ] = 1;
	playerVariables[ playerid ][ pFaction ] = 0;
	playerVariables[ playerid ][ pFactionRank ] = 0;
	playerVariables[ playerid ][ pMaterials ] = 0;
	#if defined CRATES
	playerVariables[ playerid ][ pCrateTimer ] = 0;
	playerVariables[ playerid ][ pCrateEnding ] = 0;
	playerVariables[ playerid ][ pCrates ] = 0;

	playerVariables[ playerid ][ pCrateSkinAmount ][ 0 ] = 0;
	playerVariables[ playerid ][ pCrateSkins ][ 0 ] = 0;
	playerVariables[ playerid ][ pCrateSkinAmount ][ 1 ] = 0;
	playerVariables[ playerid ][ pCrateSkins ][ 1 ] = 0;
	playerVariables[ playerid ][ pCrateSkinAmount ][ 2 ] = 0;
	playerVariables[ playerid ][ pCrateSkins ][ 2 ] = 0;
	playerVariables[ playerid ][ pCrateSkinAmount ][ 3 ] = 0;
	playerVariables[ playerid ][ pCrateSkins ][ 3 ] = 0;
	playerVariables[ playerid ][ pCrateSkinAmount ][ 4 ] = 0;
	playerVariables[ playerid ][ pCrateSkins ][ 4 ] = 0;
	playerVariables[ playerid ][ pCrateSkinAmount ][ 5 ] = 0;
	playerVariables[ playerid ][ pCrateSkins ][ 5 ] = 0;
	playerVariables[ playerid ][ pCrateSkinAmount ][ 6 ] = 0;
	playerVariables[ playerid ][ pCrateSkins ][ 6 ] = 0;
	playerVariables[ playerid ][ pCrateSkinAmount ][ 7 ] = 0;
	playerVariables[ playerid ][ pCrateSkins ][ 7 ] = 0;
	playerVariables[ playerid ][ pCrateSkinAmount ][ 8 ] = 0;
	playerVariables[ playerid ][ pCrateSkins ][ 8 ] = 0;
	playerVariables[ playerid ][ pCrateSkinAmount ][ 9 ] = 0;
	playerVariables[ playerid ][ pCrateSkins ][ 9 ] = 0;
	#endif

	#if defined PET
	playerVariables[ playerid ][ pPet ] = 0;
	playerVariables[ playerid ][ pPetStatus ] = 0;
	playerVariables[ playerid ][ pPetLevel ] = 0;
	playerVariables[ playerid ][ pPetID ] = 0;
	playerVariables[ playerid ][ pPetPoints ] = 0;

	format(playerVariables[playerid][pPetName], 3, "");

	playerVariables[ playerid ][ pPetType ][ 0 ] = 0;
	playerVariables[ playerid ][ pPetType ][ 1 ] = 0;
	playerVariables[ playerid ][ pPetType ][ 2 ] = 0;
	playerVariables[ playerid ][ pPetType ][ 3 ] = 0;
	playerVariables[ playerid ][ pPetType ][ 4 ] = 0;
	#endif

	playerVariables[ playerid ][ pMoney ] = 2000; // BONUS
	playerVariables[ playerid ][ pBankMoney ] = 1000;
	playerVariables[ playerid ][ pJob ] = 0;
	playerVariables[ playerid ][ pFW ] = 0;
	playerVariables[ playerid ][ pFP ] = 0;
	playerVariables[ playerid ][ pWanted ] = 0;
	playerVariables[ playerid ][ pPINStatus ] = 0;
	playerVariables[ playerid ][ pSpawnChoose ] = 0;
	playerVariables[ playerid ][ pBot ] = 0;
	playerVariables[ playerid ][ pPlayerInMod ] = 0;
	playerVariables[ playerid ][ pFirstPress ] = 0;
	playerVariables[ playerid ][ pSpectatedBy ] = INVALID_PLAYER_ID;

	playerVariables[ playerid ][pRadarON] = 0;
	SetPVarInt(playerid, "coming_ticket_radar", 0);

	format( playerVariables[ playerid ][ pAdString ], 256, "N/A" );
	format( playerVariables[ playerid ][ pNewbieRequest ], 64, "N/A" );
	format( playerVariables[ playerid ][ pEMail ], 32, "N/A" );
	format( playerVariables[ playerid ][ pReportMessage ], 128, "N/A" );
	format( playerVariables[ playerid ][ pChatText ], 256, "N/A" );
	format( playerVariables[ playerid ][ pCheatingReason ], 64, "N/A" );
	format( playerVariables[ playerid ][ pPIN ], 128, "N/A" );

	// < Reset pvars )
	SetPVarInt( playerid, "was_on_n", 0 );
	SetPVarInt( playerid, "player_uber", INVALID_PLAYER_ID );
	SetPVarInt( playerid, "player_mechanic", INVALID_PLAYER_ID );
	SetPVarInt( playerid, "player_taxi", INVALID_PLAYER_ID );
	SetPVarInt( playerid, "helper_id", INVALID_PLAYER_ID );
	SetPVarInt( playerid, "last_sms_number", 0);
	SetPVarInt( playerid, "last_id_number", INVALID_PLAYER_ID);
	SetPVarInt( playerid, "player_called", INVALID_PLAYER_ID);
	SetPVarInt( playerid, "playerInRegister", 0 );
	SetPVarInt( playerid, "custom_Time", 0 );
	SetPVarInt( playerid, "IsuerID", INVALID_PLAYER_ID );
	SetPVarInt( playerid, "player_Fill", 0 );
	SetPVarInt( playerid, "ban_Timer", 0 );
	SetPVarInt( playerid, "kick_Timer", 0 );
	SetPVarInt( playerid, "dropcar_Timer", 0 );
	SetPVarInt( playerid, "so_Timer", 0 );
	SetPVarInt( playerid, "engine_Timer", 0 );
	SetPVarInt( playerid, "lesson_Timer", 0 );
	SetPVarInt( playerid, "transporter_Timer", 0 );
	SetPVarInt( playerid, "pns_Timer", 0 );
	SetPVarInt( playerid, "firework_Timer", 0 );
	SetPVarInt( playerid, "RankForChange", 0);
	SetPVarInt( playerid, "checkpoint_Timer", 0 );
	SetPVarInt( playerid, "news_Timer", 0 );
	SetPVarInt( playerid, "houseTrade_Player", INVALID_PLAYER_ID );
	SetPVarInt( playerid, "bizzTrade_Player", INVALID_PLAYER_ID );
	SetPVarInt( playerid, "hidTrade_Player", INVALID_PLAYER_ID );

	SetPVarInt( playerid, "TaxiDriverID", INVALID_PLAYER_ID );
	SetPVarInt( playerid, "mID", -1 );
	SetPVarInt( playerid, "inviteID", -1 );
	SetPVarInt( playerid, "clanInviteID", -1 );
}
stock PreloadAllAnimLibs( playerid )
{
	PreloadAnimLib( playerid, "AIRPORT" );
	PreloadAnimLib( playerid, "Attractors" );
	PreloadAnimLib( playerid, "BAR" );
	PreloadAnimLib( playerid, "BASEBALL" );
	PreloadAnimLib( playerid, "BD_FIRE" );
	PreloadAnimLib( playerid, "BEACH" );
	PreloadAnimLib( playerid, "benchpress" );
	PreloadAnimLib( playerid, "BF_injection" );
	PreloadAnimLib( playerid, "BIKED" );
	PreloadAnimLib( playerid, "BIKEH" );
	PreloadAnimLib( playerid, "BIKELEAP" );
	PreloadAnimLib( playerid, "BIKES" );
	PreloadAnimLib( playerid, "BIKEV" );
	PreloadAnimLib( playerid, "BIKE_DBZ" );
	PreloadAnimLib( playerid, "BLOWJOBZ" );
	PreloadAnimLib( playerid, "BMX" );
	PreloadAnimLib( playerid, "BOMBER" );
	PreloadAnimLib( playerid, "BOX" );
	PreloadAnimLib( playerid, "BSKTBALL" );
	PreloadAnimLib( playerid, "BUDDY" );
	PreloadAnimLib( playerid, "BUS" );
	PreloadAnimLib( playerid, "CAMERA" );
	PreloadAnimLib( playerid, "CAR" );
	PreloadAnimLib( playerid, "CARRY" );
	PreloadAnimLib( playerid, "CAR_CHAT" );
	PreloadAnimLib( playerid, "CASINO" );
	PreloadAnimLib( playerid, "CHAINSAW" );
	PreloadAnimLib( playerid, "CHOPPA" );
	PreloadAnimLib( playerid, "CLOTHES" );
	PreloadAnimLib( playerid, "COACH" );
	PreloadAnimLib( playerid, "COLT45" );
	PreloadAnimLib( playerid, "COP_AMBIENT" );
	PreloadAnimLib( playerid, "COP_DVBYZ" );
	PreloadAnimLib( playerid, "CRACK" );
	PreloadAnimLib( playerid, "CRIB" );
	PreloadAnimLib( playerid, "DAM_JUMP" );
	PreloadAnimLib( playerid, "DANCING" );
	PreloadAnimLib( playerid, "DEALER" );
	PreloadAnimLib( playerid, "DILDO" );
	PreloadAnimLib( playerid, "DODGE" );
	PreloadAnimLib( playerid, "DOZER" );
	PreloadAnimLib( playerid, "DRIVEBYS" );
	PreloadAnimLib( playerid, "FAT" );
	PreloadAnimLib( playerid, "FIGHT_B" );
	PreloadAnimLib( playerid, "FIGHT_C" );
	PreloadAnimLib( playerid, "FIGHT_D" );
	PreloadAnimLib( playerid, "FIGHT_E" );
	PreloadAnimLib( playerid, "FINALE" );
	PreloadAnimLib( playerid, "FINALE2" );
	PreloadAnimLib( playerid, "FLAME" );
	PreloadAnimLib( playerid, "Flowers" );
	PreloadAnimLib( playerid, "FOOD" );
	PreloadAnimLib( playerid, "Freeweights" );
	PreloadAnimLib( playerid, "GANGS" );
	PreloadAnimLib( playerid, "GHANDS" );
	PreloadAnimLib( playerid, "GHETTO_DB" );
	PreloadAnimLib( playerid, "goggles" );
	PreloadAnimLib( playerid, "GRAFFITI" );
	PreloadAnimLib( playerid, "GRAVEYARD" );
	PreloadAnimLib( playerid, "GRENADE" );
	PreloadAnimLib( playerid, "GYMNASIUM" );
	PreloadAnimLib( playerid, "HAIRCUTS" );
	PreloadAnimLib( playerid, "HEIST9" );
	PreloadAnimLib( playerid, "INT_HOUSE" );
	PreloadAnimLib( playerid, "INT_OFFICE" );
	PreloadAnimLib( playerid, "INT_SHOP" );
	PreloadAnimLib( playerid, "JST_BUISNESS" );
	PreloadAnimLib( playerid, "KART" );
	PreloadAnimLib( playerid, "KISSING" );
	PreloadAnimLib( playerid, "KNIFE" );
	PreloadAnimLib( playerid, "LAPDAN1" );
	PreloadAnimLib( playerid, "LAPDAN2" );
	PreloadAnimLib( playerid, "LAPDAN3" );
	PreloadAnimLib( playerid, "LOWRIDER" );
	PreloadAnimLib( playerid, "MD_CHASE" );
	PreloadAnimLib( playerid, "MD_END" );
	PreloadAnimLib( playerid, "MEDIC" );
	PreloadAnimLib( playerid, "MISC" );
	PreloadAnimLib( playerid, "MTB" );
	PreloadAnimLib( playerid, "MUSCULAR" );
	PreloadAnimLib( playerid, "NEVADA" );
	PreloadAnimLib( playerid, "ON_LOOKERS" );
	PreloadAnimLib( playerid, "OTB" );
	PreloadAnimLib( playerid, "PARACHUTE" );
	PreloadAnimLib( playerid, "PARK" );
	PreloadAnimLib( playerid, "PAULNMAC" );
	PreloadAnimLib( playerid, "ped" );
	PreloadAnimLib( playerid, "PLAYER_DVBYS" );
	PreloadAnimLib( playerid, "PLAYIDLES" );
	PreloadAnimLib( playerid, "POLICE" );
	PreloadAnimLib( playerid, "POOL" );
	PreloadAnimLib( playerid, "POOR" );
	PreloadAnimLib( playerid, "PYTHON" );
	PreloadAnimLib( playerid, "QUAD" );
	PreloadAnimLib( playerid, "QUAD_DBZ" );
	PreloadAnimLib( playerid, "RAPPING" );
	PreloadAnimLib( playerid, "RIFLE" );
	PreloadAnimLib( playerid, "RIOT" );
	PreloadAnimLib( playerid, "ROB_BANK" );
	PreloadAnimLib( playerid, "ROCKET" );
	PreloadAnimLib( playerid, "RUSTLER" );
	PreloadAnimLib( playerid, "RYDER" );
	PreloadAnimLib( playerid, "SCRATCHING" );
	PreloadAnimLib( playerid, "SHAMAL" );
	PreloadAnimLib( playerid, "SHOP" );
	PreloadAnimLib( playerid, "SHOTGUN" );
	PreloadAnimLib( playerid, "SILENCED" );
	PreloadAnimLib( playerid, "SKATE" );
	PreloadAnimLib( playerid, "SMOKING" );
	PreloadAnimLib( playerid, "SNIPER" );
	PreloadAnimLib( playerid, "SPRAYCAN" );
	PreloadAnimLib( playerid, "STRIP" );
	PreloadAnimLib( playerid, "SUNBATHE" );
	PreloadAnimLib( playerid, "SWAT" );
	PreloadAnimLib( playerid, "SWEET" );
	PreloadAnimLib( playerid, "SWIM" );
	PreloadAnimLib( playerid, "SWORD" );
	PreloadAnimLib( playerid, "TANK" );
	PreloadAnimLib( playerid, "TATTOOS" );
	PreloadAnimLib( playerid, "TEC" );
	PreloadAnimLib( playerid, "TRAIN" );
	PreloadAnimLib( playerid, "TRUCK" );
	PreloadAnimLib( playerid, "UZI" );
	PreloadAnimLib( playerid, "VAN" );
	PreloadAnimLib( playerid, "VENDING" );
	PreloadAnimLib( playerid, "VORTEX" );
	PreloadAnimLib( playerid, "WAYFARER" );
	PreloadAnimLib( playerid, "WEAPONS" );
	PreloadAnimLib( playerid, "WUZI" );
	return true;
}
stock PreloadAnimLib( playerid, animlib[] )
{
   ApplyAnimation( playerid, animlib, "null", 0.0, 0, 0, 0, 0, 0 );
   return true;
}
stock SendToPremium( text[], color, premium )
{
	foreach(new i : premiumPlayers[ premium ] )
	    SendClientMessage( i, color, text );
}
stock SendToFaction( faction_id, color, string[] )
{
	if( faction_id > 0 )
		foreach(new i : playerFaction[faction_id])
			if( playerVariables[ i ][ pTog ][ 2 ] )
				SendSplitMessage( i, color, string );
	return true;
}
stock SendToJob( job_id, color, string[] )
{
	if( job_id != 0 )
		foreach(new i : playerJobs[job_id])
			SendSplitMessage( i, color, string );
	return true;
}
stock SendToClan( clan_id, color, string[] )
{
	foreach(new i : playerClans[clan_id])
		if( playerVariables[ i ][ pTog ][ 1 ] )
			SendSplitMessage( i, color, string );
}
stock SendToFrequency( colour, freq_id, text[] )
{
	foreach(new i : playerFreq[freq_id])
	    if(playerVariables[ i ][ pWTalkieStatus ] == 1 )
	       SendClientMessage(i, colour, text);  
}
stock CheckPlayerDistanceToVehicle(Float:radi, playerid, vehicleid)
{
    new Float:PX,Float:PY,Float:PZ,Float:X,Float:Y,Float:Z;
    GetPlayerPos(playerid,PX,PY,PZ);
    GetVehiclePos(vehicleid, X,Y,Z);
    new Float:Distance = (X-PX)*(X-PX)+(Y-PY)*(Y-PY)+(Z-PZ)*(Z-PZ);
    if(Distance <= radi*radi)
    {
        return 1;
    }
	return 0;
}

stock IsPlayerInRangeOfPlayer( playerid, playerid2, Float: radius )
{
	new Float:Floats[ 3 ];
	GetPlayerPos( playerid2, Floats[ 0 ], Floats[ 1 ], Floats[ 2 ] );
	return IsPlayerInRangeOfPoint( playerid, radius, Floats[ 0 ], Floats[ 1 ], Floats[ 2 ] );
}
stock sendDepartmentMessage( color, string[] )
{
	foreach(new i : Departments)
		SendSplitMessage( i, color, string );
	return true;
}
stock GetPlayer3DZone( playerid, zone[], len )
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	for(new i = 0; i != sizeof(gSAZones); i++ )
		if(x >= gSAZones[i][SAZONE_AREA][0] && x <= gSAZones[i][SAZONE_AREA][3] && y >= gSAZones[i][SAZONE_AREA][1] && y <= gSAZones[i][SAZONE_AREA][4] && z >= gSAZones[i][SAZONE_AREA][2] && z <= gSAZones[i][SAZONE_AREA][5])
			return format(zone, len, gSAZones[i][SAZONE_NAME], 0);

	return false;
}
stock GetPlayer3DZone2( Float:x, Float:y, Float:z )
{
	new ZoneText[ 128 ];
	for(new i = 0; i != sizeof(gSAZones); i++ )
	{
		if(x >= gSAZones[i][SAZONE_AREA][0] && x <= gSAZones[i][SAZONE_AREA][3] && y >= gSAZones[i][SAZONE_AREA][1] && y <= gSAZones[i][SAZONE_AREA][4] && z >= gSAZones[i][SAZONE_AREA][2] && z <= gSAZones[i][SAZONE_AREA][5])
		{
			format(ZoneText, 128, gSAZones[i][SAZONE_NAME], 0);
			return ZoneText;
		}
	}
	ZoneText[ 0 ] = EOS;
	return ZoneText;
}
stock IsPlayerInZone( playerid, zone[] )
{
	new TmpZone[MAX_ZONE_NAME];
	GetPlayer3DZone(playerid, TmpZone, sizeof(TmpZone));
	for(new i = 0; i != sizeof(gSAZones); i++)
	{
		if(strfind(TmpZone, zone, true) != -1)
			return 1;
	}
	return 0;
}
stock DestroyPlayerJobVehicles( playerid, type = 0 )
{
	if( playerVariables[ playerid ][ pTakeFaggio ] )
	{
		if( IsValidVehicle( playerVariables[ playerid ][ pFaggioVehicle ] ) )
			DestroyVehicle_( playerVariables[ playerid ][ pFaggioVehicle ] ), playerVariables[ playerid ][ pFaggioVehicle ] = INVALID_VEHICLE_ID;

		DisableRemoteVehicleCollisions( playerid, false );
		playerVariables[ playerid ][ pTakeFaggio ] = 0;
		SetCameraBehindPlayer( playerid );
	}
	if( playerVariables[ playerid ][ pDoingJob ] )
	{
		KillTimer( GetPVarInt( playerid, "back_Timer" ) );
		switch( playerVariables[ playerid ][ pJob ] )
		{
			case 1: serverVariables[workers_trucker]--;
			case 2: serverVariables[workers_farmer]--;
			case 3: serverVariables[workers_pizza]--;
			case 4: serverVariables[workers_pilot]--;
			case 8: serverVariables[workers_fisher]--;
			case 10: serverVariables[workers_mechanic]--;
			case 11: serverVariables[workers_sweeper]--;
			case 12: serverVariables[workers_garbage]--;
			case 14: serverVariables[workers_transporter]--;
		}
		if( playerVariables[ playerid ][ pJob ] == 3 || playerVariables[ playerid ][ pJob ] == 14)
		{
			if( GetPlayerSpecialAction( playerid ) == SPECIAL_ACTION_CARRY )
			{
				RemovePlayerAttachedObject( playerid, INDEX_PIZZABOX );
				SetPlayerSpecialAction( playerid, SPECIAL_ACTION_NONE );
			}
			DestroyDynamicObject( GetPVarInt( playerid, "job_Hold1" ) ), DeletePVar( playerid, "job_Hold1" );
			DestroyDynamicObject( GetPVarInt( playerid, "job_Hold2" ) ), DeletePVar( playerid, "job_Hold2" );
			DestroyDynamicObject( GetPVarInt( playerid, "job_Hold3" ) ), DeletePVar( playerid, "job_Hold3" );
			DestroyDynamicObject( GetPVarInt( playerid, "job_Hold4" ) ), DeletePVar( playerid, "job_Hold4" );
			DestroyDynamicObject( GetPVarInt( playerid, "job_Hold5" ) ), DeletePVar( playerid, "job_Hold5" );
		}
		HideGPSForPlayer( playerid );
		SetCameraBehindPlayer( playerid );
		playerVariables[ playerid ][ pJobValue ] = 0;
		playerVariables[ playerid ][ pJobValue2 ] = 0;
		playerVariables[ playerid ][ pTotalEarnings ] = 0;
		playerVariables[ playerid ][ pDoingJob ] = 0;

		if( !playerVariables[ playerid ][ pFaction ] )
			SetPlayerSkin( playerid, playerVariables[ playerid ][ pSkin ] );

		if( playerVariables[ playerid ][ pJob ] != 8 || playerVariables[ playerid ][ pFishes ] < 5 )
		{
			playerVariables[ playerid ][ pCP ] = 0;
			playerVariables[ playerid ][ pFishes ] = 0;
			playerVariables[ playerid ][ pFishesValue ] = 0;
		}
		if( IsValidVehicle( playerVariables[ playerid ][ pJobVehicle ][ 0 ] ) )
			UnLockVehicle( playerVariables[ playerid ][ pJobVehicle ][ 0 ] ), DestroyVehicle_( playerVariables[ playerid ][ pJobVehicle ][ 0 ] ), playerVariables[ playerid ][ pJobVehicle ][ 0 ] = INVALID_VEHICLE_ID;

		if( IsValidVehicle( playerVariables[ playerid ][ pJobVehicle ][ 1 ] ) )
			DestroyVehicle_( playerVariables[ playerid ][ pJobVehicle ][ 1 ] ), playerVariables[ playerid ][ pJobVehicle ][ 1 ] = INVALID_VEHICLE_ID;

		HidePlayerJobTextdraws( playerid );
		KillTimer( playerVariables[ playerid ][ pFarmerTimer ] );
		playerVariables[ playerid ][ pTotalEarnings ] = 0;
		if( type == 1 )
		{
			InfoTD_MSG( playerid, 5000, "You have failed your job: ~r~~h~%s", GetGVarStringEx( "job_Name", playerVariables[ playerid ][ pJob ] ) );
		}
	}
	DisablePlayerExam( playerid );
	#if defined DEBUG_SERVER
		DisablePlayerCheckpointText( playerid, "DestroyPlayerJobVehicles" );
	#else
		DisablePlayerCheckpoint( playerid );
	#endif
	DisablePlayerRaceCheckpoint( playerid );
}
stock DisablePlayerExam( playerid )
{
	if( playerVariables[ playerid ][ pTakeExam ] != 0 )
	{
		if( IsValidVehicle( playerVariables[ playerid ][ pJobVehicle ][ 0 ] ) )
			DestroyVehicle_( playerVariables[ playerid ][ pJobVehicle ][ 0 ] ), playerVariables[ playerid ][ pJobVehicle ][ 0 ] = INVALID_VEHICLE_ID;

		SetPlayerVirtualWorld( playerid, 0 );
		playerVariables[ playerid ][ pDMVCP ] = 0;
		playerVariables[ playerid ][ pTakeExam ] = 0;
		DisablePlayerRaceCheckpoint( playerid );
		playerVariables[ playerid ][ pRCP ] = 0;
		InfoTD_MSG( playerid, 5000, "You have have failed your ~r~~h~Driver Exam" );
	}
}
stock CreatePlayerTrailer( playerid, trailerID = 0 )
{
	switch( playerVariables[ playerid ][ pJob ] )
	{
		case 1:
		{
			switch( random( 5 ) )
			{
				case 0: playerVariables[ playerid ][ pJobVehicle ][ 1 ] = CreateVehicle( trailerID, 2249.9695, -2234.2300, 14.1692, 45.2400, -1, -1, -1 );
				case 1: playerVariables[ playerid ][ pJobVehicle ][ 1 ] = CreateVehicle( trailerID, 2247.5991, -2236.3892, 14.1692, 45.2400, -1, -1, -1 );
				case 2: playerVariables[ playerid ][ pJobVehicle ][ 1 ] = CreateVehicle( trailerID, 2245.2256, -2238.6589, 14.1692, 45.2400, -1, -1, -1 );
				case 3: playerVariables[ playerid ][ pJobVehicle ][ 1 ] = CreateVehicle( trailerID, 2242.8801, -2240.9619, 14.1692, 45.2400, -1, -1, -1 );
				case 4: playerVariables[ playerid ][ pJobVehicle ][ 1 ] = CreateVehicle( trailerID, 2241.3547, -2229.9766, 14.1692, 135.2999, -1, -1, -1 );
			}
		}
		case 2:
		{
			switch( random( 6 ) )
			{
				case 0: playerVariables[ playerid ][ pJobVehicle ][ 1 ] = CreateVehicle( 610, -394.7077, -1439.4576, 25.1213, 181.4999, -1, -1, -1 );
				case 1: playerVariables[ playerid ][ pJobVehicle ][ 1 ] = CreateVehicle( 610, -398.2311, -1439.5564, 25.1213, 181.4999, -1, -1, -1 );
				case 2: playerVariables[ playerid ][ pJobVehicle ][ 1 ] = CreateVehicle( 610, -398.1482, -1441.5968, 25.1213, 181.4999, -1, -1, -1 );
				case 3: playerVariables[ playerid ][ pJobVehicle ][ 1 ] = CreateVehicle( 610, -394.6933, -1441.5085, 25.1213, 181.4999, -1, -1, -1 );
				case 4: playerVariables[ playerid ][ pJobVehicle ][ 1 ] = CreateVehicle( 610, -398.0161, -1443.7927, 25.1213, 181.4999, -1, -1, -1 );
				case 5: playerVariables[ playerid ][ pJobVehicle ][ 1 ] = CreateVehicle( 610, -394.6490, -1443.6248, 25.1213, 181.4999, -1, -1, -1 );
			}
		}
	}
	SetGVarInt( "veh_Faction", 0, playerVariables[ playerid ][ pJobVehicle ][ 1 ] );
}
stock savePlayerData( playerid )
{
	if( playerVariables[ playerid ][ pLogged ] == true && GetPlayerMysqlID(playerid) != 0 )
	{
		svQuery[ 0 ] = EOS;
		format( svQuery, 75, "%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d",
			playerVariables[ playerid ][ jSkillPoints ][ 1 ], playerVariables[ playerid ][ jSkillPoints ][ 2 ],
			playerVariables[ playerid ][ jSkillPoints ][ 3 ], playerVariables[ playerid ][ jSkillPoints ][ 4 ],
			playerVariables[ playerid ][ jSkillPoints ][ 5 ], playerVariables[ playerid ][ jSkillPoints ][ 6 ],
			playerVariables[ playerid ][ jSkillPoints ][ 7 ], playerVariables[ playerid ][ jSkillPoints ][ 8 ],
			playerVariables[ playerid ][ jSkillPoints ][ 9 ], playerVariables[ playerid ][ jSkillPoints ][ 10 ],
			playerVariables[ playerid ][ jSkillPoints ][ 11 ], playerVariables[ playerid ][ jSkillPoints ][ 12 ], 
			playerVariables[ playerid ][ jSkillPoints ][ 13 ], playerVariables[ playerid ][ jSkillPoints ][ 14 ]);

		#if defined HEIST_SYSTEM
		gsString[ 0 ] = EOS;
		format( gsString, sizeof gsString, "%d:%d:%d:%d:%d", playerVariables[ playerid ][ pHeist ][ 0 ], playerVariables[ playerid ][ pHeist ][ 1 ], playerVariables[ playerid ][ pHeist ][ 2 ], playerVariables[ playerid ][ pHeist ][ 3 ], playerVariables[ playerid ][ pHeist ][ 4 ] );
		#endif
		saveQuery[ 0 ] = EOS;
		format( saveQuery, sizeof saveQuery, "UPDATE `server_accounts` SET `playerMoney` = %d", playerVariables[ playerid ][ pMoney ] );
		format( saveQuery, sizeof saveQuery, "%s,`playerJob` = %d", 			saveQuery, playerVariables[ playerid ][ pJob ] );
		format( saveQuery, sizeof saveQuery, "%s,`playerWanted` = %d", 			saveQuery, playerVariables[ playerid ][ pWanted ] );
		format( saveQuery, sizeof saveQuery, "%s,`playerWantedTime` = %d", 		saveQuery, playerVariables[ playerid ][ pWantedTime ] );
		format( saveQuery, sizeof saveQuery, "%s,`playerSpawnType` = %d",		saveQuery, playerVariables[ playerid ][ pSpawnType ] );

		format( saveQuery, sizeof saveQuery, "%s,`playerCarLicense` = %d",      saveQuery, playerVariables[ playerid ][ pCarLicense ] );
		format( saveQuery, sizeof saveQuery, "%s,`playerGunLicense` = %d",		saveQuery, playerVariables[ playerid ][ pGunLicense ] );
		format( saveQuery, sizeof saveQuery, "%s,`playerFlyLicense` = %d",		saveQuery, playerVariables[ playerid ][ pFlyLicense ] );
		format( saveQuery, sizeof saveQuery, "%s,`playerBoatLicense` = %d",		saveQuery, playerVariables[ playerid ][ pBoatLicense ] );
		format( saveQuery, sizeof saveQuery, "%s,`playerPlayTime` = %d",		saveQuery, playerVariables[ playerid ][ pPlayTime ] );
		format( saveQuery, sizeof saveQuery, "%s,`playerAFKTime` = %d",			saveQuery, playerVariables[ playerid ][ pAFKTime ] );
		format( saveQuery, sizeof saveQuery, "%s,`playerGiftBoxTime` = %d",		saveQuery, playerVariables[ playerid ][ pGiftBoxTime ] );
		format( saveQuery, sizeof saveQuery, "%s,`playerBonusTaken` = %d",		saveQuery, playerVariables[ playerid ][ pBonusTaken ] );

		format( saveQuery, sizeof saveQuery, "%s,`playerRP` = %d",				saveQuery, playerVariables[ playerid ][ pRP ] );
		format( saveQuery, sizeof saveQuery, "%s,`playerLevel` = %d",			saveQuery, playerVariables[ playerid ][ pLevel ] );
		format( saveQuery, sizeof saveQuery, "%s,`playerBankMoney` = %d",		saveQuery, playerVariables[ playerid ][ pBankMoney ] );
		format( saveQuery, sizeof saveQuery, "%s,`playerJobSkill` = '%s'",		saveQuery, svQuery );
		#if defined HEIST_SYSTEM 
		format( saveQuery, sizeof saveQuery, "%s,`playerHeists` = '%s'",		saveQuery, gsString ); 
		#endif
		format( saveQuery, sizeof saveQuery, "%s,`playerSkin` = %d",			saveQuery, playerVariables[ playerid ][ pSkin ] );
		format( saveQuery, sizeof saveQuery, "%s,`playerPremiumPoints` = %d",	saveQuery, playerVariables[ playerid ][ pPremiumPoints ] );
		format( saveQuery, sizeof saveQuery, "%s,`playerHiddens` = %d",			saveQuery, playerVariables[ playerid ][ pHiddenColors ] );
		format( saveQuery, sizeof saveQuery, "%s,`playerDrugs` = %d",			saveQuery, playerVariables[ playerid ][ pDrugs ] );

		format( saveQuery, sizeof saveQuery, "%s,`playerPayday` = %d",			saveQuery, playerVariables[ playerid ][ pPayday ] );
		format( saveQuery, sizeof saveQuery, "%s,`playerPhone` = %d",			saveQuery, playerVariables[ playerid ][ pPhone ] );
		format( saveQuery, sizeof saveQuery, "%s,`playerPhoneNumber` = '%d'",	saveQuery, playerVariables[ playerid ][ pPhoneNumber ] );
		format( saveQuery, sizeof saveQuery, "%s,`playerPhoneCredit` = %d",		saveQuery, playerVariables[ playerid ][ pPhoneCredit ] );
		format( saveQuery, sizeof saveQuery, "%s,`playerPhoneBook` = %d",		saveQuery, playerVariables[ playerid ][ pPhoneBook ] );

		format( saveQuery, sizeof saveQuery, "%s,`playerLastOnline` = now(), `playerStatus` = %d", saveQuery, playerVariables[ playerid ][ pSpawned ] );
		format( saveQuery, sizeof saveQuery, "%s,`playerLastSession` = %d", 	saveQuery, floatround( NetStats_GetConnectedTime( playerid ) / 1000, floatround_round ) );
		format( saveQuery, sizeof saveQuery, "%s,`playerMaterials` = %d", 		saveQuery, playerVariables[ playerid ][ pMaterials ] );
		format( saveQuery, sizeof saveQuery, "%s,`playerFireworks` = %d", 		saveQuery, playerVariables[ playerid ][ pFireworks ] );
		format( saveQuery, sizeof saveQuery, "%s,`playerJobBoost` = %d", 		saveQuery, playerVariables[ playerid ][ pJobHype ] );
		format( saveQuery, sizeof saveQuery, "%s,`playerHelpedPlayers` = %d", 	saveQuery, playerVariables[ playerid ][ pHelpedPlayers ] );

		format( saveQuery, sizeof saveQuery, "%s,`playerHelperTokens` = %d",	saveQuery, playerVariables[ playerid ][ pHelperTokens ] );

		format( saveQuery, sizeof saveQuery, "%s,`playerAdminReports` = %d", 	saveQuery, playerVariables[ playerid ][ pAdminReports ] );
		format( saveQuery, sizeof saveQuery, "%s,`playerRobPoints` = %d", 		saveQuery, playerVariables[ playerid ][ pRobPoints ] );
		format( saveQuery, sizeof saveQuery, "%s,`playerFreePoints` = %d", 		saveQuery, playerVariables[ playerid ][ pFreePoints ] );
		format( saveQuery, sizeof saveQuery, "%s,`playerRobs` = %d", 			saveQuery, playerVariables[ playerid ][ pRobs ] );
		format( saveQuery, sizeof saveQuery, "%s,`playerArrests` = %d", 		saveQuery, playerVariables[ playerid ][ pArrests ] );
		format( saveQuery, sizeof saveQuery, "%s,`playerMute` = %d", 			saveQuery, playerVariables[ playerid ][ pMuted ] );
		format( saveQuery, sizeof saveQuery, "%s,`playerJail` = %d", 			saveQuery, playerVariables[ playerid ][ pPrisonTime ] );
		format( saveQuery, sizeof saveQuery, "%s,`playerWarnings` = %d", 		saveQuery, playerVariables[ playerid ][ pWarnings ] );
		format( saveQuery, sizeof saveQuery, "%s,`playerFactionLW` = %d", 		saveQuery, playerVariables[ playerid ][ pFactionLW ] );
		format( saveQuery, sizeof saveQuery, "%s,`playerFP` = %d", 				saveQuery, playerVariables[ playerid ][ pFP ] );
		format( saveQuery, sizeof saveQuery, "%s,`playerPINStatus` = %d", 		saveQuery, playerVariables[ playerid ][ pPINStatus ] );
		format( saveQuery, sizeof saveQuery, "%s,`playerWalkie` = %d", 			saveQuery, playerVariables[ playerid ][ pWTalkieFRQ ] );
		format( saveQuery, sizeof saveQuery, "%s,`playerWalkieStatus` = %d", 	saveQuery, playerVariables[ playerid ][ pWTalkieStatus ] );
		format( saveQuery, sizeof saveQuery, "%s,`playerAColor` = %d",      	saveQuery, playerVariables[ playerid ][ pAdminColor ] );
		format( saveQuery, sizeof saveQuery, "%s,`playerHColor` = %d", 	        saveQuery, playerVariables[ playerid ][ pHelperColor ] );

		format( saveQuery, sizeof saveQuery, "%s,`playerSlots` = %d", 			saveQuery, playerVariables[ playerid ][ pVSlots ] );
		format( saveQuery, sizeof saveQuery, "%s,`playerGasCan` = %d", 			saveQuery, playerVariables[ playerid ][ pGasCan ] );
		format( saveQuery, sizeof saveQuery, "%s,`playerTogs` = '%d:%d:%d:%d:%d:%d:%d:%d:%d:%d'", 	saveQuery, playerVariables[ playerid ][ pTog ][ 0 ], playerVariables[ playerid ][ pTog ][ 1 ], playerVariables[ playerid ][ pTog ][ 2 ], playerVariables[ playerid ][ pTog ][ 3 ], playerVariables[ playerid ][ pTog ][ 4 ],
		playerVariables[ playerid ][ pTog ][ 5 ], playerVariables[ playerid ][ pTog ][ 6 ], playerVariables[ playerid ][ pTog ][ 7 ], playerVariables[ playerid ][ pTog ][ 8 ], playerVariables[ playerid ][ pTog ][ 9 ] );
		format( saveQuery, sizeof saveQuery, "%s,`playerHuds` = '%d:%d:%d:%d:%d:%d:%d:%d:%d:%d'", 	saveQuery, playerVariables[ playerid ][ pHud ][ 0 ], playerVariables[ playerid ][ pHud ][ 1 ], playerVariables[ playerid ][ pHud ][ 2 ], playerVariables[ playerid ][ pHud ][ 3 ], playerVariables[ playerid ][ pHud ][ 4 ],
		playerVariables[ playerid ][ pHud ][ 5 ], playerVariables[ playerid ][ pHud ][ 6 ], playerVariables[ playerid ][ pHud ][ 7 ], playerVariables[ playerid ][ pHud ][ 8 ], playerVariables[ playerid ][ pHud ][ 9 ] );
		format( saveQuery, sizeof saveQuery, "%s,`playerQuestProgress` = '%d:%d'", 			saveQuery, playerVariables[ playerid ][ pQuestProgress ][ 0 ], playerVariables[ playerid ][ pQuestProgress ][ 1 ] );

		// < Paintball >
		format( saveQuery, sizeof saveQuery, "%s,`playerPaintball` = %d", 			saveQuery, playerVariables[ playerid ][ pPaintball ] );
		format( saveQuery, sizeof saveQuery, "%s,`playerPaintballKills` = %d", 		saveQuery, playerVariables[ playerid ][ pPaintKills ] );
		format( saveQuery, sizeof saveQuery, "%s,`playerPaintballDeaths` = %d", 	saveQuery, playerVariables[ playerid ][ pPaintDeaths ] );

		// < Nu uita sa le salvezi fix dupa war pentru fiecare player )
		format( saveQuery, sizeof saveQuery, "%s,`playerWarKills` = %d", 			saveQuery, playerVariables[ playerid ][ pFactionWarKills ] );
		format( saveQuery, sizeof saveQuery, "%s,`playerWarDeaths` = %d", 			saveQuery, playerVariables[ playerid ][ pFactionWarDeaths ] );

		format( saveQuery, sizeof saveQuery, "%s,`playerRunners` = %d", 			saveQuery, playerVariables[ playerid ][ pFactionRunners ] );
		format( saveQuery, sizeof saveQuery, "%s,`playerTickets` = %d", 			saveQuery, playerVariables[ playerid ][ pFactionTickets ] );
		format( saveQuery, sizeof saveQuery, "%s,`playerConfiscateDrugs` = %d", 	saveQuery, playerVariables[ playerid ][ pFactionDrugs ] );
		format( saveQuery, sizeof saveQuery, "%s,`playerConfiscateLicenses` = %d", 	saveQuery, playerVariables[ playerid ][ pFactionLicenses ] );
		format( saveQuery, sizeof saveQuery, "%s,`playerDeposited` = %d", 			saveQuery, playerVariables[ playerid ][ pFactionDepositedMoney ] );

		format( saveQuery, sizeof saveQuery, "%s,`playerGivenLicenses` = %d", 		saveQuery, playerVariables[ playerid ][ pFactionLicensesGiven ] );
		format( saveQuery, sizeof saveQuery, "%s,`playerOrders` = %d", 				saveQuery, playerVariables[ playerid ][ pFactionOrders ] );
		format( saveQuery, sizeof saveQuery, "%s,`playerPatientsHealed` = %d", 		saveQuery, playerVariables[ playerid ][ pFactionPatients ] );
		format( saveQuery, sizeof saveQuery, "%s,`playerContracts` = %d", 			saveQuery, playerVariables[ playerid ][ pFactionContracts ] );
		format( saveQuery, sizeof saveQuery, "%s,`playerApartment` = %d", 			saveQuery, playerVariables[ playerid ][ pRentAP ] );

		format( saveQuery, sizeof saveQuery, "%s,`playerLives` = %d", 				saveQuery, playerVariables[ playerid ][ pFactionLives ] );
		format( saveQuery, sizeof saveQuery, "%s,`playerNews` = %d", 				saveQuery, playerVariables[ playerid ][ pFactionNews ] );
		format( saveQuery, sizeof saveQuery, "%s,`playerFreeNews` = %d", 			saveQuery, playerVariables[ playerid ][ pFactionFreeNews ] );
		format( saveQuery, sizeof saveQuery, "%s,`playerNewsSessions` = %d", 		saveQuery, playerVariables[ playerid ][ pFactionNewsSessions ] );
		format( saveQuery, sizeof saveQuery, "%s,`playerMaterialsUsed` = %d", 		saveQuery, playerVariables[ playerid ][ pFactionMatsUsed ] );
		format( saveQuery, sizeof saveQuery, "%s,`playerDepositedDrugs` = %d", 		saveQuery, playerVariables[ playerid ][ pFactionDepositedDrugs ] );
		format( saveQuery, sizeof saveQuery, "%s,`playerDepositedMats` = %d", 		saveQuery, playerVariables[ playerid ][ pFactionDepositedMats ] );
		#if defined PET
		format( saveQuery, sizeof saveQuery, "%s,`playerPetName` = '%s'", 			saveQuery, playerVariables[ playerid ][ pPetName ] );
		#endif
		//<  End of the Save >
		format( saveQuery, sizeof saveQuery, "%s,`playerCrimeReason` = '%s'", 							saveQuery, playerVariables[ playerid ][ pCrimeReason ] );

		#if defined PET
		format( saveQuery, sizeof saveQuery, "%s,`playerPet` = %d", 			saveQuery, playerVariables[ playerid ][ pPet ] );
		format( saveQuery, sizeof saveQuery, "%s,`playerPetStatus` = %d", 		saveQuery, playerVariables[ playerid ][ pPetStatus ] );
		format( saveQuery, sizeof saveQuery, "%s,`playerPetLevel` = %d", 		saveQuery, playerVariables[ playerid ][ pPetLevel ] );
		format( saveQuery, sizeof saveQuery, "%s,`playerPetID` = %d", 			saveQuery, playerVariables[ playerid ][ pPetID ] );
		format( saveQuery, sizeof saveQuery, "%s,`playerPetPoints` = %d", 		saveQuery, playerVariables[ playerid ][ pPetPoints ] );
		
		gsString[ 0 ] = EOS;
		format( gsString, sizeof gsString, "%d:%d:%d:%d:%d", playerVariables[ playerid ][ pPetType ][ 0 ], playerVariables[ playerid ][ pPetType ][ 1 ], playerVariables[ playerid ][ pPetType ][ 2 ], playerVariables[ playerid ][ pPetType ][ 3 ], playerVariables[ playerid ][ pPetType ][ 4 ] );
		format( saveQuery, sizeof saveQuery, "%s,`playerPetType` = '%s'",		saveQuery, gsString );
		#endif
		#if defined CRATES
		format( saveQuery, sizeof saveQuery, "%s,`playerCrates` = %d",			saveQuery, playerVariables[ playerid ][ pCrates ] );
		
		gsString[ 0 ] = EOS;
		format( gsString, sizeof gsString, "%d:%d:%d:%d:%d:%d:%d:%d:%d:%d", playerVariables[playerid][pCrateSkins][0], playerVariables[playerid][pCrateSkins][1], playerVariables[playerid][pCrateSkins][2], playerVariables[playerid][pCrateSkins][3], playerVariables[playerid][pCrateSkins][4],
																			playerVariables[playerid][pCrateSkins][5], playerVariables[playerid][pCrateSkins][6], playerVariables[playerid][pCrateSkins][7], playerVariables[playerid][pCrateSkins][8], playerVariables[playerid][pCrateSkins][9]);
		
		format( saveQuery, sizeof saveQuery, "%s,`playerCrateSkins` = '%s'",		saveQuery, gsString );
		
		format( gsString, sizeof gsString, "%d:%d:%d:%d:%d:%d:%d:%d:%d:%d", playerVariables[playerid][pCrateSkinAmount][0], playerVariables[playerid][pCrateSkinAmount][1], playerVariables[playerid][pCrateSkinAmount][2], playerVariables[playerid][pCrateSkinAmount][3], playerVariables[playerid][pCrateSkinAmount][4],
																			playerVariables[playerid][pCrateSkinAmount][5], playerVariables[playerid][pCrateSkinAmount][6], playerVariables[playerid][pCrateSkinAmount][7], playerVariables[playerid][pCrateSkinAmount][8], playerVariables[playerid][pCrateSkinAmount][9]);
		
		format( saveQuery, sizeof saveQuery, "%s,`playerCrateSkinAmount` = '%s'",		saveQuery, gsString );
		#endif

		//<  End of the Save >
		format( saveQuery, sizeof saveQuery, "%s WHERE `id` = %d", 			saveQuery, GetPlayerMysqlID(playerid) );
		mysql_tquery( g_Handle, saveQuery, "", "" );


		// < Reset player variable >
		#if defined DEBUG_SERVER
			printf( "[SAVE DEBUG]: %s", saveQuery );
			printf( "[SavePlayerData] has been called for player: %s(%i)", username( playerid ), playerid );
		#endif
	}
	else
	{
		#if defined DEBUG_SERVER
			printf( "[SAVE DEBUG]: %s(%i) can't save player account, reason: Player it's not logged in/invalid key!", username( playerid ), playerid );
		#endif
	}
	return true;
}
stock GetDealerType( type )
{
	new DealerType[ 64 ];
	switch( type )
	{
		case 1: DealerType = "Cheap Vehicles";
		case 2: DealerType = "Regular Vehicles";
		case 3: DealerType = "Expensive Vehicles";
		case 4: DealerType = "Bikes/Moto";
		case 5: DealerType = "Premium Vehicles";
	}
	return DealerType;
}
stock GPS_Location( playerid, gpsName[], Float:gpsX, Float:gpsY, Float:gpsZ, gpsType=0 )
{
	if( playerVariables[ playerid ][ pCP ] != 0 )
		return InfoTD_MSG( playerid, 5000, "~r~~h~GPS Error: ~w~~h~Foloseste mai intai /killcp pentru a opri sarcina curenta!" );

	HideGPSForPlayer( playerid );
	PlayerTextDrawShow( playerid, PLAYER_TD[ 0 ] ) ;
	new Float:liDistance = GetPlayerDistanceFromPoint( playerid, gpsX, gpsY, gpsZ ) ;

	gsString[ 0 ] = EOS;
	format( gsString, 128, "GPS: ~y~~h~%s ~w~~h~/ %0.2fm", gpsName, liDistance );
	PlayerTextDrawSetString( playerid, PLAYER_TD[ 0 ], gsString );
	format( playerVariables[ playerid ][ pLocationGPS ], 64, "%s", gpsName );

	if( !gpsType )
	{
		SetPlayerCheckpoint( playerid, gpsX, gpsY, gpsZ, 4.0 );
		InfoTD_MSG( playerid, 5000, "Server has set you a checkpoint to ~r~~h~%s~w~~h~!", gpsName );
		playerVariables[ playerid ][ pCP ] = 5000;
	}
	serverVariables[ GPS_Timer ][ playerid ] = SetTimerEx( "UpdatePlayerGPS", 2000, true, "ifff", playerid, gpsX, gpsY, gpsZ );
	return true;
}
stock HideGPSForPlayer( playerid )
{
	PlayerTextDrawHide( playerid, PLAYER_TD[ 0 ] ) ;
	KillTimer( serverVariables[ GPS_Timer ][ playerid ] ); 
}
stock SetPlayerFactionSkin( playerid )
{
	if( playerVariables[ playerid ][ pFaction ] > 0 )
	{
		switch( playerVariables[ playerid ][ pSex ] )
		{
			case 1: // Male
			{
				gsString[ 0 ] = EOS;
				format( gsString, sizeof gsString, "faction_SkinR%d", playerVariables[ playerid ][ pFactionRank ] );
				playerVariables[ playerid ][ pSkin ] = GetGVarInt( gsString, playerVariables[ playerid ][ pFaction ] );
				SetPlayerSkin( playerid, playerVariables[ playerid ][ pSkin ] );
			}
			case 2: // Female
			{
				playerVariables[ playerid ][ pSkin ] = GetGVarInt( "faction_SkinR8", playerVariables[ playerid ][ pFaction ] );
				SetPlayerSkin( playerid, playerVariables[ playerid ][ pSkin ] );
			}
		}
	}
	else
	{
		//211
		SetPlayerSkin( playerid, playerVariables[ playerid ][ pSkin ] );
	}
}
stock SetPlayerFactionColor( playerid )
{
	switch( playerVariables[ playerid ][ pFaction ] )
	{
		// Civilian
		case 0: SetPlayerColor( playerid, COLOR_WHITE );
		// LSPD
		case 1: SetPlayerColor( playerid, FACTION_COLOR_1 );
		// Paramedic
		case 2: SetPlayerColor( playerid, FACTION_COLOR_3 );
		// Taxi LS
		case 3: SetPlayerColor( playerid, FACTION_COLOR_2 );
		// School Instructors
		case 4: SetPlayerColor( playerid, FACTION_COLOR_4 );
		// News Reporters
		case 5: SetPlayerColor( playerid, FACTION_COLOR_14 );
		// Hitman
		case 6: SetPlayerColor( playerid, FACTION_COLOR_13 );
		// Grove
		case 7: SetPlayerColor( playerid, FACTION_COLOR_11 );
		// Orleans Family
		case 8: SetPlayerColor( playerid, FACTION_COLOR_12 );
		// Russian Mafia
		case 9: SetPlayerColor( playerid, FACTION_COLOR_15 );
		// Ballas
		case 10: SetPlayerColor( playerid, FACTION_COLOR_10 );
	}
}
stock SetPlayerFactionSolidColor( playerid )
{
	switch( playerVariables[ playerid ][ pFaction ] )
	{
		// Civilian
		case 0: SetPlayerColor( playerid, COLOR_SOLID_WHITE );
		// LSPD
		case 1: SetPlayerColor( playerid, FACTION_SOLID_COLOR_1 );
		// Paramedic
		case 2: SetPlayerColor( playerid, FACTION_SOLID_COLOR_3 );
		// Taxi LS
		case 3: SetPlayerColor( playerid, FACTION_SOLID_COLOR_2 );
		// School Instructors
		case 4: SetPlayerColor( playerid, FACTION_SOLID_COLOR_4 );
		// News Reporters
		case 5: SetPlayerColor( playerid, FACTION_SOLID_COLOR_14 );
		// Hitman
		case 6: SetPlayerColor( playerid, FACTION_SOLID_COLOR_13 );
		// Grove
		case 7: SetPlayerColor( playerid, FACTION_SOLID_COLOR_11 );
		// Orleans Family
		case 8: SetPlayerColor( playerid, FACTION_SOLID_COLOR_12 );
		// Russian Mafia
		case 9: SetPlayerColor( playerid, FACTION_SOLID_COLOR_15 );
		// Ballas
		case 10: SetPlayerColor( playerid, FACTION_SOLID_COLOR_10 );
	}
}
stock GetTeamZoneColor( teamid )
{
	switch( teamid )
	{
		case 7: return 0x006400AA;
		case 8: return 0xFF9700AA;
		case 9: return 0x4F4F4FAA;
		case 10: return 0x4111b0AA;
		default: return COLOR_WHITE;
	}
	return -1;
}
stock GetHeistID( playerid )
{
	foreach( new i : ServerHeists )
		if( IsPlayerInRangeOfPoint( playerid, 3.0, GetGVarFloat( "heist_PosX", i ), GetGVarFloat( "heist_PosY", i ), GetGVarFloat( "heist_PosZ", i ) ) )
			return i+1;

	return -404;
}
stock GetJobID( playerid )
{
	new i = playerVariables[ playerid ][ GET_AREA_JOBS ];
	if( IsPlayerInRangeOfPoint( playerid, 3.0, GetGVarFloat( "job_PosX", i ), GetGVarFloat( "job_PosY", i ), GetGVarFloat( "job_PosZ", i ) ) )
		return i;

	return -404;
}
stock GetWorkJob( playerid, jobid )
{
	if( IsPlayerInRangeOfPoint( playerid, 10.0, GetGVarFloat( "job_PosX", jobid ), GetGVarFloat( "job_PosY", jobid ), GetGVarFloat( "job_PosZ", jobid ) ) )
		return true;

	return false;
}
stock GetATMID( playerid )
{
	foreach( new i : ServerATMS )
		if( IsPlayerInRangeOfPoint( playerid, 3.0, GetGVarFloat( "atm_X", i ), GetGVarFloat( "atm_Y", i ), GetGVarFloat( "atm_Z", i ) ) )
			return i;

	return -404;
}
stock GetSeifID( playerid, factionID )
{
	if( GetGVarInt( "faction_Virtual", factionID ) == GetPlayerVirtualWorld( playerid ) && IsPlayerInRangeOfPoint( playerid, 3.0, GetGVarFloat( "faction_SeifX", factionID ), GetGVarFloat( "faction_SeifY", factionID ), GetGVarFloat( "faction_SeifZ", factionID ) ) )
		return true;

	return -404;
}
stock GetBuildingEnterID( playerid, type, building, Float:range=3.0 ) // Type( 0=enter/1=exit ) Building( 0=faction/1=teleport/2=house/3=bizz )
{
	switch( type )
	{
		case 0: // Enter
		{
			switch( building )
			{
				case 0: // Faction
				{
					new i = playerVariables[playerid][GET_AREA_FACTION];
					if( IsPlayerInRangeOfPoint( playerid, range, GetGVarFloat( "faction_EnterX", i ), GetGVarFloat( "faction_EnterY", i ), GetGVarFloat( "faction_EnterZ", i ) ) && GetGVarInt( "faction_Status", i ) == 1 )
						return i;
				}
				case 1: // Teleport
				{
					new i = playerVariables[playerid][GET_AREA_TELES];
					if( GetGVarInt( "tele_Virtual", i ) == GetPlayerVirtualWorld( playerid ) )
						if( IsPlayerInRangeOfPoint( playerid, range, GetGVarFloat( "tele_EnterX", i ), GetGVarFloat( "tele_EnterY", i ), GetGVarFloat( "tele_EnterZ", i ) ) )
							return i;
				}
				case 2: // House
				{
					new i = playerVariables[playerid][GET_AREA_HOUSE];
					if( IsPlayerInRangeOfPoint( playerid, range, GetGVarFloat( "house_EnterX", i ), GetGVarFloat( "house_EnterY", i ), GetGVarFloat( "house_EnterZ", i ) ) )
						return i;
				}
				case 3: // Business
				{
					new i = playerVariables[playerid][GET_AREA_BIZZ];
					if( IsPlayerInRangeOfPoint( playerid, range, GetGVarFloat( "bus_EnterX", i ), GetGVarFloat( "bus_EnterY", i ), GetGVarFloat( "bus_EnterZ", i ) ) )
						return i;
				}
				case 4: // Apartments
				{
					new i = playerVariables[playerid][GET_AREA_APARTMENT];
					if( IsPlayerInRangeOfPoint( playerid, range, GetGVarFloat( "apartment_ENTERX", i ), GetGVarFloat( "apartment_ENTERY", i ), GetGVarFloat( "apartment_ENTERZ", i ) ) )
						return i;
				}
			}
		}
		case 1: // Exit
		{
			switch( building )
			{
				case 0: // Faction
				{
					new i = playerVariables[playerid][GET_AREA_FACTION];
					if( GetGVarInt( "faction_Virtual", i ) == GetPlayerVirtualWorld( playerid ) )
						if( IsPlayerInRangeOfPoint( playerid, range, GetGVarFloat( "faction_ExitX", i ), GetGVarFloat( "faction_ExitY", i ), GetGVarFloat( "faction_ExitZ", i ) ) && GetGVarInt( "faction_Status", i ) == 1 )
							return i;
				}
				case 1: // Teleport
				{
					new i = playerVariables[playerid][GET_AREA_TELES];
					if( GetGVarInt( "tele_VirtualExit", i ) == GetPlayerVirtualWorld( playerid ) )
						if( IsPlayerInRangeOfPoint( playerid, range, GetGVarFloat( "tele_ExitX", i ), GetGVarFloat( "tele_ExitY", i ), GetGVarFloat( "tele_ExitZ", i ) ) )
							return i;
				}
				case 2: // House
				{
					new i = playerVariables[playerid][GET_AREA_HOUSE];
					if( GetGVarInt( "house_Virtual", i ) == GetPlayerVirtualWorld( playerid ) )
						if( IsPlayerInRangeOfPoint( playerid, range, GetGVarFloat( "house_ExitX", i ), GetGVarFloat( "house_ExitY", i ), GetGVarFloat( "house_ExitZ", i ) ) )
							return i;
				}
				case 3: // Business
				{
					new i = playerVariables[playerid][GET_AREA_BIZZ];
					if( GetGVarInt( "bus_Virtual", i ) == GetPlayerVirtualWorld( playerid ) )
						if( IsPlayerInRangeOfPoint( playerid, range, GetGVarFloat( "bus_ExitX", i ), GetGVarFloat( "bus_ExitY", i ), GetGVarFloat( "bus_ExitZ", i ) ) )
							return i;
				}
				case 4: // Apartments
				{
					new i = playerVariables[playerid][GET_AREA_APARTMENT];
				    if( IsPlayerInRangeOfPoint( playerid, range, GetGVarFloat( "apartment_EXITX", i ), GetGVarFloat( "apartment_EXITY", i ), GetGVarFloat( "apartment_EXITZ", i ) ) )
					    return i;
				}
			}
		}
	}
	return -404;
}
stock SetPVarStringEx( playerid, string[], value[], ID )
{
	svString[ 0 ] = EOS;
	format( svString, 64, "%s_%d", string, ID );
	SetPVarString( playerid, svString, value );
}
stock GetPVarStringExx( playerid, string[], ID )
{
	new pvarString[ 64 ];
	svString[ 0 ] = EOS;
	format( svString, 64, "%s_%d", string, ID );
	GetPVarString( playerid, svString, pvarString, 64 );
	return pvarString;
}
stock SetPVarIntEx( playerid, string[], Value, ID )
{
	svString[ 0 ] = EOS;
	format( svString, 32, "%s_%d", string, ID );
	SetPVarInt( playerid, svString, Value );
}
stock GetPVarIntEx( playerid, string[], ID )
{
	svString[ 0 ] = EOS;
	format( svString, 32, "%s_%d", string, ID );
	return GetPVarInt( playerid, svString );
}
stock SetPVarFloatEx( playerid, string[], Float:Value, ID )
{
	svString[ 0 ] = EOS;
	format( svString, 32, "%s_%d", string, ID );
	SetPVarFloat( playerid, svString, Value );
}
function Float:GetPVarFloatEx( playerid, string[], ID )
{
	svString[ 0 ] = EOS;
	format( svString, 32, "%s_%d", string, ID );
	return GetPVarFloat( playerid, svString );
}
stock GetGVarStringEx( const name[], id = 0 )
{
	new string[ 128 ];
	GetGVarString( name, string, 128, id );
	return string;
}
stock GetPVarStringEx( playerid, varText[] )
{
	new string[ 128 ];
	GetPVarString( playerid, varText, string, 128 );
	return string;
}
stock abs( value ) return ((value < 0 ) ? (0) : (value));

stock GetVehicleSpeed( vehicleid, get3d )
{
	new Float:POS[ 3 ];
	GetVehicleVelocity( vehicleid, POS[ 0 ], POS[ 1 ], POS[ 2 ] );
	return SpeedCheck( POS[ 0 ], POS[ 1 ], POS[ 2 ], 100.0, get3d );
}

stock GetVehicleSpeed2(playerid, mode = 1)
{
	new Float:Velocity [3];
	GetVehicleVelocity ( GetPlayerVehicleID ( playerid ) , Velocity [ 0 ] , Velocity [ 1 ] , Velocity [ 2 ] ) ;
	return IsPlayerInAnyVehicle ( playerid ) ? floatround ( ( ( floatsqroot ( ( ( Velocity [ 0 ] * Velocity [ 0 ] ) + ( Velocity [ 1 ] * Velocity [ 1 ] ) + ( Velocity [ 2 ] * Velocity [ 2 ] ) ) ) * ( !mode ? 105.0 : 170.0 ) ) ) * 1 ) : 0;
}

stock IsHiddenColor( colorid )
{
	switch( colorid )
	{
		case 128 .. 255: return true;
		default: return false;
	}
	return false;
}
stock SpawnPlayerVehicle( slot, playerid )
{
	if( vehicleVariables[ slot ][ playerid ][ Vehicle ] == INVALID_VEHICLE_ID )
	{
		vehicleVariables[ slot ][ playerid ][ Sold ] = false;
		vehicleVariables[ slot ][ playerid ][ VehicleTimer ] = VEHICLE_DESPAWN_TIMER;
		vehicleVariables[ slot ][ playerid ][ Vehicle ] = CreateVehicle( vehicleVariables[ slot ][ playerid ][ VehicleModelID ], vehicleVariables[ slot ][ playerid ][ Position ][ 0 ], vehicleVariables[ slot ][ playerid ][ Position ][ 1 ], vehicleVariables[ slot ][ playerid ][ Position ][ 2 ], vehicleVariables[ slot ][ playerid ][ Rotation ], vehicleVariables[ slot ][ playerid ][ VehicleColor ][ 0 ], vehicleVariables[ slot ][ playerid ][ VehicleColor ][ 1 ], -1 );
		SetGVarInt( "veh_Faction", 0, vehicleVariables[ slot ][ playerid ][ Vehicle ] );
		SetGVarInt( "veh_FactionRank", 0, vehicleVariables[ slot ][ playerid ][ Vehicle ] );
		SetVehicleNumberPlate( vehicleVariables[ slot ][ playerid ][ Vehicle ], vehicleVariables[ slot ][ playerid ][ VehiclePlate ] );
		vehicleVariables[ slot ][ playerid ][ VehicleStatus ] = 1;


		if( vehicleVariables[ slot ][ playerid ][ VehicleHealth ] < 300.0 )
			SetVehicleHealth( vehicleVariables[ slot ][ playerid ][ Vehicle ], 500 );
		else
			SetVehicleHealth( vehicleVariables[ slot ][ playerid ][ Vehicle ], vehicleVariables[ slot ][ playerid ][ VehicleHealth ] );

		serverVariables[ VehicleGas ][ vehicleVariables[ slot ][ playerid ][ Vehicle ] ] = vehicleVariables[ slot ][ playerid ][ VehicleFuel ];
		UpdateVehicleDamageStatus( vehicleVariables[ slot ][ playerid ][ Vehicle ], vehicleVariables[ slot ][ playerid ][ VehicleDamageStatus ][ 0 ], vehicleVariables[ slot ][ playerid ][ VehicleDamageStatus ][ 1 ], vehicleVariables[ slot ][ playerid ][ VehicleDamageStatus ][ 2 ], vehicleVariables[ slot ][ playerid ][ VehicleDamageStatus ][ 3 ] );

		if( vehicleVariables[ slot ][ playerid ][ VehiclePaintJobs ] != -1 )
			ChangeVehiclePaintjob( vehicleVariables[ slot ][ playerid ][ Vehicle ], vehicleVariables[ slot ][ playerid ][ VehiclePaintJobs ] );

		for(new i = 0; i < 13; i++)
			if( vehicleVariables[ slot ][ playerid ][ VehicleMods ][ i ] >= 1 )
				AddVehicleComponent( vehicleVariables[ slot ][ playerid ][ Vehicle ], vehicleVariables[ slot ][ playerid ][ VehicleMods ][ i ] );

		// < Check for VIP Text )
		if( vehicleVariables[ slot ][ playerid ][ VehicleVIP ] )
		{
			DestroyVehicle_Text( playerid, slot );
			CreateVehicleText( playerid, slot, vehicleVariables[ slot ][ playerid ][ VehicleVIPText ] );

			if( vehicleVariables[ slot ][ playerid ][ VehicleVIPNeon ] != INVALID_VEHICLE_ID )
				CreateVehicleNeon( playerid, slot );

			// < Add the vip vehicle's wheel )
			switch( vehicleVariables[ slot ][ playerid ][ VehicleVIPWheel ] )
			{
				case 0: AddVehicleComponent( vehicleVariables[ slot ][ playerid ][ Vehicle ], 1077 );
				case 1: AddVehicleComponent( vehicleVariables[ slot ][ playerid ][ Vehicle ], 1078 );
				case 2: AddVehicleComponent( vehicleVariables[ slot ][ playerid ][ Vehicle ], 1080 );
				case 3: AddVehicleComponent( vehicleVariables[ slot ][ playerid ][ Vehicle ], 1083 );
				case 4: AddVehicleComponent( vehicleVariables[ slot ][ playerid ][ Vehicle ], 1084 );
			}
		}
		// < Set the vehicle lock status )
		switch( vehicleVariables[ slot ][ playerid ][ VehicleLocked ] )
		{
			case 0: UnLockVehicle( vehicleVariables[ slot ][ playerid ][ Vehicle ] );
			case 1: LockVehicle( vehicleVariables[ slot ][ playerid ][ Vehicle ] );
		}
		SetVehicleParamsForPlayer(vehicleVariables[ slot ][ playerid ][ Vehicle ], playerid, 0, 0);
	}
	else printf( "[Vehicle DEBUG] Se pare ca mai exista deja o masina cu acest ID pentru jucatorul: %d!", playerid );
	return true;
}
stock DeSpawnPlayerVehicle( slot, playerid )
{
	if( vehicleVariables[ slot ][ playerid ][ Vehicle ] != INVALID_VEHICLE_ID )
	{
		//if( GetGVarInt( "veh_Job", vehicleVariables[ slot ][ playerid ][ Vehicle ] ) )
		//return printf( "[DEBUG DESPAWN]: %s[%d] a incercat sa despawneze o masina de JOB[ID:%d]!", username( playerid ), playerid, vehicleVariables[ slot ][ playerid ][ Vehicle ] );

		vehicleVariables[ slot ][ playerid ][ VehicleStatus ] = 0;
		GetVehicleDamageStatus( vehicleVariables[ slot ][ playerid ][ Vehicle ], vehicleVariables[ slot ][ playerid ][ VehicleDamageStatus ][ 0 ], vehicleVariables[ slot ][ playerid ][ VehicleDamageStatus ][ 1 ], vehicleVariables[ slot ][ playerid ][ VehicleDamageStatus ][ 2 ], vehicleVariables[ slot ][ playerid ][ VehicleDamageStatus ][ 3 ] );
		format( vehicleVariables[ slot ][ playerid ][ VehicleDamage ], 128, "%d:%d:%d:%d", vehicleVariables[ slot ][ playerid ][ VehicleDamageStatus ][ 0 ], vehicleVariables[ slot ][ playerid ][ VehicleDamageStatus ][ 1 ], vehicleVariables[ slot ][ playerid ][ VehicleDamageStatus ][ 2 ], vehicleVariables[ slot ][ playerid ][ VehicleDamageStatus ][ 3 ] );

		GetVehicleHealth( vehicleVariables[ slot ][ playerid ][ Vehicle ], vehicleVariables[ slot ][ playerid ][ VehicleHealth ] );
		vehicleVariables[ slot ][ playerid ][ VehicleFuel ] = serverVariables[ VehicleGas ][ vehicleVariables[ slot ][ playerid ][ Vehicle ] ];

		gsQuery[ 0 ] = EOS;
		mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_personalvehicles` SET `vehicleOdometter` = %.2f, `vehicleFuel` = %.2f, `vehicleHealth` = %.2f, `vehicleDamage` = '%s' WHERE `vehicleID` = %d", vehicleVariables[ slot ][ playerid ][ VehicleOdometter ], vehicleVariables[ slot ][ playerid ][ VehicleFuel ], vehicleVariables[ slot ][ playerid ][ VehicleHealth ], vehicleVariables[ slot ][ playerid ][ VehicleDamage ], vehicleVariables[ slot ][ playerid ][ VehicleID ] );
		mysql_tquery( g_Handle, gsQuery, "", "" );
		//vehicleVariables[ slot ][ playerid ][ VehiclePaintJobs ] = -1;
		vehicleVariables[ slot ][ playerid ][ VehicleID ] = 0;
		//vehicleVariables[ slot ][ playerid ][ VehicleLocked ] = 0;
		vehicleVariables[ slot ][ playerid ][ VehicleTimer ] = 0;
		DestroyVehicle_( vehicleVariables[ slot ][ playerid ][ Vehicle ] ), vehicleVariables[ slot ][ playerid ][ Vehicle ] = INVALID_VEHICLE_ID;

		// < Check for VIP Text )
		DestroyVehicle_Text( playerid, slot );
		DestroyVehicle_Neon( playerid, slot );
	}
	return true;
}
stock ResetPersonalVehicleVars( PlayerSlot, playerid )
{
	// < Reset Cars Variables >
	vehicleVariables[ PlayerSlot ][ playerid ][ VehicleID ]			= 0;
	vehicleVariables[ PlayerSlot ][ playerid ][ VehicleStatus ]		= 0;
	vehicleVariables[ PlayerSlot ][ playerid ][ VehicleModelID ] 	= 0;
	vehicleVariables[ PlayerSlot ][ playerid ][ VehicleOwner ] 		= 0;
	vehicleVariables[ PlayerSlot ][ playerid ][ VehicleColor ][ 0 ] = -1;
	vehicleVariables[ PlayerSlot ][ playerid ][ VehicleColor ][ 1 ] = -1;
	vehicleVariables[ PlayerSlot ][ playerid ][ VehicleOdometter ] 	= 0;
	vehicleVariables[ PlayerSlot ][ playerid ][ VehicleLocked ] 	= 0;
	vehicleVariables[ PlayerSlot ][ playerid ][ Position ][ 0 ] 	= 0;
	vehicleVariables[ PlayerSlot ][ playerid ][ Position ][ 1 ] 	= 0;
	vehicleVariables[ PlayerSlot ][ playerid ][ Position ][ 2 ] 	= 0;
	vehicleVariables[ PlayerSlot ][ playerid ][ Rotation ] 			= 0;
	vehicleVariables[ PlayerSlot ][ playerid ][ VehicleLocked ] 	= 0;
}
stock LoadPlayerDataBase( playerid )
{
	// < Define strings >
	new Login_Field[ 128 ], Rows, Fields;// LastOnline[ 56 ], RegisterDate[ 56 ];
	cache_get_data( Rows, Fields, g_Handle );

	#if defined DEBUG_SERVER
		new countDEBUG = GetTickCount();
		print( "[LoadPlayerDataBase] Function has started to load..." );
	#endif

	for( new i = 0; i < Rows; i++ )
	{
		// < Load Next variables >
		playerVariables[ playerid ][ pLogged ] 				= true;
		playerVariables[ playerid ][ pKey ] 				= cache_get_field_content_int( i, "id", g_Handle );
		playerVariables[ playerid ][ pSex ]          		= cache_get_field_content_int( i, "playerSex", g_Handle );
		playerVariables[ playerid ][ pSkin ]          		= cache_get_field_content_int( i, "playerSkin", g_Handle );
		playerVariables[ playerid ][ pFirstSpawn ]          = cache_get_field_content_int( i, "playerFirstSpawn", g_Handle );
		playerVariables[ playerid ][ pSpawnChoose ]         = cache_get_field_content_int( i, "playerSpawnChoose", g_Handle );
		playerVariables[ playerid ][ pLevel ]             	= cache_get_field_content_int( i, "playerLevel", g_Handle );
		playerVariables[ playerid ][ pBonusTaken ]			= cache_get_field_content_int( i, "playerBonusTaken", g_Handle );
		// < Paintball >	    
		playerVariables[ playerid ][ pPaintball ]           = cache_get_field_content_int( i, "playerPaintball", g_Handle );
		playerVariables[ playerid ][ pPaintKills ]      	= cache_get_field_content_int( i, "playerPaintballKills", g_Handle );
		playerVariables[ playerid ][ pPaintDeaths ]     	= cache_get_field_content_int( i, "playerPaintballDeaths", g_Handle );
		// < Pet >
		#if defined PET
		playerVariables[ playerid ][ pPet ]           		= cache_get_field_content_int( i, "playerPet", g_Handle );
		playerVariables[ playerid ][ pPetStatus ]          	= cache_get_field_content_int( i, "playerPetStatus", g_Handle );
		playerVariables[ playerid ][ pPetLevel ]           	= cache_get_field_content_int( i, "playerPetLevel", g_Handle );
		playerVariables[ playerid ][ pPetID ]           	= cache_get_field_content_int( i, "playerPetID", g_Handle );
		playerVariables[ playerid ][ pPetPoints ]           = cache_get_field_content_int( i, "playerPetPoints", g_Handle );
		#endif
		// < Others >
		playerVariables[ playerid ][ pCity ]             	= cache_get_field_content_int( i, "playerCity", g_Handle );
		playerVariables[ playerid ][ pDrugs ]             	= cache_get_field_content_int( i, "playerDrugs", g_Handle );
		playerVariables[ playerid ][ pHelper ]             	= cache_get_field_content_int( i, "playerHelper", g_Handle );
		playerVariables[ playerid ][ pHelperTokens ]        = cache_get_field_content_int( i, "playerHelperTokens", g_Handle );
		playerVariables[ playerid ][ pHelpedPlayers ]       = cache_get_field_content_int( i, "playerHelpedPlayers", g_Handle );
		playerVariables[ playerid ][ pAdminReports ] 		= cache_get_field_content_int( i, "playerAdminReports", g_Handle );
		playerVariables[ playerid ][ pRP ]             		= cache_get_field_content_int( i, "playerRP", g_Handle );
		playerVariables[ playerid ][ pPayday ]             	= cache_get_field_content_int( i, "playerPayday", g_Handle );
		playerVariables[ playerid ][ pAdminLevel ]          = cache_get_field_content_int( i, "playerAdminLevel", g_Handle );
		playerVariables[ playerid ][ pManager ]          	= cache_get_field_content_int( i, "playerManager", g_Handle );
		playerVariables[ playerid ][ pFaction ]          	= cache_get_field_content_int( i, "playerFaction", g_Handle );
		playerVariables[ playerid ][ pFactionLeader ]       = cache_get_field_content_int( i, "playerFactionLeader", g_Handle );
		playerVariables[ playerid ][ pFactionRank ]         = cache_get_field_content_int( i, "playerFactionRank", g_Handle );
		playerVariables[ playerid ][ pFactionDays ]         = cache_get_field_content_int( i, "playerFactionDays", g_Handle );
		playerVariables[ playerid ][ pFW ]          		= cache_get_field_content_int( i, "playerFW", g_Handle );
		playerVariables[ playerid ][ pFP ]          		= cache_get_field_content_int( i, "playerFP", g_Handle );
		playerVariables[ playerid ][ pJob ]          		= cache_get_field_content_int( i, "playerJob", g_Handle );
		playerVariables[ playerid ][ pClan ]          		= cache_get_field_content_int( i, "playerClan", g_Handle );
		playerVariables[ playerid ][ pClanDays ]          	= cache_get_field_content_int( i, "playerClanDays", g_Handle );
		playerVariables[ playerid ][ pClanTag ]          	= cache_get_field_content_int( i, "playerClanTag", g_Handle );
		playerVariables[ playerid ][ pClanWarns ]          	= cache_get_field_content_int( i, "playerClanWarns", g_Handle );
		playerVariables[ playerid ][ pClanRank ]          	= cache_get_field_content_int( i, "playerClanRank", g_Handle );
		playerVariables[ playerid ][ pMoney ]          		= cache_get_field_content_int( i, "playerMoney", g_Handle );
		playerVariables[ playerid ][ pBankMoney ]          	= cache_get_field_content_int( i, "playerBankMoney", g_Handle );
		playerVariables[ playerid ][ pHouse ]          		= cache_get_field_content_int( i, "playerHouse", g_Handle );
		playerVariables[ playerid ][ pRentRoom ]          	= cache_get_field_content_int( i, "playerRent", g_Handle );
		playerVariables[ playerid ][ pBusiness ]            = cache_get_field_content_int( i, "playerBusiness", g_Handle );
		playerVariables[ playerid ][ pPhone ]          		= cache_get_field_content_int( i, "playerPhone", g_Handle );
		playerVariables[ playerid ][ pPhoneNumber ]			= cache_get_field_content_int( i, "playerPhoneNumber", g_Handle );
		playerVariables[ playerid ][ pPhoneCredit ]         = cache_get_field_content_int( i, "playerPhoneCredit", g_Handle );
		playerVariables[ playerid ][ pPhoneBook ]         	= cache_get_field_content_int( i, "playerPhoneBook", g_Handle );
		playerVariables[ playerid ][ pPlayTime ]            = cache_get_field_content_int( i, "playerPlayTime", g_Handle );
		playerVariables[ playerid ][ pAFKTime ]            	= cache_get_field_content_int( i, "playerAFKTime", g_Handle );
		playerVariables[ playerid ][ pGiftBoxTime ]         = cache_get_field_content_int( i, "playerGiftBoxTime", g_Handle );
		playerVariables[ playerid ][ pWarnings ]            = cache_get_field_content_int( i, "playerWarnings", g_Handle );
		playerVariables[ playerid ][ pWanted ]              = cache_get_field_content_int( i, "playerWanted", g_Handle );
		playerVariables[ playerid ][ pWantedTime ]          = cache_get_field_content_int( i, "playerWantedTime", g_Handle );
		playerVariables[ playerid ][ pPremiumPoints ]       = cache_get_field_content_int( i, "playerPremiumPoints", g_Handle );
		playerVariables[ playerid ][ pPremium ]       		= cache_get_field_content_int( i, "playerPremium", g_Handle );
		playerVariables[ playerid ][ pVIP ]       			= cache_get_field_content_int( i, "playerVIP", g_Handle );
		playerVariables[ playerid ][ pMaterials ]           = cache_get_field_content_int( i, "playerMaterials", g_Handle );
		playerVariables[ playerid ][ pFireworks ]           = cache_get_field_content_int( i, "playerFireworks", g_Handle );
		playerVariables[ playerid ][ pJobHype ]          	= cache_get_field_content_int( i, "playerJobBoost", g_Handle );
		playerVariables[ playerid ][ pRobPoints ]           = cache_get_field_content_int( i, "playerRobPoints", g_Handle );
		playerVariables[ playerid ][ pFreePoints ]          = cache_get_field_content_int( i, "playerFreePoints", g_Handle );
		playerVariables[ playerid ][ pRobs ]           		= cache_get_field_content_int( i, "playerRobs", g_Handle );
		playerVariables[ playerid ][ pCarLicense ] 			= cache_get_field_content_int( i, "playerCarLicense", g_Handle );
		playerVariables[ playerid ][ pGunLicense ] 			= cache_get_field_content_int( i, "playerGunLicense", g_Handle );
		playerVariables[ playerid ][ pFlyLicense ] 			= cache_get_field_content_int( i, "playerFlyLicense", g_Handle );
		playerVariables[ playerid ][ pBoatLicense ] 		= cache_get_field_content_int( i, "playerBoatLicense", g_Handle );
		playerVariables[ playerid ][ pArrests ] 			= cache_get_field_content_int( i, "playerArrests", g_Handle );
		playerVariables[ playerid ][ pBlocked ] 			= cache_get_field_content_int( i, "playerBlocked", g_Handle );
		playerVariables[playerid][pGamblingSkill]   	= cache_get_field_content_int( i, "GamblingSkill", g_Handle );
        playerVariables[playerid][pGamblingNextLevel]   = cache_get_field_content_int( i, "GamblingNextLevel", g_Handle );
		playerVariables[ playerid ][ pWTalkie ]				= cache_get_field_content_int( i, "playerWTalkie", g_Handle );
		playerVariables[ playerid ][ pHiddenColors ]		= cache_get_field_content_int( i, "playerHiddens", g_Handle );
		playerVariables[ playerid ][ pFactionLW ]			= cache_get_field_content_int( i, "playerFactionLW", g_Handle );
		playerVariables[ playerid ][ pNotifications ]		= cache_get_field_content_int( i, "playerMail", g_Handle );
		playerVariables[ playerid ][ pGasCan ]				= cache_get_field_content_int( i, "playerGasCan", g_Handle );
		playerVariables[ playerid ][ pSpawnType ]			= cache_get_field_content_int( i, "playerSpawnType", g_Handle );
		playerVariables[ playerid ][ pYoutuber ]			= cache_get_field_content_int( i, "playerYoutuber", g_Handle );
		playerVariables[ playerid ][ pReferral ]			= cache_get_field_content_int( i, "playerReferralKey", g_Handle );
		playerVariables[ playerid ][ pReferralString ]		= cache_get_field_content_int( i, "playerReferral", g_Handle );
		playerVariables[ playerid ][ pPremiumColor ]		= cache_get_field_content_int( i, "playerPColor", g_Handle );
		playerVariables[ playerid ][ pHat ]             	= cache_get_field_content_int( i, "playerHat", g_Handle );
		playerVariables[ playerid ][ pGlasses ]             = cache_get_field_content_int( i, "playerGlasses", g_Handle );
		playerVariables[ playerid ][ pPINStatus ]           = cache_get_field_content_int( i, "playerPINStatus", g_Handle );
		playerVariables[ playerid ][ pRentAP ]              = cache_get_field_content_int( i, "playerApartment", g_Handle );
		playerVariables[ playerid ][ pWTalkieFRQ ]          = cache_get_field_content_int( i, "playerWalkie", g_Handle );
		playerVariables[ playerid ][ pWTalkieStatus ]       = cache_get_field_content_int( i, "playerWalkieStatus", g_Handle );
		playerVariables[ playerid ][ pAdminColor ]          = cache_get_field_content_int( i, "playerAColor", g_Handle );
		playerVariables[ playerid ][ pHelperColor ]         = cache_get_field_content_int( i, "playerHColor", g_Handle );

		playerVariables[ playerid ][ pFactionRunners ]			= cache_get_field_content_int( i, "playerRunners", g_Handle );
		playerVariables[ playerid ][ pFactionTickets ]			= cache_get_field_content_int( i, "playerTickets", g_Handle );
		playerVariables[ playerid ][ pFactionDrugs ]			= cache_get_field_content_int( i, "playerConfiscateDrugs", g_Handle );
		playerVariables[ playerid ][ pFactionLicenses ] 		= cache_get_field_content_int( i, "playerConfiscateLicenses", g_Handle );
		playerVariables[ playerid ][ pFactionDepositedMoney ]	= cache_get_field_content_int( i, "playerDeposited", g_Handle );

		playerVariables[ playerid ][ pFactionLicensesGiven ]	= cache_get_field_content_int( i, "playerGivenLicenses", g_Handle );
		playerVariables[ playerid ][ pFactionOrders ]			= cache_get_field_content_int( i, "playerOrders", g_Handle );
		playerVariables[ playerid ][ pFactionPatients ]			= cache_get_field_content_int( i, "playerPatientsHealed", g_Handle );
		playerVariables[ playerid ][ pFactionContracts ]		= cache_get_field_content_int( i, "playerContracts", g_Handle );

		playerVariables[ playerid ][ pFactionLives ]			= cache_get_field_content_int( i, "playerLives", g_Handle );
		playerVariables[ playerid ][ pFactionNews ]				= cache_get_field_content_int( i, "playerNews", g_Handle );
		playerVariables[ playerid ][ pFactionFreeNews ]			= cache_get_field_content_int( i, "playerFreeNews", g_Handle );
		playerVariables[ playerid ][ pFactionNewsSessions ]		= cache_get_field_content_int( i, "playerNewsSessions", g_Handle );
		playerVariables[ playerid ][ pFactionMatsUsed ]			= cache_get_field_content_int( i, "playerMaterialsUsed", g_Handle );
		playerVariables[ playerid ][ pFactionDepositedDrugs ]	= cache_get_field_content_int( i, "playerDepositedDrugs", g_Handle );
		playerVariables[ playerid ][ pFactionDepositedMats ]	= cache_get_field_content_int( i, "playerDepositedMats", g_Handle );

		cache_get_field_content(i, "username", playerVariables[ playerid ][ pNormalName ], g_Handle, 130);

		//format(playerVariables[ playerid ][ pNormalName ], MAX_PLAYER_NAME, username(playerid));

		#if defined CRATES
		playerVariables[ playerid ][ pCrates ]          = cache_get_field_content_int( i, "playerCrates", g_Handle );
		#endif

		#if defined PET
		cache_get_field_content( i, "playerPetName", playerVariables[ playerid ][ pPetName ], g_Handle, 32 );
		gsQuery[ 0 ] = EOS;
		cache_get_field_content( i, "playerPetType", gsQuery, g_Handle, 32 );
		sscanf( gsQuery, "p<:>ddddd", playerVariables[ playerid ][ pPetType ][ 0 ], playerVariables[ playerid ][ pPetType ][ 1 ], playerVariables[ playerid ][ pPetType ][ 2 ], 
			playerVariables[ playerid ][ pPetType ][ 3 ], playerVariables[ playerid ][ pPetType ][ 4 ]);
		#endif

		// < Player punishes )
		playerVariables[ playerid ][ pMuted ]               	= cache_get_field_content_int( i, "playerMute", g_Handle );
		playerVariables[ playerid ][ pPrisonTime ]          	= cache_get_field_content_int( i, "playerJail", g_Handle );
		playerVariables[ playerid ][ pVSlots ] 					= cache_get_field_content_int( i, "playerSlots", g_Handle );

		if( playerVariables[ playerid ][ pLevel ] != 0 )
		    SetPlayerScore( playerid, playerVariables[ playerid ][ pLevel ] );

		if( playerVariables[ playerid ][ pKey ] != 0 ) 
			playerKeys[ playerVariables[ playerid ][ pKey ]] = playerid;

		new jobID = playerVariables[playerid][pJob];
		if(jobID > 0 && jobID != 10) Iter_Add(playerJobs[ jobID ], playerid);
		else if(jobID == 10) mechanics++;

        new houseID = playerVariables[ playerid ][ pRentRoom ];
		if(houseID != 0) Iter_Add(playerRenters[houseID], playerid);

		if(playerVariables[ playerid ][ pWTalkieFRQ ] != 0) Iter_Add(playerFreq[playerVariables[ playerid ][ pWTalkieFRQ ]], playerid);

		// < Check player spawn type )
		if( playerVariables[ playerid ][ pSpawnType ] == 1 && !playerVariables[ playerid ][ pFaction ] )
			playerVariables[ playerid ][ pSpawnType ] = 0;

		#if defined OBJECT_QUEST
			// < Load player's quest objects )
			playerVariables[ playerid ][ pQuestObjects ] = EOS;

			cache_get_field_content( i, "playerQuestObjects", playerVariables[ playerid ][ pQuestObjects ], g_Handle, 128 );
			sscanf( playerVariables[ playerid ][ pQuestObjects ], "p<:>ddddddddddddddddddddddddddddddddddd",
				playerVariables[ playerid ][ pQuestObject ][ 1 ], playerVariables[ playerid ][ pQuestObject ][ 2 ], playerVariables[ playerid ][ pQuestObject ][ 3 ],
				playerVariables[ playerid ][ pQuestObject ][ 4 ], playerVariables[ playerid ][ pQuestObject ][ 5 ], playerVariables[ playerid ][ pQuestObject ][ 6 ], playerVariables[ playerid ][ pQuestObject ][ 7 ],
				playerVariables[ playerid ][ pQuestObject ][ 8 ], playerVariables[ playerid ][ pQuestObject ][ 9 ], playerVariables[ playerid ][ pQuestObject ][ 10 ], playerVariables[ playerid ][ pQuestObject ][ 11 ],
				playerVariables[ playerid ][ pQuestObject ][ 12 ], playerVariables[ playerid ][ pQuestObject ][ 13 ], playerVariables[ playerid ][ pQuestObject ][ 14 ], playerVariables[ playerid ][ pQuestObject ][ 15 ],
				playerVariables[ playerid ][ pQuestObject ][ 16 ], playerVariables[ playerid ][ pQuestObject ][ 17 ], playerVariables[ playerid ][ pQuestObject ][ 18 ], playerVariables[ playerid ][ pQuestObject ][ 19 ],
				playerVariables[ playerid ][ pQuestObject ][ 20 ], playerVariables[ playerid ][ pQuestObject ][ 21 ], playerVariables[ playerid ][ pQuestObject ][ 22 ], playerVariables[ playerid ][ pQuestObject ][ 23 ],
				playerVariables[ playerid ][ pQuestObject ][ 24 ], playerVariables[ playerid ][ pQuestObject ][ 25 ], playerVariables[ playerid ][ pQuestObject ][ 26 ], playerVariables[ playerid ][ pQuestObject ][ 27 ],
				playerVariables[ playerid ][ pQuestObject ][ 28 ], playerVariables[ playerid ][ pQuestObject ][ 29 ], playerVariables[ playerid ][ pQuestObject ][ 30 ], playerVariables[ playerid ][ pQuestObject ][ 31 ],
				playerVariables[ playerid ][ pQuestObject ][ 32 ], playerVariables[ playerid ][ pQuestObject ][ 33 ], playerVariables[ playerid ][ pQuestObject ][ 34 ], playerVariables[ playerid ][ pQuestObject ][ 35 ] );
		#endif

		cache_get_field_content( i, "playerCrimeReason", playerVariables[ playerid ][ pCrimeReason ], g_Handle, 128 );
		cache_get_field_content( i, "username", playerVariables[ playerid ][ pNormalName ], g_Handle, 32 );
		cache_get_field_content( i, "playerAddress", playerVariables[ playerid ][ pAddress ], g_Handle, 64 );
		cache_get_field_content( i, "playerSerial", playerVariables[ playerid ][ pSerial ], g_Handle, 64 );
		cache_get_field_content( i, "email", playerVariables[ playerid ][ pEMail ], g_Handle, 32 );
		cache_get_field_content( i, "playerPIN", playerVariables[ playerid ][ pPIN ], g_Handle, 129 );
	
		// < Show friend list message )
		//SendClientMessagef( ID, COLOR_YELLOW, "{FFC266}** {FFFF00}Prietenul tau, %s s-a logat pe server. {FFC266}**", playerVariables[ playerid ][ pNormalName ] );

		if( playerVariables[ playerid ][ pPremium ] > 0 )
		{
			switch( playerVariables[ playerid ][ pPremium ])
			{
				case 1: Iter_Add(premiumPlayers[ playerVariables[ playerid ][ pPremium ] ], playerid), SendClientMessage( playerid, COLOR_WHITE, "You are a Premium user!");
				case 2: Iter_Add(premiumPlayers[ premium_p ], playerid), Iter_Add(premiumPlayers[ vip_p ], playerid), SendClientMessage(playerid, COLOR_WHITE, "You are a Vip user!");
			}
		}	

        PlayerTextDrawShow(playerid, PlayerText:CeasPTD);
		TextDrawShowForPlayer(playerid, Text:CeasTD);

		if(playerVariables[ playerid ][ pAdminLevel ] != 0) PlayerTextDrawShow(playerid, PlayerText:ticks_td);

		if(playerVariables[ playerid ][ pAdminLevel ] == 0 && playerVariables[ playerid ][ pHelper ] == 0) Iter_Add(normalPlayers, playerid);

		if(playerVariables[ playerid ][ pPhone ] != 0 && playerVariables[ playerid ][ pPhoneNumber ] != 0 )
			VECTOR_set_val( phone_numbers, playerVariables[ playerid ][ pPhoneNumber ], playerid + 1 );

		//if( playerVariables[ playerid ][ pNotifications ] )
		//SendClientMessagef( playerid, COLOR_YELLOW, "Ai %d emailuri noi! Foloseste /email pentru a le citi.", playerVariables[ playerid ][ pNotifications ] );

		// < Check if Blocked >
		switch( playerVariables[ playerid ][ pBlocked ] )
		{
			case 0:
			{
				new playerIP[ 8 ];
				sscanf( playerVariables[ playerid ][ pAddress ], "p<.>dddd", playerIP[ 0 ], playerIP[ 1 ], playerIP[ 2 ], playerIP[ 3 ] );
				sscanf( GetPlayerIPEx( playerid ), "p<.>dddd", playerIP[ 4 ], playerIP[ 5 ], playerIP[ 6 ], playerIP[ 7 ] );

				if( playerIP[ 0 ] != playerIP[ 4 ] && playerIP[ 1 ] != playerIP[ 5 ] && strcmp( playerVariables[ playerid ][ pSerial ], GetPlayerSerial( playerid ), true ) != 0 )
				{
					// < Another serial & IP )
					SendClientMessage( playerid, COLOR_ULTRARED, "Te-ai logat dintr-o locatie diferita decat locatia din care te loghezi de obicei." );
					SendClientMessage( playerid, COLOR_ULTRARED, "Contul tau este blocat temporar. Nu poti transfera bani unui alt player si nu poti vinde bunuri personale." );
					SendClientMessage( playerid, COLOR_ULTRARED, "Nu trebuie sa faci nimic pentru deblocarea contului. Contul tau va fi deblocat automat peste 72 ore." );
					SendClientMessage( playerid, COLOR_ULTRARED, "Timpul pana la deblocarea contului trece si daca nu esti online." );

					// < Update player )
					playerVariables[ playerid ][ pBlocked ] = 1;

					if( playerVariables[ playerid ][ pPINStatus ] != 0 )
						playerVariables[ playerid ][ pPINStatus ] = 2;

					gsQuery[ 0 ] = EOS;
					mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerBlocked` = 1, `playerBlockedTime` = UNIX_TIMESTAMP() + 3 * 86400, `playerSerial` = '%s', `playerAddress` = '%s' WHERE `id` = %d", GetPlayerSerial( playerid ), GetPlayerIPEx( playerid ), GetPlayerMysqlID(playerid) );
					mysql_tquery( g_Handle, gsQuery, "", "" );

					/*gsString[ 0 ] = EOS;
					format( gsString, sizeof gsString, "Someone logged in from the IP: %s and another computer/location! We blocked your account for security reasons!", GetPlayerIPEx( playerid ) );
					SendMail( playerVariables[ playerid ][ pEMail ], "noreply@LURK.ro", "LURK Roleplay - Server Support", "Welcome to Best-Gaming Roleplay", gsString );*/
				}
				else
				{
					// < Update player region )
					gsQuery[ 0 ] = EOS;
					mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerSerial` = '%s', `playerAddress` = '%s' WHERE `id` = %d", GetPlayerSerial( playerid ), GetPlayerIPEx( playerid ), GetPlayerMysqlID(playerid) );
					mysql_tquery( g_Handle, gsQuery, "", "" );
				}
			}
			case 1:
			{
				if( cache_get_field_content_int( i, "playerBlockedTime", g_Handle ) < gettime() )
				{
					SendClientMessage( playerid, COLOR_YELLOW, "Your account has been unblocked! The time has expired, take care next time!" );
					playerVariables[ playerid ][ pBlocked ] = 0;

					if( playerVariables[ playerid ][ pPINStatus ] != 0 )
						playerVariables[ playerid ][ pPINStatus ] = 1;

					mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerBlocked` = 0, `playerBlockedTime` = 0, `playerSerial` = '%s', `playerAddress` = '%s' WHERE `id` = %d", GetPlayerSerial( playerid ), GetPlayerIPEx( playerid ), GetPlayerMysqlID(playerid) );
					mysql_tquery( g_Handle, gsQuery, "", "" );
				}
				else
				{
					// < Another location )
					SendClientMessage( playerid, COLOR_ULTRARED, "Contul tau este blocat temporar. Nu poti transfera bani unui alt player si nu poti vinde bunuri personale." );
					SendClientMessagef( playerid, COLOR_ULTRARED, "Nu trebuie sa faci nimic pentru deblocarea contului. Contul tau va fi deblocat automat peste %s.", timec(cache_get_field_content_int( i, "playerBlockedTime", g_Handle )) );
					SendClientMessage( playerid, COLOR_ULTRARED, "Timpul pana la deblocarea contului trece si daca nu esti online." );
				}
			}
		}
		// < Update player status )
		gsQuery[ 0 ] = EOS;
		mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerStatus` = 1, `playerConnected` = 1 WHERE `id` = %d", GetPlayerMysqlID(playerid) );
		mysql_tquery( g_Handle, gsQuery, "", "" );

		// < count unread messages >
		gsQuery[ 0 ] = EOS;
		mysql_format( g_Handle, gsQuery, sizeof gsQuery, "SELECT `emailKey` FROM `server_emails` WHERE `playerKey` = %d AND `emailRead` = 0", GetPlayerMysqlID(playerid) );
		mysql_tquery( g_Handle, gsQuery, "CheckNewMails", "i", playerid );

		// < Set Player Wanted back )
		if( playerVariables[ playerid ][ pWanted ] > 0 )
		{
			SetPlayerWantedLevel( playerid, playerVariables[ playerid ][ pWanted ] );
			UpdateScadeWanted( playerid, playerVariables[ playerid ][ pWantedTime ] );
			Iter_Add(server_wanteds, playerid);
			server_wanteds++;
		}
		// < Show faction message )
		new FactionID = playerVariables[ playerid ][ pFaction ];

		if( FactionID != 0)
		{	
	        switch( FactionID )
			{
				case 1, 2: Iter_Add(Departments, playerid), Iter_Add(playerFaction[FactionID], playerid);
				case 4: Iter_Add(server_instructors, playerid), server_instructors++, Iter_Add(playerFaction[FactionID], playerid);
				case 5: Iter_Add(server_reporters, playerid), server_reporters++, Iter_Add(playerFaction[FactionID], playerid);
				default: Iter_Add(playerFaction[FactionID], playerid);
			}
			gsString[ 0 ] = EOS;
			format( gsString, sizeof gsString, "(Faction) "COL_W"%s from your faction has just logged in.", playerVariables[ playerid ][ pNormalName ] );
			SendToFaction( FactionID, COLOR_GENANNOUNCE, gsString );
			SendClientMessagef( playerid, COLOR_GENANNOUNCE, "(Faction) MOTD: "COL_W"%s", GetGVarStringEx( "faction_MOTD", FactionID ) );
		}	
		if( playerVariables[ playerid ][ pFactionRank ] == 7 ) Iter_Add( server_leaders, playerid ), server_leaders++;
		if( playerVariables[ playerid ][ pAdminLevel ] != 0) Iter_Add( server_leaders, playerid);

		// < Set player Clan Tag )
		SetPlayerName( playerid, playerVariables[ playerid ][ pNormalName ] );
		new clanID = playerVariables[ playerid ][ pClan ];
		if(clanID != 0) Iter_Add(playerClans[clanID], playerid); 

		if( clanID != 0 )
		{
			gsString[ 0 ] = EOS;
			format( gsString, sizeof gsString, "{%s}[Clan Info] "COL_W"%s from your clan has just logged in.", GetGVarStringEx( "clan_Color", clanID ), playerVariables[ playerid ][ pNormalName ] );
			SendToClan( clanID, COLOR_GREY, gsString );
			SendClientMessagef( playerid, COLOR_GENANNOUNCE, "{%s}[Clan Info] MOTD: "COL_W"%s", GetGVarStringEx( "clan_Color", clanID ), GetGVarStringEx( "clan_MOTD", clanID ) );
		
            
            if( playerVariables[ playerid ][ pClanTag ] > 0 )
            {	
	            switch( playerVariables[ playerid ][ pClanTag ] )
				{
					case 1:
					{
						gsString[ 0 ] = EOS;
						format( gsString, sizeof gsString, "%s%s", GetGVarStringEx( "clan_Tag", clanID ), playerVariables[ playerid ][ pNormalName ] );
						SetPlayerName( playerid, gsString );
					}
					case 2:
					{
						gsString[ 0 ] = EOS;
						format( gsString, sizeof gsString, "%s%s", playerVariables[ playerid ][ pNormalName ], GetGVarStringEx( "clan_Tag", clanID ) );
						SetPlayerName( playerid, gsString );
					}
				}
			}	
		}
		// < Load Job Skills )
		gsQuery[ 0 ] = EOS;
		cache_get_field_content( i, "playerJobSkill", gsQuery, g_Handle, 256 );
		sscanf( gsQuery, "p<:>iiiiiiiiiiiiii", playerVariables[ playerid ][ jSkillPoints ][ 1 ],
									playerVariables[ playerid ][ jSkillPoints ][ 2 ],
									playerVariables[ playerid ][ jSkillPoints ][ 3 ],
									playerVariables[ playerid ][ jSkillPoints ][ 4 ],
									playerVariables[ playerid ][ jSkillPoints ][ 5 ],
									playerVariables[ playerid ][ jSkillPoints ][ 6 ],
									playerVariables[ playerid ][ jSkillPoints ][ 7 ],
									playerVariables[ playerid ][ jSkillPoints ][ 8 ],
									playerVariables[ playerid ][ jSkillPoints ][ 9 ],
									playerVariables[ playerid ][ jSkillPoints ][ 10 ],
									playerVariables[ playerid ][ jSkillPoints ][ 11 ],
									playerVariables[ playerid ][ jSkillPoints ][ 12 ],
									playerVariables[ playerid ][ jSkillPoints ][ 13 ],
									playerVariables[ playerid ][ jSkillPoints ][ 14 ] );

		gsQuery[ 0 ] = EOS;
		cache_get_field_content( i, "playerHuds", gsQuery, g_Handle, 16 );
		sscanf( gsQuery, "p<:>iiiiiiiii", playerVariables[ playerid ][ pHud ][ 0 ],
									playerVariables[ playerid ][ pHud ][ 1 ],
									playerVariables[ playerid ][ pHud ][ 2 ],
									playerVariables[ playerid ][ pHud ][ 3 ],
									playerVariables[ playerid ][ pHud ][ 4 ],
									playerVariables[ playerid ][ pHud ][ 5 ],
									playerVariables[ playerid ][ pHud ][ 6 ],
									playerVariables[ playerid ][ pHud ][ 7 ],
									playerVariables[ playerid ][ pHud ][ 8 ],
									playerVariables[ playerid ][ pHud ][ 9 ] );
 
        gsQuery[ 0 ] = EOS;
		cache_get_field_content( i, "playerTogs", gsQuery, g_Handle, 16 );
		sscanf( gsQuery, "p<:>iiiiiiiii", playerVariables[ playerid ][ pTog ][ 0 ],
									playerVariables[ playerid ][ pTog ][ 1 ],
									playerVariables[ playerid ][ pTog ][ 2 ],
									playerVariables[ playerid ][ pTog ][ 3 ],
									playerVariables[ playerid ][ pTog ][ 4 ],
									playerVariables[ playerid ][ pTog ][ 5 ],
									playerVariables[ playerid ][ pTog ][ 6 ],
									playerVariables[ playerid ][ pTog ][ 7 ],
									playerVariables[ playerid ][ pTog ][ 8 ],
									playerVariables[ playerid ][ pTog ][ 9 ] );
		#if defined HEIST_SYSTEM
			gsQuery[ 0 ] = EOS;
			cache_get_field_content( i, "playerHeists", gsQuery, g_Handle, 16 );
			sscanf( gsQuery, "p<:>iiiii", playerVariables[ playerid ][ pHeist ][ 0 ], playerVariables[ playerid ][ pHeist ][ 1 ], playerVariables[ playerid ][ pHeist ][ 2 ], playerVariables[ playerid ][ pHeist ][ 3 ], playerVariables[ playerid ][ pHeist ][ 4 ] );
		#endif

		#if defined CRATES
			gsQuery[ 0 ] = EOS;
			cache_get_field_content( i, "playerCrateSkins", gsQuery, g_Handle, 50 );
			sscanf( gsQuery, "p<:>iiiiiiiiii", playerVariables[ playerid ][ pCrateSkins ][ 0 ], playerVariables[ playerid ][ pCrateSkins ][ 1 ], playerVariables[ playerid ][ pCrateSkins ][ 2 ], playerVariables[ playerid ][ pCrateSkins ][ 3 ], playerVariables[ playerid ][ pCrateSkins ][ 4 ], 
												playerVariables[ playerid ][ pCrateSkins ][ 5 ], playerVariables[ playerid ][ pCrateSkins ][ 6 ], playerVariables[ playerid ][ pCrateSkins ][ 7 ], playerVariables[ playerid ][ pCrateSkins ][ 8 ], playerVariables[ playerid ][ pCrateSkins ][ 9 ] );
			
			gsQuery[ 0 ] = EOS;
			cache_get_field_content( i, "playerCrateSkinAmount", gsQuery, g_Handle, 50 );
			sscanf( gsQuery, "p<:>iiiiiiiiii", playerVariables[ playerid ][ pCrateSkinAmount ][ 0 ], playerVariables[ playerid ][ pCrateSkinAmount ][ 1 ], playerVariables[ playerid ][ pCrateSkinAmount ][ 2 ], playerVariables[ playerid ][ pCrateSkinAmount ][ 3 ], playerVariables[ playerid ][ pCrateSkinAmount ][ 4 ], 
												playerVariables[ playerid ][ pCrateSkinAmount ][ 5 ], playerVariables[ playerid ][ pCrateSkinAmount ][ 6 ], playerVariables[ playerid ][ pCrateSkinAmount ][ 7 ], playerVariables[ playerid ][ pCrateSkinAmount ][ 8 ], playerVariables[ playerid ][ pCrateSkinAmount ][ 9 ] );
		#endif
		if( playerVariables[ playerid ][ pManager ] != 0) Iter_Add( server_managers, playerid ), server_managers++;
		if( playerVariables[ playerid ][ pAdminLevel ] != 0) Iter_Add( server_admins, playerid ), server_admins++;
		if( playerVariables[ playerid ][ pHelper ] != 0) Iter_Add(server_helpers, playerid ), server_helpers++;

		// < Info Hello Bot )
		if( playerVariables[ playerid ][ pAdminLevel ] != 0 || playerVariables[ playerid ][ pHelper ] != 0 )
		{
			gsString[ 0 ] = EOS;
			Iter_Add( Staff, playerid );
			format( gsString, 256, "(B) HelloBot: %s[%d] has just logged in.", playerVariables[ playerid ][ pNormalName ], playerid );
			submitToHelpersAndAdmins( gsString, 0xCC8E33C8 );
		}
		// < Load the Quest System)
		if( gettime() - cache_get_field_content_int( i, "playerQuestTime", g_Handle ) >= 86400 ) // Check 1 Day
		{
			GeneratePlayerQuests( playerid );
		}
		else
		{
			// < Load Player Quests )
			Login_Field[ 0 ] = EOS;
			cache_get_field_content( i, "playerQuest", Login_Field, g_Handle, 32 );
			sscanf( Login_Field, "p<:>dd", playerVariables[ playerid ][ pQuest ][ 0 ], playerVariables[ playerid ][ pQuest ][ 1 ] );

			Login_Field[ 0 ] = EOS;
			cache_get_field_content( i, "playerQuestValue", Login_Field, g_Handle, 32 );
			sscanf( Login_Field, "p<:>dd", playerVariables[ playerid ][ pQuestValue ][ 0 ], playerVariables[ playerid ][ pQuestValue ][ 1 ] );

			Login_Field[ 0 ] = EOS;
			cache_get_field_content( i, "playerQuestProgress", Login_Field, g_Handle, 32 );
			sscanf( Login_Field, "p<:>dd", playerVariables[ playerid ][ pQuestProgress ][ 0 ], playerVariables[ playerid ][ pQuestProgress ][ 1 ] );
		}
		if( cache_get_field_content_int( i, "playerBonusMoney", g_Handle ) != 0 )
		{
			new bonusReferral[ 2 ];
			bonusReferral[ 0 ] = cache_get_field_content_int( i, "playerBonusRP", g_Handle );
			bonusReferral[ 1 ] = cache_get_field_content_int( i, "playerBonusMoney", g_Handle );
			playerVariables[ playerid ][ pRP ] += bonusReferral[ 0 ];
			playerVariables[ playerid ][ pMoney ] += bonusReferral[ 1 ];
			SendClientMessagef( playerid, COLOR_LIGHTGREEN, "REFERRAL SYSTEM: "COL_W"You have earned $%s and %d Respect Points from your bonus!", FormatNumber( bonusReferral[ 1 ] ), bonusReferral[ 0 ] );

			gsQuery[ 0 ] = EOS;
			mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerBonusMoney` = 0, `playerBonusRP` = 0, `playerCollectMoney` = `playerCollectMoney` + %d, `playerCollectRP` = `playerCollectRP` + %d WHERE `id` = %d",
				bonusReferral[ 1 ], bonusReferral[ 0 ], GetPlayerMysqlID(playerid) );
			mysql_tquery( g_Handle, gsQuery, "", "" );
		}
		// < Stop the stream & show the text )
		StopAudioStreamForPlayer( playerid ); // Stop the audio stream
		//InfoTD_MSG( playerid, 5000, "Bine ai revenit pe server, ~r~~h~~h~%s~w~~h~!", playerVariables[ playerid ][ pNormalName ] );

		if( playerVariables[ playerid ][ pAdminLevel ] >= 6 ) SetPVarString( playerid, "PEventPrize", "unset" );

		// < Spawn Player )
		#if defined DEBUG_SERVER
			printf( "[DEBUG] Time taken to execute LoadPlayerDataBase: [%d] miliseconds", GetTickCount() - countDEBUG );
		#endif
		TogglePlayerSpectating( playerid, false );
		SpawnPlayerTimer( playerid );
	}
	return true;
}
SQL_Function CheckNewMails( playerid )
{
	if( !IsPlayerConnected( playerid ) )
		return true;

	new Rows, Fields;
	cache_get_data( Rows, Fields, g_Handle );

	if( Rows )
		SendClientMessagef( playerid, COLOR_YELLOW, "You have >> %d << new messages on your account, use /email to read them!", Rows );

	return true;
}
SQL_Function Load_Friend( playerid, friendID )
{
	new Rows, Fields;
	cache_get_data( Rows, Fields, g_Handle );

	if( Rows )
		return SendClientMessagef( playerid, -1, "Jucatorul: %s este deja in lista ta de prieteni.", username( friendID ) );

    SendClientMessage( playerid, COLOR_YELLOW, "Friend has been added to your list!" );
	SendClientMessagef( friendID, COLOR_YELLOW, "%s has added you to his friends list!", username( playerid ) );

	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "INSERT INTO `server_friends` (`friendsPlayer`, `friendsFriendID`, `friendsFriendName`) VALUES (%d, %d, '%s')", GetPlayerMysqlID(playerid), GetPlayerMysqlID(friendID), playerVariables[ friendID ][ pNormalName ] );
	mysql_tquery( g_Handle, gsQuery, "", "" );
	return callcmd::friends( playerid, "lol" );
}
SQL_Function Check_Word( playerid, text[], type )
{
	new Rows, Fields;
	cache_get_data( Rows, Fields, g_Handle );

	switch( type )
	{
		case type_add:
		{
			if( Rows )
				return SendClientMessage(playerid, -1, "Acest cuvant exista deja!");

			SendClientMessagef( playerid, COLOR_LIGHTRED, "AdmWarn: ai adaugat cuvantul interzis: '%s'", text );
			serverVariables[ forbidWordsCount ]++;
			gsQuery[ 0 ] = EOS;
			mysql_format( g_Handle, gsQuery, sizeof gsQuery, "INSERT INTO `server_words` (`wordText`, `wordAdmin`) VALUES ('%s', %d)", text, GetPlayerMysqlID(playerid) );
			mysql_tquery( g_Handle, gsQuery, "", "" );
		}
		case type_remove:
		{
			if( !Rows )
				return SendClientMessage(playerid, -1, "Acest cuvant nu exista!");
			
			serverVariables[ forbidWordsCount ]--;
		    SendClientMessagef( playerid, COLOR_LIGHTRED, "AdmWarn: ai sters cuvantul interzis: '%s'", text );
			gsQuery[ 0 ] = EOS;
			mysql_format( g_Handle, gsQuery, sizeof gsQuery, "DELETE FROM `server_words` WHERE `wordText` = '%s' ", text);
			mysql_tquery( g_Handle, gsQuery, "", "");
		}
	}
	return true;
}	
SQL_Function ChangeName( playerid, newName[] )
{
	if( !IsPlayerConnected( playerid ) )
		return true;

	new Rows, Fields;
	cache_get_data( Rows, Fields, g_Handle );

	if( Rows )
		return SendClientMessagef( playerid, COLOR_LIGHTRED, "ERROR: "COL_W"Username '%s' este deja folosit de alt jucator!", newName );
	else	
	{
		switch( SetPlayerName( playerid, newName ) )
		{
			case -1: return SendClientMessagef( playerid, COLOR_LIGHTRED, "ERROR: "COL_W"Username '%s' este deja folosit de alt jucator activ!", newName );
			case 0: return SendClientMessagef( playerid, COLOR_LIGHTRED, "ERROR: "COL_W"Username '%s' este deja folosit de tine!", newName );
			case 1:
			{
				if( playerVariables[ playerid ][ pPremiumPoints ] < 15 )	
					return SendClientMessage( playerid, COLOR_GREY, "Trebuie sa ai 15 puncte premium!" );

				gsString[ 0 ] = EOS;
				format( gsString, sizeof gsString, "%s[user:%d] bought a new username: %s. [/shop]", playerVariables[ playerid ][ pNormalName ], GetPlayerMysqlID(playerid), newName );
				submitToAdmins(gsString, COLOR_YELLOW);
				InsertPlayerLog( GetPlayerMysqlID(playerid), 0, gsString );
				TakePlayerPremiumPoints( playerid, 15 );
				SendClientMessagef( playerid, COLOR_LIGHT_BID, "Ti-ai schimbat numele in '%s' pentru 15 PP, toate statisticile au fost transferate!", newName );

				gsQuery[ 0 ] = EOS;
				mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `username` = '%s' WHERE `id` = %d", newName, GetPlayerMysqlID(playerid) );
				mysql_tquery( g_Handle, gsQuery, "", "" );

				gsQuery[ 0 ] = EOS;
				mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_factionlog` SET `logPlayerName` = '%s' WHERE `logPlayerName` = '%s'", newName, playerVariables[ playerid ][ pNormalName ] );
				mysql_tquery( g_Handle, gsQuery, "", "" );

				gsQuery[ 0 ] = EOS;
				mysql_format( g_Handle, gsQuery, sizeof gsQuery, "INSERT INTO `server_logs_changename`(`logPlayerKey`, `logNameOld`, `logNameNew`) VALUES (%d, '%s', '%s')", GetPlayerMysqlID(playerid), playerVariables[ playerid ][ pNormalName ], newName );
				mysql_tquery( g_Handle, gsQuery, "", "" );

				if( playerVariables[ playerid ][ pBusiness ] != 0 )
				{
					gsQuery[ 0 ] = EOS;
					mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_business` SET `busOwner` = '%s' WHERE `busOwnerKey` = %d", newName, GetPlayerMysqlID(playerid) );
					mysql_tquery( g_Handle, gsQuery, "", "" );

					SetGVarString( "bus_Owner", newName, playerVariables[ playerid ][ pBusiness ] );
					UpdateBusinessText( playerVariables[ playerid ][ pBusiness ] );
				}
				if( playerVariables[ playerid ][ pHouse ] != 0 )
				{
					gsQuery[ 0 ] = EOS;
					mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_houses` SET `houseOwner` = '%s' WHERE `houseOwnerKey` = %d", newName, GetPlayerMysqlID(playerid) );
					mysql_tquery( g_Handle, gsQuery, "", "" );

					SetGVarString( "house_Owner", newName, playerVariables[ playerid ][ pHouse ] );
					UpdateHouseText( playerVariables[ playerid ][ pHouse ], 0 );
				}
				// < Update player's Name )
				playerVariables[ playerid ][ pNormalName ] = EOS;
				format( playerVariables[ playerid ][ pNormalName ], MAX_PLAYER_NAME, "%s", newName );

				gsString[ 0 ] = EOS;
				format( gsString, 64, "%s(%d) / "SERVER_LOGO"", username(playerid), playerid );
				PlayerTextDrawSetString( playerid, PlayerText:SERVER_TD[ 0 ] , gsString );
				//PlayerTextDrawShow( playerid, PlayerText:SERVER_TD[ 0 ] );

				if( playerVariables[ playerid ][ pClan ] != 0 )
				{
					switch( playerVariables[ playerid ][ pClanTag ] )
					{
						case 1:
						{
							gsString[ 0 ] = EOS;
							format( gsString, sizeof gsString, "%s%s", GetGVarStringEx( "clan_Tag", playerVariables[ playerid ][ pClan ] ), playerVariables[ playerid ][ pNormalName ] );
							SetPlayerName( playerid, gsString );
						}
						case 2:
						{
							gsString[ 0 ] = EOS;
							format( gsString, sizeof gsString, "%s%s", playerVariables[ playerid ][ pNormalName ], GetGVarStringEx( "clan_Tag", playerVariables[ playerid ][ pClan ] ) );
							SetPlayerName( playerid, gsString );
						}
					}
				}
			}
		}
	}
	return true;
}
SQL_Function ForceChangeName( playerid, newName[] )
{
	if( !IsPlayerConnected( playerid ) )
		return true;

	new Rows, Fields;
	cache_get_data( Rows, Fields, g_Handle );

	if( Rows )
	{
		SendClientMessagef( playerid, COLOR_LIGHTRED, "ERROR: "COL_W"Username '%s' este deja folosit de alt jucator!", newName );
		ShowPlayerDialog(playerid, DIALOG_FNC, DIALOG_STYLE_INPUT, "SERVER: Change Nickname", "You're forced by an administrator to change your name. In case you refuse you will receive "COL_R"Permanent BAN.\nYour actual name contains injuries, advertise to other server or vulgar language.", "Change", "");
		return 1;
	}
	else	
	{
		switch( SetPlayerName( playerid, newName ) )
		{
			case -1:
			{
				ShowPlayerDialog(playerid, DIALOG_FNC, DIALOG_STYLE_INPUT, "SERVER: Change Nickname", "You're forced by an administrator to change your name. In case you refuse you will receive "COL_R"Permanent BAN.\nYour actual name contains injuries, advertise to other server or vulgar language.", "Change", "");
				SendClientMessagef( playerid, COLOR_LIGHTRED, "ERROR: "COL_W"Username '%s' este deja folosit de alt jucator activ!", newName );
				return 1;
			}
			case 0:
			{
				ShowPlayerDialog(playerid, DIALOG_FNC, DIALOG_STYLE_INPUT, "SERVER: Change Nickname", "You're forced by an administrator to change your name. In case you refuse you will receive "COL_R"Permanent BAN.\nYour actual name contains injuries, advertise to other server or vulgar language.", "Change", "");
				SendClientMessagef( playerid, COLOR_LIGHTRED, "ERROR: "COL_W"Username '%s' este deja folosit de tine!", newName );
				return 1;
			}
			case 1:
			{

				gsString[ 0 ] = EOS;
				format( gsString, sizeof gsString, "%s[user:%d] changed his username, new username: %s. [/fnc asked by %s]", playerVariables[ playerid ][ pNormalName ], GetPlayerMysqlID(playerid), newName, username(FNCBY[playerid]));
				submitToAdmins(gsString, COLOR_YELLOW);
				InsertPlayerLog( GetPlayerMysqlID(playerid), 0, gsString );
				TakePlayerPremiumPoints( playerid, 15 );
				SendClientMessagef( playerid, COLOR_LIGHT_BID, "Ti-ai schimbat numele in '%s', toate statisticile au fost transferate. Data viitoare fii mai atent cum iti alegi numele!", newName );

				gsQuery[ 0 ] = EOS;
				mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `username` = '%s' WHERE `id` = %d", newName, GetPlayerMysqlID(playerid) );
				mysql_tquery( g_Handle, gsQuery, "", "" );

				gsQuery[ 0 ] = EOS;
				mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_factionlog` SET `logPlayerName` = '%s' WHERE `logPlayerName` = '%s'", newName, playerVariables[ playerid ][ pNormalName ] );
				mysql_tquery( g_Handle, gsQuery, "", "" );
				
				gsQuery[ 0 ] = EOS;
				mysql_format( g_Handle, gsQuery, sizeof gsQuery, "INSERT INTO `server_logs_changename`(`logPlayerKey`, `logNameOld`, `logNameNew`) VALUES (%d, '%s', '%s')", GetPlayerMysqlID(playerid), playerVariables[ playerid ][ pNormalName ], newName );
				mysql_tquery( g_Handle, gsQuery, "", "" );

				if( playerVariables[ playerid ][ pBusiness ] != 0 )
				{
					gsQuery[ 0 ] = EOS;
					mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_business` SET `busOwner` = '%s' WHERE `busOwnerKey` = %d", newName, GetPlayerMysqlID(playerid) );
					mysql_tquery( g_Handle, gsQuery, "", "" );

					SetGVarString( "bus_Owner", newName, playerVariables[ playerid ][ pBusiness ] );
					UpdateBusinessText( playerVariables[ playerid ][ pBusiness ] );
				}
				if( playerVariables[ playerid ][ pHouse ] != 0 )
				{
					gsQuery[ 0 ] = EOS;
					mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_houses` SET `houseOwner` = '%s' WHERE `houseOwnerKey` = %d", newName, GetPlayerMysqlID(playerid) );
					mysql_tquery( g_Handle, gsQuery, "", "" );

					SetGVarString( "house_Owner", newName, playerVariables[ playerid ][ pHouse ] );
					UpdateHouseText( playerVariables[ playerid ][ pHouse ], 0 );
				}
				// < Update player's Name )
				playerVariables[ playerid ][ pNormalName ] = EOS;
				format( playerVariables[ playerid ][ pNormalName ], MAX_PLAYER_NAME, "%s", newName );

				FNCCount[playerid] = 0;
				FNCBY[playerid] = INVALID_PLAYER_ID;

				gsString[ 0 ] = EOS;
				format( gsString, 64, "%s(%d) / "SERVER_LOGO"", username(playerid), playerid );
				PlayerTextDrawSetString( playerid, PlayerText:SERVER_TD[ 0 ] , gsString );
				//PlayerTextDrawShow( playerid, PlayerText:SERVER_TD[ 0 ] );

				if( playerVariables[ playerid ][ pClan ] != 0 )
				{
					switch( playerVariables[ playerid ][ pClanTag ] )
					{
						case 1:
						{
							gsString[ 0 ] = EOS;
							format( gsString, sizeof gsString, "%s%s", GetGVarStringEx( "clan_Tag", playerVariables[ playerid ][ pClan ] ), playerVariables[ playerid ][ pNormalName ] );
							SetPlayerName( playerid, gsString );
						}
						case 2:
						{
							gsString[ 0 ] = EOS;
							format( gsString, sizeof gsString, "%s%s", playerVariables[ playerid ][ pNormalName ], GetGVarStringEx( "clan_Tag", playerVariables[ playerid ][ pClan ] ) );
							SetPlayerName( playerid, gsString );
						}
					}
				}
			}
		}
	}
	return true;
}
SQL_Function VerifyReferralCode( playerid, referral )
{
	if( !IsPlayerConnected( playerid ) )
		return true;

	new Rows, Fields;
	cache_get_data( Rows, Fields, g_Handle );

	if( Rows )
	{
		for( new i = 0; i < Rows; i++ )
		{
			new referralName[ 25 ];//, referralAddress[ 64 ], referralSerial[ 128 ]; //playerIP[ 8 ];
			cache_get_field_content( i, "username", referralName, g_Handle, 25 );
			//cache_get_field_content( i, "playerAddress", referralAddress, g_Handle, 64 );
			//cache_get_field_content( i, "playerSerial", referralSerial, g_Handle, 128 );

			//sscanf( referralAddress, "p<.>dddd", playerIP[ 0 ], playerIP[ 1 ], playerIP[ 2 ], playerIP[ 3 ] );
			//sscanf( GetPlayerIPEx( playerid ), "p<.>dddd", playerIP[ 4 ], playerIP[ 5 ], playerIP[ 6 ], playerIP[ 7 ] );

			// < Store the referral player's key )
			playerVariables[ playerid ][ pReferral ] = cache_get_field_content_int( i, "id", g_Handle );
			SetPVarString( playerid, "referral_Name", referralName );
			SetPVarInt( playerid, "referral_Code", referral );

			// < Confirm the referral player! )
			gsString[ 0 ] = EOS;
			format( gsString, sizeof gsString, "English: Ok, so %s with referral: [%d] has brought you to this server?!\n\n", referralName, referral );
			format( gsString, sizeof gsString, "%sRomana: Ok, deci %s cu referral: [%d] te-a adus pe acest server?!\n", gsString, referralName, referral );
			return ShowPlayerDialog( playerid, DIALOG_REFERRAL_DONE, DIALOG_STYLE_MSGBOX, ""COL_R"#5 "COL_W"Account Registered", gsString, "Yes", "No" );

			/*if( playerIP[ 0 ] != playerIP[ 4 ] && playerIP[ 1 ] != playerIP[ 5 ] && strcmp( referralSerial, GetPlayerSerial( playerid ), true ) != 0 )
			{
				// < Store the referral player's key )
				playerVariables[ playerid ][ pReferral ] = cache_get_field_content_int( i, "id", g_Handle );
				SetPVarString( playerid, "referral_Name", referralName );
				SetPVarInt( playerid, "referral_Code", referral );

				// < Confirm the referral player! )
				gsString[ 0 ] = EOS;
				format( gsString, sizeof gsString, "English: Ok, so %s with referral: [%d] has brought you to this server?!\n\n", referralName, referral );
				format( gsString, sizeof gsString, "%sRomana: Ok, deci %s cu referral: [%d] te-a adus pe acest server?!\n", gsString, referralName, referral );
				return ShowPlayerDialog( playerid, DIALOG_REFERRAL_DONE, DIALOG_STYLE_MSGBOX, ""COL_R"#5 "COL_W"Account Registered", gsString, "Yes", "No" );
			}
			else
			{
				gsString[ 0 ] = EOS;
				format( gsString, sizeof gsString, "REFERRAL LOG: %s[user:%d] has tried to refer himself [code: %d | IP: %s]", username( playerid ), GetPlayerMysqlID(playerid), referral, GetPlayerIPEx( playerid ) );
				InsertPlayerLog( GetPlayerMysqlID(playerid), 0, gsString );
				submitToAdmins(gsString, COLOR_LIGHTRED);

				SendClientMessage( playerid, COLOR_RED, "ERROR: You can't refer yourself, you have been kicked for cheating!" );
				KickEx( playerid );
			}*/
		}
	}
	else return ShowPlayerDialog( playerid, DIALOG_REFERRAL, DIALOG_STYLE_INPUT, ""COL_R"#5 "COL_W"Account Registered", "English: This referral code it's invalid, please try again!\n\nRomana: Acest cod referral este incorect, te rog incearca din nou!", "Enter", "Skip" );
	return true;
}
SQL_Function LoadPlayerPunish( playerid, Admin )
{
	new Rows, Fields, pDate[ 64 ], pReason[ 256 ], pAdmin[ 64 ], pValue;
	cache_get_data( Rows, Fields, g_Handle );

	if( Rows )
	{
		gsBigString[ 0 ] = EOS;
		for( new i = 0; i < Rows; i++ )
		{
			cache_get_field_content( i, "punishDate", pDate, g_Handle, 64 );
			cache_get_field_content( i, "punishReason", pReason, g_Handle, 128 );
			cache_get_field_content( i, "punishAdmin", pAdmin, g_Handle, 64 );
			pValue = cache_get_field_content_int( i, "punishValue", g_Handle );

			switch( cache_get_field_content_int( i, "punishType", g_Handle ) )
			{
				case 0: format( gsBigString, sizeof gsBigString, "%s[%s] %s has been warned by %s with reason: %s\n", gsBigString, pDate, playerVariables[ playerid ][ pNormalName ], pAdmin, pReason );
				case 1: // ban
				{
					switch( pValue )
					{
						case 0: format( gsBigString, sizeof gsBigString, "%s[%s] %s has been permanently banned by %s with reason: %s\n", gsBigString, pDate, playerVariables[ playerid ][ pNormalName ], pAdmin, pReason );
						default: format( gsBigString, sizeof gsBigString, "%s[%s] %s has been banned for %d days by %s with reason: %s\n", gsBigString, pDate, playerVariables[ playerid ][ pNormalName ], pValue, pAdmin, pReason );
					}
				}
				case 2: format( gsBigString, sizeof gsBigString, "%s[%s] %s has been muted for %d minutes by %s with reason: %s\n", gsBigString, pDate, playerVariables[ playerid ][ pNormalName ], pValue, pAdmin, pReason );
				case 3: format( gsBigString, sizeof gsBigString, "%s[%s] %s has been jailed for %d minutes by %s with reason: %s\n", gsBigString, pDate, playerVariables[ playerid ][ pNormalName ], pValue, pAdmin, pReason );
				case 6: format( gsBigString, sizeof gsBigString, "%s[%s] %s has been kicked by %s with reason: %s\n", gsBigString, pDate, playerVariables[ playerid ][ pNormalName ], pAdmin, pReason );
				case 7: format( gsBigString, sizeof gsBigString, "%s[%s] %s has been leader warned by %s with reason: %s\n", gsBigString, pDate, playerVariables[ playerid ][ pNormalName ], pAdmin, pReason );
				case 8: format( gsBigString, sizeof gsBigString, "%s[%s] %s has been faction warned by %s with reason: %s\n", gsBigString, pDate, playerVariables[ playerid ][ pNormalName ], pAdmin, pReason );
			}
		}
		gsString[ 0 ] = EOS;
		format( gsString, sizeof gsString, "%s' Punishes", username( playerid ) );
		ShowPlayerDialog( Admin, DIALOG_NULL, DIALOG_STYLE_MSGBOX, gsString, gsBigString, "Close", "" );	
	}
	else SendClientMessage( Admin, COLOR_GREY, "This player has no punishes!" );
	return true;
}
SQL_Function LoadPlayerMails( playerid )
{
	new Field[ 256 ], Rows, Fields;
	cache_get_data( Rows, Fields, g_Handle );

	if( Rows )
	{
		gsString[ 0 ] = EOS;
		format( gsString, sizeof gsString, "Status\tMessage\n" );
		for( new i = 0; i < Rows; i++ )
		{
			SetGVarInt( "email_Key", 		cache_get_field_content_int( i, "emailKey", g_Handle ), i );
			SetGVarInt( "email_Read", 		cache_get_field_content_int( i, "emailRead", g_Handle ), i );

			cache_get_field_content( i, "emailDate", Field, g_Handle, 256 );
			SetGVarString( "email_Date", Field, i );

			cache_get_field_content( i, "emailText", Field, g_Handle, 256 );
			SetGVarString( "email_Text", Field, i ); // GetGVarStringEx( "email_Date", i ), 

			format( gsString, sizeof gsString, "%s%s\t"COL_W"%s\n", gsString, ( GetGVarInt( "email_Read", i ) ) ? ("{006600}citit") : ("{FF2020}necitit" ), LimitString( GetGVarStringEx( "email_Text", i ) ) );
		}
		ShowPlayerDialog( playerid, DIALOG_EMAIL_LIST, DIALOG_STYLE_TABLIST_HEADERS, "Notifications:", gsString, "Read", "Exit" );
		#if defined DEBUG_SERVER
			printf( "Successfully Loaded [ %d ] Player Notifications", Rows );
		#endif
	}
	else SendClientMessage( playerid, COLOR_GREY, "You don't have any Notifications E-Mail!" );
	return true;
}
SQL_Function LoadClanMembers( playerid )
{
	new Field[ 128 ], Rows, Fields;
	cache_get_data( Rows, Fields, g_Handle );

	gsString[ 0 ] = EOS;
	svString[ 0 ] = EOS;
	format( gsString, sizeof gsString, "{F89B0E}[+] Invite a new member\n" );
	SetGVarString( "Cmembers_Name", "Invite new member!", -1 );

	for( new i = 0; i < Rows; i++ )
	{
		cache_get_field_content( i, "username", Field, g_Handle, 128 );
		SetGVarString( "Cmembers_Name", Field, i );

		cache_get_field_content( i, "playerClanJoined", Field, g_Handle, 128 );
		SetGVarString( "Cmembers_Joined", Field, i );

		cache_get_field_content( i, "playerLastOnline", Field, g_Handle, 128 );
		SetGVarString( "Cmembers_LastOnline", Field, i );

		SetGVarInt( "Cmembers_Key", 		cache_get_field_content_int( i, "id", g_Handle ), i );
		SetGVarInt( "Cmembers_ClanDays", 	cache_get_field_content_int( i, "playerClanDays", g_Handle ), i );
		SetGVarInt( "Cmembers_ClanRank", 	cache_get_field_content_int( i, "playerClanRank", g_Handle ), i );
		SetGVarInt( "Cmembers_ClanWarns", 	cache_get_field_content_int( i, "playerClanWarns", g_Handle ), i );

		format( gsString, sizeof gsString, "%s"COL_W"[R%d][%d/3 warns] %s\n", gsString, GetGVarInt( "Cmembers_ClanRank", i ), GetGVarInt( "Cmembers_ClanWarns", i ), GetGVarStringEx( "Cmembers_Name", i ) );
	}
	ShowPlayerDialog( playerid, DIALOG_CLAN_MEMBERS, DIALOG_STYLE_LIST, "Clan Members:", gsString, "Select", "Back" );
	//printf( "Successfully Loaded [ %d ] Faction Mebmers", Rows );
	return true;
}


SQL_Function LoadFactionMembers( playerid )
{
	new Field[ 128 ], Rows, Fields;
	cache_get_data( Rows, Fields, g_Handle );

	new FactionID = playerVariables[ playerid ][ pFaction ];

	gsString[ 0 ] = EOS;
	svString[ 0 ] = EOS;
	format( gsString, sizeof gsString, "Nume\tRank\tF.Warns\tStatus\n" );
	for( new i = 0; i < Rows; i++ )
	{
		cache_get_field_content( i, "username", Field, g_Handle, 128 );
		SetGVarString( "fmembers_Name", Field, i );

		cache_get_field_content( i, "playerLastOnline", Field, g_Handle, 128 );
		SetGVarString( "fmembers_LastOnline", Field, i );

		SetGVarInt( "fmembers_FactionRank", 	cache_get_field_content_int( i, "playerFactionRank", g_Handle ), i );
		SetGVarInt( "fmembers_FW", 				cache_get_field_content_int( i, "playerFW", g_Handle ), i );
		SetGVarInt( "fmembers_Key", 			cache_get_field_content_int( i, "id", g_Handle ), i );
		SetGVarInt( "fmembers_Days", 			cache_get_field_content_int( i, "playerFactionDays", g_Handle ), i );

		new pID = GetPlayerIDFromKey( GetGVarInt( "fmembers_Key", i ) );
		format( svString, sizeof svString, "faction_Rank%d", GetGVarInt( "fmembers_FactionRank", i ) );
		if( pID != INVALID_PLAYER_ID )
			format( gsString, sizeof gsString, "%s%s\t%s[%d]\t%d/3\t{7CFC00}online right now"COL_W"\n", gsString, GetGVarStringEx( "fmembers_Name", i ), GetGVarStringEx( svString, FactionID ), GetGVarInt( "fmembers_FactionRank", i ), GetGVarInt( "fmembers_FW", i ) );
		else
			format( gsString, sizeof gsString, "%s%s\t%s[%d]\t%d/3\tlast login: {ec2913}%s"COL_W"\n", gsString, GetGVarStringEx( "fmembers_Name", i ), GetGVarStringEx( svString, FactionID ), GetGVarInt( "fmembers_FactionRank", i ), GetGVarInt( "fmembers_FW", i ), GetGVarStringEx( "fmembers_LastOnline", i ) );
	}
	ShowPlayerDialog( playerid, DIALOG_MEMBERS, DIALOG_STYLE_TABLIST_HEADERS, "Members:", gsString, "Select", "Cancel" );
	//printf( "Successfully Loaded [ %d ] Faction Mebmers", Rows );
	return true;
}
SQL_Function LoadPlayerPersonalVehiclesTrade( playerid, slot )
{
	new Rows, Fields;
	cache_get_data( Rows, Fields, g_Handle );

	// < check if exist >
	if( Rows )
	{
		vehicleVariables[ slot ][ playerid ][ VehicleLocked ] 		= 0;
		vehicleVariables[ slot ][ playerid ][ VehicleStatus ] 		= 0;
		vehicleVariables[ slot ][ playerid ][ VehicleOwnerID ] 		= playerid;

		cache_get_value_name_int( 0, "vehicleID", playerVariables[ playerid ][ Vehicle ][ slot ] );
		cache_get_value_name_int( 0, "vehicleID", vehicleVariables[ slot ][ playerid ][ VehicleID ] );
		cache_get_value_name_int( 0, "vehicleModelID", vehicleVariables[ slot ][ playerid ][ VehicleModelID ] );

		cache_get_value_name_int( 0, "vehicleOwner",  vehicleVariables[ slot ][ playerid ][ VehicleOwner ] );
		cache_get_value_name_int( 0, "vehicleCol1", vehicleVariables[ slot ][ playerid ][ VehicleColor ][ 0 ] );
		cache_get_value_name_int( 0, "vehicleCol2", vehicleVariables[ slot ][ playerid ][ VehicleColor ][ 1 ] );
		cache_get_value_name_int( 0, "vehiclePaintJob", vehicleVariables[ slot ][ playerid ][ VehiclePaintJobs ] );
		cache_get_value_name_int( 0, "Money", vehicleVariables[ slot ][ playerid ][ Money ] );

		cache_get_value_name_int( 0, "vehicleInsurance", vehicleVariables[ slot ][ playerid ][ VehicleInsurance ] );
		cache_get_value_name_int( 0, "vehicleInsurancePoints", vehicleVariables[ slot ][ playerid ][ VehicleInsurancePoints ] );

		cache_get_value_name_int( 0, "vehicleDays", vehicleVariables[ slot ][ playerid ][ VehicleAge ] );
		cache_get_value_name_int( 0, "vehicleLocked", vehicleVariables[ slot ][ playerid ][ VehicleLocked ] );
		vehicleVariables[ slot ][ playerid ][ VehicleOdometter ] = cache_get_field_content_float( 0, "vehicleOdometter" );
		vehicleVariables[ slot ][ playerid ][ VehicleFuel ] = cache_get_field_content_float( 0, "vehicleFuel" );
		vehicleVariables[ slot ][ playerid ][ VehicleHealth ] = cache_get_field_content_float( 0, "vehicleHealth" );

		new Float:Player_Pos[ 4 ];
		GetPlayerPos( playerid, Player_Pos[ 0 ], Player_Pos[ 1 ], Player_Pos[ 2 ] );
		GetPlayerFacingAngle( playerid, Player_Pos[ 3 ] );

		vehicleVariables[ slot ][ playerid ][ Position ][ 0 ] 	= Player_Pos[ 0 ];
		vehicleVariables[ slot ][ playerid ][ Position ][ 1 ] 	= Player_Pos[ 1 ];
		vehicleVariables[ slot ][ playerid ][ Position ][ 2 ] 	= Player_Pos[ 2 ];
		vehicleVariables[ slot ][ playerid ][ Rotation ] 		= 0.0;

		// < Load VIP Things >
		cache_get_value_name_int( 0, "vehicleVIP", vehicleVariables[ slot ][ playerid ][ VehicleVIP ] );
		cache_get_value_name_int( 0, "vehicleVIPNeon", vehicleVariables[ slot ][ playerid ][ VehicleVIPNeon ] );
		cache_get_value_name_int( 0, "vehicleVIPWheel", vehicleVariables[ slot ][ playerid ][ VehicleVIPWheel ] );
		cache_get_field_content( 0, "vehicleVIPText", vehicleVariables[ slot ][ playerid ][ VehicleVIPText ], g_Handle, 21 );
		cache_get_field_content( 0, "vehicleVIPColor", vehicleVariables[ slot ][ playerid ][ vehicleVIPColor ], g_Handle, 12 );

		gsQuery[ 0 ] = EOS;
		cache_get_field_content( 0, "vehicleDamage", gsQuery, g_Handle, 256 );
		sscanf( gsQuery, "p<:>dddd", vehicleVariables[ slot ][ playerid ][ VehicleDamageStatus ][ 0 ],
									vehicleVariables[ slot ][ playerid ][ VehicleDamageStatus ][ 1 ],
									vehicleVariables[ slot ][ playerid ][ VehicleDamageStatus ][ 2 ],
									vehicleVariables[ slot ][ playerid ][ VehicleDamageStatus ][ 3 ] );

		gsQuery[ 0 ] = EOS;
		cache_get_field_content( 0, "vehicleMods", gsQuery, g_Handle, 256 );
		sscanf( gsQuery, "p<:>iiiiiiiiiiiii", vehicleVariables[ slot ][ playerid ][ VehicleMods ][ 0 ],
										vehicleVariables[ slot ][ playerid ][ VehicleMods ][ 1 ],
										vehicleVariables[ slot ][ playerid ][ VehicleMods ][ 2 ],
										vehicleVariables[ slot ][ playerid ][ VehicleMods ][ 3 ],
										vehicleVariables[ slot ][ playerid ][ VehicleMods ][ 4 ],
										vehicleVariables[ slot ][ playerid ][ VehicleMods ][ 5 ],
										vehicleVariables[ slot ][ playerid ][ VehicleMods ][ 6 ],
										vehicleVariables[ slot ][ playerid ][ VehicleMods ][ 7 ],
										vehicleVariables[ slot ][ playerid ][ VehicleMods ][ 8 ],
										vehicleVariables[ slot ][ playerid ][ VehicleMods ][ 9 ],
										vehicleVariables[ slot ][ playerid ][ VehicleMods ][ 10 ],
										vehicleVariables[ slot ][ playerid ][ VehicleMods ][ 11 ],
										vehicleVariables[ slot ][ playerid ][ VehicleMods ][ 12 ] );

		// < Load Vehicle Plate >
		cache_get_field_content( 0, "vehicleNumberPlate", vehicleVariables[ slot ][ playerid ][ VehiclePlate ], g_Handle, 32 );

		// < log the event >
		#if defined DEBUG_SERVER
		printf( "VehicleID[%d] Slot:%d - KM: %0.2f, Color: %d, Model: %d, Plate: %s", playerVariables[ playerid ][ Vehicle ][ slot ], slot, vehicleVariables[ slot ][ playerid ][ VehicleOdometter ], vehicleVariables[ slot ][ playerid ][ VehicleColor ][ 0 ], vehicleVariables[ slot ][ playerid ][ VehicleModelID ], vehicleVariables[ slot ][ playerid ][ VehiclePlate ] );
		#endif

		// < Prepare the vehicle >
		SpawnPlayerVehicle( slot, playerid );
		PutPlayerInVehicle( playerid, vehicleVariables[ slot ][ playerid ][ Vehicle ], 0 );
	}
	else
	{
		#if defined DEBUG_SERVER
		printf( "[LoadPersonalVehiclesTrade] Player %d requested on slot %d to create a personal vehicle!", playerid, slot );
		#endif
	}
	return true;
}
SQL_Function LoadPlayerPersonalVehicles( playerid, traveVehicle )
{
	new Rows, Fields;
	cache_get_data( Rows, Fields, g_Handle );

	for( new i = 0; i < Rows; i++ )
	{
		vehicleVariables[ i ][ playerid ][ VehicleLocked ] 		= 0;
		vehicleVariables[ i ][ playerid ][ VehicleStatus ] 		= 0;
		vehicleVariables[ i ][ playerid ][ VehicleOwnerID ] 	= playerid;

		cache_get_value_name_int( i, "vehicleID", playerVariables[ playerid ][ Vehicle ][ i ] );
		cache_get_value_name_int( i, "vehicleID", vehicleVariables[ i ][ playerid ][ VehicleID ] );
		cache_get_value_name_int( i, "vehicleModelID", vehicleVariables[ i ][ playerid ][ VehicleModelID ] );

		cache_get_value_name_int( i, "vehicleOwner",  vehicleVariables[ i ][ playerid ][ VehicleOwner ] );
		cache_get_value_name_int( i, "vehicleCol1", vehicleVariables[ i ][ playerid ][ VehicleColor ][ 0 ] );
		cache_get_value_name_int( i, "vehicleCol2", vehicleVariables[ i ][ playerid ][ VehicleColor ][ 1 ] );
		cache_get_value_name_int( i, "vehiclePaintJob", vehicleVariables[ i ][ playerid ][ VehiclePaintJobs ] );
		cache_get_value_name_int( i, "Money", vehicleVariables[ i ][ playerid ][ Money ] );

		cache_get_value_name_int( i, "vehicleInsurance", vehicleVariables[ i ][ playerid ][ VehicleInsurance ] );
		cache_get_value_name_int( i, "vehicleInsurancePoints", vehicleVariables[ i ][ playerid ][ VehicleInsurancePoints ] );

		cache_get_value_name_int( i, "vehicleDays", vehicleVariables[ i ][ playerid ][ VehicleAge ] );
		cache_get_value_name_int( i, "vehicleLocked", vehicleVariables[ i ][ playerid ][ VehicleLocked ] );

		vehicleVariables[ i ][ playerid ][ VehicleOdometter ] = cache_get_field_content_float( i, "vehicleOdometter" );
		vehicleVariables[ i ][ playerid ][ VehicleFuel ] = cache_get_field_content_float( i, "vehicleFuel" );
		vehicleVariables[ i ][ playerid ][ VehicleHealth ] = cache_get_field_content_float( i, "vehicleHealth" );

		vehicleVariables[ i ][ playerid ][ Position ][ 0 ] = cache_get_field_content_float( i, "vehiclePosX" );
		vehicleVariables[ i ][ playerid ][ Position ][ 1 ] = cache_get_field_content_float( i, "vehiclePosY" );
		vehicleVariables[ i ][ playerid ][ Position ][ 2 ] = cache_get_field_content_float( i, "vehiclePosZ" );
		vehicleVariables[ i ][ playerid ][ Rotation ] = cache_get_field_content_float( i, "vehiclePosRotation" );

		// < Load VIP Things )
		cache_get_value_name_int( i, "vehicleVIP", vehicleVariables[ i ][ playerid ][ VehicleVIP ] );
		cache_get_value_name_int( i, "vehicleVIPNeon", vehicleVariables[ i ][ playerid ][ VehicleVIPNeon ] );
		cache_get_value_name_int( i, "vehicleVIPWheel", vehicleVariables[ i ][ playerid ][ VehicleVIPWheel ] );
		cache_get_field_content( i, "vehicleVIPText", vehicleVariables[ i ][ playerid ][ VehicleVIPText ], g_Handle, 12 );
		cache_get_field_content( i, "vehicleVIPColor", vehicleVariables[ i ][ playerid ][ vehicleVIPColor ], g_Handle, 12 );

		gsQuery[ 0 ] = EOS;
		cache_get_field_content( i, "vehicleDamage", gsQuery, g_Handle, 256 );
		sscanf( gsQuery, "p<:>dddd", vehicleVariables[ i ][ playerid ][ VehicleDamageStatus ][ 0 ],
									vehicleVariables[ i ][ playerid ][ VehicleDamageStatus ][ 1 ],
									vehicleVariables[ i ][ playerid ][ VehicleDamageStatus ][ 2 ],
									vehicleVariables[ i ][ playerid ][ VehicleDamageStatus ][ 3 ] );

		gsQuery[ 0 ] = EOS;
		cache_get_field_content( i, "vehicleMods", gsQuery, g_Handle, 256 );
		sscanf( gsQuery, "p<:>iiiiiiiiiiiii", vehicleVariables[ i ][ playerid ][ VehicleMods ][ 0 ],
										vehicleVariables[ i ][ playerid ][ VehicleMods ][ 1 ],
										vehicleVariables[ i ][ playerid ][ VehicleMods ][ 2 ],
										vehicleVariables[ i ][ playerid ][ VehicleMods ][ 3 ],
										vehicleVariables[ i ][ playerid ][ VehicleMods ][ 4 ],
										vehicleVariables[ i ][ playerid ][ VehicleMods ][ 5 ],
										vehicleVariables[ i ][ playerid ][ VehicleMods ][ 6 ],
										vehicleVariables[ i ][ playerid ][ VehicleMods ][ 7 ],
										vehicleVariables[ i ][ playerid ][ VehicleMods ][ 8 ],
										vehicleVariables[ i ][ playerid ][ VehicleMods ][ 9 ],
										vehicleVariables[ i ][ playerid ][ VehicleMods ][ 10 ],
										vehicleVariables[ i ][ playerid ][ VehicleMods ][ 11 ],
										vehicleVariables[ i ][ playerid ][ VehicleMods ][ 12 ] );

		// < Load Vehicle Plate >
		cache_get_field_content( i, "vehicleNumberPlate", vehicleVariables[ i ][ playerid ][ VehiclePlate ], g_Handle, 32 );

		// < log the event >
		#if defined DEBUG_SERVER
		printf( "VehicleID[%d] Slot:%d - KM: %0.2f, Color: %d, Model: %d, Plate: %s", playerVariables[ playerid ][ Vehicle ][ i ], i, vehicleVariables[ i ][ playerid ][ VehicleOdometter ], vehicleVariables[ i ][ playerid ][ VehicleColor ][ 0 ], vehicleVariables[ i ][ playerid ][ VehicleModelID ], vehicleVariables[ i ][ playerid ][ VehiclePlate ] );
		#endif
	}
	return true;
}
stock strmatch( const String1[], const String2[] )
{
	if( ( strcmp( String1, String2, true, strlen( String2 ) ) == 0 ) && ( strlen( String2 ) == strlen( String1 ) ) )
		return true;
	else
		return false;
}

stock GetPhoneNumberOwner(number)
{
    if(VECTOR_get_val(phone_numbers, number) != 0) return VECTOR_get_val(phone_numbers, number) - 1;

    return INVALID_PLAYER_ID;
}

stock GetPlayerIPEx( playerid )
{
	new pIP[ 24 ];
	GetPlayerIp( playerid, pIP, 24 );
	return pIP;
}

stock FormatNumber( number )
{
   new Str[ 15 ];
   format( Str, 15, "%d", number );

   if( strlen( Str ) < 15 )
   {
	  if( number >= 1000 && number < 10000 )
			 strins( Str, ".", 1, sizeof( Str ) );

	  else if( number >= 10000 && number < 100000 )
		   strins( Str, ".", 2, sizeof( Str ) );

	  else if( number >= 100000 && number < 1000000 )
		   strins( Str, ".", 3, sizeof( Str ) );

	  else if( number >= 1000000 && number < 10000000 )
		   strins( Str, ".", 1, sizeof( Str ) ),strins( Str, ".", 5, sizeof( Str ) );

	  else if( number >= 10000000 && number < 100000000 )
		   strins( Str, ".", 2, sizeof( Str ) ),strins( Str, ".", 6, sizeof( Str ) );

	  else if( number >= 100000000 && number < 1000000000 )
		   strins( Str, ".", 3, sizeof( Str ) ),strins( Str, ".", 7, sizeof( Str ) );

	  else if( number >= 1000000000 && number < 10000000000 )
		   strins( Str, ".", 1, sizeof( Str ) ),
		   strins( Str, ".", 5, sizeof( Str ) ),
		   strins( Str, ".", 9, sizeof( Str ) );
	  else format( Str, 10, "%d", number );
   }
   else format( Str, 15, "<ERROR>" );
   return Str;
}
stock GetPlayerSerial( playerid )
{
	new szAddress[ 128 ];
	gpci( playerid, szAddress, 128 );
	return szAddress;
}
#if defined PET
stock petlevelinfo( playerid )
{
	gsString[ 0 ] = EOS;
	switch( playerVariables[ playerid ][ pPetLevel ] )
	{
		case 1: gsString = "10";
		case 2: gsString = "20";
		case 3: gsString = "30";
		case 4: gsString = "40";
		case 5: gsString = "max level";
	}
	return gsString;
}
stock pettype(playerid, cazuri)
{
	gsString[ 0 ] = EOS;
	switch(cazuri)
	{
		case 1:
		{
			switch( playerVariables[ playerid ][ pPetID ] )
			{
				case 19078: gsString = "Parrot";
				case 1608: gsString = "Shark";
				case 19833: gsString = "Cow";
				case 19630: gsString = "Fish";
				case 1607: gsString = "Dolphin";
			}
		}
		case 2:
		{
			switch( GetPVarInt(playerid, "PetIDForBuying") )
			{
				case 19078: gsString = "Parrot";
				case 1608: gsString = "Shark";
				case 19833: gsString = "Cow";
				case 19630: gsString = "Fish";
				case 1607: gsString = "Dolphin";
			}
		}	
	}	
	return gsString;
}
#endif
stock manager( playerid )
{
	gsString[ 0 ] = EOS;
	switch( playerVariables[ playerid ][ pManager ] )
	{
		case 1: format(gsString, 20, "lspd & paramedic");
		case 2: format(gsString, 30, "taxi ls & school instructors");
		case 3: format(gsString, 35, "news reporters & hitman agency");
		case 4: format(gsString, 35, "grove street & orleans family");
		case 5: format(gsString, 25, "russian mafia & ballas");
	}
	return gsString;
}

stock RemovePlayerBuilding( playerid )
{
	// < Remorcile de la trucker )
	RemoveBuildingForPlayer( playerid, 1226, 2240.7813, -2240.8984, 16.3672, 0.25 );
 
	// < Remove Ballas ATM )
	RemoveBuildingForPlayer( playerid, 2618, 956.7109, -48.7266, 1000.1172, 0.25 );

	// < Load Remove Building )
	RemoveBuildingForPlayer( playerid, 14843, 266.3516, 81.1953, 1001.2813, 0.25 );

	// Remove 24/7 machines
	RemoveBuildingForPlayer( playerid, 1776, -33.8750, -186.7656, 1003.6328, 20.0 );
	RemoveBuildingForPlayer( playerid, 1775, -32.4453, -186.6953, 1003.6328, 20.0 );

	//Los Santos and Countryside
	RemoveBuildingForPlayer( playerid, 956, 1634.1487,-2238.2810,13.5077, 20.0 ); //Snack vender @ LS Airport
	RemoveBuildingForPlayer( playerid, 956, 2480.9885,-1958.5117,13.5831, 20.0 ); //Snack vender @ Sushi Shop in Willowfield
	RemoveBuildingForPlayer( playerid, 955, 1729.7935,-1944.0087,13.5682, 20.0 ); //Sprunk machine @ Unity Station
	RemoveBuildingForPlayer( playerid, 955, 2060.1099,-1898.4543,13.5538, 20.0 ); //Sprunk machine opposite Tony's Liqour in Willowfield
	RemoveBuildingForPlayer( playerid, 955, 2325.8708,-1645.9584,14.8270, 20.0 ); //Sprunk machine @ Ten Green Bottles
	RemoveBuildingForPlayer( playerid, 955, 1153.9130,-1460.8893,15.7969, 20.0 ); //Sprunk machine @ Market
	RemoveBuildingForPlayer( playerid, 955,1788.3965,-1369.2336,15.7578, 20.0 ); //Sprunk machine in Downtown Los Santos
	RemoveBuildingForPlayer( playerid, 955, 2352.9939,-1357.1105,24.3984, 20.0 ); //Sprunk machine @ Liquour shop in East Los Santos
	RemoveBuildingForPlayer( playerid, 1775, 2224.3235,-1153.0692,1025.7969, 20.0 ); //Sprunk machine @ Jefferson Motel
	RemoveBuildingForPlayer( playerid, 956, 2140.2566,-1161.7568,23.9922, 20.0 ); //Snack machine @ pick'n'go market in Jefferson
	RemoveBuildingForPlayer( playerid, 956, 2154.1199,-1015.7635,62.8840, 20.0 ); //Snach machine @ Carniceria El Pueblo in Las Colinas
	RemoveBuildingForPlayer( playerid, 956, 662.5665,-551.4142,16.3359, 20.0 ); //Snack vender at Dillimore Gas Station
	RemoveBuildingForPlayer( playerid, 955, 200.2010,-107.6401,1.5513, 20.0 ); //Sprunk machine @ Blueberry Safe House
	RemoveBuildingForPlayer( playerid, 956, 2271.4666,-77.2104,26.5824, 20.0 ); //Snack machine @ Palomino Creek Library
	RemoveBuildingForPlayer( playerid, 955, 1278.5421,372.1057,19.5547, 20.0 ); //Sprunk machine @ Papercuts in Montgomery
	RemoveBuildingForPlayer( playerid, 955, 1929.5527,-1772.3136,13.5469, 20.0 ); //Sprunk machine @ Idlewood Gas Station
   
	//San Fierro
	RemoveBuildingForPlayer( playerid, 1302, -2419.5835,984.4185,45.2969, 20.0 ); //Soda machine 1 @ Juniper Hollow Gas Station
	RemoveBuildingForPlayer( playerid, 1209, -2419.5835,984.4185,45.2969, 20.0 ); //Soda machine 2 @ Juniper Hollow Gas Station
	RemoveBuildingForPlayer( playerid, 956, -2229.2075,287.2937,35.3203, 20.0 ); //Snack vender @ King's Car Park
	RemoveBuildingForPlayer( playerid, 955, -1349.3947,493.1277,11.1953, 20.0 ); //Sprunk machine @ SF Aircraft Carrier
	RemoveBuildingForPlayer( playerid, 956, -1349.3947,493.1277,11.1953, 20.0 ); //Snack vender @ SF Aircraft Carrier
	RemoveBuildingForPlayer( playerid, 955, -1981.6029,142.7232,27.6875, 20.0 ); //Sprunk machine @ Cranberry Station
	RemoveBuildingForPlayer( playerid, 955, -2119.6245,-422.9411,35.5313, 20.0 ); //Sprunk machine 1/2 @ SF Stadium
	RemoveBuildingForPlayer( playerid, 955, -2097.3696,-397.5220,35.5313, 20.0 ); //Sprunk machine 3 @ SF Stadium
	RemoveBuildingForPlayer( playerid, 955, -2068.5593,-397.5223,35.5313, 20.0 ); //Sprunk machine 3 @ SF Stadium
	RemoveBuildingForPlayer( playerid, 955, -2039.8802,-397.5214,35.5313, 20.0 ); //Sprunk machine 3 @ SF Stadium
	RemoveBuildingForPlayer( playerid, 955, -2011.1403,-397.5225,35.5313, 20.0 ); //Sprunk machine 3 @ SF Stadium
	RemoveBuildingForPlayer( playerid, 955, -2005.7861,-490.8688,35.5313, 20.0 ); //Sprunk machine 3 @ SF Stadium
	RemoveBuildingForPlayer( playerid, 955, -2034.5267,-490.8681,35.5313, 20.0 ); //Sprunk machine 3 @ SF Stadium
	RemoveBuildingForPlayer( playerid, 955, -2063.1875,-490.8687,35.5313, 20.0 ); //Sprunk machine 3 @ SF Stadium
	RemoveBuildingForPlayer( playerid, 955, -2091.9780,-490.8684,35.5313, 20.0 ); //Sprunk machine 3 @ SF Stadium
   
	//Las Venturas
	RemoveBuildingForPlayer( playerid, 956, -1455.1298,2592.4138,55.8359, 20.0 ); //Snack vender @ El Quebrados GONE
	RemoveBuildingForPlayer( playerid, 955, -252.9574,2598.9048,62.8582, 20.0 ); //Sprunk machine @ Las Payasadas GONE
	RemoveBuildingForPlayer( playerid, 956, -252.9574,2598.9048,62.8582, 20.0 ); //Snack vender @ Las Payasadas GONE
	RemoveBuildingForPlayer( playerid, 956, 1398.7617,2223.3606,11.0234, 20.0 ); //Snack vender @ Redsands West GONE
	RemoveBuildingForPlayer( playerid, 955, -862.9229,1537.4246,22.5870, 20.0 ); //Sprunk machine @ The Smokin' Beef Grill in Las Barrancas GONE
	RemoveBuildingForPlayer( playerid, 955, -14.6146,1176.1738,19.5634, 20.0 ); //Sprunk machine @ Fort Carson GONE
	RemoveBuildingForPlayer( playerid, 956, -75.2839,1227.5978,19.7360, 20.0 ); //Snack vender @ Fort Carson GONE
	RemoveBuildingForPlayer( playerid, 955, 1519.3328,1055.2075,10.8203, 20.0 ); //Sprunk machine @ LVA Freight Department GONE
	RemoveBuildingForPlayer( playerid, 956, 1659.5096,1722.1096,10.8281, 20.0 ); //Snack vender near Binco @ LV Airport GONE
	RemoveBuildingForPlayer( playerid, 955, 2086.5872,2071.4958,11.0579, 20.0 ); //Sprunk machine @ Sex Shop on The Strip
	RemoveBuildingForPlayer( playerid, 955, 2319.9001,2532.0376,10.8203, 20.0 ); //Sprunk machine @ Pizza co by Julius Thruway (North)
	RemoveBuildingForPlayer( playerid, 955, 2503.2061,1244.5095,10.8203, 20.0 ); //Sprunk machine @ Club in the Camels Toe
	RemoveBuildingForPlayer( playerid, 956, 2845.9919,1294.2975,11.3906, 20.0 ); //Snack vender @ Linden Station
   
	//Interiors: 24/7 and Clubs
	RemoveBuildingForPlayer( playerid, 1775, 496.0843,-23.5310,1000.6797, 20.0 ); //Sprunk machine 1 @ Club in Camels Toe
	RemoveBuildingForPlayer( playerid, 1775, 501.1219,-2.1968,1000.6797, 20.0 ); //Sprunk machine 2 @ Club in Camels Toe
	RemoveBuildingForPlayer( playerid, 1776, 501.1219,-2.1968,1000.6797, 20.0 ); //Snack vender @ Club in Camels Toe
	RemoveBuildingForPlayer( playerid, 1775, -19.2299,-57.0460,1003.5469, 20.0 ); //Sprunk machine @ Roboi's type 24/7 stores
	RemoveBuildingForPlayer( playerid, 1776, -35.9012,-57.1345,1003.5469, 20.0 ); //Snack vender @ Roboi's type 24/7 stores
	RemoveBuildingForPlayer( playerid, 1775, -17.0036,-90.9709,1003.5469, 20.0 ); //Sprunk machine @ Other 24/7 stores
	RemoveBuildingForPlayer( playerid, 1776, -17.0036,-90.9709,1003.5469, 20.0 ); //Snach vender @ Others 24/7 stores

	//interior: HQ Mafii
	RemoveBuildingForPlayer( playerid, 1829, 2546.7813, -1280.6719, 1060.4609, 0.25 ); //Vending
	RemoveBuildingForPlayer( playerid, 1775, 2576.7031, -1284.4297, 1061.0938, 0.25 ); //Safe

	RemoveBuildingForPlayer(playerid, 13831, 1413.410, -804.742, 83.437, 0.250);
	RemoveBuildingForPlayer(playerid, 13759, 1413.410, -804.742, 83.437, 0.250);
	RemoveBuildingForPlayer(playerid, 13722, 1413.410, -804.742, 83.437, 0.250);
	RemoveBuildingForPlayer(playerid, 13759, 1413.410, -804.742, 83.437, 0.250);
	RemoveBuildingForPlayer(playerid, 14843, 266.351, 81.195, 1001.280, 0.250);
	RemoveBuildingForPlayer(playerid, 5043, 1843.3672, -1856.3203, 13.8750, 0.25);

    RemoveBuildingForPlayer(playerid, 2786, 1968.7344, 1029.6641, 992.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 2786, 1967.4063, 1029.6563, 992.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 2786, 1968.7344, 1021.6875, 992.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 2786, 1967.4063, 1021.6875, 992.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 2786, 1968.7344, 1014.0000, 992.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 2786, 1967.4063, 1014.0000, 992.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 2786, 1968.7344, 1006.3438, 992.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 2786, 1967.4063, 1006.3438, 992.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 2786, 2273.4609, 1596.4766, 1006.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2786, 2268.7188, 1596.4688, 1006.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2786, 2273.4609, 1589.7969, 1006.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2786, 2268.7188, 1589.7969, 1006.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2786, 2263.6563, 1589.7969, 1006.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2786, 2258.2578, 1589.7969, 1006.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2786, 2253.2344, 1589.7969, 1006.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2786, 2263.6563, 1596.4844, 1006.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2786, 2258.2578, 1596.4766, 1006.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2786, 2253.2344, 1596.4844, 1006.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2786, 2254.1797, 1596.4844, 1006.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2786, 2259.2188, 1596.4844, 1006.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2786, 2264.6250, 1596.4844, 1006.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2786, 2269.6719, 1596.4844, 1006.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2786, 2274.4063, 1596.4844, 1006.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2786, 2274.4063, 1589.7891, 1006.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2786, 2269.6563, 1589.7891, 1006.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2786, 2264.6094, 1589.7891, 1006.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2786, 2259.1875, 1589.7969, 1006.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2786, 2254.1563, 1589.7969, 1006.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 1978, 1959.3984, 1010.1172, 992.5078, 0.25);
	RemoveBuildingForPlayer(playerid, 2188, 1960.3672, 1015.6641, 992.4688, 0.25);
	RemoveBuildingForPlayer(playerid, 2773, 1960.3047, 1017.9219, 992.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2188, 1960.3672, 1020.1719, 992.4688, 0.25);
	RemoveBuildingForPlayer(playerid, 2773, 1961.3516, 1021.4297, 992.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2773, 1961.3750, 1014.3672, 992.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2188, 1962.3438, 1015.6641, 992.4688, 0.25);
	RemoveBuildingForPlayer(playerid, 2773, 1962.3750, 1017.9219, 992.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2188, 1962.3438, 1020.1797, 992.4688, 0.25);
	RemoveBuildingForPlayer(playerid, 1978, 1963.7109, 1010.1172, 992.5078, 0.25);
	RemoveBuildingForPlayer(playerid, 2785, 1967.4063, 1014.0000, 992.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 2785, 1967.4063, 1006.3438, 992.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 2098, 1968.0938, 1006.3594, 993.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 2098, 1968.0938, 1013.9844, 993.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 2785, 1968.7344, 1006.3438, 992.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 2785, 1968.7344, 1014.0000, 992.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 2098, 1968.0938, 1021.6797, 993.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 2785, 1967.4063, 1021.6875, 992.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 2785, 1968.7344, 1021.6875, 992.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 1978, 1959.3984, 1025.6953, 992.5078, 0.25);
	RemoveBuildingForPlayer(playerid, 1978, 1963.7109, 1025.6953, 992.5078, 0.25);
	RemoveBuildingForPlayer(playerid, 2785, 1967.4063, 1029.6563, 992.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 2098, 1968.0938, 1029.5391, 993.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 2785, 1968.7344, 1029.6641, 992.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 2785, 2264.6094, 1589.7891, 1006.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2785, 2263.6563, 1589.7969, 1006.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2785, 2258.2578, 1589.7969, 1006.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2785, 2253.2344, 1589.7969, 1006.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2785, 2259.1875, 1589.7969, 1006.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2785, 2254.1563, 1589.7969, 1006.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2785, 2258.2578, 1596.4766, 1006.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2785, 2263.6563, 1596.4844, 1006.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2785, 2253.2344, 1596.4844, 1006.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2785, 2254.1797, 1596.4844, 1006.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2785, 2259.2188, 1596.4844, 1006.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2785, 2264.6250, 1596.4844, 1006.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2785, 2268.7188, 1589.7969, 1006.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2785, 2269.6563, 1589.7891, 1006.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2785, 2268.7188, 1596.4688, 1006.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2785, 2269.6719, 1596.4844, 1006.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2785, 2273.4609, 1589.7969, 1006.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2785, 2274.4063, 1589.7891, 1006.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2785, 2273.4609, 1596.4766, 1006.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2785, 2274.4063, 1596.4844, 1006.0156, 0.25);

	// < Spawn zona LS >
	RemoveBuildingForPlayer(playerid, 1363, 523.1563, -1525.6172, 14.3438, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 525.2578, -1520.6797, 17.4609, 0.25);
	RemoveBuildingForPlayer(playerid, 1363, 523.1563, -1516.4219, 14.3438, 0.25);
	RemoveBuildingForPlayer(playerid, 1233, 523.9688, -1503.3047, 15.0781, 0.25);
	// part 2
	RemoveBuildingForPlayer(playerid, 643, 513.8047, -1494.9609, 14.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 642, 513.7813, -1495.0078, 14.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 642, 514.6953, -1491.2813, 14.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 643, 514.7188, -1491.2344, 14.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 642, 513.9141, -1482.8203, 14.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 643, 513.9375, -1482.7734, 14.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 514.4063, -1486.7891, 14.3438, 0.25);
	RemoveBuildingForPlayer(playerid, 642, 514.0313, -1477.8672, 14.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 643, 514.0000, -1477.8281, 14.0000, 0.25);

	// < SFAIR - Fuel Pump)
	RemoveBuildingForPlayer(playerid, 10814, -1146.5547, -145.3047, 17.0781, 0.25);

	// < Remove building )
	RemoveBuildingForPlayer(playerid, 13245, 666.7109, -565.1328, 17.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 12854, 666.4922, -571.1797, 17.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 1510, 664.2031, -567.6953, 16.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 1512, 664.2109, -567.4141, 16.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 2362, 662.9219, -567.0547, 16.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 12853, 666.7109, -565.1328, 17.3359, 0.25);

	// < Spawn LS )
	/*RemoveBuildingForPlayer(playerid, 4025, 1777.8359, -1773.9063, 12.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 4215, 1777.5547, -1775.0391, 36.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1791.1797, -1816.6328, 14.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1796.9609, -1817.3906, 14.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 4019, 1777.8359, -1773.9063, 12.5234, 0.25);*/

	// < Trambulina Da Nang Boy HQ )
	RemoveBuildingForPlayer(playerid, 14449, 2567.6172, -1294.6328, 1061.2500, 0.25);

	// < Garbage Job )
	RemoveBuildingForPlayer(playerid, 3688, 2182.5547, -2042.5859, 17.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 5357, 2177.9922, -2006.7578, 23.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 3621, 2182.5547, -2042.5859, 17.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 5291, 2177.9922, -2006.7578, 23.2891, 0.25);
}	
stock LoadPlayerTextDraws( playerid )
{
	// <= PIN BOX =>
	PIN_TD[0] = CreatePlayerTextDraw(playerid, 15.999848, 175.796279, "box");
	PlayerTextDrawLetterSize(playerid, PIN_TD[0], 0.000000, 15.233342);
	PlayerTextDrawTextSize(playerid, PIN_TD[0], 100.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PIN_TD[0], 1);
	PlayerTextDrawColor(playerid, PIN_TD[0], -1);
	PlayerTextDrawUseBox(playerid, PIN_TD[0], 1);
	PlayerTextDrawBoxColor(playerid, PIN_TD[0], 178);
	PlayerTextDrawSetShadow(playerid, PIN_TD[0], 0);
	PlayerTextDrawSetOutline(playerid, PIN_TD[0], 0);
	PlayerTextDrawBackgroundColor(playerid, PIN_TD[0], 0);
	PlayerTextDrawFont(playerid, PIN_TD[0], 1);
	PlayerTextDrawSetProportional(playerid, PIN_TD[0], 1);
	PlayerTextDrawSetShadow(playerid, PIN_TD[0], 0);

	PIN_TD[1] = CreatePlayerTextDraw(playerid, 50.333351, 294.103790, "0");
	PlayerTextDrawLetterSize(playerid, PIN_TD[1], 0.620998, 2.018958);
	PlayerTextDrawTextSize(playerid, PIN_TD[1], 65.000000, 20.00000);
	PlayerTextDrawAlignment(playerid, PIN_TD[1], 1);
	PlayerTextDrawColor(playerid, PIN_TD[1], -1);
	PlayerTextDrawUseBox(playerid, PIN_TD[1], 1);
	PlayerTextDrawBoxColor(playerid, PIN_TD[1], -256);
	PlayerTextDrawSetShadow(playerid, PIN_TD[1], 0);
	PlayerTextDrawSetOutline(playerid, PIN_TD[1], 0);
	PlayerTextDrawBackgroundColor(playerid, PIN_TD[1], 255);
	PlayerTextDrawFont(playerid, PIN_TD[1], 2);
	PlayerTextDrawSetProportional(playerid, PIN_TD[1], 1);
	PlayerTextDrawSetShadow(playerid, PIN_TD[1], 0);
	PlayerTextDrawSetSelectable(playerid, PIN_TD[1], true);

	PIN_TD[2] = CreatePlayerTextDraw(playerid, 27.066656, 209.266677, "1");
	PlayerTextDrawLetterSize(playerid, PIN_TD[2], 0.557666, 2.433773);
	PlayerTextDrawTextSize(playerid, PIN_TD[2], 39.399993, 20.00000);
	PlayerTextDrawAlignment(playerid, PIN_TD[2], 1);
	PlayerTextDrawColor(playerid, PIN_TD[2], -1);
	PlayerTextDrawUseBox(playerid, PIN_TD[2], 1);
	PlayerTextDrawBoxColor(playerid, PIN_TD[2], -256);
	PlayerTextDrawSetShadow(playerid, PIN_TD[2], 0);
	PlayerTextDrawSetOutline(playerid, PIN_TD[2], 0);
	PlayerTextDrawBackgroundColor(playerid, PIN_TD[2], 255);
	PlayerTextDrawFont(playerid, PIN_TD[2], 2);
	PlayerTextDrawSetProportional(playerid, PIN_TD[2], 1);
	PlayerTextDrawSetShadow(playerid, PIN_TD[2], 0);
	PlayerTextDrawSetSelectable(playerid, PIN_TD[2], true);

	PIN_TD[3] = CreatePlayerTextDraw(playerid, 50.333312, 209.496261, "2");
	PlayerTextDrawLetterSize(playerid, PIN_TD[3], 0.557666, 2.433773);
	PlayerTextDrawTextSize(playerid, PIN_TD[3], 64.000000, 20.00000);
	PlayerTextDrawAlignment(playerid, PIN_TD[3], 1);
	PlayerTextDrawColor(playerid, PIN_TD[3], -1);
	PlayerTextDrawUseBox(playerid, PIN_TD[3], 1);
	PlayerTextDrawBoxColor(playerid, PIN_TD[3], -256);
	PlayerTextDrawSetShadow(playerid, PIN_TD[3], 0);
	PlayerTextDrawSetOutline(playerid, PIN_TD[3], 0);
	PlayerTextDrawBackgroundColor(playerid, PIN_TD[3], 255);
	PlayerTextDrawFont(playerid, PIN_TD[3], 2);
	PlayerTextDrawSetProportional(playerid, PIN_TD[3], 1);
	PlayerTextDrawSetShadow(playerid, PIN_TD[3], 0);
	PlayerTextDrawSetSelectable(playerid, PIN_TD[3], true);

	PIN_TD[4] = CreatePlayerTextDraw(playerid, 75.999961, 209.496231, "3");
	PlayerTextDrawLetterSize(playerid, PIN_TD[4], 0.557666, 2.433773);
	PlayerTextDrawTextSize(playerid, PIN_TD[4], 91.000000, 20.00000);
	PlayerTextDrawAlignment(playerid, PIN_TD[4], 1);
	PlayerTextDrawColor(playerid, PIN_TD[4], -1);
	PlayerTextDrawUseBox(playerid, PIN_TD[4], 1);
	PlayerTextDrawBoxColor(playerid, PIN_TD[4], -256);
	PlayerTextDrawSetShadow(playerid, PIN_TD[4], 0);
	PlayerTextDrawSetOutline(playerid, PIN_TD[4], 0);
	PlayerTextDrawBackgroundColor(playerid, PIN_TD[4], 255);
	PlayerTextDrawFont(playerid, PIN_TD[4], 2);
	PlayerTextDrawSetProportional(playerid, PIN_TD[4], 1);
	PlayerTextDrawSetShadow(playerid, PIN_TD[4], 0);
	PlayerTextDrawSetSelectable(playerid, PIN_TD[4], true);

	PIN_TD[5] = CreatePlayerTextDraw(playerid, 24.666694, 237.388931, "4");
	PlayerTextDrawLetterSize(playerid, PIN_TD[5], 0.557666, 2.433773);
	PlayerTextDrawTextSize(playerid, PIN_TD[5], 38.000000, 20.00000);
	PlayerTextDrawAlignment(playerid, PIN_TD[5], 1);
	PlayerTextDrawColor(playerid, PIN_TD[5], -1);
	PlayerTextDrawUseBox(playerid, PIN_TD[5], 1);
	PlayerTextDrawBoxColor(playerid, PIN_TD[5], -256);
	PlayerTextDrawSetShadow(playerid, PIN_TD[5], 0);
	PlayerTextDrawSetOutline(playerid, PIN_TD[5], 0);
	PlayerTextDrawBackgroundColor(playerid, PIN_TD[5], 255);
	PlayerTextDrawFont(playerid, PIN_TD[5], 2);
	PlayerTextDrawSetProportional(playerid, PIN_TD[5], 1);
	PlayerTextDrawSetShadow(playerid, PIN_TD[5], 0);
	PlayerTextDrawSetSelectable(playerid, PIN_TD[5], true);

	PIN_TD[6] = CreatePlayerTextDraw(playerid, 50.666652, 238.118499, "5");
	PlayerTextDrawLetterSize(playerid, PIN_TD[6], 0.557666, 2.433773);
	PlayerTextDrawTextSize(playerid, PIN_TD[6], 64.000000, 20.00000);
	PlayerTextDrawAlignment(playerid, PIN_TD[6], 1);
	PlayerTextDrawColor(playerid, PIN_TD[6], -1);
	PlayerTextDrawUseBox(playerid, PIN_TD[6], 1);
	PlayerTextDrawBoxColor(playerid, PIN_TD[6], -256);
	PlayerTextDrawSetShadow(playerid, PIN_TD[6], 0);
	PlayerTextDrawSetOutline(playerid, PIN_TD[6], 0);
	PlayerTextDrawBackgroundColor(playerid, PIN_TD[6], 16711935);
	PlayerTextDrawFont(playerid, PIN_TD[6], 2);
	PlayerTextDrawSetProportional(playerid, PIN_TD[6], 1);
	PlayerTextDrawSetShadow(playerid, PIN_TD[6], 0);
	PlayerTextDrawSetSelectable(playerid, PIN_TD[6], true);

	PIN_TD[7] = CreatePlayerTextDraw(playerid, 75.666641, 238.533309, "6");
	PlayerTextDrawLetterSize(playerid, PIN_TD[7], 0.557666, 2.433773);
	PlayerTextDrawTextSize(playerid, PIN_TD[7], 91.000000, 20.00000);
	PlayerTextDrawAlignment(playerid, PIN_TD[7], 1);
	PlayerTextDrawColor(playerid, PIN_TD[7], -1);
	PlayerTextDrawUseBox(playerid, PIN_TD[7], 1);
	PlayerTextDrawBoxColor(playerid, PIN_TD[7], -256);
	PlayerTextDrawSetShadow(playerid, PIN_TD[7], 0);
	PlayerTextDrawSetOutline(playerid, PIN_TD[7], 0);
	PlayerTextDrawBackgroundColor(playerid, PIN_TD[7], 255);
	PlayerTextDrawFont(playerid, PIN_TD[7], 2);
	PlayerTextDrawSetProportional(playerid, PIN_TD[7], 1);
	PlayerTextDrawSetShadow(playerid, PIN_TD[7], 0);
	PlayerTextDrawSetSelectable(playerid, PIN_TD[7], true);

	PIN_TD[8] = CreatePlayerTextDraw(playerid, 24.999998, 265.911041, "7");
	PlayerTextDrawLetterSize(playerid, PIN_TD[8], 0.557666, 2.433773);
	PlayerTextDrawTextSize(playerid, PIN_TD[8], 38.000000, 20.00000);
	PlayerTextDrawAlignment(playerid, PIN_TD[8], 1);
	PlayerTextDrawColor(playerid, PIN_TD[8], -1);
	PlayerTextDrawUseBox(playerid, PIN_TD[8], 1);
	PlayerTextDrawBoxColor(playerid, PIN_TD[8], -256);
	PlayerTextDrawSetShadow(playerid, PIN_TD[8], 0);
	PlayerTextDrawSetOutline(playerid, PIN_TD[8], 0);
	PlayerTextDrawBackgroundColor(playerid, PIN_TD[8], 255);
	PlayerTextDrawFont(playerid, PIN_TD[8], 2);
	PlayerTextDrawSetProportional(playerid, PIN_TD[8], 1);
	PlayerTextDrawSetShadow(playerid, PIN_TD[8], 0);
	PlayerTextDrawSetSelectable(playerid, PIN_TD[8], true);

	PIN_TD[9] = CreatePlayerTextDraw(playerid, 49.999988, 265.911163, "8");
	PlayerTextDrawLetterSize(playerid, PIN_TD[9], 0.557666, 2.433773);
	PlayerTextDrawTextSize(playerid, PIN_TD[9], 64.000000, 20.00000);
	PlayerTextDrawAlignment(playerid, PIN_TD[9], 1);
	PlayerTextDrawColor(playerid, PIN_TD[9], -1);
	PlayerTextDrawUseBox(playerid, PIN_TD[9], 1);
	PlayerTextDrawBoxColor(playerid, PIN_TD[9], -256);
	PlayerTextDrawSetShadow(playerid, PIN_TD[9], 0);
	PlayerTextDrawSetOutline(playerid, PIN_TD[9], 0);
	PlayerTextDrawBackgroundColor(playerid, PIN_TD[9], 255);
	PlayerTextDrawFont(playerid, PIN_TD[9], 2);
	PlayerTextDrawSetProportional(playerid, PIN_TD[9], 1);
	PlayerTextDrawSetShadow(playerid, PIN_TD[9], 0);
	PlayerTextDrawSetSelectable(playerid, PIN_TD[9], true);

	PIN_TD[10] = CreatePlayerTextDraw(playerid, 75.666648, 266.740570, "9");
	PlayerTextDrawLetterSize(playerid, PIN_TD[10], 0.557666, 2.433773);
	PlayerTextDrawTextSize(playerid, PIN_TD[10], 91.000000, 20.00000);
	PlayerTextDrawAlignment(playerid, PIN_TD[10], 1);
	PlayerTextDrawColor(playerid, PIN_TD[10], -1);
	PlayerTextDrawUseBox(playerid, PIN_TD[10], 1);
	PlayerTextDrawBoxColor(playerid, PIN_TD[10], -256); // 256
	PlayerTextDrawSetShadow(playerid, PIN_TD[10], 0);
	PlayerTextDrawSetOutline(playerid, PIN_TD[10], 0);
	PlayerTextDrawBackgroundColor(playerid, PIN_TD[10], 255);
	PlayerTextDrawFont(playerid, PIN_TD[10], 2);
	PlayerTextDrawSetProportional(playerid, PIN_TD[10], 1);
	PlayerTextDrawSetShadow(playerid, PIN_TD[10], 0);
	PlayerTextDrawSetSelectable(playerid, PIN_TD[10], true);

	PIN_TD[11] = CreatePlayerTextDraw(playerid, 20.666700, 182.533325, "box");
	PlayerTextDrawLetterSize(playerid, PIN_TD[11], 0.000000, 2.233330);
	PlayerTextDrawTextSize(playerid, PIN_TD[11], 95.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PIN_TD[11], 1);
	PlayerTextDrawColor(playerid, PIN_TD[11], -1);
	PlayerTextDrawUseBox(playerid, PIN_TD[11], 1);
	PlayerTextDrawBoxColor(playerid, PIN_TD[11], -1061109505);
	PlayerTextDrawSetShadow(playerid, PIN_TD[11], 0);
	PlayerTextDrawSetOutline(playerid, PIN_TD[11], 0);
	PlayerTextDrawBackgroundColor(playerid, PIN_TD[11], 255);
	PlayerTextDrawFont(playerid, PIN_TD[11], 1);
	PlayerTextDrawSetProportional(playerid, PIN_TD[11], 1);
	PlayerTextDrawSetShadow(playerid, PIN_TD[11], 0);

	PIN_TD[12] = CreatePlayerTextDraw(playerid, 58.333358, 180.459289, "_"); // THE STRING :O
	PlayerTextDrawLetterSize(playerid, PIN_TD[12], 0.557666, 2.433773);
	PlayerTextDrawAlignment(playerid, PIN_TD[12], 2);
	PlayerTextDrawColor(playerid, PIN_TD[12], -1);
	PlayerTextDrawSetShadow(playerid, PIN_TD[12], 0);
	PlayerTextDrawSetOutline(playerid, PIN_TD[12], 1);
	PlayerTextDrawBackgroundColor(playerid, PIN_TD[12], 255);
	PlayerTextDrawFont(playerid, PIN_TD[12], 2);
	PlayerTextDrawSetProportional(playerid, PIN_TD[12], 1);
	PlayerTextDrawSetShadow(playerid, PIN_TD[12], 0);

	PIN_TD[13] = CreatePlayerTextDraw(playerid, 58.000049, 316.103668, "ENTER");
	PlayerTextDrawLetterSize(playerid, PIN_TD[13], 0.400000, 1.600000);
	PlayerTextDrawTextSize(playerid, PIN_TD[13], 20.000000, 84.000000);
	PlayerTextDrawAlignment(playerid, PIN_TD[13], 2);
	PlayerTextDrawColor(playerid, PIN_TD[13], -1);
	PlayerTextDrawUseBox(playerid, PIN_TD[13], 1);
	PlayerTextDrawBoxColor(playerid, PIN_TD[13], -1711275777);
	PlayerTextDrawSetShadow(playerid, PIN_TD[13], 0);
	PlayerTextDrawSetOutline(playerid, PIN_TD[13], 0);
	PlayerTextDrawBackgroundColor(playerid, PIN_TD[13], 255);
	PlayerTextDrawFont(playerid, PIN_TD[13], 1);
	PlayerTextDrawSetProportional(playerid, PIN_TD[13], 1);
	PlayerTextDrawSetShadow(playerid, PIN_TD[13], 0);
	PlayerTextDrawSetSelectable(playerid, PIN_TD[13], true);

	// <= GIFT BOX =>
	GETGIFT_TD[ 0 ] = CreatePlayerTextDraw(playerid, 176.617889, 183.583419, "box");
	PlayerTextDrawLetterSize(playerid, GETGIFT_TD[ 0 ], 0.000000, 10.983894);
	PlayerTextDrawTextSize(playerid, GETGIFT_TD[ 0 ], 466.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, GETGIFT_TD[ 0 ], 1);
	PlayerTextDrawColor(playerid, GETGIFT_TD[ 0 ], -1);
	PlayerTextDrawUseBox(playerid, GETGIFT_TD[ 0 ], 1);
	PlayerTextDrawBoxColor(playerid, GETGIFT_TD[ 0 ], 255);
	PlayerTextDrawSetShadow(playerid, GETGIFT_TD[ 0 ], 0);
	PlayerTextDrawSetOutline(playerid, GETGIFT_TD[ 0 ], 0);
	PlayerTextDrawBackgroundColor(playerid, GETGIFT_TD[ 0 ], 255);
	PlayerTextDrawFont(playerid, GETGIFT_TD[ 0 ], 1);
	PlayerTextDrawSetProportional(playerid, GETGIFT_TD[ 0 ], 1);
	PlayerTextDrawSetShadow(playerid, GETGIFT_TD[ 0 ], 0);

	GETGIFT_TD[ 1 ] = CreatePlayerTextDraw(playerid, 179.729110, 188.250000, "");
	PlayerTextDrawLetterSize(playerid, GETGIFT_TD[ 1 ], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, GETGIFT_TD[ 1 ], 90.000000, 90.000000);
	PlayerTextDrawAlignment(playerid, GETGIFT_TD[ 1 ], 1);
	PlayerTextDrawColor(playerid, GETGIFT_TD[ 1 ], -1);
	PlayerTextDrawSetShadow(playerid, GETGIFT_TD[ 1 ], 0);
	PlayerTextDrawSetOutline(playerid, GETGIFT_TD[ 1 ], 0);
	PlayerTextDrawBackgroundColor(playerid, GETGIFT_TD[ 1 ], -9436929);
	PlayerTextDrawFont(playerid, GETGIFT_TD[ 1 ], 5);
	PlayerTextDrawSetProportional(playerid, GETGIFT_TD[ 1 ], 0);
	PlayerTextDrawSetShadow(playerid, GETGIFT_TD[ 1 ], 0);
	PlayerTextDrawSetSelectable(playerid, GETGIFT_TD[ 1 ], true);
	PlayerTextDrawSetPreviewModel(playerid, GETGIFT_TD[ 1 ], 19055);
	PlayerTextDrawSetPreviewRot(playerid, GETGIFT_TD[ 1 ], -30.000000, 0.000000, 45.000000, 1.000000);

	GETGIFT_TD[ 2 ] = CreatePlayerTextDraw(playerid, 277.181304, 188.250015, "");
	PlayerTextDrawLetterSize(playerid, GETGIFT_TD[ 2 ], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, GETGIFT_TD[ 2 ], 90.000000, 90.000000);
	PlayerTextDrawAlignment(playerid, GETGIFT_TD[ 2 ], 1);
	PlayerTextDrawColor(playerid, GETGIFT_TD[ 2 ], -1);
	PlayerTextDrawSetShadow(playerid, GETGIFT_TD[ 2 ], 0);
	PlayerTextDrawSetOutline(playerid, GETGIFT_TD[ 2 ], 0);
	PlayerTextDrawBackgroundColor(playerid, GETGIFT_TD[ 2 ], -9436929);
	PlayerTextDrawFont(playerid, GETGIFT_TD[ 2 ], 5);
	PlayerTextDrawSetProportional(playerid, GETGIFT_TD[ 2 ], 0);
	PlayerTextDrawSetShadow(playerid, GETGIFT_TD[ 2 ], 0);
	PlayerTextDrawSetSelectable(playerid, GETGIFT_TD[ 2 ], true);
	PlayerTextDrawSetPreviewModel(playerid, GETGIFT_TD[ 2 ], 19054);
	PlayerTextDrawSetPreviewRot(playerid, GETGIFT_TD[ 2 ], -30.000000, 0.000000, 45.000000, 1.000000);

	GETGIFT_TD[ 3 ] = CreatePlayerTextDraw(playerid, 373.696746, 188.249984, "");
	PlayerTextDrawLetterSize(playerid, GETGIFT_TD[ 3 ], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, GETGIFT_TD[ 3 ], 90.000000, 90.000000);
	PlayerTextDrawAlignment(playerid, GETGIFT_TD[ 3 ], 1);
	PlayerTextDrawColor(playerid, GETGIFT_TD[ 3 ], -1);
	PlayerTextDrawSetShadow(playerid, GETGIFT_TD[ 3 ], 0);
	PlayerTextDrawSetOutline(playerid, GETGIFT_TD[ 3 ], 0);
	PlayerTextDrawBackgroundColor(playerid, GETGIFT_TD[ 3 ], -9436929);
	PlayerTextDrawFont(playerid, GETGIFT_TD[ 3 ], 5);
	PlayerTextDrawSetProportional(playerid, GETGIFT_TD[ 3 ], 0);
	PlayerTextDrawSetShadow(playerid, GETGIFT_TD[ 3 ], 0);
	PlayerTextDrawSetSelectable(playerid, GETGIFT_TD[ 3 ], true);
	PlayerTextDrawSetPreviewModel(playerid, GETGIFT_TD[ 3 ], 19058);
	PlayerTextDrawSetPreviewRot(playerid, GETGIFT_TD[ 3 ], -30.000000, 0.000000, 45.000000, 1.000000);

	GETGIFT_TD[ 4 ] = CreatePlayerTextDraw(playerid, 321.859680, 159.566589, "Open-Gift");
	PlayerTextDrawLetterSize(playerid, GETGIFT_TD[ 4 ], 0.579443, 2.580000);
	PlayerTextDrawAlignment(playerid, GETGIFT_TD[ 4 ], 2);
	PlayerTextDrawColor(playerid, GETGIFT_TD[ 4 ], -1);
	PlayerTextDrawSetShadow(playerid, GETGIFT_TD[ 4 ], 0);
	PlayerTextDrawSetOutline(playerid, GETGIFT_TD[ 4 ], 1);
	PlayerTextDrawBackgroundColor(playerid, GETGIFT_TD[ 4 ], 255);
	PlayerTextDrawFont(playerid, GETGIFT_TD[ 4 ], 0);
	PlayerTextDrawSetProportional(playerid, GETGIFT_TD[ 4 ], 1);
	PlayerTextDrawSetShadow(playerid, GETGIFT_TD[ 4 ], 0);

	SPECTATE_TD = CreatePlayerTextDraw(playerid, 229.000198, 338.903808, "K1DMACHINE. (~r~~h~100~w~~h~)~n~H: 100 - A: 100~n~W: 0 - JAIL: ~r~~h~09:15~n~VEHICLE: ~r~~h~411 (999 HP)~n~~y~~h~112 KM/H");
	PlayerTextDrawLetterSize(playerid, SPECTATE_TD, 0.449999, 1.600000);
	PlayerTextDrawAlignment(playerid, SPECTATE_TD, 1);
	PlayerTextDrawColor(playerid, SPECTATE_TD, -1);
	PlayerTextDrawSetShadow(playerid, SPECTATE_TD, 0);
	PlayerTextDrawSetOutline(playerid, SPECTATE_TD, 1);
	PlayerTextDrawBackgroundColor(playerid, SPECTATE_TD, 51);
	PlayerTextDrawFont(playerid, SPECTATE_TD, 2);
	PlayerTextDrawSetProportional(playerid, SPECTATE_TD, 1);

	// < Player's Textdraws >
	PLAYER_TD[ 0 ] = CreatePlayerTextDraw(playerid, 1.416747, 426.673004, "_"); // GPS
	PlayerTextDrawLetterSize(playerid, PLAYER_TD[ 0 ], 0.208665, 1.194221);
	PlayerTextDrawAlignment(playerid, PLAYER_TD[ 0 ], 1);
	PlayerTextDrawColor(playerid, PLAYER_TD[ 0 ], -1);
	PlayerTextDrawSetShadow(playerid, PLAYER_TD[ 0 ], 0);
	PlayerTextDrawSetOutline(playerid, PLAYER_TD[ 0 ], 1);
	PlayerTextDrawBackgroundColor(playerid, PLAYER_TD[ 0 ], 98);
	PlayerTextDrawFont(playerid, PLAYER_TD[ 0 ], 2);
	PlayerTextDrawSetProportional(playerid, PLAYER_TD[ 0 ], 1);
	PlayerTextDrawSetShadow(playerid, PLAYER_TD[ 0 ], 0);

	PLAYER_TD[ 1 ] = CreatePlayerTextDraw(playerid, 500.199951, 330.147064, "_" );
	PlayerTextDrawLetterSize(playerid, PLAYER_TD[ 1 ], 0.236395, 1.629866);
	PlayerTextDrawAlignment(playerid, PLAYER_TD[ 1 ], 1);
	PlayerTextDrawColor(playerid, PLAYER_TD[ 1 ], -1);
	PlayerTextDrawSetShadow(playerid, PLAYER_TD[ 1 ], 0);
	PlayerTextDrawSetOutline(playerid, PLAYER_TD[ 1 ], 1);
	PlayerTextDrawBackgroundColor(playerid, PLAYER_TD[ 1 ], 255);
	PlayerTextDrawFont(playerid, PLAYER_TD[ 1 ], 2);
	PlayerTextDrawSetProportional(playerid, PLAYER_TD[ 1 ], 1);

	PLAYER_TD[ 2 ] = CreatePlayerTextDraw(playerid, 316.315979, 396.344390, "_"); // INFOTD_MSG
	PlayerTextDrawLetterSize(playerid, PLAYER_TD[ 2 ], 0.222666, 1.044148);
	PlayerTextDrawAlignment(playerid, PLAYER_TD[ 2 ], 2);
	PlayerTextDrawColor(playerid, PLAYER_TD[ 2 ], -1);
	PlayerTextDrawSetShadow(playerid, PLAYER_TD[ 2 ], 0);
	PlayerTextDrawSetOutline(playerid, PLAYER_TD[ 2 ], 1);
	PlayerTextDrawBackgroundColor(playerid, PLAYER_TD[ 2 ], 51);
	PlayerTextDrawFont(playerid, PLAYER_TD[ 2 ], 1);
	PlayerTextDrawSetProportional(playerid, PLAYER_TD[ 2 ], 1);
	PlayerTextDrawSetShadow(playerid, PLAYER_TD[ 2 ], 0);

	PLAYER_TD[ 3 ] = CreatePlayerTextDraw(playerid,495.000000, 123.000000, "_" );
	PlayerTextDrawBackgroundColor(playerid,PLAYER_TD[ 3 ], 255);
	PlayerTextDrawFont(playerid,PLAYER_TD[ 3 ], 2);
	PlayerTextDrawLetterSize(playerid,PLAYER_TD[ 3 ], 0.200000, 1.600000);
	PlayerTextDrawColor(playerid,PLAYER_TD[ 3 ], -1);
	PlayerTextDrawSetOutline(playerid,PLAYER_TD[ 3 ], 1);
	PlayerTextDrawSetProportional(playerid,PLAYER_TD[ 3 ], 1);
	PlayerTextDrawSetSelectable(playerid,PLAYER_TD[ 3 ], 0);

	PLAYER_TD[ 4 ] = CreatePlayerTextDraw(playerid,87.000000, 314.000000, "00:00~n~Jail Time" );
	PlayerTextDrawAlignment(playerid,PLAYER_TD[ 4 ], 2);
	PlayerTextDrawBackgroundColor(playerid,PLAYER_TD[ 4 ], 51);
	PlayerTextDrawFont(playerid,PLAYER_TD[ 4 ], 1);
	PlayerTextDrawLetterSize(playerid,PLAYER_TD[ 4 ], 0.430000, 1.300000);
	PlayerTextDrawColor(playerid,PLAYER_TD[ 4 ], -16776961);
	PlayerTextDrawSetOutline(playerid,PLAYER_TD[ 4 ], 1);
	PlayerTextDrawSetProportional(playerid,PLAYER_TD[ 4 ], 1);
	PlayerTextDrawSetSelectable(playerid,PLAYER_TD[ 4 ], 0);

	PLAYER_TD[ 5 ] = CreatePlayerTextDraw(playerid,250.000000, 421.000000, "~r~~h~you are undercover" );
	PlayerTextDrawBackgroundColor(playerid,PLAYER_TD[ 5 ], 51);
	PlayerTextDrawFont(playerid,PLAYER_TD[ 5 ], 3);
	PlayerTextDrawLetterSize(playerid,PLAYER_TD[ 5 ], 0.410000, 1.100000);
	PlayerTextDrawColor(playerid,PLAYER_TD[ 5 ], -1);
	PlayerTextDrawSetOutline(playerid,PLAYER_TD[ 5 ], 0);
	PlayerTextDrawSetProportional(playerid,PLAYER_TD[ 5 ], 1);
	PlayerTextDrawSetShadow(playerid,PLAYER_TD[ 5 ], 1);
	PlayerTextDrawSetSelectable(playerid,PLAYER_TD[ 5 ], 0);

	PLAYER_TD[ 6 ] = CreatePlayerTextDraw(playerid, 1.283413, 436.913146, "_"); // FPS
	PlayerTextDrawLetterSize(playerid, PLAYER_TD[ 6 ], 0.216331, 1.188369);
	PlayerTextDrawAlignment(playerid, PLAYER_TD[ 6 ], 1);
	PlayerTextDrawColor(playerid, PLAYER_TD[ 6 ], -1);
	PlayerTextDrawSetShadow(playerid, PLAYER_TD[ 6 ], 0);
	PlayerTextDrawSetOutline(playerid, PLAYER_TD[ 6 ], 1);
	PlayerTextDrawBackgroundColor(playerid, PLAYER_TD[ 6 ], 98);
	PlayerTextDrawFont(playerid, PLAYER_TD[ 6 ], 2);
	PlayerTextDrawSetProportional(playerid, PLAYER_TD[ 6 ], 1);
	PlayerTextDrawSetShadow(playerid, PLAYER_TD[ 6 ], 0);

	PLAYER_TD[ 7 ] = CreatePlayerTextDraw(playerid, 609.666625, 65.540725, "_"); // HP
	PlayerTextDrawLetterSize(playerid, PLAYER_TD[ 7 ], 0.228332, 1.098075);
	PlayerTextDrawAlignment(playerid, PLAYER_TD[ 7 ], 1);
	PlayerTextDrawColor(playerid, PLAYER_TD[ 7 ], -16776961);
	PlayerTextDrawSetShadow(playerid, PLAYER_TD[ 7 ], 0);
	PlayerTextDrawSetOutline(playerid, PLAYER_TD[ 7 ], 1);
	PlayerTextDrawBackgroundColor(playerid, PLAYER_TD[ 7 ], 51);
	PlayerTextDrawFont(playerid, PLAYER_TD[ 7 ], 2);
	PlayerTextDrawSetProportional(playerid, PLAYER_TD[ 7 ], 1);

	PLAYER_TD[ 8 ] = CreatePlayerTextDraw(playerid, 610.000000, 43.140747, "_"); // Armour
	PlayerTextDrawLetterSize(playerid, PLAYER_TD[ 8 ], 0.228332, 1.098075);
	PlayerTextDrawAlignment(playerid, PLAYER_TD[ 8 ], 1);
	PlayerTextDrawColor(playerid, PLAYER_TD[ 8 ], -1);
	PlayerTextDrawSetShadow(playerid, PLAYER_TD[ 8 ], 0);
	PlayerTextDrawSetOutline(playerid, PLAYER_TD[ 8 ], 1);
	PlayerTextDrawBackgroundColor(playerid, PLAYER_TD[ 8 ], 51);
	PlayerTextDrawFont(playerid, PLAYER_TD[ 8 ], 2);
	PlayerTextDrawSetProportional(playerid, PLAYER_TD[ 8 ], 1);

	PLAYER_TD[ 9 ] = CreatePlayerTextDraw(playerid, 553.323913, 134.749954, "_");
	PlayerTextDrawLetterSize(playerid, PLAYER_TD[ 9 ], 0.263994, 1.634999);
	PlayerTextDrawFont(playerid, PLAYER_TD[ 9 ], 2);
	PlayerTextDrawAlignment(playerid, PLAYER_TD[ 9 ], 2);
	PlayerTextDrawColor(playerid, PLAYER_TD[ 9 ], -1);
	PlayerTextDrawSetShadow(playerid, PLAYER_TD[ 9 ], 0);
	PlayerTextDrawSetOutline(playerid, PLAYER_TD[ 9 ], 1);
	PlayerTextDrawBackgroundColor(playerid, PLAYER_TD[ 9 ], 51);
	PlayerTextDrawSetProportional(playerid,PLAYER_TD[ 8 ], 1);
	PlayerTextDrawSetSelectable(playerid,PLAYER_TD[ 8 ], 0);

	PLAYER_TD[ 10 ] = CreatePlayerTextDraw(playerid, 638.333923, 425.729888, "_"); // LEVEL / RP
	PlayerTextDrawLetterSize(playerid, PLAYER_TD[ 10 ], 0.196666, 0.905332);
	PlayerTextDrawAlignment(playerid, PLAYER_TD[ 10 ], 3);
	PlayerTextDrawColor(playerid, PLAYER_TD[ 10 ], -1);
	PlayerTextDrawSetShadow(playerid, PLAYER_TD[ 10 ], 0);
	PlayerTextDrawSetOutline(playerid, PLAYER_TD[ 10 ], 1);
	PlayerTextDrawBackgroundColor(playerid, PLAYER_TD[ 10 ], 62);
	PlayerTextDrawFont(playerid, PLAYER_TD[ 10 ], 2);
	PlayerTextDrawSetProportional(playerid, PLAYER_TD[ 10 ], 1);
	PlayerTextDrawSetShadow(playerid, PLAYER_TD[ 10 ], 0);

    CeasPTD = CreatePlayerTextDraw(playerid, 630.000000, 412.000000, "~w~00:00 (0.00)");
	PlayerTextDrawLetterSize(playerid, CeasPTD, 0.190005, 1.252915);
	PlayerTextDrawAlignment(playerid, CeasPTD, 3);
	PlayerTextDrawColor(playerid, CeasPTD, -1);
	PlayerTextDrawSetShadow(playerid, CeasPTD, 0);
	PlayerTextDrawSetOutline(playerid, CeasPTD, 1);
	PlayerTextDrawBackgroundColor(playerid, CeasPTD, 127);
	PlayerTextDrawFont(playerid, CeasPTD, 2);
	PlayerTextDrawSetProportional(playerid, CeasPTD, 1);
	PlayerTextDrawSetShadow(playerid, CeasPTD, 0);

	/*PLAYER_TD[ 10 ] = CreatePlayerTextDraw(playerid, 558.500000, 128.312500, "_"); // LEVEL / RP
	PlayerTextDrawLetterSize(playerid, PLAYER_TD[ 10 ], 0.186500, 0.856251);
	PlayerTextDrawAlignment(playerid, PLAYER_TD[ 10 ], 2);
	PlayerTextDrawColor(playerid, PLAYER_TD[ 10 ], -1);
	PlayerTextDrawSetShadow(playerid, PLAYER_TD[ 10 ], 0);
	PlayerTextDrawSetOutline(playerid, PLAYER_TD[ 10 ], 1);
	PlayerTextDrawBackgroundColor(playerid, PLAYER_TD[ 10 ], 51);
	PlayerTextDrawFont(playerid, PLAYER_TD[ 10 ], 2);
	PlayerTextDrawSetProportional(playerid, PLAYER_TD[ 10 ], 1);*/

	// < Player Text Draw LOGO )

    SERVER_TD[ 0 ] = CreatePlayerTextDraw(playerid, 636.220581, 432.350585, ""SERVER_LOGO"");
    PlayerTextDrawLetterSize(playerid, SERVER_TD[ 0 ], 0.231433, 1.429164);
    PlayerTextDrawAlignment(playerid, SERVER_TD[ 0 ], 3);
    PlayerTextDrawColor(playerid, SERVER_TD[ 0 ], -1);
    PlayerTextDrawSetShadow(playerid, SERVER_TD[ 0 ], 0);
    PlayerTextDrawSetOutline(playerid, SERVER_TD[ 0 ], 1);
    PlayerTextDrawBackgroundColor(playerid, SERVER_TD[ 0 ], 255);
    PlayerTextDrawFont(playerid, SERVER_TD[ 0 ], 2);
    PlayerTextDrawSetProportional(playerid, SERVER_TD[ 0 ], 1);

/*	SERVER_TD[ 0 ] = CreatePlayerTextDraw(playerid,636.000000, 432.000000, ""SERVER_LOGO"");
	PlayerTextDrawAlignment(playerid,SERVER_TD[ 0 ], 3);
	PlayerTextDrawBackgroundColor(playerid,SERVER_TD[ 0 ], 100);
	PlayerTextDrawFont(playerid,SERVER_TD[ 0 ], 2);
	PlayerTextDrawLetterSize(playerid,SERVER_TD[ 0 ], 0.209999, 1.500000);
	PlayerTextDrawColor(playerid,SERVER_TD[ 0 ], -1);
	PlayerTextDrawSetOutline(playerid,SERVER_TD[ 0 ], 1);
	PlayerTextDrawSetProportional(playerid,SERVER_TD[ 0 ], 1);
	PlayerTextDrawSetSelectable(playerid,SERVER_TD[ 0 ], 0);*/

	SERVER_TD[ 1 ] = CreatePlayerTextDraw(playerid, 315.334045, 1.259393, "SAFEZONE");
	PlayerTextDrawLetterSize(playerid, SERVER_TD[ 1 ], 0.400000, 1.600000);
	PlayerTextDrawAlignment(playerid, SERVER_TD[ 1 ], 2);
	PlayerTextDrawColor(playerid, SERVER_TD[ 1 ], -1731723009);
	PlayerTextDrawSetShadow(playerid, SERVER_TD[ 1 ], 0);
	PlayerTextDrawSetOutline(playerid, SERVER_TD[ 1 ], 1);
	PlayerTextDrawBackgroundColor(playerid, SERVER_TD[ 1 ], 38);
	PlayerTextDrawFont(playerid, SERVER_TD[ 1 ], 3);
	PlayerTextDrawSetProportional(playerid, SERVER_TD[ 1 ], 1);
	PlayerTextDrawSetShadow(playerid, SERVER_TD[ 1 ], 0);

	SERVER_TD[ 2 ] = CreatePlayerTextDraw(playerid,320.000000, 435.000000, "_");
	PlayerTextDrawAlignment(playerid,SERVER_TD[ 2 ], 2);
	PlayerTextDrawColor(playerid, SERVER_TD[ 1 ], -1731723009);
	PlayerTextDrawFont(playerid,SERVER_TD[ 2 ], 2);
	PlayerTextDrawLetterSize(playerid,SERVER_TD[ 2 ], 0.180000, 1.200000);
	PlayerTextDrawColor(playerid,SERVER_TD[ 2 ], -1);
	PlayerTextDrawSetOutline(playerid,SERVER_TD[ 2 ], 1);
	PlayerTextDrawSetProportional(playerid,SERVER_TD[ 2 ], 1);
	PlayerTextDrawSetSelectable(playerid,SERVER_TD[ 2 ], 0);

	ticks_td = CreatePlayerTextDraw(playerid,320.000000, 435.000000, "_");
	PlayerTextDrawAlignment(playerid,ticks_td , 2);
	PlayerTextDrawColor(playerid, ticks_td , -1731723009);
	PlayerTextDrawFont(playerid,ticks_td , 2);
	PlayerTextDrawLetterSize(playerid,ticks_td , 0.180000, 1.200000);
	PlayerTextDrawColor(playerid,ticks_td , -1);
	PlayerTextDrawSetOutline(playerid,ticks_td , 1);
	PlayerTextDrawSetProportional(playerid,ticks_td , 1);
	PlayerTextDrawSetSelectable(playerid,ticks_td , 0);
	
	// < THE END Stack no?! )

	WAR_TD[ 0 ] = CreatePlayerTextDraw(playerid,676.000000, 272.000000, "~n~" );
	PlayerTextDrawBackgroundColor(playerid,WAR_TD[ 0 ], 255);
	PlayerTextDrawFont(playerid,WAR_TD[ 0 ], 1);
	PlayerTextDrawLetterSize(playerid,WAR_TD[ 0 ], 0.519999, 5.899999);
	PlayerTextDrawColor(playerid,WAR_TD[ 0 ], -1);
	PlayerTextDrawSetOutline(playerid,WAR_TD[ 0 ], 0);
	PlayerTextDrawSetProportional(playerid,WAR_TD[ 0 ], 1);
	PlayerTextDrawSetShadow(playerid,WAR_TD[ 0 ], 1);
	PlayerTextDrawUseBox(playerid,WAR_TD[ 0 ], 1);
	PlayerTextDrawBoxColor(playerid,WAR_TD[ 0 ], 100);
	PlayerTextDrawTextSize(playerid,WAR_TD[ 0 ], 458.000000, 29.000000);
	PlayerTextDrawSetSelectable(playerid,WAR_TD[ 0 ], 0);

	WAR_TD[ 1 ] = CreatePlayerTextDraw(playerid,552.000000, 281.000000, "Turf: Las Ventura Airport~n~Verdant Family 6-2 Vietnamese Boys~n~On turf: Verdant Family 13-2 Vietnamese Boys~n~Kills: 7 Deaths: 2 Seconds on turf: 660" );
	PlayerTextDrawAlignment(playerid,WAR_TD[ 1 ], 2);
	PlayerTextDrawBackgroundColor(playerid,WAR_TD[ 1 ], 255);
	PlayerTextDrawFont(playerid,WAR_TD[ 1 ], 1);
	PlayerTextDrawLetterSize(playerid,WAR_TD[ 1 ], 0.209999, 0.999998);
	PlayerTextDrawColor(playerid,WAR_TD[ 1 ], -1);
	PlayerTextDrawSetOutline(playerid,WAR_TD[ 1 ], 0);
	PlayerTextDrawSetProportional(playerid,WAR_TD[ 1 ], 1);
	PlayerTextDrawSetShadow(playerid,WAR_TD[ 1 ], 0);
	PlayerTextDrawSetSelectable(playerid,WAR_TD[ 1 ], 0);

	WAR_TD[ 2 ] = CreatePlayerTextDraw(playerid,553.000000, 262.000000, "WAR TIMER: ~y~~h~15:25" );
	PlayerTextDrawAlignment(playerid,WAR_TD[ 2 ], 2);
	PlayerTextDrawBackgroundColor(playerid,WAR_TD[ 2 ], 255);
	PlayerTextDrawFont(playerid,WAR_TD[ 2 ], 2);
	PlayerTextDrawLetterSize(playerid,WAR_TD[ 2 ], 0.230000, 1.699999);
	PlayerTextDrawColor(playerid,WAR_TD[ 2 ], -1);
	PlayerTextDrawSetOutline(playerid,WAR_TD[ 2 ], 0);
	PlayerTextDrawSetProportional(playerid,WAR_TD[ 2 ], 1);
	PlayerTextDrawSetShadow(playerid,WAR_TD[ 2 ], 1);
	PlayerTextDrawSetSelectable(playerid,WAR_TD[ 2 ], 0);

	// < Load Jobs TDs )
	JOB_TD[ 0 ] = CreatePlayerTextDraw(playerid,-7.000000, 222.000000, "~n~");
	PlayerTextDrawBackgroundColor(playerid,JOB_TD[ 0 ], 255);
	PlayerTextDrawFont(playerid,JOB_TD[ 0 ], 1);
	PlayerTextDrawLetterSize(playerid,JOB_TD[ 0 ], 0.769999, 6.699999);
	PlayerTextDrawColor(playerid,JOB_TD[ 0 ], -1);
	PlayerTextDrawSetOutline(playerid,JOB_TD[ 0 ], 1);
	PlayerTextDrawSetProportional(playerid,JOB_TD[ 0 ], 1);
	PlayerTextDrawUseBox(playerid,JOB_TD[ 0 ], 1);
	PlayerTextDrawBoxColor(playerid,JOB_TD[ 0 ], 120);
	PlayerTextDrawTextSize(playerid,JOB_TD[ 0 ], 156.000000, 31.000000);
	PlayerTextDrawSetSelectable(playerid,JOB_TD[ 0 ], 0);

	JOB_TD[ 1 ] = CreatePlayerTextDraw(playerid,75.000000, 205.000000, "_"); // Job Name
	PlayerTextDrawAlignment(playerid,JOB_TD[ 1 ], 2);
	PlayerTextDrawBackgroundColor(playerid,JOB_TD[ 1 ], 255);
	PlayerTextDrawFont(playerid,JOB_TD[ 1 ], 0);
	PlayerTextDrawLetterSize(playerid,JOB_TD[ 1 ], 0.639998, 2.599998);
	PlayerTextDrawColor(playerid,JOB_TD[ 1 ], -1);
	PlayerTextDrawSetOutline(playerid,JOB_TD[ 1 ], 1);
	PlayerTextDrawSetProportional(playerid,JOB_TD[ 1 ], 1);
	PlayerTextDrawSetSelectable(playerid,JOB_TD[ 1 ], 0);

	JOB_TD[ 2 ] = CreatePlayerTextDraw(playerid,3.000000, 232.000000, "_"); // Job Skill
	PlayerTextDrawBackgroundColor(playerid,JOB_TD[ 2 ], 255);
	PlayerTextDrawFont(playerid,JOB_TD[ 2 ], 3);
	PlayerTextDrawLetterSize(playerid,JOB_TD[ 2 ], 0.259999, 1.199998);
	PlayerTextDrawColor(playerid,JOB_TD[ 2 ], -1);
	PlayerTextDrawSetOutline(playerid,JOB_TD[ 2 ], 0);
	PlayerTextDrawSetProportional(playerid,JOB_TD[ 2 ], 1);
	PlayerTextDrawSetShadow(playerid,JOB_TD[ 2 ], 0);
	PlayerTextDrawSetSelectable(playerid,JOB_TD[ 2 ], 0);

	JOB_TD[ 3 ] = CreatePlayerTextDraw(playerid,3.000000, 246.000000, "_"); // Job Description
	PlayerTextDrawBackgroundColor(playerid,JOB_TD[ 3 ], 255);
	PlayerTextDrawFont(playerid,JOB_TD[ 3 ], 1);
	PlayerTextDrawLetterSize(playerid,JOB_TD[ 3 ], 0.180000, 0.799997);
	PlayerTextDrawColor(playerid,JOB_TD[ 3 ], -1);
	PlayerTextDrawSetOutline(playerid,JOB_TD[ 3 ], 0);
	PlayerTextDrawSetProportional(playerid,JOB_TD[ 3 ], 1);
	PlayerTextDrawSetShadow(playerid,JOB_TD[ 3 ], 0);
	PlayerTextDrawSetSelectable(playerid,JOB_TD[ 3 ], 0);

	JOB_TD[ 4 ] = CreatePlayerTextDraw(playerid,3.000000, 271.000000, "_"); // Job Feed
	PlayerTextDrawBackgroundColor(playerid,JOB_TD[ 4 ], 255);
	PlayerTextDrawFont(playerid,JOB_TD[ 4 ], 2);
	PlayerTextDrawLetterSize(playerid,JOB_TD[ 4 ], 0.180000, 1.199998);
	PlayerTextDrawColor(playerid,JOB_TD[ 4 ], -1);
	PlayerTextDrawSetOutline(playerid,JOB_TD[ 4 ], 0);
	PlayerTextDrawSetProportional(playerid,JOB_TD[ 4 ], 1);
	PlayerTextDrawSetShadow(playerid,JOB_TD[ 4 ], 0);
	PlayerTextDrawSetSelectable(playerid,JOB_TD[ 4 ], 0);

	/*JOB_TD[ 0 ] = CreatePlayerTextDraw(playerid,686.000000, 316.000000, "~n~"); // Job BOX
	PlayerTextDrawBackgroundColor(playerid,JOB_TD[ 0 ], 255);
	PlayerTextDrawFont(playerid,JOB_TD[ 0 ], 1);
	PlayerTextDrawLetterSize(playerid,JOB_TD[ 0 ], 0.769999, 6.700000);
	PlayerTextDrawColor(playerid,JOB_TD[ 0 ], -1);
	PlayerTextDrawSetOutline(playerid,JOB_TD[ 0 ], 1);
	PlayerTextDrawSetProportional(playerid,JOB_TD[ 0 ], 1);
	PlayerTextDrawUseBox(playerid,JOB_TD[ 0 ], 1);
	PlayerTextDrawBoxColor(playerid,JOB_TD[ 0 ], 120);
	PlayerTextDrawTextSize(playerid,JOB_TD[ 0 ], 486.000000, 31.000000);
	PlayerTextDrawSetSelectable(playerid,JOB_TD[ 0 ], 0);

	JOB_TD[ 1 ] = CreatePlayerTextDraw(playerid,572.000000, 299.000000, "_"); // Job Name
	PlayerTextDrawAlignment(playerid,JOB_TD[ 1 ], 2);
	PlayerTextDrawBackgroundColor(playerid,JOB_TD[ 1 ], 255);
	PlayerTextDrawFont(playerid,JOB_TD[ 1 ], 0);
	PlayerTextDrawLetterSize(playerid,JOB_TD[ 1 ], 0.639998, 2.599998);
	PlayerTextDrawColor(playerid,JOB_TD[ 1 ], -1);
	PlayerTextDrawSetOutline(playerid,JOB_TD[ 1 ], 1);
	PlayerTextDrawSetProportional(playerid,JOB_TD[ 1 ], 1);
	PlayerTextDrawSetSelectable(playerid,JOB_TD[ 1 ], 0);

	JOB_TD[ 2 ] = CreatePlayerTextDraw(playerid,491.000000, 324.000000, "_"); // Job Skill
	PlayerTextDrawBackgroundColor(playerid,JOB_TD[ 2 ], 255);
	PlayerTextDrawFont(playerid,JOB_TD[ 2 ], 3);
	PlayerTextDrawLetterSize(playerid,JOB_TD[ 2 ], 0.259999, 1.199998);
	PlayerTextDrawColor(playerid,JOB_TD[ 2 ], -1);
	PlayerTextDrawSetOutline(playerid,JOB_TD[ 2 ], 0);
	PlayerTextDrawSetProportional(playerid,JOB_TD[ 2 ], 1);
	PlayerTextDrawSetShadow(playerid,JOB_TD[ 2 ], 0);
	PlayerTextDrawSetSelectable(playerid,JOB_TD[ 2 ], 0);

	JOB_TD[ 3 ] = CreatePlayerTextDraw(playerid,490.000000, 340.000000, "_"); // Job Description
	PlayerTextDrawBackgroundColor(playerid,JOB_TD[ 3 ], 255);
	PlayerTextDrawFont(playerid,JOB_TD[ 3 ], 1);
	PlayerTextDrawLetterSize(playerid,JOB_TD[ 3 ], 0.180000, 0.799997);
	PlayerTextDrawColor(playerid,JOB_TD[ 3 ], -1);
	PlayerTextDrawSetOutline(playerid,JOB_TD[ 3 ], 0);
	PlayerTextDrawSetProportional(playerid,JOB_TD[ 3 ], 1);
	PlayerTextDrawSetShadow(playerid,JOB_TD[ 3 ], 0);
	PlayerTextDrawSetSelectable(playerid,JOB_TD[ 3 ], 0);

	JOB_TD[ 4 ] = CreatePlayerTextDraw(playerid,490.000000, 365.000000, "_"); // Job Feed
	PlayerTextDrawBackgroundColor(playerid,JOB_TD[ 4 ], 255);
	PlayerTextDrawFont(playerid,JOB_TD[ 4 ], 2);
	PlayerTextDrawLetterSize(playerid,JOB_TD[ 4 ], 0.180000, 1.199998);
	PlayerTextDrawColor(playerid,JOB_TD[ 4 ], -1);
	PlayerTextDrawSetOutline(playerid,JOB_TD[ 4 ], 0);
	PlayerTextDrawSetProportional(playerid,JOB_TD[ 4 ], 1);
	PlayerTextDrawSetShadow(playerid,JOB_TD[ 4 ], 0);
	PlayerTextDrawSetSelectable(playerid,JOB_TD[ 4 ], 0);*/

	// < Load Paintball TD )
	MINIGAME_TD = CreatePlayerTextDraw(playerid,2.000000, 432.000000, "_");
	PlayerTextDrawBackgroundColor(playerid,MINIGAME_TD, 51);
	PlayerTextDrawFont(playerid,MINIGAME_TD, 2);
	PlayerTextDrawLetterSize(playerid,MINIGAME_TD, 0.250000, 1.699999);
	PlayerTextDrawColor(playerid,MINIGAME_TD, -1);
	PlayerTextDrawSetOutline(playerid,MINIGAME_TD, 1);
	PlayerTextDrawSetProportional(playerid,MINIGAME_TD, 1);
	PlayerTextDrawSetSelectable(playerid,MINIGAME_TD, 0);

	// < Load Find TD )
	FIND_TD = CreatePlayerTextDraw(playerid, 318.615966, 377.004425, "_");
	PlayerTextDrawLetterSize(playerid, FIND_TD, 0.222665, 1.044147);
	PlayerTextDrawAlignment(playerid, FIND_TD, 2);
	PlayerTextDrawColor(playerid, FIND_TD, -1);
	PlayerTextDrawSetShadow(playerid, FIND_TD, 0);
	PlayerTextDrawSetOutline(playerid, FIND_TD, 1);
	PlayerTextDrawBackgroundColor(playerid, FIND_TD, 51);
	PlayerTextDrawFont(playerid, FIND_TD, 2);
	PlayerTextDrawSetProportional(playerid, FIND_TD, 1);
	PlayerTextDrawSetShadow(playerid, FIND_TD, 0);

	// < Load Time TDs )
	CLOCK_TD[ 0 ] = CreatePlayerTextDraw(playerid,577.000000, 9.000000, "30.07.2016");
	PlayerTextDrawAlignment(playerid,CLOCK_TD[ 0 ], 2);
	PlayerTextDrawBackgroundColor(playerid,CLOCK_TD[ 0 ], 255);
	PlayerTextDrawFont(playerid,CLOCK_TD[ 0 ], 2);
	PlayerTextDrawLetterSize(playerid,CLOCK_TD[ 0 ], 0.239999, 1.400000);
	PlayerTextDrawColor(playerid,CLOCK_TD[ 0 ], -1);
	PlayerTextDrawSetOutline(playerid,CLOCK_TD[ 0 ], 1);
	PlayerTextDrawSetProportional(playerid,CLOCK_TD[ 0 ], 1);
	PlayerTextDrawSetSelectable(playerid,CLOCK_TD[ 0 ], 0);

	CLOCK_TD[ 1 ] = CreatePlayerTextDraw(playerid,577.000000, 19.000000, "20:00");
	PlayerTextDrawAlignment(playerid,CLOCK_TD[ 1 ], 2);
	PlayerTextDrawBackgroundColor(playerid,CLOCK_TD[ 1 ], 255);
	PlayerTextDrawFont(playerid,CLOCK_TD[ 1 ], 3);
	PlayerTextDrawLetterSize(playerid,CLOCK_TD[ 1 ], 0.559999, 2.399999);
	PlayerTextDrawColor(playerid,CLOCK_TD[ 1 ], -1);
	PlayerTextDrawSetOutline(playerid,CLOCK_TD[ 1 ], 1);
	PlayerTextDrawSetProportional(playerid,CLOCK_TD[ 1 ], 1);
	PlayerTextDrawSetSelectable(playerid,CLOCK_TD[ 1 ], 0);

	TUT_TD[ 0 ] = CreatePlayerTextDraw(playerid,231.000000, 342.000000, "_");
	PlayerTextDrawAlignment(playerid,TUT_TD[ 0 ], 2);
	PlayerTextDrawBackgroundColor(playerid,TUT_TD[ 0 ], 255);
	PlayerTextDrawFont(playerid,TUT_TD[ 0 ], 2);
	PlayerTextDrawLetterSize(playerid,TUT_TD[ 0 ], 0.240000, 1.100000);
	PlayerTextDrawColor(playerid,TUT_TD[ 0 ], 4293375);
	PlayerTextDrawSetOutline(playerid,TUT_TD[ 0 ], 0);
	PlayerTextDrawSetProportional(playerid,TUT_TD[ 0 ], 1);
	PlayerTextDrawSetShadow(playerid,TUT_TD[ 0 ], 1);
	PlayerTextDrawUseBox(playerid,TUT_TD[ 0 ], 1);
	PlayerTextDrawBoxColor(playerid,TUT_TD[ 0 ], 150);
	PlayerTextDrawTextSize(playerid,TUT_TD[ 0 ], 319.000000, 171.000000);
	PlayerTextDrawSetSelectable(playerid,TUT_TD[ 0 ], 0);

	TUT_TD[ 1 ] = CreatePlayerTextDraw(playerid,231.000000, 358.000000, "__");
	PlayerTextDrawAlignment(playerid,TUT_TD[ 1 ], 2);
	PlayerTextDrawBackgroundColor(playerid,TUT_TD[ 1 ], 255);
	PlayerTextDrawFont(playerid,TUT_TD[ 1 ], 2);
	PlayerTextDrawLetterSize(playerid,TUT_TD[ 1 ], 0.230000, 1.000000);
	PlayerTextDrawColor(playerid,TUT_TD[ 1 ], -1);
	PlayerTextDrawSetOutline(playerid,TUT_TD[ 1 ], 0);
	PlayerTextDrawSetProportional(playerid,TUT_TD[ 1 ], 1);
	PlayerTextDrawSetShadow(playerid,TUT_TD[ 1 ], 1);
	PlayerTextDrawUseBox(playerid,TUT_TD[ 1 ], 1);
	PlayerTextDrawBoxColor(playerid,TUT_TD[ 1 ], 150);
	PlayerTextDrawTextSize(playerid,TUT_TD[ 1 ], 319.000000, 171.000000);
	PlayerTextDrawSetSelectable(playerid,TUT_TD[ 1 ], 0);
}
stock ConnectMySQL()
{
	g_Handle = mysql_connect( SERVER_HOST, SERVER_USER, SERVER_DB, SERVER_PASS );
	
	if( mysql_errno( g_Handle ) != 0 ) printf( "MySQL connection failed, mysql_errno: %d", mysql_errno( g_Handle ) );
	else if( mysql_errno( g_Handle ) == 0 ) printf( "SUCCES: Conexiunea la baza de date `%s` a fost stabilita!", SERVER_DB );
}
// < Server's Functions >
function RemovePickups( playerid )
{
	if( playerVariables[ playerid ][ pWeaponTimer ] != -1 )
		KillTimer( playerVariables[ playerid ][ pWeaponTimer ] );

	DestroyDynamicPickup( HealthDrop[ playerid ] );
	playerVariables[ playerid ][ pWeaponTimer ] = -1;
	for( new a = 0; a < 14; a++ )
	{
		if( WeaponDrop[ playerid ][ a ] != -1 )
		{
			DestroyDynamicPickup( WeaponDrop[ playerid ][ a ] );
			WeaponDrop[ playerid ][ a ] 	 = -1;
			WeaponData[ playerid ][ a ][ 0 ] = -1;
			WeaponData[ playerid ][ a ][ 1 ] = -1;
		}
	}
	return true;
}
function Rob_Timer( playerid )
{
	if( !IsPlayerConnected( playerid ) )
		return false;

	playerVariables[ playerid ][ pCP ] = 50200;
	playerVariables[ playerid ][ pRobStatus ] = 2;
	serverVariables[ rob_players ] ++;
	TogglePlayerControllable( playerid, 1 );

	new randRob = random( sizeof( gRandomRob ) );
	SetPlayerCheckpoint( playerid, gRandomRob[ randRob ][ 0 ], gRandomRob[ randRob ][ 1 ], gRandomRob[ randRob ][ 2 ], 4.0 );
	SetPlayerAttachedObject( playerid, INDEX_ROB, 1550, 15, 0.016491, 0.205742, -0.208498, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // Money Bag
	return SendClientMessage( playerid, COLOR_ROB, "Mergi la checkpoint-ul de pe minimap pentru a ascunde banii furati." );
}
function FillTimer( playerid, vehicleid, FuelID )
{
	if( !IsPlayerConnected( playerid ) )
		return false;

	new FuelL = 100 - floatround(serverVariables[ VehicleGas ][ vehicleid ], floatround_round);
	serverVariables[ VehicleGas ][ vehicleid ] += float(FuelL);
	new FuelPrice = FuelL * GetGVarInt( "bus_Fuel", FuelID );
	playerVariables[ playerid ][ pMoney ] -= FuelPrice;
	SetGVarInt( "bus_Money", GetGVarInt( "bus_Money", FuelID ) + FuelPrice/2, FuelID );

	SetPVarInt( playerid, "player_Fill", 0 );
	TogglePlayerControllable( playerid, 1 );
	return InfoTD_MSG( playerid, 10000, "Ai alimentat cu succes pentru pretul de %d~g~~h~$", FuelPrice );
}
function Float:GetDistanceBetweenPlayers( p1, p2 )
{
	if(!IsPlayerConnected(p1) || !IsPlayerConnected(p2))
		return -1.00;

	new Float:PosP[ 6 ];
	GetPlayerPos( p1, PosP[ 0 ], PosP[ 1 ], PosP[ 2 ]);
	GetPlayerPos( p2, PosP[ 3 ], PosP[ 4 ], PosP[ 5 ]);
	return floatsqroot(floatpower(floatabs(floatsub(PosP[ 3 ],PosP[ 0 ])),2)+floatpower(floatabs(floatsub(PosP[ 4 ],PosP[ 1 ])),2)+floatpower(floatabs(floatsub(PosP[ 5 ],PosP[ 2 ])),2));
}
function TaserAction( playerid )
{
	TogglePlayerControllable( playerid, 1 );
	InfoTD_MSG( playerid, 5000, "~r~~h~Taser ~w~~h~effect it's gone!" );
	return true;
}
function AttachTrailTruck( trailer, vehicle )
{
	if( !IsTrailerAttachedToVehicle( vehicle ) ) // < in cazul in care a fost deja atasata de auto-attach >
		AttachTrailerToVehicle( trailer, vehicle );

	return true;
}
function UpdatePlayerGPS( playerid, Float:gpsX, Float:gpsY, Float:gpsZ )
{
	if( !IsPlayerConnected( playerid ) )
		return KillTimer( serverVariables[ GPS_Timer ][ playerid ] );

	playerVariables[ playerid ][ DistanceGPS ] = GetPlayerDistanceFromPoint( playerid, gpsX, gpsY, gpsZ ) ;

	gpString[ 0 ] = EOS;
	format( gpString, sizeof gpString, "GPS: ~y~~h~%s ~w~~h~/ %0.2fm", playerVariables[ playerid ][ pLocationGPS ], playerVariables[ playerid ][ DistanceGPS ] );
	PlayerTextDrawSetString( playerid, PLAYER_TD[ 0 ], gpString );
	return true;
}
function JailTimer( playerid )
{
	playerVariables[ playerid ][ pPrisonTime ]--;

	gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, "%s~n~Jail Time", TimeConvert( playerVariables[ playerid ][ pPrisonTime ] ) );
	PlayerTextDrawSetString( playerid, PLAYER_TD[ 4 ], gsString );
	PlayerTextDrawShow( playerid, PLAYER_TD[ 4 ] );

	if( playerVariables[ playerid ][ pPrisonTime ] <= 0 )
	{
		SetPlayerInterior( playerid, 0 );
		SetPlayerVirtualWorld( playerid, 0 );
		SetPlayerHealth( playerid, 100 );
		SetPlayerArmour( playerid, 0.0 );
		playerVariables[ playerid ][ pPrisonTime ] = 0;
		KillTimer( playerVariables[ playerid ][ pPrisonTimer ] );
		PlayerTextDrawHide( playerid, PLAYER_TD[ 4 ] );
		SendClientMessage( playerid, COLOR_GREY, "Ai fost eliberat din inchisoare!" );
		LSPD_POS(playerid);
	}
}
function LSPD_POS( playerid )
{
	SetPlayerPos(playerid, 1545.0648,-1675.2269,13.5596);
	SetPlayerFacingAngle(playerid, 91.3952);
	return true;
}
function WarTimer( FactionID, TurfID, TurfOwner )
{
	SetGVarInt( "faction_WarTimer", GetGVarInt( "faction_WarTimer", FactionID ) - 1, FactionID );
	foreach(new i : playerFaction[ FactionID ])
	{
		if(playerVariables[ i ][ pSpawned ] != 0)
		{

			if( IsPlayerInDynamicArea( i, GetGVarInt( "TurfREC", TurfID ) ) && GetPlayerState( i ) != PLAYER_STATE_WASTED )
				playerVariables[ i ][ pFactionWarSeconds ]++;

			gsString[ 0 ] = EOS;
			// default -> format( gsString, sizeof gsString, "Turf: %s[#%d]~n~%s %d-%d %s~n~On turf: %s %d-%d %s~n~Kills: ~g~~h~%d ~w~~h~Deaths: ~r~~h~%d ~w~~h~Seconds on turf: %d",
			format( gsString, sizeof gsString, "Turf: %s[#%d]~n~%s - %s~n~On turf: %s %d-%d %s~n~Kills: ~g~~h~%d ~w~~h~Deaths: ~r~~h~%d ~w~~h~Seconds on turf: %d",
				GetGVarStringEx( "faction_WarZone", FactionID ),
				TurfID,
				GetGVarStringEx( "faction_Name", FactionID ),
				//GetGVarInt( "faction_WarKills", FactionID ),
				//GetGVarInt( "faction_WarKills", TurfOwner ),
				GetGVarStringEx( "faction_Name", TurfOwner ),
				GetGVarStringEx( "faction_Name", FactionID ),
				GetMembersOnTurf( FactionID, TurfID ),
				GetMembersOnTurf( TurfOwner, TurfID ),
				GetGVarStringEx( "faction_Name", TurfOwner ),
				playerVariables[ i ][ pFactionWarKills ], playerVariables[ i ][ pFactionWarDeaths ], playerVariables[ i ][ pFactionWarSeconds ] );

			PlayerTextDrawSetString( i, WAR_TD[ 1 ], gsString );

			if( GetGVarInt( "faction_WarTimer", FactionID ) >= 0 )
			{
				gsString[ 0 ] = EOS;
				format( gsString, sizeof gsString, "WAR TIMER: ~y~~h~%s", TimeConvert( GetGVarInt( "faction_WarTimer", FactionID ) ) );
				PlayerTextDrawSetString( i, WAR_TD[ 2 ], gsString );
				ShowFactionWarTD( i );
			}
		}	
	}
	foreach(new i : playerFaction[ TurfOwner ])
	{
		if(playerVariables[ i ][ pSpawned ] != 0)
		{

			if( IsPlayerInDynamicArea( i, GetGVarInt( "TurfREC", TurfID ) ) && GetPlayerState( i ) != PLAYER_STATE_WASTED )
				playerVariables[ i ][ pFactionWarSeconds ]++;

			gsString[ 0 ] = EOS;
			// default -> format( gsString, sizeof gsString, "Turf: %s[#%d]~n~%s %d-%d %s~n~On turf: %s %d-%d %s~n~Kills: ~g~~h~%d ~w~~h~Deaths: ~r~~h~%d ~w~~h~Seconds on turf: %d",
			format( gsString, sizeof gsString, "Turf: %s[#%d]~n~%s - %s~n~On turf: %s %d-%d %s~n~Kills: ~g~~h~%d ~w~~h~Deaths: ~r~~h~%d ~w~~h~Seconds on turf: %d",
				GetGVarStringEx( "faction_WarZone", FactionID ),
				TurfID,
				GetGVarStringEx( "faction_Name", FactionID ),
				//GetGVarInt( "faction_WarKills", FactionID ),
				//GetGVarInt( "faction_WarKills", TurfOwner ),
				GetGVarStringEx( "faction_Name", TurfOwner ),
				GetGVarStringEx( "faction_Name", FactionID ),
				GetMembersOnTurf( FactionID, TurfID ),
				GetMembersOnTurf( TurfOwner, TurfID ),
				GetGVarStringEx( "faction_Name", TurfOwner ),
				playerVariables[ i ][ pFactionWarKills ], playerVariables[ i ][ pFactionWarDeaths ], playerVariables[ i ][ pFactionWarSeconds ] );

			PlayerTextDrawSetString( i, WAR_TD[ 1 ], gsString );

			if( GetGVarInt( "faction_WarTimer", FactionID ) >= 0 )
			{
				gsString[ 0 ] = EOS;
				format( gsString, sizeof gsString, "WAR TIMER: ~y~~h~%s", TimeConvert( GetGVarInt( "faction_WarTimer", FactionID ) ) );
				PlayerTextDrawSetString( i, WAR_TD[ 2 ], gsString );
				ShowFactionWarTD( i );
			}
		}	
	}
	if( GetGVarInt( "faction_WarTimer", FactionID ) <= 0 )
	{
		KillTimer( GetGVarInt( "faction_AttackTimer", FactionID ) );

		SetGVarInt( "faction_WarTurf", 0, TurfOwner );
		SetGVarInt( "faction_WarTurf", 0, FactionID );
		SetGVarInt( "faction_WarID", 0, TurfOwner );
		SetGVarInt( "faction_WarID", 0, FactionID );
		SetGVarInt( "turf_Status", 0, TurfID );
		SetGVarInt( "faction_WarStatus", 0, FactionID );

		if( GetGVarInt( "faction_WarKills", FactionID ) > GetGVarInt( "faction_WarKills", TurfOwner ) )
		{
			SetGVarInt( "turf_Owner", FactionID, TurfID );
			foreach(new x : playerTurfs)
			{
				GangZoneShowForPlayerEx( x, GetGVarInt( "TurfID", TurfID ), GetTeamZoneColor( GetGVarInt( "turf_Owner", TurfID ) ) );

				SendClientMessagef( x, COLOR_ATTACK, "[WAR] %s has win turf %d owned by %s.", GetGVarStringEx( "faction_Name", FactionID ), TurfID, GetGVarStringEx( "faction_Name", TurfOwner ) );
			}
			GangZoneStopFlashForAll( GetGVarInt( "TurfID", TurfID ) );
			gsString[ 0 ] = EOS;
			format( gsString, sizeof gsString, "%s a castigat War-ul!", GetGVarStringEx( "faction_Name", FactionID ) );
		}
		else if( GetGVarInt( "faction_WarKills", TurfOwner ) > GetGVarInt( "faction_WarKills", FactionID ) )
		{
			SetGVarInt( "turf_Owner", TurfOwner, TurfID );
			foreach(new x : playerTurfs)
			{
				GangZoneShowForPlayerEx( x, GetGVarInt( "TurfID", TurfID ), GetTeamZoneColor( GetGVarInt( "turf_Owner", TurfID ) ) );

				SendClientMessagef( x, COLOR_ATTACK, "[WAR] %s failed to win turf %d owned by %s.", GetGVarStringEx( "faction_Name", FactionID ), TurfID, GetGVarStringEx( "faction_Name", TurfOwner ) );
			}
			GangZoneStopFlashForAll( GetGVarInt( "TurfID", TurfID ) );
			gsString[ 0 ] = EOS;
			format( gsString, sizeof gsString, "%s a castigat War-ul!", GetGVarStringEx( "faction_Name", TurfOwner ) );
		}
		else if( GetGVarInt( "faction_WarKills", TurfOwner ) == GetGVarInt( "faction_WarKills", FactionID ) )
		{
			foreach(new x : playerTurfs)
			{
				GangZoneShowForPlayerEx( x, GetGVarInt( "TurfID", TurfID ), GetTeamZoneColor( GetGVarInt( "turf_Owner", TurfID ) ) );

				SendClientMessagef( x, COLOR_ATTACK, "[WAR] %s a facut egalitate pentru turf-ul %d detinut de %s.", GetGVarStringEx( "faction_Name", FactionID ), TurfID, GetGVarStringEx( "faction_Name", TurfOwner ) );
			}
			GangZoneStopFlashForAll( GetGVarInt( "TurfID", TurfID ) );
			gsString[ 0 ] = EOS;
			format( gsString, sizeof gsString, "%s a facut egalitate cu %s", GetGVarStringEx( "faction_Name", FactionID ), GetGVarStringEx( "faction_Name", TurfOwner ) );
		}
		// < Insert into Database )
		gsQuery[ 0 ] = EOS;
		mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_turfs` SET `turfOwner` = %d WHERE `turfKey` = %d", GetGVarInt( "turf_Owner", TurfID ), TurfID );
		mysql_tquery( g_Handle, gsQuery, "", "" );

		gsQuery[ 0 ] = EOS;
		mysql_format( g_Handle, gsQuery, sizeof gsQuery, "INSERT INTO `server_warlogs`(`warAttacker`, `warDefender`, `warScoreA`, `warScoreD`, `warResult`, `warTurf`) VALUES('%s', '%s', %d, %d, '%s', %d)",
			GetGVarStringEx( "faction_Name", FactionID ), GetGVarStringEx( "faction_Name", TurfOwner ), GetGVarInt( "faction_WarKills", FactionID ), GetGVarInt( "faction_WarKills", TurfOwner ), gsString, TurfID );
		mysql_tquery( g_Handle, gsQuery, "OnFactionWarInserted", "dddd", FactionID, TurfOwner, GetGVarInt( "faction_WarKills", FactionID ), GetGVarInt( "faction_WarKills", TurfOwner ) );
	}
	return true;
}
SQL_Function OnFactionWarInserted( attacker, defender, attackerScore, defenderScore )
{
	new scoreBestA_ID = CalculateBestScore( attacker ),
		scoreBestD_ID = CalculateBestScore( defender ),
		scoreWorstA_ID = CalculateWorstScore( attacker ),
		scoreWorstD_ID = CalculateWorstScore( defender ),
		warKey = cache_insert_id();

	new scoreBestA = playerVariables[ scoreBestA_ID ][ pFactionWarKills ] - playerVariables[ scoreBestA_ID ][ pFactionWarDeaths ],
		scoreBestD = playerVariables[ scoreBestD_ID ][ pFactionWarKills ] - playerVariables[ scoreBestD_ID ][ pFactionWarDeaths ],
		scoreWorstA = playerVariables[ scoreWorstA_ID ][ pFactionWarKills ] - playerVariables[ scoreWorstA_ID ][ pFactionWarDeaths ],
		scoreWorstD = playerVariables[ scoreWorstD_ID ][ pFactionWarKills ] - playerVariables[ scoreWorstD_ID ][ pFactionWarDeaths ];

	foreach(new i : playerFaction[ attacker ])
	{
		// < Insert in war logs )
		gsQuery[ 0 ] = EOS;
		mysql_format( g_Handle, gsQuery, sizeof gsQuery, "INSERT INTO `server_warlog_players`(`warKey`, `logPlayer`, `logPlayerKey`, `logKills`, `logDeaths`, `logSeconds`, `logType`) VALUES (%d, '%s', %d, %d, %d, %d, 1)", 
			warKey, playerVariables[ i ][ pNormalName ], GetPlayerMysqlID(i), playerVariables[ i ][ pFactionWarKills ], playerVariables[ i ][ pFactionWarDeaths ], playerVariables[ i ][ pFactionWarSeconds ] );
		mysql_tquery( g_Handle, gsQuery, "", "" );

		// < Show the info about the war )
		SendClientMessagef( i, COLOR_ATTACK, "---------------------[ war overview #%d ]---------------------", warKey );
		SendClientMessagef( i, COLOR_ATTACK, "Score: %s %d - %d %s", GetGVarStringEx( "faction_Name", attacker ), attackerScore, defenderScore, GetGVarStringEx( "faction_Name", defender ) );

		gsString[ 0 ] = EOS;
		format( gsString, sizeof gsString, "Best score: %s with a score of %d (%d kills, %d deaths). Worst score: %s with a score of %d (%d kills, %d deaths)",
			username( scoreBestA_ID ), scoreBestA, playerVariables[ scoreBestA_ID ][ pFactionWarKills ], playerVariables[ scoreBestA_ID ][ pFactionWarDeaths ], username( scoreWorstA_ID ), scoreWorstA, playerVariables[ scoreWorstA_ID ][ pFactionWarKills ], playerVariables[ scoreWorstA_ID ][ pFactionWarDeaths ] );
		SendClientMessage( i, COLOR_ATTACK, gsString );

		new scorePersonal = playerVariables[ i ][ pFactionWarKills ] - playerVariables[ i ][ pFactionWarDeaths ];
		SendClientMessagef( i, COLOR_ATTACK, "Your personal score: %d (%d kills, %d deaths)", scorePersonal, playerVariables[ i ][ pFactionWarKills ], playerVariables[ i ][ pFactionWarDeaths ] );
		SendClientMessage( i, COLOR_ATTACK, "-----------------------------------------------------------------------" );

		// < Reset Variables )
		HideFactionWarTD( i );
		playerVariables[ i ][ pFactionWar ] = 0;
		playerVariables[ i ][ pFactionWarKills ] = 0;
		playerVariables[ i ][ pFactionWarDeaths ] = 0;
		playerVariables[ i ][ pFactionWarSeconds ] = 0;
		SetPlayerFactionColor( i );

		if( GetPlayerState( i ) == PLAYER_STATE_DRIVER )
			SetVehicleVirtualWorld( GetPlayerVehicleID( i ), 0 );

		SetPlayerVirtualWorld( i, 0 );
	}
	foreach(new i : playerFaction[ defender ])	
	{
		// < Insert in war logs )
		gsQuery[ 0 ] = EOS;
		mysql_format( g_Handle, gsQuery, sizeof gsQuery, "INSERT INTO `server_warlog_players`(`warKey`, `logPlayer`, `logPlayerKey`, `logKills`, `logDeaths`, `logSeconds`, `logType`) VALUES (%d, '%s', %d, %d, %d, %d, 0)", 
			warKey, playerVariables[ i ][ pNormalName ], GetPlayerMysqlID(i), playerVariables[ i ][ pFactionWarKills ], playerVariables[ i ][ pFactionWarDeaths ], playerVariables[ i ][ pFactionWarSeconds ] );
		mysql_tquery( g_Handle, gsQuery, "", "" );

		// < Show the info about the war )
		SendClientMessagef( i, COLOR_ATTACK, "---------------------[ war overview #%d ]---------------------", warKey );
		SendClientMessagef( i, COLOR_ATTACK, "Score: %s %d - %d %s", GetGVarStringEx( "faction_Name", attacker ), attackerScore, defenderScore, GetGVarStringEx( "faction_Name", defender ) );

		gsString[ 0 ] = EOS;
		format( gsString, sizeof gsString, "Best score: %s with a score of %d (%d kills, %d deaths). Worst score: %s with a score of %d (%d kills, %d deaths)",
			username( scoreBestD_ID ), scoreBestD, playerVariables[ scoreBestD_ID ][ pFactionWarKills ], playerVariables[ scoreBestD_ID ][ pFactionWarDeaths ], username( scoreWorstD_ID ), scoreWorstD, playerVariables[ scoreWorstD_ID ][ pFactionWarKills ], playerVariables[ scoreWorstD_ID ][ pFactionWarDeaths ] );
		SendClientMessage( i, COLOR_ATTACK, gsString );

		new scorePersonal = playerVariables[ i ][ pFactionWarKills ] - playerVariables[ i ][ pFactionWarDeaths ];
		SendClientMessagef( i, COLOR_ATTACK, "Your personal score: %d (%d kills, %d deaths)", scorePersonal, playerVariables[ i ][ pFactionWarKills ], playerVariables[ i ][ pFactionWarDeaths ], playerVariables[ i ][ pFactionWarSeconds ] );
		SendClientMessage( i, COLOR_ATTACK, "-----------------------------------------------------------------------" );

		// < Reset Variables )
		HideFactionWarTD( i );
		playerVariables[ i ][ pFactionWar ] = 0;
		playerVariables[ i ][ pFactionWarKills ] = 0;
		playerVariables[ i ][ pFactionWarDeaths ] = 0;
		playerVariables[ i ][ pFactionWarSeconds ] = 0;
		SetPlayerFactionColor( i );

		if( GetPlayerState( i ) == PLAYER_STATE_DRIVER )
			SetVehicleVirtualWorld( GetPlayerVehicleID( i ), 0 );

		SetPlayerVirtualWorld( i, 0 );
	}
	for( new vID = 1; vID < MAX_VEHICLES; vID++ )
		if( GetVehicleVirtualWorld( vID ) == GetGVarInt( "faction_WarVirtual", attacker ) )
			SetVehicleVirtualWorld( vID, 0 );
}
function FarmerTimer( playerid )
{
	if( !IsPlayerPaused( playerid ) )
	{
		new vehicleID = GetPlayerVehicleID( playerid ),
			vehicleSpeed = GetVehicleSpeed( vehicleID, 0 );

		if( IsValidVehicle( vehicleID ) && vehicleID != playerVariables[ playerid ][ pJobVehicle ][ 0 ] )
		{
			DestroyPlayerJobVehicles( playerid, 1 );
			return SendClientMessage( playerid, COLOR_GREY, "Job failed, you're on foot or in another vehicle right now!" );
		}
		else if( !IsPlayerInRangeOfPoint( playerid, 400.0, -366.0036, -1412.5992, 25.7266 ) )
		{
			DestroyPlayerJobVehicles( playerid, 1 );
			return SendClientMessage( playerid, COLOR_GREY, "Job failed, you're too far away from the Farmer Job!" );
		}
		else if( !IsPlayerInRangeOfPoint( playerid, 300.0, -366.0036, -1412.5992, 25.7266 ) )
		{
			UpdateJobBox( playerid, GetServerData(workers_farmer), "Mergi inca ~r~~h~%d ~w~~h~secunde pentru a primi banii!~n~~r~~h~(Atentie) ~w~~h~Esti prea departe de zona de lucru!~n~Inca 100m si vei lua fail.", playerVariables[ playerid ][ pFarmerTime ] );
			return false;
		}
		else if( vehicleSpeed < 25 )
		{
			UpdateJobBox( playerid, GetServerData(workers_farmer), "Mergi inca ~r~~h~%d ~w~~h~secunde pentru a primi banii!~n~~r~~h~(Atentie) ~w~~h~Mareste viteza la ~g~~h~25 ~w~~h~km/h", playerVariables[ playerid ][ pFarmerTime ] );
			return false;
		}
		UpdateJobBox( playerid, GetServerData(workers_farmer), "Mergi inca ~r~~h~%d ~w~~h~secunde pentru a primi banii!", playerVariables[ playerid ][ pFarmerTime ] );

		if( playerVariables[ playerid ][ pFarmerTime ] <= 0 )
		{
			new randomValue = random( 10 );
			playerVariables[ playerid ][ pCP ] = 0;
			DestroyPlayerJobVehicles( playerid );
			PayPlayerJob( playerid, 2 );

			if( randomValue > 8 )
			{
				playerVariables[ playerid ][ pMoney ] += playerVariables[ playerid ][ pJobValue ];
				SendClientMessagef( playerid, COLOR_YELLOW, "Detinatorii fermei au fost foarte multumiti de calitatea muncii prestate. Ai primit $%s.", FormatNumber( playerVariables[ playerid ][ pJobValue ] ) );
				playerVariables[ playerid ][ pJobValue ] = 0;
			}
			else
			{
				SendClientMessage(playerid, COLOR_NEWBIE, "Detinatorii fermei nu au bani pentru a te plati, dar iti pot oferi un sac cu faina drept rasplata.");
				SendClientMessagef(playerid, COLOR_NEWBIE, "Ai primit un sac ce contine %d kg de faina.", floatround(playerVariables[ playerid ][ pJobValue ]/100));
				SendSplitMessage(playerid, COLOR_YELLOW, "SMS de la Enache Morarit (327-637): Poti merge la fast food-urile din zona pentru a vinde faina.");
			}
		}
		playerVariables[ playerid ][ pFarmerTime ]--;
	}
	return true;
}
function WeatherTimer()
{
	new randomWeahter = random( sizeof serverWeather );
	SetWeather( serverWeather[ randomWeahter ] );

	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_stats` SET `statsWeather` = %d", serverWeather[ randomWeahter ]  );
	mysql_tquery( g_Handle, gsQuery, "", "" );
}
function HealthTimer()
{
	foreach(new i : Player)
	{
		if( playerVariables[ i ][ pSpawned ] > 0 && playerVariables[ i ][ pSpawned ] < 2 && playerVariables[ i ][ pSleeping ] == false )
			SetPlayerHealth( i, GetPlayerHealthEx( i ) - 1 );
	}
	if( GetGVarInt( "bus_Robbed", 4 ) != INVALID_PLAYER_ID && !serverVariables[ rob_players ] )
	{
		ResetBankActors();
		LoadSafeGoldBars();
		ROB_SAFE_HEALTH = 100;

		gsString[ 0 ] = EOS;
		format( gsString, sizeof gsString, "Safe Health: %d%%", ROB_SAFE_HEALTH );
		Update3DTextLabelText( ROB_SAFE_3D, 0xFFFF66FF, gsString );

		MoveObject( ROB_SAFE[ 0 ], 2143.20752, 1627.03186, 994.25061, 1.0 );
		SetGVarInt( "bus_Robbed", INVALID_PLAYER_ID, 4 ); // Bank
	}
}
function ServerSaveTimer()
{
	foreach( new b : ServerBusiness )
	{
		gsQuery[ 0 ] = EOS;
		mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_business` SET `busMoney` = %d WHERE `busKey` = %d", GetGVarInt( "bus_Money", b ), b );
		mysql_tquery( g_Handle, gsQuery, "", "" );
		//printf( "[DEBUG]: Business ID %d a primit update la bani cu valoarea de: $%d", b, GetGVarInt( "bus_Money", b ) );
	}
	foreach( new h : ServerHouses )
	{
		gsQuery[ 0 ] = EOS;
		mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_houses` SET `houseMoney` = %d WHERE `houseKey` = %d", GetGVarInt( "house_Money", h ), h );
		mysql_tquery( g_Handle, gsQuery, "", "" );
		//printf( "[DEBUG]: House ID %d a primit update la bani cu valoarea de: $%d", h, GetGVarInt( "house_Money", h ) );
	}
	foreach( new f : ServerFactions )
	{
		gsQuery[ 0 ] = EOS;
		mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_factions` SET `factionMOTD` = '%s', `factionMoney` = %d, `factionMaterials` = %d, `factionDrugs` = %d WHERE `factionKey` = %d", GetGVarStringEx( "faction_MOTD", f ), GetGVarInt( "faction_Money", f ), GetGVarInt( "faction_Materials", f ), GetGVarInt( "faction_Drugs", f ), f );
		mysql_tquery( g_Handle, gsQuery, "", "" );
		//printf( "[DEBUG]: Faction ID %d a primit update la bani cu valoarea de: $%d", f, GetGVarInt( "faction_Money", f ) );
		UpdateFactionSafe(f);
	}
}

function PaintBallTimer()
{
	for( new paintID=0; paintID < MAX_PAINT; paintID++ )
	{
		if( paintballVariables[ paintID ][ paintTimer ] != 0 )
		{
			paintballVariables[ paintID ][ paintTimer ]--;
		}
		if( paintballVariables[ paintID ][ paintStatus ] == 0 && paintballVariables[ paintID ][ paintTimer ] == 0 )
		{
			if( paintballVariables[ paintID ][ paintPlayers ] >= 2 )
			{
				foreach(new i : playerPaint[paintID])
				{
					ResetServerWeapons( i );
					playerVariables[ i ][ pPaintBallVotedMap ] = false;
					playerVariables[ i ][ pPaintBallVotedWeapon ] = false;
					playerVariables[ i ][ pPaintBallKills ] = 0;
					playerVariables[ i ][ pPaintBallDeaths ] = 0;
					playerVariables[ i ][ pPaintBallLevel ] = 0;
				}
				ResetArenaVotes( paintID );
				paintballVariables[ paintID ][ paintStatus ] = 1;
				paintballVariables[ paintID ][ paintTimer ] = 30;
			}
			else
			{
				paintballVariables[ paintID ][ paintStatus ] = 0;
				paintballVariables[ paintID ][ paintTimer ] = 0;
			}
		}
		else if( paintballVariables[ paintID ][ paintStatus ] == 1 && paintballVariables[ paintID ][ paintTimer ] == 0 )
		{
			if( paintballVariables[ paintID ][ paintPlayers ] >= 2 )
			{
				SelectVotedArena( paintID );

				if( paintID == 0 )
					paintballVariables[ paintID ][ paintWeaponSet ] = GetVoteScoreWeapon( paintID );

				paintballVariables[ paintID ][ paintStatus ] = 2;
				paintballVariables[ paintID ][ paintTimer ] = 300; // 300 pentru normal - 2 minute pentru teste

				foreach(new i : playerPaint[paintID])
				{
					SetPlayerArenaPosition( i );
					SetPlayerHealth( i, 100 );
					SetPlayerArmour( i, 0.0 );
					GivePlayerWeaponPack( i, paintID );
				}
			}
			else
			{
				paintballVariables[ paintID ][ paintStatus ] = 0;
				paintballVariables[ paintID ][ paintTimer ] = 0;
			}
		}
		else if( paintballVariables[ paintID ][ paintStatus ] == 2 && paintballVariables[ paintID ][ paintTimer ] == 0 )
		{
			if( paintballVariables[ paintID ][ paintPlayers ] >= 2 )
			{
				new winnerID = CalculatePaintballWinner( paintID );
				if( IsPlayerConnected( winnerID ) )
				{
					// < Insert Paintball logs )
					gsQuery[ 0 ] = EOS;
					mysql_format( g_Handle, gsQuery, sizeof gsQuery, "INSERT INTO `server_paintball`(`paintPlayer`, `paintKills`, `paintDeaths`) VALUES ('%s', %d, %d)", 
						playerVariables[ winnerID ][ pNormalName ], playerVariables[ winnerID ][ pPaintBallKills ], playerVariables[ winnerID ][ pPaintBallDeaths ] );
					mysql_tquery( g_Handle, gsQuery, "", "" );
				}
				foreach(new i : playerPaint[paintID])
				{
					// < Reset player's weapons )
					ResetServerWeapons( i );
					SendClientMessagef( i, COLOR_YELLOW, "Round over! Winner: %s - %d kills.", username( winnerID ), playerVariables[ winnerID ][ pPaintBallKills ] );
					SendClientMessage( i, COLOR_YELLOW, "Use /votegun to vote for a gun. Use /votemap to vote for a map." );

					playerVariables[ i ][ pPaintBallVotedMap ] = false;
					playerVariables[ i ][ pPaintBallVotedWeapon ] = false;
					playerVariables[ i ][ pPaintBallKills ] = 0;
					playerVariables[ i ][ pPaintBallDeaths ] = 0;
					playerVariables[ i ][ pPaintBallLevel ] = 0;
				}
				ResetArenaVotes( paintID );
				paintballVariables[ paintID ][ paintStatus ] = 1;
				paintballVariables[ paintID ][ paintTimer ] = 30;
			}
			else
			{
				paintballVariables[ paintID ][ paintStatus ] = 0;
				paintballVariables[ paintID ][ paintTimer ] = 0;
			}
		}
		// < Update the Texts )
		switch( paintballVariables[ paintID ][ paintStatus ] )
		{
			case 0: // waiting for players
			{
				foreach(new i : playerPaint[paintID])
					Announce( i, "~n~~n~~y~~h~NOT ENOUGH PLAYERS TO START...", 2000, 3 );

				paintballVariables[ paintID ][ paintString ][ 0 ] = EOS;
				format( paintballVariables[ paintID ][ paintString ], 128, "~g~WAITING FOR MORE PLAYERS TO JOIN...");
			}
			case 1: // vote map/gun
			{
				if( paintballVariables[ paintID ][ paintTimer ] <= 5 )
				{
					paintballVariables[ paintID ][ paintString ][ 0 ] = EOS;
					format( paintballVariables[ paintID ][ paintString ], 128, "~w~~h~PAINTBALL STARTING IN~n~~r~%d ~w~~h~SECONDS", paintballVariables[ paintID ][ paintTimer ] );
					foreach(new i : playerPaint[paintID])
						Announce( i, paintballVariables[ paintID ][ paintString ], 2000, 4 );
				}
				paintballVariables[ paintID ][ paintString ][ 0 ] = EOS;
				format( paintballVariables[ paintID ][ paintString ], 128, "PAINTBALL ROUND STARTS IN: ~y~~h~%s", TimeConvert( paintballVariables[ paintID ][ paintTimer ] ) );
			}
			case 2: // play
			{
				if( paintballVariables[ paintID ][ paintPlayers ] < 2 )
				{
					foreach(new i : playerPaint[paintID])
						ResetServerWeapons( i );

					paintballVariables[ paintID ][ paintStatus ] = 0;
					paintballVariables[ paintID ][ paintTimer ] = 0;
				}
				paintballVariables[ paintID ][ paintString ][ 0 ] = EOS;
				format( paintballVariables[ paintID ][ paintString ], 128, "PAINTBALL ROUND ENDS IN: ~b~%s", TimeConvert( paintballVariables[ paintID ][ paintTimer ] ) );
			}
		}
		UpdatePaintTextDraws( paintID );
	}
}
function VoteRaceDialogs(id)
{
	switch(id)
	{
		case 0: 
		{
			foreach(new i : Racers)
			{
				ShowPlayerDialog(i, DIALOG_SELECT_RACE_TYPE, DIALOG_STYLE_LIST, "Race Arena: Vote Type", "Classic [collision]\nClassic [no-colission]", "Vote", "");
			}
			if(raceVariables[noonevoted1] == 1) {
				raceVariables[raceTimer] = SetTimerEx("VoteRaceDialogs", 10000, false, "d", 1);
			}
		}
		case 1: 
		{
			foreach(new i : Racers)
			{
				ShowPlayerDialog(i, DIALOG_SELECT_RACE_VEHICLE, DIALOG_STYLE_LIST, "Race Arena: Vote Vehicle Category", "Convertibles\nLowriders\nOff Road\nSport Vehicles\nSaloons\nMotorcycles", "Vote", "");
			}
			if(raceVariables[noonevoted2] == 1) {
				raceVariables[raceTimer] = SetTimerEx("VoteRaceDialogs", 10000, false, "d", 2);
			}
		}
		case 2:
		{
			if(raceVariables[noonevoted3] == 1) {
				raceVariables[raceTimer] = SetTimerEx("VoteRaceDialogs", 10000, false, "d", 3);
			}
			SelectRaceVehicle();
			foreach(new i : Racers)
			{
				ShowPlayerDialog(i, DIALOG_SELECT_RACE_VEHICLEE, DIALOG_STYLE_LIST, "Race Arena: Vote Vehicle", RaceVehicle_ID(raceVariables[raceVehicle]), "Vote", "");
			}
		}
		case 3:
		{
			format( raceVariables[ raceString ], 40, "~g~STARTING! BE READY...");
			SelectRaceTrack();
			SelectRaceVehicleID();
			SelectRaceType();
			foreach(new i : Racers)
			{
				hideDialog(i);
				TogglePlayerControllable(i, 0);
			}

			SendRaceArenaMessage(COLOR_RACEMESSAGE, "Race Arena: {FFFFFF}Race will start in 5 seconds, prepare yourself!");
			gsString[0] = EOS;
			format(gsString, sizeof(gsString), "The chosen track is: %s - Mod: %s - %s [%s]", GetTrackName(raceVariables[raceTrack]), GetTypeName(raceVariables[raceType]), GetVehiclesName(raceVariables[raceVehicle]), VehicleName(raceVariables[raceVehicleIDE]));
			SendRaceArenaMessage(COLOR_RACEMESSAGE, gsString);
			RaceStart();
			SetTimer("RacerSetTimer", 5000, false);
			format(gsString, 200, "The best player on this track is %s. He finished in %s minutes on %s", raceSystem[raceVariables[raceTrack]][BestRacer], TimeConvert(raceSystem[raceVariables[raceTrack]][BestRacerTime]), raceSystem[raceVariables[raceTrack]][BestRacerDateTime]);
			SendRaceArenaMessage(COLOR_YELLOW, gsString);
		}
	}
	return 1;
}

function RaceStart()
{
	// < Execute the code >
	foreach(new i : Racers)
	{
		playerVariables[ i ][ pRaceArenaSeconds ] = 0;
		playerVariables[ i ][ pRaceArenaCP ] = 0;
		playerVariables[ i ][ pRCP ] = 5000;
		raceVariables[raceVoting] = 0;

		switch(raceVariables[raceTrack])
		{
			case 0:
			{
				new z = i+1;
				SetPlayerRaceCheckpoint( i, 0, Airport_Race[ 0 ][ 0 ], Airport_Race[ 0 ][ 1 ], Airport_Race[ 0 ][ 2 ], Airport_Race[ 1 ][ 0 ], Airport_Race[ 1 ][ 1 ], Airport_Race[ 1 ][ 2 ], 10.0 );
				raceCar[i] = CreateVehicle(raceVariables[raceVehicleIDE], Cars_Races[ z ][ 0 ], Cars_Races[ z ][ 1 ], Cars_Races[ z ][ 2 ], Cars_Races[ z ][ 3 ], -1, -1, -1 );
			}
			case 1:
			{
				new z = i+1;
				SetPlayerRaceCheckpoint( i, 0, Beach_Race[ 0 ][ 0 ], Beach_Race[ 0 ][ 1 ], Beach_Race[ 0 ][ 2 ], Beach_Race[ 1 ][ 0 ], Beach_Race[ 1 ][ 1 ], Beach_Race[ 1 ][ 2 ], 10.0 );
				raceCar[i] = CreateVehicle( raceVariables[raceVehicleIDE], Cars_Races[ z+3 ][ 0 ], Cars_Races[ z+3 ][ 1 ], Cars_Races[ z+3 ][ 2 ], Cars_Races[ z+3 ][ 3 ], -1, -1, -1 );
			}
			case 2:
			{
				new z = i+1;
				SetPlayerRaceCheckpoint( i, 0, Chilliad_Race[ 0 ][ 0 ], Chilliad_Race[ 0 ][ 1 ], Chilliad_Race[ 0 ][ 2 ], Chilliad_Race[ 1 ][ 0 ], Chilliad_Race[ 1 ][ 1 ], Chilliad_Race[ 1 ][ 2 ], 10.0 );
				raceCar[i] = CreateVehicle( raceVariables[raceVehicleIDE], Cars_Races[ z+6 ][ 0 ], Cars_Races[ z+6 ][ 1 ], Cars_Races[ z+6 ][ 2 ], Cars_Races[ z+6 ][ 3 ], -1, -1, -1 );
			}
			case 3:
			{
				new z = i+1;
				SetPlayerRaceCheckpoint( i, 0, Hard_Race[ 0 ][ 0 ], Hard_Race[ 0 ][ 1 ], Hard_Race[ 0 ][ 2 ], Hard_Race[ 1 ][ 0 ], Hard_Race[ 1 ][ 1 ], Hard_Race[ 1 ][ 2 ], 10.0 );
				raceCar[i] = CreateVehicle( raceVariables[raceVehicleIDE], Cars_Races[ z+9 ][ 0 ], Cars_Races[ z+9 ][ 1 ], Cars_Races[ z+9 ][ 2 ], Cars_Races[ z+9 ][ 3 ], -1, -1, -1 );
			}
		}
		switch(raceVariables[raceType])
		{
			case 0: DisableRemoteVehicleCollisions(i, false);
			case 1: DisableRemoteVehicleCollisions(i, true);
		}
		
		SetVehicleNumberPlate( raceCar[i], playerVariables[ i ][ pNormalName ] );
		raceVariables[ raceText ][i] = Create3DTextLabel( "Loading...\nPlease wait the race to start!", COLOR_YELLOW_3D, 0.0, 0.0, 0.0, 50.0, 0, 1 );
		Attach3DTextLabelToVehicle( raceVariables[ raceText ][i], raceCar[i], 0.0, 0.0, 2.0 );
		SetVehicleVirtualWorld(raceCar[i], 172);

		playerVariables[i][pTeleport] = true;
		serverVariables[VehicleGas][raceCar[i]] = 1000;
		GetVehicleParamsEx(raceCar[i], engine, lights, alarm, doors, bonnet, boot, objective);
		SetVehicleParamsEx(raceCar[i], VEHICLE_PARAMS_ON, lights, alarm, doors, bonnet, boot, objective);
		SetVehicleVirtualWorld(raceCar[i], 172);
		SetPlayerInterior(i, 0);
		SetPlayerVirtualWorld(i, 172);
		SetTimerEx("PutPlayerInVehicleTimer", 1000, false, "ddd", i, raceCar[i], 0);
	}
}
function PutPlayerInVehicleTimer(playerid, vehicleid, seatid)
{
	PutPlayerInVehicle(playerid, vehicleid, seatid);
}

function RacePreparate()
{
	if(raceVariables[racePlayers] > 2 && raceVariables[raceStatus] == 1)
	{
		raceVariables[raceTimer] = SetTimerEx("VoteRaceDialogs", 10000, false, "d", 0);
		foreach(new i : Racers)
		{
			ShowPlayerDialog(i, DIALOG_SELECT_RACE_MAP, DIALOG_STYLE_LIST, "Race Arena: Vote Track", "Airport Race\nBeach Race\nChilliad Race\nHard Race", "Vote", "");
			raceVariables[raceString][0] = EOS;
			raceVariables[raceVoting] = 1;
			format( raceVariables[ raceString ], 40, "~y~VOTING IN PROGRESS...");
		}
	}
	else 
	{
		SendRaceArenaMessage(COLOR_RACEMESSAGE, "Race Arena: {FFFFFF}Race has stopped due to leaving of the last player!");
		ResetRaceArena();
		if(raceVariables[racePlayers] >= 1)
		{
			foreach(new i : Racers)
			{
				RemovePlayerFromRaceArena(i);
			}
		}
	}
}
function RaceArenaTimer()
{
	if(raceVariables[racePlayers] > 2 && raceVariables[raceStatus] == 0)
	{
		raceVariables[raceStatus] = 1;//setting phase
		raceVariables[raceTimerPreparate] = SetTimer("RacePreparate", 30000, false);
		SendRaceArenaMessage(COLOR_RACEMESSAGE, "Race Arena: {FFFFFF}Voting will begin in 30 seconds, we expect more players to enter.");

		raceVariables[ raceString ][ 0 ] = EOS;
		format( raceVariables[ raceString ], 40, "~g~WAITING FOR MORE PLAYERS TO JOIN...");
	}

	if(raceVariables[raceTimer] != 0 && raceVariables[racePlayers] == 0 && raceVariables[raceStatus] == 2)
	{
		ResetRaceArena();
	}

	if(raceVariables[raceTimer] != 0)
	{
		raceVariables[raceTimer]--;
		if(raceVariables[raceTimer] == 0 && raceVariables[raceStatus] == 2)
		{
			if(raceVariables[racePlayers] >= 1)
			{
				foreach(new i : Racers)
				{
					//(i, 1139, 0.0, 0.0, 0.0);
					DisablePlayerRaceCheckpoint(i);
					playerVariables[ i ][ pRCP ] = 0;
					playerVariables[ i ][ pMoney ] += 1000;
					RemovePlayerFromRaceArena( i );
					SendClientMessagef( i, COLOR_LIGHTRED, "Race Arena: "COL_W"%s, you have left the Race Arena due the given time has exceded!", playerVariables[ i ][ pNormalName ] );
					SendClientMessage( i, COLOR_GREY, "You received $1.000 because you took part in the race" );
				}
			}
			ResetRaceArena();
		}
	}

	if(raceVariables[raceStatus] == 4)
	{
		if( raceVariables[ racePlayers ] > 2 )
		{
			raceVariables[ raceStatus ] = 2;
			raceVariables[ raceTimer ] = 600;
			raceVariables[ raceStarted ] = 1;

			SendRaceArenaMessage(COLOR_RACEMESSAGE, "Race Arena: {FFFFFF}Race has started, drive to the finish, good luck !");

			raceVariables[ raceString ][ 0 ] = EOS;
			format( raceVariables[ raceString ], 128, "RACE WILL END IN: ~b~%s", TimeConvert( raceVariables[ raceTimer ] ) );

			foreach(new i : Racers)
			{
				SetPlayerHealth( i, 99.0 );
				ResetServerWeapons(i);
				TogglePlayerControllable(i, 1);
			}
		}
		else 
		{
			if(Iter_Count(Racers) != 0)
			{
				SendRaceArenaMessage(COLOR_RACEMESSAGE, "Race Arena: {FFFFFF}Race has stopped due to leaving of the last player!");
				foreach(new i : Racers)
				{
					RemovePlayerFromRaceArena(i);
				}
			}
			ResetRaceArena();
		}
	}
	UpdateRaceArenaTextDraws();
}



function RacerSetTimer()
{
	raceVariables[raceStatus] = 4;
}

stock hideDialog( playerid )
	return ShowPlayerDialog( playerid, -1, 0, "", "", "", "" ), 1;

stock SelectRaceVehicleID()
{
	new voteScore, voteType;
	for( new i; i < 4; i++ )
	{
		if( raceVariables[ raceVehicleID ][i] > voteScore )
		{
			voteScore = raceVariables[raceVehicleID][i];
			voteType = i;
		}
	}
	raceVariables[raceVehicleID] = voteType;
	switch(raceVariables[raceVehicle])
	{
		case 0:
		{
			switch(raceVariables[raceVehicleID])
			{
				case 0: raceVariables[raceVehicleIDE] = 439;
				case 1: raceVariables[raceVehicleIDE] = 480;
				case 2: raceVariables[raceVehicleIDE] = 533;
				case 3: raceVariables[raceVehicleIDE] = 555;
			}
		}
		case 1:
		{
			switch(raceVariables[raceVehicleID])
			{
				case 0: raceVariables[raceVehicleIDE] = 567;
				case 1: raceVariables[raceVehicleIDE] = 536;
				case 2: raceVariables[raceVehicleIDE] = 412;
				case 3: raceVariables[raceVehicleIDE] = 535;
			}
		}
		case 2:
		{
			switch(raceVariables[raceVehicleID])
			{
				case 0: raceVariables[raceVehicleIDE] = 489;
				case 1: raceVariables[raceVehicleIDE] = 495;
				case 2: raceVariables[raceVehicleIDE] = 579;
				case 3: raceVariables[raceVehicleIDE] = 568;
			}
		}
		case 3:
		{
			switch(raceVariables[raceVehicleID])
			{
				case 0: raceVariables[raceVehicleIDE] = 402;
				case 1: raceVariables[raceVehicleIDE] = 429;
				case 2: raceVariables[raceVehicleIDE] = 541;
				case 3: raceVariables[raceVehicleIDE] = 502;
			}
		}
		case 4:
		{
			switch(raceVariables[raceVehicleID])
			{
				case 0: raceVariables[raceVehicleIDE] = 426;
				case 1: raceVariables[raceVehicleIDE] = 560;
				case 2: raceVariables[raceVehicleIDE] = 542;
				case 3: raceVariables[raceVehicleIDE] = 562;
			}
		}
		case 5:
		{
			switch(raceVariables[raceVehicleID])
			{
				case 0: raceVariables[raceVehicleIDE] = 468;
				case 1: raceVariables[raceVehicleIDE] = 481;
				case 2: raceVariables[raceVehicleIDE] = 461;
				case 3: raceVariables[raceVehicleIDE] = 463;
			}
		}
	}
}

stock SelectRaceType()
{
	new voteScore, voteType;
	for( new i; i < 2; i++ )
	{
		if( raceVariables[ raceVoteType ][i] > voteScore )
		{
			voteScore = raceVariables[raceVoteType][i];
			voteType = i;
		}
	}
	raceVariables[raceType] = voteType;
}
stock SelectRaceVehicle()
{
	new voteScore, voteVehicle;
	for( new i; i < 6; i++ )
	{
		if( raceVariables[ raceVoteVehicle ][i] > voteScore )
		{
			voteScore = raceVariables[raceVoteVehicle][i];
			voteVehicle = i;
		}
	}
	raceVariables[raceVehicle] = voteVehicle;
}
stock SelectRaceTrack()
{
	new voteScore, voteTrack;
	for( new i; i < 4; i++ )
	{
		if( raceVariables[ raceVoteTrack ][i] > voteScore )
		{
			voteScore = raceVariables[raceVoteTrack][i];
			voteTrack = i;
		}
	}
	raceVariables[raceTrack] = voteTrack;
}

stock GetDifficultyForTrack(i)
{
	gsString[0] = EOS;
	if(raceSystem[i][rTotalCP] <= 15) gsString = "Easy";
	if(raceSystem[i][rTotalCP] > 15 && raceSystem[i][rTotalCP] <= 30) gsString = "Medium";
	if(raceSystem[i][rTotalCP] > 30) gsString = "Hard";
	return gsString;
}

stock GetTrackName(trackid)
{	
	gsString[ 0 ] = EOS;

	switch( trackid )
	{
		case 0: gsString = "Airport Race";
		case 1: gsString = "Beach Race"; 
		case 2: gsString = "Chilliad Race"; 
		case 3: gsString = "Hard Race"; 
	}

	return gsString;
}
stock GetTypeName(trackid)
{	
	gsString[ 0 ] = EOS;

	switch( trackid )
	{
		case 0: gsString = "Classic [collision included]";
		case 1: gsString = "Classic [no-collision]"; 
	}

	return gsString;
}
stock GetVehiclesName(trackid)
{	
	gsString[ 0 ] = EOS;

	switch( trackid )
	{
		case 0:	gsString = "Convertibles";
		case 1:	gsString = "Lowriders";
		case 2:	gsString = "Off-Road";
		case 3:	gsString = "Sport Vehicles";
		case 4:	gsString = "Saloons";
		case 5:	gsString = "Motorcycles";
	}

	return gsString;
}

#if defined CRATES
function crate_Timer( playerid, crateopentype )
{
	if(!IsPlayerConnected( playerid ))
		return KillTimer( playerVariables[ playerid ][ pCrateTimer ] );
	
	new rand[] = {293, 292, 195, 211, 93, 90, 115, 116, 298, 290};
	new size = sizeof(rand);
	new randn = random(size);
	new random_value = rand[randn];

	playerVariables[playerid][pCrateEnding] += 1;
	if(playerVariables[playerid][pCrateEnding] >= 1 && playerVariables[playerid][pCrateEnding] <= 4)
	{
		PlayerTextDrawSetPreviewModel(playerid, CratePlayer[playerid][1], random_value);
		PlayerTextDrawSetPreviewRot(playerid, CratePlayer[playerid][1], 0.000000, 0.000000, 21.000000, 1.000000);

		PlayerTextDrawShow(playerid, CratePlayer[playerid][1]);
		return 1;
	}
	else if(playerVariables[playerid][pCrateEnding] >= 5 && playerVariables[playerid][pCrateEnding] <= 7)
	{
		PlayerTextDrawSetPreviewModel(playerid, CratePlayer[playerid][1], random_value);
		PlayerTextDrawSetPreviewRot(playerid, CratePlayer[playerid][1], 0.000000, 0.000000, 21.000000, 1.000000);

		PlayerTextDrawShow(playerid, CratePlayer[playerid][1]);
		return 1;
	}
	else if(playerVariables[playerid][pCrateEnding] >= 8 && playerVariables[playerid][pCrateEnding] <= 9)
	{
		PlayerTextDrawSetPreviewModel(playerid, CratePlayer[playerid][1], random_value);
		PlayerTextDrawSetPreviewRot(playerid, CratePlayer[playerid][1], 0.000000, 0.000000, 21.000000, 1.000000);

		PlayerTextDrawShow(playerid, CratePlayer[playerid][1]);
		return 1;
	}
	else if(playerVariables[playerid][pCrateEnding] == 10)
	{
		PlayerTextDrawSetPreviewModel(playerid, CratePlayer[playerid][1], random_value);
		PlayerTextDrawSetPreviewRot(playerid, CratePlayer[playerid][1], 0.000000, 0.000000, 21.000000, 1.000000);

		PlayerTextDrawShow(playerid, CratePlayer[playerid][1]);

		if( crateopentype == 1 ) {
			SendClientMessagef( playerid, COLOR_YELLOW, "Crates: {FFFFFF}You won skin id %d.", random_value );
		}
		else {
			SendClientMessagef( playerid, COLOR_YELLOW, "Crates: {FFFFFF}Cutia pe care ai deschis-o a fost free si nu ai primit nimic." );
		}

		if( crateopentype == 1 )
		{
			for(new i; i < 10; i++) 
			{
				if(playerVariables[playerid][pCrateSkins][i] == random_value)
				{
					alreadyOwn[playerid] = 1;
					break;
				}
				else alreadyOwn[playerid] = 0;
			}
			if(alreadyOwn[playerid] == 0)
			{
				for(new i; i < 10; i++)
				{
					if(playerVariables[playerid][pCrateSkins][i] == 0) 
					{ 
						playerVariables[playerid][pCrateSkins][i] = random_value;
						playerVariables[playerid][pCrateSkinAmount][i]++;
						break;
					} 
				}
			}
			else
			{
				ShowPlayerDialog(playerid, DIALOG_OPENCRATE, DIALOG_STYLE_MSGBOX, "Crates", "You already own this skin, you can keep and sell it for money or you can try again", "Keep it", "Try again");
				CrateSkinSaves[playerid] = random_value;
			}
		}
	}
	SetPVarInt(playerid, "InOpeningAlreadyCrate", 0);
	KillTimer(playerVariables[playerid][pCrateTimer]);
	playerVariables[playerid][pCrateEnding] = 0;
	return 1;
}
#endif

function player_Timer( i )
{
	if( !IsPlayerConnected( i ) )
		return KillTimer( playerVariables[ i ][ pPlayerTimer ] );

	new GetTime[ 6 ], clockString[ 64 ];
	getdate( GetTime[ 0 ], GetTime[ 1 ], GetTime[ 2 ] );
	gettime( GetTime[ 3 ], GetTime[ 4 ], GetTime[ 5 ] );
	// < Level / RP >
	if( playerVariables[ i ][ pHud ][ 3 ] == 1 )
	{
		new needXP = playerVariables[ i ][ pLevel ] * LEVEL_MULTYPLIER;
		gsString[ 0 ] = EOS;
		format( gsString, 128, "LEVEL %d (%d/%d RESPECT)", playerVariables[ i ][ pLevel ], playerVariables[ i ][ pRP ], needXP );
		PlayerTextDrawSetString( i, PlayerText:PLAYER_TD[ 10 ], gsString );
	}

    if(playerVariables[ i ][ pTimePlayed ] < 3600)
    {
    	new string[24];
    	format(string, sizeof string, "~w~%s", Calculate_Time(playerVariables[ i ][ pTimePlayed ]));
    	PlayerTextDrawSetString(i, PlayerText:CeasPTD, string);
    }
    else
    {
    	new string[24];
    	format(string, sizeof string, "~w~%s", Time_Calculate(playerVariables[ i ][ pTimePlayed ]));
    	PlayerTextDrawSetString(i, PlayerText:CeasPTD, string);
	}

	if( playerVariables[ i ][ pAdminLevel ] >= 7 )
	{
		new stats_string[256];
		format(stats_string, 256, "~w~ticks: ~g~%d ~w~/ reports: ~r~%d ~w~ ~w~/ ping: ~y~%d ~w~/ anim: ~y~%d ~w~/ mps: ~b~%d/ ~w~online: ~r~%d/%d", GetServerTickRate(), server_reports, GetPlayerPing(i), GetPlayerAnimationIndex(i), NetStats_MessagesRecvPerSecond(i), server_players, GetMaxPlayers() );
		PlayerTextDrawSetString( i, ticks_td, stats_string );
	}
	else 
	{
		new stats_string[256];
		format(stats_string, 256, "~w~reports: ~r~%d ~w~  ~w~/ ping: ~y~%d ~w~/ anim: ~b~%d", server_reports, GetPlayerPing(i), GetPlayerAnimationIndex(i) );
		PlayerTextDrawSetString( i, ticks_td , stats_string );
	}
	// add remove desync 


    if( !Iter_Contains( desyncPlayers, i ) && GetPlayerPing( i ) >= 200 )
    	Iter_Add( desyncPlayers, i );
    else if( GetPlayerPing( i ) < 200  && Iter_Contains( desyncPlayers, i) )
    	Iter_Remove( desyncPlayers, i );

    // solved foreach /n etc 

    if( playerVariables[ i ][ pTog ][ 6 ] == 1 && !Iter_Contains(playerWithHud, i ))
    	Iter_Add( playerWithHud, i );
    else if( playerVariables[ i ][ pTog ][ 6 ] == 0 && Iter_Contains(playerWithHud, i ))
    	Iter_Remove( playerWithHud, i );

	// < Give player's payday >
	if( GetTime[ 4 ] == 0 )
	{
		switch( GetTime[ 5 ] )
		{
			case 0:
			{
				GivePlayerPayday( i, GetTime[ 3 ] );
				playerVariables[ i ][ pPaydayStatus ] = 60;
			}
			case 1..59:
			{
				if( playerVariables[ i ][ pPaydayStatus ] == 0 )
				{
					GivePlayerPayday( i, GetTime[ 3 ] );
					playerVariables[ i ][ pPaydayStatus ] = 60;
				}
			}
		}
	}
	//if( GetTime[ 4 ] == 0 && GetTime[ 5 ] == 0 && playerVariables[ i ][ pLogged ] ) GivePlayerPayday( i );
	
	// < Check Chilliad Quest >
	if( playerVariables[ i ][ pQuest ][ 0 ] == QUEST_CHILLIAD && playerVariables[ i ][ pQuestProgress ][ 0 ] == 0 || playerVariables[ i ][ pQuest ][ 1 ] == QUEST_CHILLIAD && playerVariables[ i ][ pQuestProgress ][ 1 ] == 0 )
		if( IsPlayerInRangeOfPoint( i, 150.0, -2317.8091, -1637.5575, 483.7031 ) )
			CheckPlayerQuest( i, QUEST_CHILLIAD );

	// < Show player Time )
	if( GetPVarInt( i, "custom_Time" ) == 0 )
		SetPlayerTime( i, GetTime[ 3 ], GetTime[ 4 ] );

	format( clockString, sizeof clockString, "%02d.%02d.%02d", GetTime[ 2 ], GetTime[ 1 ], GetTime[ 0 ] );
	PlayerTextDrawSetString( i, CLOCK_TD[ 0 ], clockString );
	//PlayerTextDrawShow( i, CLOCK_TD[ 0 ] );

	format( clockString, sizeof clockString, "%02d:%02d", GetTime[ 3 ], GetTime[ 4 ] );
	PlayerTextDrawSetString( i, CLOCK_TD[ 1 ], clockString );
	//PlayerTextDrawShow( i, CLOCK_TD[ 1 ] )/
   
	// < Load other things if spawned )
	if( playerVariables[ i ][ pLogged ] )
	{
		// < Update Player FPS )
		new drunknew = GetPlayerDrunkLevel( i );
		if( drunknew < 100 )
			SetPlayerDrunkLevel( i, 2000 );
		else
		{
			if( playerVariables[ i ][ pDrunkLevelLast ] != drunknew )
			{
				new wfps = playerVariables[ i ][ pDrunkLevelLast ] - drunknew;
				if((wfps > 0) && (wfps < 200))
					playerVariables[ i ][ pFPS ] = wfps;

				playerVariables[ i ][ pDrunkLevelLast ] = drunknew;
			}
		}
		// < Update player Huds )
		UpdatePlayerHUDS( i );

		// < update timer )

		// < Despawn player vehicles )
		for( new slot=0; slot<MAX_SLOTS; slot++ )
			if( playerVariables[ i ][ Vehicle ][ slot ] != 0 && vehicleVariables[ slot ][ i ][ VehicleStatus ] == 1 && vehicleVariables[ slot ][ i ][ VehicleTimer ] != 0 )
				if( --vehicleVariables[ slot ][ i ][ VehicleTimer ] == 0 && IsValidVehicle( vehicleVariables[ slot ][ i ][ Vehicle ] ) )
					DeSpawnPlayerVehicle( slot, i ), InfoTD_MSG( i, 7000, "~r~~h~Personal Vehicle~n~~w~~h~Your ~g~~h~%s[%d] ~w~~h~has been despawned~n~~y~~h~Reason: ~w~~h~10 minutes out of activity", VehicleName( vehicleVariables[ slot ][ i ][ VehicleModelID ] ), slot );

		#if defined OBJECT_QUEST
		// < Create player's pickups / Nu prea mai e nevoie momentan >
		/*foreach( new objID : QuestObjects )
		{
			if( !playerVariables[ i ][ pQuestObject ][ objid ] )
			{
				new Float:objRot[ 6 ];
				GetDynamicObjectRot( playerVariables[ i ][ pQuestObjectPickup ][ objid ], objRot[ 0 ], objRot[ 1 ], objRot[ 2 ] );
				GetDynamicObjectPos( playerVariables[ i ][ pQuestObjectPickup ][ objid ], objRot[ 3 ], objRot[ 4 ], objRot[ 5 ] );

				if( objRot[ 5 ] == 0.000 )
					objRot[ 5 ]+= 0.001;
				else if( objRot[ 5 ] == 0.001 )
					objRot[ 5 ] = 0.000;

				if( objRot[ 2 ] >= 360.0 )
					objRot[ 2 ] = 0.0;

				MoveDynamicObject( playerVariables[ i ][ pQuestObjectPickup ][ objid ], objRot[ 3 ], objRot[ 4 ], objRot[ 5 ], 0.01, objRot[ 0 ], objRot[ 1 ], objRot[ 2 ] + 45.0 );
			}
		}*/
		#endif
		// < Update player status/playtime >
		if( !IsPlayerPaused( i ) )
		{
			if( !playerVariables[ i ][ pSleeping ] && playerVariables[ i ][ pAFKPosTimer ] < 40 ) // 40 = 120 secunde = 2 minute
				playerVariables[ i ][ pPlayTime ]++, playerVariables[ i ][ pTimePlayed ]++;

			if( playerVariables[ i ][ pSpawned ] == 2 )
			{
				// < Update online status >
				playerVariables[ i ][ pAFKTimeNow ] = 0;
				playerVariables[ i ][ pSpawned ] = 1;
				gsQuery[ 0 ] = EOS;
				mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerStatus` = 1 WHERE `id` = %d", GetPlayerMysqlID(i) );
				mysql_tquery( g_Handle, gsQuery, "", "" );
			}
		}
		if( IsPlayerPaused( i ) && playerVariables[ i ][ pSpawned ] )
		{
			// < Update online status >
			if( !playerVariables[ i ][ pSleeping ] )
				playerVariables[ i ][ pAFKTime ]++, playerVariables[ i ][ pAFKTimeNow ]++;

			playerVariables[ i ][ pSpawned ] = 2; // < AFK >

			gsQuery[ 0 ] = EOS;
			mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerStatus` = 2 WHERE `id` = %d", GetPlayerMysqlID(i) );
			mysql_tquery( g_Handle, gsQuery, "", "" );
		}
		if( playerVariables[ i ][ pWantedTime ] != 0 )
		{
			playerVariables[ i ][ pWantedTime ]--;
			switch( playerVariables[ i ][ pWantedTime ] )
			{
				case 1 .. 600: UpdateScadeWanted( i, playerVariables[ i ][ pWantedTime ] );
				case 0:
				{
					switch( playerVariables[ i ][ pWanted ] )
					{
						case 1 .. 6:
						{
							playerVariables[ i ][ pWanted ]--;
							SetPlayerWantedLevel( i, playerVariables[ i ][ pWanted ] );
							playerVariables[ i ][ pWantedTime ] = 600;
							UpdateScadeWanted( i, playerVariables[ i ][ pWantedTime ] );
						}
						case 0:
						{
							playerVariables[ i ][ pWantedTime ] = 0;
							SetPlayerWantedLevel( i, 0 );
							PlayerTextDrawHide( i, PLAYER_TD[ 3 ] );
							if(Iter_Contains(server_wanteds, i)) Iter_Remove(server_wanteds, i), server_wanteds--;
						}
					}
				}
			}
		}
		//else playerVariables[ i ][ pWantedTime ] = 0, SetPlayerWantedLevel( i, 0 ), PlayerTextDrawHide( i, PLAYER_TD[ 3 ] );
		if( GetPlayerMoney( i ) != playerVariables[ i ][ pMoney ] )
		{
			if( playerVariables[ i ][ pSpawned ] && GetPlayerState( i ) != PLAYER_STATE_WASTED )
			{
				if( playerVariables[ i ][ pMoney ] > GetPlayerMoney( i ) )
				{
					new playerCash = playerVariables[ i ][ pMoney ] - GetPlayerMoney( i );
					gsString[ 0 ] = EOS;
					format( gsString, sizeof gsString, "~g~+$%d", playerCash );
					GameTextForPlayer( i, gsString, 5000, 1 );
				}
				else if( playerVariables[ i ][ pMoney ] < GetPlayerMoney( i ) )
				{
					new playerCash = GetPlayerMoney( i ) - playerVariables[ i ][ pMoney ];
					gsString[ 0 ] = EOS;
					format( gsString, sizeof gsString, "~r~-$%d", playerCash );
					GameTextForPlayer( i, gsString, 5000, 1 );
				}
			}
			ResetPlayerMoney( i );
			GivePlayerMoney( i, playerVariables[ i ][ pMoney ] );
		}
		if( GetPlayerScore( i ) != playerVariables[ i ][ pLevel ] )
		{
			SetPlayerScore( i, playerVariables[ i ][ pLevel ] );
		}
		if( GetPlayerState( i ) == PLAYER_STATE_DRIVER || GetPlayerState( i ) == PLAYER_STATE_PASSENGER )
		{
			new PlayerSlot = playerVariables[ i ][ VehicleSlot ],
				vehicleid = GetPlayerVehicleID( i ),
				g_engine, g_lights, g_alarm, g_doors, g_bonnet, g_boot, g_objective;

			if( vehicleVariables[ PlayerSlot ][ i ][ Vehicle ] == vehicleid )
			{
				switch( vehicleVariables[ PlayerSlot ][ i ][ VehicleLocked ] )
				{
					case 0: format( playerVariables[ i ][ VehicleLock ], 32, "~g~~h~Descuiat" );
					case 1: format( playerVariables[ i ][ VehicleLock ], 32, "~r~~h~Incuiat" );
				}
			}
			else
			{
				GetVehicleParamsEx( vehicleid, g_engine, g_lights, g_alarm, g_doors, g_bonnet, g_boot, g_objective );
				switch( g_doors )
				{
					case VEHICLE_PARAMS_OFF: format( playerVariables[ i ][ VehicleLock ], 32, "~g~~h~Descuiat" );
					case VEHICLE_PARAMS_ON: format( playerVariables[ i ][ VehicleLock ], 32, "~r~~h~Incuiat" );
					default: format( playerVariables[ i ][ VehicleLock ], 32, "~g~~h~Descuiat" );
				}
			}
			new oldspeed = playerVariables[ i ][ vSpeed ];
			playerVariables[ i ][ vSpeed ] = GetVehicleSpeed( vehicleid, 0 );
			new newspeed = playerVariables[ i ][ vSpeed ],
				acceleration = abs(newspeed - oldspeed),
				Consume = (((acceleration / 35) + 1) * (newspeed / 35)),
				Float:Consume2 = float(Consume);

			serverVariables[ VehicleGas ][ vehicleid ] -= Consume2 / 65; // Valoare veche: 60
			if( serverVariables[ VehicleGas ][ vehicleid ] <= 0.0 && !IsABike( vehicleid ) )
			{
				//RemovePlayerFromVehicle( i );
				serverVariables[ VehicleGas ][ vehicleid ] = 0.0;
				SetVehicleParamsEx( vehicleid, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF );
				//InfoTD_MSG( i, 5000, "Acest vehicul nu mai are ~r~~h~Benzina" );
			}
			// "F: ~y~~h~%d ~w~~h~L | S: ~y~~h~%d ~w~~h~KM/H | TRIP: ~y~~h~%0.2f ~w~~h~KM | D: ~r~~h~%s"
			if( vehicleVariables[ PlayerSlot ][ i ][ Vehicle ] == vehicleid )
			{
				if( IsABike( vehicleid ) )
				{
					if(!IsPlayerPaused(i) && GetVehicleSpeed2(i) > 5)
					{
						vehicleVariables[ PlayerSlot ][ i ][ VehicleOdometter ] += ( GetVehicleSpeed2( i ) * 0.2 ) / 100 / 2;
					}
					gsString[ 0 ] = EOS;
					format( gsString, sizeof gsString, "SPEED: ~y~~h~%d ~w~~h~KM/H~n~TRIP: ~y~~h~%0.2f ~w~~h~KM~n~DOORS: ~r~~h~%s", GetVehicleSpeed( vehicleid, 0 ), vehicleVariables[ PlayerSlot ][ i ][ VehicleOdometter ], playerVariables[ i ][ VehicleLock ] );
					PlayerTextDrawSetString( i, PLAYER_TD[ 1 ], gsString );
				}
				else
				{
					if(!IsPlayerPaused(i) && GetVehicleSpeed2(i) > 5)
					{
						vehicleVariables[ PlayerSlot ][ i ][ VehicleOdometter ] += (GetVehicleSpeed2(i) * 0.2) / 100 / 2;
					}

					gsString[ 0 ] = EOS;
					format( gsString, sizeof gsString, "~b~FUEL: ~y~~h~%d ~w~~h~L~n~~b~SPEED: ~y~~h~%d ~w~~h~KM/H~n~~b~TRIP: ~y~~h~%0.2f ~w~~h~KM~n~~b~DOORS: ~r~~h~%s", floatround(serverVariables[ VehicleGas ][ vehicleid ], floatround_round), GetVehicleSpeed( vehicleid, 0 ), vehicleVariables[ PlayerSlot ][ i ][ VehicleOdometter ], playerVariables[ i ][ VehicleLock ] );
					PlayerTextDrawSetString( i, PLAYER_TD[ 1 ], gsString );
				}
			}
			else if( GetPVarInt( i, "TaxiDriverID" ) != INVALID_PLAYER_ID && playerVariables[ i ][ pTaxiDriver ] == 0 )
			{
				new TaxiDriver = GetPVarInt( i, "TaxiDriverID" );

				if(!IsPlayerPaused(i) && GetVehicleSpeed2(i) > 5)
				{
					playerVariables[ i ][ pTaxiDistance ] += (GetVehicleSpeed2(i) * 0.2) / 100 / 2;
				}

				playerVariables[ i ][ pTaxiCost ] = (floatround(playerVariables[ i ][ pTaxiDistance ], floatround_round) * playerVariables[ TaxiDriver ][ pTaxiValue ] ) + playerVariables[ TaxiDriver ][ pTaxiValue ];

				gsString[ 0 ] = EOS;
				format( gsString, sizeof gsString, "~b~FUEL: ~y~~h~%d ~w~~h~L~n~~b~SPEED: ~y~~h~%d ~w~~h~KM/H~n~~b~Taxi Cost: $~g~~h~%s ~w~~h~FOR %d KM", 
					floatround(serverVariables[ VehicleGas ][ vehicleid ], floatround_round), GetVehicleSpeed( vehicleid, 0 ), FormatNumber(playerVariables[ i ][ pTaxiCost ]), floatround(playerVariables[ i ][ pTaxiDistance ], floatround_round) );
				PlayerTextDrawSetString( i, PLAYER_TD[ 1 ], gsString );
			}
			else if( playerVariables[ i ][ pTaxiDriver ] )
			{
				gsString[ 0 ] = EOS;
				format( gsString, sizeof gsString, "~b~FUEL: ~y~~h~%d ~w~~h~L~n~~b~SPEED: ~y~~h~%d ~w~~h~KM/H~n~~b~Taxi Earnings: $~g~~h~%s", floatround(serverVariables[ VehicleGas ][ vehicleid ], floatround_round), GetVehicleSpeed( vehicleid, 0 ), FormatNumber(GetTaxiDriverEarnings( i )) );
				PlayerTextDrawSetString( i, PLAYER_TD[ 1 ], gsString );
			}
			#if defined UBERSYS
			else if( GetPVarInt( i, "UberDriverID" ) != INVALID_PLAYER_ID && playerVariables[ i ][ pUberOnWork ] == 0 )
			{
				new TaxiDriver = GetPVarInt( i, "UberDriverID" );

				if(!IsPlayerPaused(i) && GetVehicleSpeed2(i) > 5)
				{
					playerVariables[ i ][ pUberDistance ] += (GetVehicleSpeed2(i) * 0.2) / 100 / 2;
				}

				playerVariables[ i ][ pUberFinalCost ] = (floatround(playerVariables[ i ][ pUberDistance ], floatround_round) * playerVariables[ TaxiDriver ][ pUberPrice ] ) + playerVariables[ TaxiDriver ][ pUberPrice ];

				gsString[ 0 ] = EOS;
				format( gsString, sizeof gsString, "~b~FUEL: ~y~~h~%d ~w~~h~L~n~~b~SPEED: ~y~~h~%d ~w~~h~KM/H~n~~b~Uber Cost: $~g~~h~%s ~w~~h~FOR %d KM", 
					floatround(serverVariables[ VehicleGas ][ vehicleid ], floatround_round), GetVehicleSpeed( vehicleid, 0 ), FormatNumber(playerVariables[ i ][ pUberFinalCost ]), floatround(playerVariables[ i ][ pUberDistance ], floatround_round) );
				PlayerTextDrawSetString( i, PLAYER_TD[ 1 ], gsString );
			}
			else if( playerVariables[ i ][ pUberOnWork ] )
			{
				gsString[ 0 ] = EOS;
				format( gsString, sizeof gsString, "~b~FUEL: ~y~~h~%d ~w~~h~L~n~~b~SPEED: ~y~~h~%d ~w~~h~KM/H~n~~b~Uber Earnings: $~g~~h~%s", floatround(serverVariables[ VehicleGas ][ vehicleid ], floatround_round), GetVehicleSpeed( vehicleid, 0 ), FormatNumber(GetUberDriverEarnings( i )) );
				PlayerTextDrawSetString( i, PLAYER_TD[ 1 ], gsString );
			}
			#endif
			else
			{
				if( IsABike( vehicleid ) )
				{
					gsString[ 0 ] = EOS;
					format( gsString, sizeof gsString, "~b~SPEED: ~y~~h~%d ~w~~h~KM/H", GetVehicleSpeed( vehicleid, 0 ) );
					PlayerTextDrawSetString( i, PLAYER_TD[ 1 ], gsString );
				}
				else
				{
					gsString[ 0 ] = EOS; 
					format( gsString, sizeof gsString, "~b~FUEL: ~y~~h~%d ~w~~h~L~n~~b~SPEED: ~y~~h~%d ~w~~h~KM/H~n~~b~DOORS: ~r~~h~%s", floatround(serverVariables[ VehicleGas ][ vehicleid ], floatround_round), GetVehicleSpeed( vehicleid, 0 ), playerVariables[ i ][ VehicleLock ] );
					PlayerTextDrawSetString( i, PLAYER_TD[ 1 ], gsString );
				}
			}
		}
		else
		{
			if( !IsPlayerInAnyVehicle( i ) )
				PlayerTextDrawHide( i, PLAYER_TD[ 1 ] );
		}
		if( playerVariables[ i ][ pSpectating ] != INVALID_PLAYER_ID )
		{
			// < Load Spectate )
			new PlayerID = playerVariables[ i ][ pSpectating ], Float:playerHealth[ 3 ];
			GetPlayerHealth( PlayerID, playerHealth[ 0 ] );
			GetPlayerArmour( PlayerID, playerHealth[ 2 ] );

			if( IsPlayerInAnyVehicle( PlayerID ) )
			{
				new svSpeed = GetVehicleSpeed( GetPlayerVehicleID( PlayerID ), 0 );
				GetVehicleHealth( GetPlayerVehicleID( PlayerID ), playerHealth[ 1 ] );

				if( playerVariables[ i ][ pSpecMode ] )
					PlayerSpectateVehicle( i, GetPlayerVehicleID( PlayerID ) ), playerVariables[ i ][ pSpecMode ] = 0;


				gsString[ 0 ] = EOS;
				format( gsString, sizeof gsString, "%s (~r~~h~%d~w~~h~)~n~H: %.0f - A: %.0f~n~W: %d - JAIL: ~r~~h~%s~n~VEHICLE: ~r~~h~%d (%.0f HP)~n~~y~~h~%d KM/H", 
					playerVariables[ PlayerID ][ pNormalName ], PlayerID, playerHealth[ 0 ], playerHealth[ 2 ], playerVariables[ PlayerID ][ pWanted ], TimeConvert( playerVariables[ PlayerID ][ pPrisonTime ] ),
					GetPlayerVehicleID( PlayerID ), playerHealth[ 1 ], svSpeed );
				PlayerTextDrawSetString( i, SPECTATE_TD, gsString );



				SetPlayerInterior( i, GetPlayerInterior( PlayerID ) );
				SetPlayerVirtualWorld( i, GetPlayerVirtualWorld( PlayerID ) );
			}
			else
			{
				if( !playerVariables[ i ][ pSpecMode ] )
					PlayerSpectatePlayer( i, PlayerID ), playerVariables[ i ][ pSpecMode ] = 1;

				gsString[ 0 ] = EOS;
				format( gsString, sizeof gsString, "%s (~r~~h~%d~w~~h~)~n~H: %.0f - A: %.0f~n~W: %d - JAIL: ~r~~h~%s", 
					playerVariables[ PlayerID ][ pNormalName ], PlayerID, playerHealth[ 0 ], playerHealth[ 2 ], playerVariables[ PlayerID ][ pWanted ], TimeConvert( playerVariables[ PlayerID ][ pPrisonTime ] ) );
				PlayerTextDrawSetString( i, SPECTATE_TD, gsString );



				SetPlayerInterior( i, GetPlayerInterior( PlayerID ) );
				SetPlayerVirtualWorld( i, GetPlayerVirtualWorld( PlayerID ) );
			}
		}
		// < Save player account )
		if( playerVariables[ i ][ pLogged ] )
		{
			playerVariables[ i ][ pSaveTime ] ++;
			if( playerVariables[ i ][ pSaveTime ] == SAVE_TIME )
			{
				playerVariables[ i ][ pSaveTime ] = 0;
				savePlayerData( i );
				#if defined DEBUG_SERVER
					SendClientMessage( i, COLOR_YELLOW, "[DEBUG] Your account has been saved after 3 minutes!" );
				#endif
			}
		}
		// < Check Timers )
		if( playerVariables[ i ][ pAFKTimeNow ] >= 1800 && !playerVariables[ i ][ pSleeping ] && !playerVariables[ i ][ pKicked ] && server_players > 198 )
		{
			SendClientMessageToAllf( COLOR_LIGHTRED, "%s was kicked by AdmBot for being AFK for more than 30 minutes.", playerVariables[ i ][ pNormalName ] );
			SendClientMessage( i, COLOR_LIGHTRED, "You have been kicked for being AFK for more than 30 minutes!" );
			KickEx( i );
		}
		if(GetServerData(GiftBoxStatus) == 1)
		{
			if( playerVariables[ i ][ pGiftBoxTime ] != 0 )
			{
				playerVariables[ i ][ pGiftBoxTime ]--;
				if( playerVariables[ i ][ pGiftBoxTime ] == 0 )
					SendClientMessage( i, COLOR_YELLOW, "Ai acumulat 3 ore jucate, iti poti incerca norocul la /getgift !" );
			}
		}
		if( playerVariables[ i ][ pNewbieTime ] != 0 )
		{
			playerVariables[ i ][ pNewbieTime ]--;
			if( playerVariables[ i ][ pNewbieTime ] == 0 )
			{
				// < Make the question to expire )
				format( playerVariables[ i ][ pNewbieRequest ], 64, "%s", "N/A" );
				playerVariables[ i ][ pNewbieRequesting ] = 0;
				Iter_Remove(server_newbies, i);
				server_newbies--;
				SendClientMessage( i, COLOR_YELLOW, "Your newbiew question has expired after 3 minutes! You can place another question via /n" );

				// < Reset the Helper's current question )
				new h = GetPVarInt( i, "helper_id" );
				playerVariables[ h ][ pNewbieQuestion ] = INVALID_PLAYER_ID;
				SetPVarInt( i, "helper_id", INVALID_PLAYER_ID );
			}
		}
		if( playerVariables[ i ][ pUsingDrugs ] != 0 )
		{
			playerVariables[ i ][ pUsingDrugs ]--;
			if( !playerVariables[ i ][ pUsingDrugs ] )
			{
				playerVariables[ i ][ pUseDrugs ] = 15;
				CheckPlayerQuest( i, QUEST_DRUGS );
				ClearAnimations( i ), SetPlayerDrunkLevel( i, 5000 ), SetPlayerHealth( i, GetPlayerHealthEx( i ) + 75.0 );
				SendClientMessagef( i, ~1, "> Drogurile si-au facut efectul, esti ametit pentru 15 de secunde!" );
			}
			else
			{
				if( GetPlayerAnimationIndex( i ) != 386 )
				{
					playerVariables[ i ][ pUsingDrugs ] = 0, ClearAnimations( i );
					SendClientMessagef( i, ~1, "> Efectul drogurilor a fost anulat, ai rabdare data viitoare!" );
				}
			}
		}
		if( playerVariables[ i ][ pUseDrugs ] != 0 )
		{
			playerVariables[ i ][ pUseDrugs ]--;
			if( !playerVariables[ i ][ pUseDrugs ] )
				ClearAnimations( i ), SetPlayerDrunkLevel( i, 0 );
		}
		if( playerVariables[ i ][ pRaceArena ] && raceVariables[ raceStatus ] == 2 )
		{
			playerVariables[ i ][ pRaceArenaSeconds ]++;
			new Float:raceHealth, Float:racePercent;
			GetVehicleHealth( GetPlayerVehicleID( i ), raceHealth );
			racePercent = (raceHealth - 240) / 750 * 100;

			raceVariables[ raceString ][ 0 ] = EOS;
			format( raceVariables[ raceString ], 128, "RACE WILL END IN: ~b~%s", TimeConvert( raceVariables[ raceTimer ] ) );

			new raceText3D[ 128 ];
			format( raceText3D, sizeof raceText3D, "Checkpoint: [%d/%d]\nMinutes on race: [%s]\nVehicle health: %d%%", raceSystem[raceVariables[raceTrack]][rTotalCP] - playerVariables[ i ][ pRaceArenaCP ]-1, raceSystem[raceVariables[raceTrack]][rTotalCP], TimeConvert( playerVariables[ i ][ pRaceArenaSeconds ] ), floatround(racePercent, floatround_ceil) );
			Update3DTextLabelText( raceVariables[ raceText ][i], COLOR_YELLOW_3D, raceText3D );
		}
		if( playerVariables[ i ][ pPaydayStatus ] != 0 )
		{
			playerVariables[ i ][ pPaydayStatus ]--;
		}
		if( playerVariables[ i ][ pRobStatus ] != 0 )
		{
			playerVariables[ i ][ pRobTime ]++;
		}
		if( playerVariables[ i ][ pKillerTime ] !=0 )
		{
			playerVariables[ i ][ pKillerTime ]--;
		}
		if( playerVariables[ i ][ pLastBusinessTimer ] !=0 )
		{
			playerVariables[ i ][ pLastBusinessTimer ]--;
		}
		if( playerVariables[ i ][ pFreezed ] != 0 )
		{
			playerVariables[ i ][ pFreezed ]--;
			if( playerVariables[ i ][ pFreezed ] == 0 )
				SendClientMessage( i, ~1, "You have been un-frozen by AdmBot!" ), TogglePlayerControllable( i, 1 );
		}
		if( playerVariables[ i ][ pNMuted ] != 0 )
		{
			playerVariables[ i ][ pNMuted ]--;
			if( playerVariables[ i ][ pNMuted ] == 0 )
				SendClientMessage( i, ~1, "Your mute for /n has been removed by AdmBot!" );
		}
		if( playerVariables[ i ][ pRMuted ] != 0 )
		{
			playerVariables[ i ][ pRMuted ]--;
			if( playerVariables[ i ][ pRMuted ] == 0 )
				SendClientMessage( i, ~1, "Your mute for /report has been removed by AdmBot!" );
		}
		if( playerVariables[ i ][ pSpawnedTimer ] == true )
			SetPlayerHealth( i, 90.0 );

		if( playerVariables[ i ][ pWanted ] && playerVariables[ i ][ pAdminDuty ] )
		{	
			SetPlayerHealth( i, 99.0 ), SetPlayerArmour( i, 0.0 ), playerVariables[ i ][ pAdminDuty ] = 0;

			if(playerVariables[ i ][ pHelperDuty ] == 1) playerVariables[ i ][ pHelperDuty ] = 0, serverVariables[other_helpers_duty]--;
		}	

		new weaponID = GetPlayerWeapon( i );
		if( weaponID != 0 && weaponID != 43 && playerVariables[ i ][ pGunLicense ] == 0 && playerVariables[ i ][ pTakeExam ] == 0 && playerVariables[ i ][ pPaintBall ] == -1 )
			SetPlayerArmedWeapon( i, 0 );

		if( playerVariables[ i ][ pFly ] || playerVariables[ i ][ pAdminDuty ] )
			SetPlayerHealth( i, 9999100 );

		if( playerVariables[ i ][ pSleeping ] == true )
			TogglePlayerControllable( i, false );

		if( playerVariables[ i ][ pRobStatus ] == 1 )
		{
			new playerTargetActor = GetPlayerTargetActor( i );
			if( playerTargetActor != INVALID_ACTOR_ID )
			{
				new playerWeapon = GetPlayerWeapon( i ), keys, updown, leftright;
				GetPlayerKeys( i, keys, updown, leftright );

				if( !ActorHandsup[ playerTargetActor ] && playerWeapon >= 22 && playerWeapon <= 42 && keys & KEY_AIM )
				{
					new Float:actorPos[ 3 ];
					GetActorPos( playerTargetActor, actorPos[ 0 ], actorPos[ 1 ], actorPos[ 2 ] );
					if( !IsPlayerInRangeOfPoint( i, 3.0, actorPos[ 0 ], actorPos[ 1 ], actorPos[ 2 ] ) ) return false;

					playerVariables[ i ][ pRobPlayers ]++;
					SetTimerEx("ApplyActorAnim", 500, 0, "d", playerTargetActor);
					ActorHandsup[ playerTargetActor ] = true;
					if( playerVariables[ i ][ pRobPlayers ] == 3 )
					{
						InfoTD_MSG( i, 30000, "~r~~h~ROB HINT:~n~~w~~h~Ai imobilizat toti angajatii bancii!~n~Coboara in seiful bancii pentru a continua jaful!" );
						//( i, 1058, 0.0, 0.0, 0.0 );
					}
				}
			}
		}
		if( GetPlayerWeapon( i ) == 44 || GetPlayerWeapon( i ) == 45 && !playerVariables[i][pAdminLevel])
			ResetServerWeapons( i );

		if( playerVariables[ i ][ pMuted ] != 0 )
		{
			playerVariables[ i ][ pMuted ]--;
			if( playerVariables[ i ][ pMuted ] == 0 )
				SendClientMessage( i, ~1, "Your mute has been removed by AdmBot!" );
		}
		if( playerVariables[ i ][ pReportTimer ] != 0 )
		{
			playerVariables[ i ][ pReportTimer ]--;
		}
		if( playerVariables[ i ][ pFindPlayer ] != INVALID_PLAYER_ID )
		{
			if( !IsPlayerConnected( playerVariables[ i ][ pFindPlayer ] ) )
			{
				DisablePlayerCheckpoint( i );
				Iter_Remove( playerFinds[ playerVariables[ i ][ pFindPlayer ] ], i );
				playerVariables[ i ][ pFindPlayer ] = INVALID_PLAYER_ID;

				#if defined UBERSYS
					if( playerVariables[ i ][ pFaction ] == 2 || playerVariables[ i ][ pFaction ] == 3 || playerVariables[ i ][ pJob ] == 7 )
					{
						playerVariables[ i ][ pTaxiClient ] = INVALID_PLAYER_ID;
						playerVariables[ i ][ pMedicClient ] = INVALID_PLAYER_ID;
						playerVariables[ i ][ pUberOnWork ] = INVALID_PLAYER_ID;
						SendClientMessagef( i, COLOR_YELLOW, "> Your client has disconnected from the server!" );
					}
				#else
					if( playerVariables[ i ][ pFaction ] == 2 || playerVariables[ i ][ pFaction ] == 3 )
					{
						playerVariables[ i ][ pTaxiClient ] = INVALID_PLAYER_ID;
						playerVariables[ i ][ pMedicClient ] = INVALID_PLAYER_ID;
						SendClientMessagef( i, COLOR_YELLOW, "> Your client has disconnected from the server!" );
					}
				#endif
				PlayerTextDrawHide( i, PlayerText:FIND_TD );
				GameTextForPlayer( i, "~r~target left the game!", 5000, 1 );
			}
		}
		if( playerVariables[ i ][ pAdTime ] != 0 )
		{
			// Update player AD
			playerVariables[ i ][ pAdTime ]--;

			if( playerVariables[ i ][ pAdTime ] == 0 )
			{
				// Post the ad to the server 
				gsString[ 0 ] = EOS;
				format( gsString, sizeof gsString, "{33CC00}Ad by %s (phone: "COL_W"%d{33CC00}): %s", playerVariables[ i ][ pNormalName ], playerVariables[ i ][ pPhoneNumber ], playerVariables[ i ][ pAdString ] );
				Iter_Remove(normalPlayers, i);
				foreach(new x : normalPlayers)
				{
					SendSplitMessage( x, COLOR_ADV, gsString );
				}
				// Show ad for poster 
				SendClientMessage( i, COLOR_GREEN, "Ad-ul tau:" );
				SendSplitMessage( i, COLOR_GREEN, gsString );
				SendClientMessage( i, COLOR_DARKPINK, "Acum poti plasa un nou /ad." );
				Iter_Add(normalPlayers, i);

				// Reset player ad variables 
				format( playerVariables[ i ][ pAdString ], 256, "N/A" );
				playerVariables[ i ][ pAdTime ] = 0;
				serverVariables[other_count_ads]--;
				submitToHelpersAndAdmins(gsString, -1);
			}
		}
		// Trailer auto-attach 
		if( playerVariables[ i ][ pDoingJob ] )
		{
			if(playerVariables[ i ][ pJob ] == 1 ) // < Farmer/Trucker Trailer >
			{
				if( IsValidVehicle( playerVariables[ i ][ pJobVehicle ][ 1 ] ) && !IsTrailerAttachedToVehicle( playerVariables[ i ][ pJobVehicle ][ 0 ] ) )
				{
					SetVehicleHealth( playerVariables[ i ][ pJobVehicle ][ 1 ], MAX_VEHICLEHEALTH );
					AttachTrailerToVehicle( playerVariables[ i ][ pJobVehicle ][ 1 ], playerVariables[ i ][ pJobVehicle ][ 0 ] );
				}
			}
		}
		// < AFK Kill System >
		if( playerVariables[ i ][ pAFKHits ] >= 5 )
		{
			UpdateDynamic3DTextLabelText( Text3D:playerVariables[ i ][ pWantedText ], COLOR_SOLID_WHITE, ""COL_R"* DEAD/MORT *" );
		}
		else if( playerVariables[ i ][ pWanted ] != 0 )
		{
			new wantedString[ 64 ];
			format( wantedString, sizeof wantedString, ""COL_R"Wanted Level: %d", playerVariables[ i ][ pWanted ] );
			UpdateDynamic3DTextLabelText( Text3D:playerVariables[ i ][ pWantedText ], COLOR_WHITE, wantedString );
		}
		else UpdateDynamic3DTextLabelText( Text3D:playerVariables[ i ][ pWantedText ], COLOR_WHITE, "_" );

		// < Jobs "Timer" >
		if( playerVariables[ i ][ pJobTimer ] > 0 )
		{
			if( --playerVariables[ i ][ pJobTimer ] == 0 ) // check if it's done
			{
				if( !IsPlayerInAnyVehicle( i ) || GetPlayerVehicleID( i ) != playerVariables[ i ][ pJobVehicle ][ 0 ] )
				{
					DestroyPlayerJobVehicles( i, 1 );
					return SendClientMessage( i, COLOR_GREY, "Job failed, you're on foot or in another vehicle right now!" );
				}
				switch( playerVariables[ i ][ pJob ] )
				{
					case 13: // garbage man
					{
						DisablePlayerCheckpoint( i );
						playerVariables[ i ][ pCP ] = 10070;
						playerVariables[ i ][ pGarbageCP ]++;

						switch( playerVariables[ i ][ pGarbageCP ] )
						{
							case 1..19:
							{
								SelectRandomGarbage( i );
								TogglePlayerControllable( i, true );

								new garbageCP = playerVariables[ i ][ pJobLastCP ];
								InfoTD_MSG( i, 10000, "Gunoi colectat (~r~%d/20~w~~h~).~n~Urmatorul tomberon se afla in: ~y~~h~%s (LS)", 
									playerVariables[ i ][ pGarbageCP ], GetPlayer3DZone2( gRandomGarbage[ garbageCP ][ 0 ], gRandomGarbage[ garbageCP ][ 1 ], gRandomGarbage[ garbageCP ][ 2 ] ) );

								UpdateJobBox( i, GetServerData(workers_garbage), "Colecteaza gunoiul din Los Santos~n~~y~~h~Info! ~w~~h~Sunteti platiti la descarcarea gunoiului!" );
							}
							case 20:
							{
								UpdateJobStats( playerVariables[ i ][ pJob ] );
								TogglePlayerControllable( i, true );
								InfoTD_MSG( i, 10000, "Masina este plina!~n~Descarca gunoiul colectat la groapa de gunoi indicata pe GPS!" );
								SetPlayerCheckpoint( i, 2175.1179, -2001.5468, 13.6539, 8.0 );
								playerVariables[ i ][ pGarbageCP ] = 99;
							}
							case 100:
							{
								PayPlayerJob( i, 13 );
								SelectRandomGarbage( i );
								TogglePlayerControllable( i, true );
								UpdatePlayerSkill( i, playerVariables[ i ][ pJob ] );
								playerVariables[ i ][ pGarbageCP ] = 0;

								UpdateJobBox( i, GetServerData(workers_garbage), "Colecteaza gunoiul din Los Santos~n~~y~~h~Info! ~w~~h~Sunteti platiti la descarcarea gunoiului!" );
								InfoTD_MSG( i, 10000, "Ai descarcat gunoiul si ai fost platit cu ~g~$%s~n~~w~~h~Urmeaza traseul pentru a colecta gunoiul din Los Santos!~n~Skill-ul se aplica la descarcarea gunoiului!", FormatNumber( playerVariables[ i ][ pJobValue ] ) );
							}
						}
					}
				}
			}
		}
	}
	return true;
}

function GeneralTimer()
{
	new GetTime[ 6 ],  S_DAY[ 16 ];
	getdate( GetTime[ 0 ], GetTime[ 1 ], GetTime[ 2 ] );
	gettime( GetTime[ 3 ], GetTime[ 4 ], GetTime[ 5 ] );
	//SetWorldTime( GetTime[3] );

	switch( GetDay( GetTime[ 2 ], GetTime[ 1 ], GetTime[ 0 ] ) )
	{
		case 1: S_DAY = "Luni";
		case 2: S_DAY = "Marti";
		case 3: S_DAY = "Miercuri";
		case 4: S_DAY = "Joi";
		case 5: S_DAY = "Vineri";
		case 6: S_DAY = "Sambata";
		case 7: S_DAY = "Duminica";
	}
	svString[ 0 ] = EOS;
	format( svString, sizeof svString, "worldtime %s, %02d:%02d", S_DAY, GetTime[ 3 ], GetTime[ 4 ] );
	SendRconCommand( svString );

	#if defined EVENT_CALENDAR
	if( serverVariables[ calendarStatus ] != 0 )
		serverVariables[ calendarStatus ]--;

	if( !GetTime[ 4 ] )
	{
		switch( GetTime[ 5 ] )
		{
			case 5:
			{
				switch( GetTime[ 3 ] )
				{
					case 12, 17, 20, 21, 22, 23:
					{
						gsQuery[ 0 ] = EOS;
						mysql_format( g_Handle, gsQuery, sizeof gsQuery, "SELECT * FROM `server_events` WHERE `eventDate` = %d AND `eventHour` = %d", GetTime[ 2 ], GetTime[ 3 ] );
						mysql_pquery( g_Handle, gsQuery, "LoadServerEvents", "d", GetTime[ 3 ] );
						serverVariables[ calendarStatus ] = 60;
					}
				}
			}
			case 6..59:
			{
				if( serverVariables[ calendarStatus ] == 0 )
				{
					switch( GetTime[ 3 ] )
					{
						case 12, 17, 20, 21, 22, 23:
						{
							gsQuery[ 0 ] = EOS;
							mysql_format( g_Handle, gsQuery, sizeof gsQuery, "SELECT * FROM `server_events` WHERE `eventDate` = %d AND `eventHour` = %d", GetTime[ 2 ], GetTime[ 3 ] );
							mysql_pquery( g_Handle, gsQuery, "LoadServerEvents", "d", GetTime[ 3 ] );
							serverVariables[ calendarStatus ] = 60;
						}
					}
				}
			}
		}
	}
	#endif
	// < Respawn Vehicles Loop >
	if( serverVariables[ respawnVehicles ] != 0 )
	{
		serverVariables[ respawnVehicles ]--;
		if( !serverVariables[ respawnVehicles ] )
		{
			serverVariables[ respawnVehicles ] = RESPAWN_TIME;
			for( new vID = 178; vID <= 185; vID++ ) // Los Santos Bikes
				if( !IsVehicleOccupied( vID ) )
					SetVehicleToRespawn( vID );
		}
	}
	// < Load Bid System >
	#if defined SYSTEM_BID
	new bidDay = GetDay( GetTime[ 2 ], GetTime[ 1 ], GetTime[ 0 ] );
	if( bidDay == 5 || bidDay == 6 || bidDay == 7) // Vineri si Sambata si duminca
	{
	    if( GetTime[ 3 ] == 20 && GetTime[ 4 ] == 0 && GetTime[ 5 ] == 0 ) // Porneste la ora 20:00	
			StartServerBids(), SendClientMessageToAll( COLOR_LIGHT_BID, "[BID] Sesiunea de licitatii a fost deschisa, mult success tuturor!" );
	}
	else if( GetTime[ 3 ] == 23 && GetTime[ 4 ] == 0 && GetTime[ 5 ] == 0 && serverVariables[ currentBID ] != -1)
	{
		serverVariables[ currentBID ] = -1;
		serverVariables[ currentBIDPlayer ] = INVALID_PLAYER_ID;
		serverVariables[ currentBIDTimer ] = -1;
		SendClientMessageToAll( COLOR_LIGHT_BID, "[BID] Sesiunea de licitatii a fost inchisa!" );
	}

	#endif

	// < Check for House/Bizz for bids >
	if( GetDay( GetTime[ 2 ], GetTime[ 1 ], GetTime[ 0 ] ) == 1 && GetTime[ 3 ] == 02 && GetTime[ 4 ] == 0 && GetTime[ 5 ] == 0 )
		CheckServerBIDDays();

	// < Update the other stuff days >
	if( GetTime[ 3 ] == 00 && GetTime[ 4 ] == 00 && GetTime[ 5 ] == 0 )
	{
		foreach(new i : Player)
		{
			if( playerVariables[ i ][ pClan ] != 0 )
				playerVariables[ i ][ pClanDays ]++;

			if( playerVariables[ i ][ pFaction ] != 0 )
				playerVariables[ i ][ pFactionDays ]++;

			for( new slot=0; slot < MAX_SLOTS; slot++ )
				if( playerVariables[ i ][ Vehicle ][ slot ] != 0 )
					vehicleVariables[ slot ][ i ][ VehicleAge ]++;
		}
		mysql_tquery( g_Handle, "UPDATE `server_personalvehicles` SET `vehicleDays` = `vehicleDays` + 1" );
		mysql_tquery( g_Handle, "UPDATE `server_accounts` SET `playerClanDays` = `playerClanDays` + 1 WHERE `playerClan` != 0" );
		mysql_tquery( g_Handle, "UPDATE `server_accounts` SET `playerFactionDays` = `playerFactionDays` + 1 WHERE `playerFaction` != 0" );
		mysql_tquery( g_Handle, "UPDATE `server_accounts` SET `playerConnected` = 0" );
	}
	// < Update the server's players graph >
	if( GetTime[ 4 ] == 00 && GetTime[ 5 ] == 0 )
	{
		#if defined VERSION_HOST
		gsQuery[ 0 ] = EOS;
		mysql_format( g_Handle, gsQuery, sizeof gsQuery, "INSERT INTO `panel_graphs` (graphPlayers) VALUES (%d)", server_players );
		mysql_tquery( g_Handle, gsQuery, "", "" );
		#endif
	}
	// < Check the BID System >
	if( serverVariables[ currentBIDTimer ] )
	{
		serverVariables[ currentBIDTimer ]--;
		new bidKey = serverVariables[ currentBID ],
			bidPlayer = serverVariables[ currentBIDPlayer ];

		switch( serverVariables[ currentBIDTimer ] )
		{
			case 300:
			{
				// < End the bid >
				SendClientMessageToAll( COLOR_BID, "[LICITATIE TERMINATA - Nu a licitat nimeni!]" );
				gsQuery[ 0 ] = EOS;
				mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_bids` SET `bidStatus` = 0 WHERE `bidValue` = %d", GetGVarInt( "bid_Value", bidKey ) );
				mysql_tquery( g_Handle, gsQuery, "", "" );
				StartServerBids();
			}
			case 120:
			{
				SendClientMessageToAllf( COLOR_BID, "> %s a licitat cea mai mare suma ($%s) pentru %s cu ID-ul %d", username( bidPlayer ), FormatNumber( GetGVarInt( "bid_Money", bidKey ) ), GetBidTypeString( bidKey ), GetGVarInt( "bid_Value", bidKey ) );
				SendClientMessageToAll( COLOR_BID, "> Daca nimeni nu liciteaza mai mult, jucatorul ce a licitat cel mai mult va castiga proprietatea peste 2 minute." );
			}
			case 60:
			{
				SendClientMessageToAllf( COLOR_BID, "> %s a licitat cea mai mare suma ($%s) pentru %s cu ID-ul %d", username( bidPlayer ), FormatNumber( GetGVarInt( "bid_Money", bidKey ) ), GetBidTypeString( bidKey ), GetGVarInt( "bid_Value", bidKey ) );
				SendClientMessageToAll( COLOR_BID, "> Daca nimeni nu liciteaza mai mult, jucatorul ce a licitat cel mai mult va castiga proprietatea peste 1 minut." );
			}
			case 0:
			{
				// < End the bid >
				SendClientMessageToAll( COLOR_BID, "[LICITATIE TERMINATA]" );

				// < Delete the bid >
				gsQuery[ 0 ] = EOS;
				mysql_format( g_Handle, gsQuery, sizeof gsQuery, "DELETE FROM `server_bids` WHERE `bidValue` = %d", GetGVarInt( "bid_Value", bidKey ) );
				mysql_tquery( g_Handle, gsQuery, "", "" );

				// < Execute the rest of the code! >
				if( !IsPlayerConnected( bidPlayer ) )
				{
					StartServerBids();
					SendClientMessageToAllf( COLOR_BID, "> Licitatia pentru %s cu ID-ul %d a fost reluata deoarece castigatorul s-a deconectat!", GetBidTypeString( bidKey ), GetGVarInt( "bid_Value", bidKey ) );
					return false;
				}
				else
				{
					// < Give player house / busines >
					switch( GetGVarInt( "bid_Type", bidKey ) )
					{
						case 0: // House
						{
							new houseID = GetGVarInt( "bid_Value", bidKey );
							if( playerVariables[ bidPlayer ][ pHouse ] != 0 )
								return SendClientMessage( bidPlayer, COLOR_GREY, "Your already have a house, please sell it first!" );
							/*
							if( GetGVarInt( "bid_Money", bidKey ) > playerVariables[ bidPlayer ][ pMoney ] )
								return SendClientMessage( bidPlayer, COLOR_GREY, "You don't have the money to buy this House!" );
							*/
							SetGVarInt( "house_OwnerKey", GetPlayerMysqlID(bidPlayer), houseID );
							SetGVarString( "house_Owner", playerVariables[ bidPlayer ][ pNormalName ], houseID );

							new houseID_x = playerVariables[bidPlayer][pRentRoom];
							Iter_Remove(playerRenters[houseID_x], bidPlayer);

							playerVariables[ bidPlayer ][ pRentRoom ] = 0;
							playerVariables[ bidPlayer ][ pHouse ] = houseID;
							SetGVarInt( "house_Price", GetGVarInt( "bid_Money", bidKey ), houseID );

							DestroyDynamicPickup( GetGVarInt( "HousePickup", houseID ) );
							DeleteGVar( "HousePickup", houseID );
							SetGVarInt( "HousePickup", CreateDynamicPickup( 19522, 23, GetGVarFloat( "house_EnterX", houseID ), GetGVarFloat( "house_EnterY", houseID ), GetGVarFloat( "house_EnterZ", houseID ) ), houseID );
                            pickupInfo[ GetGVarInt( "HousePickup", houseID ) ][house_pickups] = houseID;

							gsString[ 0 ] = EOS;
							format( gsString, sizeof gsString, "HouseID: "COL_R"%d\n"COL_R"%s\n"COL_W"Owner: "COL_R"%s\n"COL_W"Size: "COL_R"%s\n"COL_YE"Rent: %d$ (/rent room)", houseID, GetGVarStringEx( "house_Name", houseID ), GetGVarStringEx( "house_Owner", houseID ), HouseSize[ GetGVarInt( "house_Type", houseID ) ], GetGVarInt( "house_Rent", houseID ) );
							UpdateDynamic3DTextLabelText( Text3D:GetGVarInt( "House3DText", houseID ), ~1, gsString );

							gsQuery[ 0 ] = EOS;
							mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_houses` SET `houseOwner` = '%s', `houseOwnerKey` = %d WHERE `houseKey` = %d", playerVariables[ bidPlayer ][ pNormalName ], GetPlayerMysqlID(bidPlayer), houseID );
							mysql_tquery( g_Handle, gsQuery, "", "" );

							gsQuery[ 0 ] = EOS;
							mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerHouse` = %d WHERE `id` = %d", houseID, GetPlayerMysqlID(bidPlayer) );
							mysql_tquery( g_Handle, gsQuery, "", "" );

							gsString[ 0 ] = EOS;
							format( gsString, sizeof gsString, "%s[user:%d] has bought [house:%d win from BID] for $%s.", playerVariables[ bidPlayer ][ pNormalName ], GetPlayerMysqlID(bidPlayer), houseID, FormatNumber( GetGVarInt( "house_Price", houseID ) ) );
							InsertPlayerLog( GetPlayerMysqlID(bidPlayer), 0, gsString );
							submitToAdmins(gsString, COLOR_YELLOW);
						
							SendClientMessageToAllf( COLOR_BID, "> %s a castigat licitatia pentru %s cu ID-ul %d oferind suma de $%s!", playerVariables[ bidPlayer ][ pNormalName ], GetBidTypeString( bidKey ), GetGVarInt( "bid_Value", bidKey ), FormatNumber( GetGVarInt( "bid_Money", bidKey ) ) );
							StartServerBids();
						}
						case 1: // Business
						{
							new bizID = GetGVarInt( "bid_Value", bidKey );
							if( playerVariables[ bidPlayer ][ pBusiness ] != 0 )		
								return SendClientMessage( bidPlayer, COLOR_GREY, "Your already have a business, please sell it first!" );
							/*
							if( GetGVarInt( "bus_Price", bizID ) > playerVariables[ bidPlayer ][ pMoney ] )
								return SendClientMessage( bidPlayer, COLOR_GREY, "You don't have the money to buy this Business!" );
							*/
							SetGVarInt( "bus_Status", 0, bizID );
							SetGVarInt( "bus_OwnerKey", GetPlayerMysqlID(bidPlayer), bizID );
							SetGVarString( "bus_Owner", playerVariables[ bidPlayer ][ pNormalName ], bizID );
							SetGVarInt( "bus_Price", GetGVarInt( "bid_Money", bidKey ), bizID );
							playerVariables[ bidPlayer ][ pBusiness ] = bizID;

							gsString[ 0 ] = EOS;
							format( gsString, sizeof gsString, "%s (ID: %d)\nEnter Fee: $%d\nPrice: $%s\nOwner: %s\n\nPress ~k~~F to enter", GetGVarStringEx( "bus_Name", bizID ), bizID, GetGVarInt( "bus_Fee", bizID ), FormatNumber( GetGVarInt( "bid_Money", bidKey ) ), GetGVarStringEx( "bus_Owner", bizID ) );
							UpdateDynamic3DTextLabelText( Text3D:GetGVarInt( "Business3DText", bizID ), 0xFFFF66FF, gsString );

							gsQuery[ 0 ] = EOS;
							mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_business` SET `busOwner` = '%s', `busOwnerKey` = %d WHERE `busKey` = %d", playerVariables[ bidPlayer ][ pNormalName ], GetPlayerMysqlID(bidPlayer), bizID );
							mysql_tquery( g_Handle, gsQuery, "", "" );

							gsQuery[ 0 ] = EOS;
							mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerBusiness` = %d WHERE `id` = %d", bizID, GetPlayerMysqlID(bidPlayer) );
							mysql_tquery( g_Handle, gsQuery, "", "" );

							gsString[ 0 ] = EOS;
							format( gsString, sizeof gsString, "%s[user:%d] has bought [bizz:%d win from BID] for $%s.", playerVariables[ bidPlayer ][ pNormalName ], GetPlayerMysqlID(bidPlayer), bizID, FormatNumber( GetGVarInt( "bus_Price", bizID ) ) );
							InsertPlayerLog( GetPlayerMysqlID(bidPlayer), 0, gsString );
							submitToAdmins(gsString, COLOR_YELLOW);

							SendClientMessageToAllf( COLOR_BID, "> %s a castigat licitatia pentru %s cu ID-ul %d oferind suma de $%s!", playerVariables[ bidPlayer ][ pNormalName ], GetBidTypeString( bidKey ), GetGVarInt( "bid_Value", bidKey ), FormatNumber( GetGVarInt( "bid_Money", bidKey ) ) );
							StartServerBids();
						}
					}
				}
			}
		}
	}
	return true;
}
function FishTimer( playerid )
{
	// Increase Fishes
	playerVariables[ playerid ][ pFishing ] = 0;
	playerVariables[ playerid ][ pFishes ]++;
	new Fish[ 32 ], KG;

	switch( RandomChance( 6, random( 6 ), 100 ) )
	{
		case 0: Fish = "o ~b~~h~Stiuca", KG = randomEx( 1, 3 );
		case 1: Fish = "un ~b~~h~Salau", KG = randomEx( 2, 4 );
		case 2: Fish = "o ~b~~h~Platica", KG = randomEx( 1, 3 );
		case 3: Fish = "un ~b~~h~Crap", KG = randomEx( 2, 6 );
		case 4: Fish = "un ~b~~h~Somn", KG = randomEx( 4, 10 );
		case 5: Fish = "un ~b~~h~Caras", KG = randomEx( 2, 6 );
		case 6: Fish = "~y~Pestisorul de aur", KG = 100;
	}
	Announce_Player( playerid, 5000, 3, "~r~~h~~h~Yay, a muscat!..." );
	TogglePlayerControllable( playerid, true );
	//( playerid, 1057, 0.0, 0.0, 0.0 );

	playerVariables[ playerid ][ pFishesValue ] += KG;
	InfoTD_MSG( playerid, 20000, "Ai prins %s ~w~~h~de ~y~~h~%d ~w~~h~%s!~n~In galeata ai adunat: ~r~~h~%d~w~~h~/5~n~Ai strans in total ~g~~h~~h~%d ~w~~h~Kilograme!", Fish, KG, KG == 1 ? ("Kilogram") : ("Kilograme"), playerVariables[ playerid ][ pFishes ], playerVariables[ playerid ][ pFishesValue ] );
	if( playerVariables[ playerid ][ pFishes ] >= 5 )
	{
		DisablePlayerCheckpoint( playerid );
		playerVariables[ playerid ][ pCP ] = 10050;
		SetPlayerCheckpoint( playerid, 2327.2693,6.5696,26.5360, 3.0 );

		gsString[ 0 ] = EOS;
		format( gsString, sizeof gsString, "> Ai adunat 5 pesti in galeata cu un total de %d kilograme! Mergi la Pescaria pentru a fi platit!", playerVariables[ playerid ][ pFishesValue ] );
		SendSplitMessage( playerid, COLOR_LIGHTGREEN, gsString );
	}
}
function PreparePersonalVehicle( playerid, slot )
{
	// < Load player personal Vehicles >
	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "SELECT * FROM `server_personalvehicles` WHERE `vehicleOwner` = %d AND `vehicleID` = %d LIMIT 1", GetPlayerMysqlID(playerid), playerVariables[ playerid ][ Vehicle ][ slot ] );
	mysql_pquery( g_Handle, gsQuery, "LoadPlayerPersonalVehiclesTrade", "dd", playerid, slot );
}
function GetPersonalVehiclesNumber( playerid )
{
	new countValue;
	for( new i=0; i < MAX_SLOTS; i++ )
		if( playerVariables[ playerid ][ Vehicle ][ i ] != 0 ) countValue++;
	return countValue;
}
function nearByMessage( playerid, color, Float:Distance, text[], {Float, _}:...)
{
	#define BYTES_PER_CELL 4
	static const STATIC_ARGS = 3;
	new n = (numargs() - STATIC_ARGS) * BYTES_PER_CELL;
	if(n)
	{
		new
			arg_start,
			arg_end,
			buffer[256];

		#emit CONST.alt		text
		#emit LCTRL			5
		#emit ADD
		#emit STOR.S.pri	arg_start

		#emit LOAD.S.alt	n
		#emit ADD
		#emit STOR.S.pri	arg_end

		do
		{
			#emit LREF.S.pri arg_end
			#emit PUSH.pri
			arg_end -= BYTES_PER_CELL;
		}
		while (arg_end > arg_start);

		#emit PUSH.S		text
		#emit PUSH.C		256
		#emit PUSH.ADR		buffer

		n += BYTES_PER_CELL * 3;
		#emit PUSH.S		n
		#emit SYSREQ.C		format

		n += BYTES_PER_CELL;
		#emit LCTRL			4
		#emit LOAD.S.alt	n
		#emit ADD
		#emit SCTRL			4

		new Float: nbCoords[ 3 ];
		GetPlayerPos( playerid, nbCoords[ 0 ], nbCoords[ 1 ], nbCoords[ 2 ] );
		foreach( new i : playersStream[playerid] )
			if( IsPlayerInRangeOfPoint( i, Distance, nbCoords[ 0 ], nbCoords[ 1 ], nbCoords[ 2 ] ) && ( GetPlayerVirtualWorld( i ) == GetPlayerVirtualWorld( playerid ) ) )
				SendSplitMessage( i, color, buffer );
	}
	else
	{
		new Float: nbCoords[ 3 ];
		GetPlayerPos( playerid, nbCoords[ 0 ], nbCoords[ 1 ], nbCoords[ 2 ] );
		foreach( new i : playersStream[playerid] )
			if( IsPlayerInRangeOfPoint( i, Distance, nbCoords[ 0 ], nbCoords[ 1 ], nbCoords[ 2 ] ) && ( GetPlayerVirtualWorld( i ) == GetPlayerVirtualWorld( playerid ) ) )
				SendSplitMessage( i, color, text );
	}
	return true;
}
function Announce_Player( playerid, time, type, text[], {Float, _}:...)
{
	#define BYTES_PER_CELL 4
	static const STATIC_ARGS = 3;
	new n = (numargs() - STATIC_ARGS) * BYTES_PER_CELL;
	if(n)
	{
		new
			arg_start,
			arg_end,
			buffer[256];

		#emit CONST.alt		text
		#emit LCTRL			5
		#emit ADD
		#emit STOR.S.pri	arg_start

		#emit LOAD.S.alt	n
		#emit ADD
		#emit STOR.S.pri	arg_end

		do
		{
			#emit LREF.S.pri arg_end
			#emit PUSH.pri
			arg_end -= BYTES_PER_CELL;
		}
		while (arg_end > arg_start);

		#emit PUSH.S		text
		#emit PUSH.C		256
		#emit PUSH.ADR		buffer

		n += BYTES_PER_CELL * 3;
		#emit PUSH.S		n
		#emit SYSREQ.C		format

		n += BYTES_PER_CELL;
		#emit LCTRL			4
		#emit LOAD.S.alt	n
		#emit ADD
		#emit SCTRL			4

		GameTextForPlayer( playerid, buffer, time, type );
	}
	else
	{
		GameTextForPlayer( playerid, text, time, type );
	}
	//( playerid, 1150, 0.0, 0.0, 0.0 );
}
function AdminBroadCast( adminLevel, text_color, text[], {Float, _}:...)
{
	#define BYTES_PER_CELL 4
	static const STATIC_ARGS = 3;
	new n = (numargs() - STATIC_ARGS) * BYTES_PER_CELL;
	if( n )
	{
		new
			arg_start,
			arg_end,
			buffer[256];

		#emit CONST.alt		text
		#emit LCTRL			5
		#emit ADD
		#emit STOR.S.pri	arg_start

		#emit LOAD.S.alt	n
		#emit ADD
		#emit STOR.S.pri	arg_end

		do
		{
			#emit LREF.S.pri arg_end
			#emit PUSH.pri
			arg_end -= BYTES_PER_CELL;
		}
		while (arg_end > arg_start);

		#emit PUSH.S		text
		#emit PUSH.C		256
		#emit PUSH.ADR		buffer

		n += BYTES_PER_CELL * 3;
		#emit PUSH.S		n
		#emit SYSREQ.C		format

		n += BYTES_PER_CELL;
		#emit LCTRL			4
		#emit LOAD.S.alt	n
		#emit ADD
		#emit SCTRL			4

		foreach( new i : server_admins )
			if( playerVariables[ i ][ pAdminLevel ] >= adminLevel )
				SendClientMessage( i, text_color, buffer );
	}
	else
	{
		foreach( new i : server_admins )
			if( playerVariables[ i ][ pAdminLevel ] >= adminLevel )
				SendClientMessage( i, text_color, text );
	}
	return true;
}
function InfoTD_MSG(playerid, ms_time, text[], {Float, _}:...)
{
	#define BYTES_PER_CELL 4
	static const STATIC_ARGS = 3;
	new n = (numargs() - STATIC_ARGS) * BYTES_PER_CELL;
	if( n )
	{
		new
			arg_start,
			arg_end,
			buffer[256];

		#emit CONST.alt		text
		#emit LCTRL			5
		#emit ADD
		#emit STOR.S.pri	arg_start

		#emit LOAD.S.alt	n
		#emit ADD
		#emit STOR.S.pri	arg_end

		do
		{
			#emit LREF.S.pri arg_end
			#emit PUSH.pri
			arg_end -= BYTES_PER_CELL;
		}
		while (arg_end > arg_start);

		#emit PUSH.S		text
		#emit PUSH.C		256
		#emit PUSH.ADR		buffer

		n += BYTES_PER_CELL * 3;
		#emit PUSH.S		n
		#emit SYSREQ.C		format

		n += BYTES_PER_CELL;
		#emit LCTRL			4
		#emit LOAD.S.alt	n
		#emit ADD
		#emit SCTRL			4

		PlayerTextDrawSetString( playerid, PLAYER_TD[ 2 ], buffer );
	}
	else
	{
		PlayerTextDrawSetString( playerid, PLAYER_TD[ 2 ], text );
	}
	if(GetPVarInt(playerid, "InfoTDshown") != -1)
	{
		PlayerTextDrawHide( playerid, PLAYER_TD[ 2 ] );
		KillTimer( GetPVarInt( playerid, "InfoTDshown" ) );
	}
	PlayerTextDrawShow( playerid, PLAYER_TD[ 2 ] );
	//( playerid, 1058, 0, 0, 0 );
	SetPVarInt( playerid, "InfoTDshown", SetTimerEx( "InfoTD_Hide", ms_time, false, "i", playerid ) );
	return true;
}
function InfoTD_Hide( playerid )
{
	SetPVarInt( playerid, "InfoTDshown", -1 );
	PlayerTextDrawHide( playerid, PLAYER_TD[ 2 ] );
}
// < Functions >
SQL_Function OnPersonalVehicleCreated( playerid, slot, carCash, carPP, carName[] )
{
	playerVariables[ playerid ][ Vehicle ][ slot ] = cache_insert_id();
	vehicleVariables[ slot ][ playerid ][ VehicleID ] = cache_insert_id();

	gsString[ 0 ] = EOS;
	if( carCash == 0 && carPP > 0 )
	{
		InfoTD_MSG( playerid, 7000, "~y~INFO ~w~~h~Ai cumparat un %s cu %d ~r~~h~Premium Points!", carName, carPP );
		format( gsString, sizeof gsString, "%s[user:%d] bought a %s [car:%d] for %d PP.", playerVariables[ playerid ][ pNormalName ], GetPlayerMysqlID(playerid), carName, playerVariables[ playerid ][ Vehicle ][ slot ], carPP );
	}
	else if( carCash > 0 && carPP == 0 )
	{
		InfoTD_MSG( playerid, 7000, "~y~INFO ~w~~h~Ai cumparat un %s cu ~g~~h~$~w~~h~%s!", carName, FormatNumber(carCash) );
		format( gsString, sizeof gsString, "%s[user:%d] bought a %s [car:%d] for $%s.", playerVariables[ playerid ][ pNormalName ], GetPlayerMysqlID(playerid), carName, playerVariables[ playerid ][ Vehicle ][ slot ], FormatNumber(carCash) );
	}
	else
		format( gsString, sizeof gsString, "%s[user:%d] won an %s [car:%d] from giftbox/bonus.", playerVariables[ playerid ][ pNormalName ], GetPlayerMysqlID(playerid), carName, playerVariables[ playerid ][ Vehicle ][ slot ] );

	submitToAdmins(gsString, COLOR_YELLOW);
	InsertPlayerLog( GetPlayerMysqlID(playerid), 0, gsString );

	// < log the action >
	gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, "Vehicle has been bought from Dealership with $%s / %d PP", FormatNumber( carCash ), carPP );
	InsertVehicleLog( playerVariables[ playerid ][ Vehicle ][ slot ], GetPlayerMysqlID(playerid), gsString );
}
SQL_Function OnPersonalVehicleDeleted( playerid, slot, internalID, vehicleModel )
{
	// < Delete from database >
	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_personalvehicles` SET `VehicleOwner` = 0 WHERE `vehicleID` = %d", playerVariables[ playerid ][ Vehicle ][ slot ] );
	mysql_tquery( g_Handle, gsQuery, "", "" );

	// < log the action >
	InsertVehicleLog( playerVariables[ playerid ][ Vehicle ][ slot ], GetPlayerMysqlID(playerid), "[AdmBot] Vehicle has been sold back to the Dealership" );

	// < Update Vehicles Stock >
	gsQuery[ 0 ] = EOS;
	mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_dealer` SET `stock` = `stock` + 1, `onserver` = `onserver` - 1 WHERE `carID` = %d", vehicleModel );
	mysql_tquery( g_Handle, gsQuery, "", "" );

	// < Despawn the vehicle >
	playerVariables[ playerid ][ Vehicle ][ slot ] = 0;
	DeSpawnPlayerVehicle( slot, playerid );
	ResetPersonalVehicleVars( slot, playerid );
}
SQL_Function OnAccountCreated( playerid )
{
	playerVariables[ playerid ][ pKey ] = cache_insert_id();
	playerVariables[ playerid ][ pLogged ] = true;
	StopAudioStreamForPlayer( playerid ); // Stop the audio stream
	playerVariables[ playerid ][ pMoney ] = 2000;
	playerVariables[ playerid ][ pLevel ] = 1;
	playerVariables[ playerid ][ pVSlots ] = 2;
	playerVariables[ playerid ][ pSpawnType ] = 0;
	playerKeys[ playerVariables[ playerid][pKey]] = playerid;
	Iter_Add(normalPlayers, playerid);
	//LoadPlayerInterpolateCamera( playerid, 1 );
	ShowPlayerDialog( playerid, DIALOG_EMAIL, DIALOG_STYLE_INPUT, "Account E-Mail", "Please enter your E-Mail address below!\n\nScrie mai jos adresa ta de E-Mail!", "Insert", "" );
}
SQL_Function LoginPlayerAccount( playerid )
{
	if( !IsPlayerConnected( playerid ) )
		return true;

	new Rows, Fields;
	cache_get_data( Rows, Fields, g_Handle );

	if( Rows )
	{
		gsString[ 0 ] = EOS;
		format( gsString, sizeof gsString, "Welcome back, %s!\n\n", username( playerid ) );
		strcat( gsString, "This account is registered, you can login now by typing your password below.\n" );
		strcat( gsString, "If this isn't your own account, quit the server and join with another name!" );
		ShowPlayerDialog( playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD, "Login Account", gsString, "Login", "Quit" );
	}
	else
	{
		// < Show Player Register Dialog )
		gsString[ 0 ] = EOS;
		format( gsString, sizeof gsString, "Welcome, %s!\n\n", username( playerid ) );
		strcat( gsString, "This account is not registered, you can register now by typing your password below." );
		ShowPlayerDialog( playerid, DIALOG_REGISTER, DIALOG_STYLE_PASSWORD, "Register Account", gsString, "Register", "Quit" );
	}
	LoadPlayerInterpolateCamera( playerid );
	return true;
}
SQL_Function CheckAccountPassword( playerid, password[] )
{
	if( !IsPlayerConnected( playerid ) )
		return true;

	new Rows, Fields;
	cache_get_data( Rows, Fields, g_Handle );
	//cache_get_field_content( 0, "playerPassword", Login_Field, g_Handle );

	if( Rows )
	{
		// < Read all variables )
		LoadPlayerDataBase( playerid );
		GameTextForPlayer( playerid, "~y~~h~You've successfully~n~~r~~h~logged in, into your~n~~r~~h~ account.", 5000, 3 );
	}
	else
	{
		playerVariables[ playerid ][ pFailLogin ]++;
		if( playerVariables[ playerid ][ pFailLogin ] == MAX_FAIL_LOGINS )
		{
			gsString[ 0 ] = EOS;
			format( gsString, sizeof gsString, "AdmWarn: IP %s has been kicked (failed 3 login attempts on account %s).", GetPlayerIPEx( playerid ), username( playerid ) );
			submitToHelpersAndAdmins( gsString, COLOR_HOTORANGE );
			KickEx( playerid );
		}
		gsString[ 0 ] = EOS;
		format( gsString, sizeof gsString, "Welcome back, %s!\n\n", playerVariables[ playerid ][ pNormalName ] );
		strcat( gsString, "This account is registered, you can login now by typing your password below.\n" );
		strcat( gsString, "If this isn't your own account, quit the server and join with another name!\n\n" );
		format( gsString, sizeof gsString, "%s"COL_R"Incorrect password attempt (%d/%d).", gsString, playerVariables[ playerid ][ pFailLogin ], MAX_FAIL_LOGINS );
		ShowPlayerDialog( playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD, "Login Account", gsString, "Login", "Quit" );
	}
	return true;
}
#if defined HEIST_SYSTEM
SQL_Function LoadServerHeists()
{
	new Field[ 1024 ], Rows, Fields;
	cache_get_data( Rows, Fields, g_Handle );

	for( new i = 0; i < Rows; i++ )
	{
		Iter_Add( ServerHeists, i );

		cache_get_field_content( i, "heistName", Field, g_Handle, 64 );
		SetGVarString( "heist_Name", Field, i );

		SetGVarFloat( "heist_PosX", 				cache_get_field_content_float( i, "heistPosX", g_Handle ), i );
		SetGVarFloat( "heist_PosY", 				cache_get_field_content_float( i, "heistPosY", g_Handle ), i );
		SetGVarFloat( "heist_PosZ", 				cache_get_field_content_float( i, "heistPosZ", g_Handle ), i );

		gsString[ 0 ] = EOS;
		format( gsString, sizeof gsString, "Heist "COL_R"#%d\n\n"COL_W"Name: "COL_YE"%s\n"COL_W"Type "COL_R"/heist "COL_W"to access the menu!", i+1, GetGVarStringEx( "heist_Name", i ) );
		//SetGVarInt( "HeistPickup", CreateDynamicPickup( 19522, 23, GetGVarFloat( "heist_PosX", i ), GetGVarFloat( "heist_PosY", i ), GetGVarFloat( "heist_PosZ", i ) ), i );
		SetGVarInt( "Heist3DText", _:CreateDynamic3DTextLabel( gsString, ~1, GetGVarFloat( "heist_PosX", i ), GetGVarFloat( "heist_PosY", i ), GetGVarFloat( "heist_PosZ", i ), 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1 ), i );

		printf( "Heist: %d, Name: %s, PosX: %0.2f",i, GetGVarStringEx( "heist_Name", i ), GetGVarFloat( "heist_PosY", i ) );
	}
	printf( "Successfully Loaded [ %d ] Heists", Rows );
}
#endif
SQL_Function LoadPhoneNumbers()
{
	for(new x; x < cache_num_rows(); x++)
    {
        phoneNumbers[cache_get_field_content_int(x, "playerPhoneNumber")] = cache_get_field_content_int(x, "id");

        #if defined DEBUG_SERVER
        printf("[DEBUG PHONE] number %d owned by SQLID:%d", cache_get_field_content_int(x, "playerPhoneNumber"), cache_get_field_content(x, "id"));
        #endif 
    }
}
SQL_Function LoadServerHouses()
{
	new Field[ 256 ], X, Rows, Fields;
	cache_get_data( Rows, Fields, g_Handle );

	for( new i = 0; i < Rows; i++ )
	{
		X = cache_get_field_content_int( i, "houseKey", g_Handle );

		Iter_Add(ServerHouses, X);
		server_houses++;
		cache_get_field_content( i, "houseName", Field, g_Handle, 128 );
		SetGVarString( "house_Name", Field, X );

		cache_get_field_content( i, "houseOwner", Field, g_Handle, 128 );
		SetGVarString( "house_Owner", Field, X );

		cache_get_field_content( i, "houseMusic", Field, g_Handle, 256 );
		SetGVarString( "house_Music", Field, X );

		SetGVarInt( "house_OwnerKey", 				cache_get_field_content_int( i, "houseOwnerKey", g_Handle ), X );
		SetGVarInt( "house_Price", 					cache_get_field_content_int( i, "housePrice", g_Handle ), X );
		SetGVarInt( "house_Rent", 					cache_get_field_content_int( i, "houseRent", g_Handle ), X );
		SetGVarInt( "house_Money", 					cache_get_field_content_int( i, "houseMoney", g_Handle ), X );
		SetGVarInt( "house_Virtual", 				cache_get_field_content_int( i, "houseVirtual", g_Handle ), X );
		SetGVarInt( "house_Interior", 				cache_get_field_content_int( i, "houseInterior", g_Handle ), X );
		SetGVarInt( "house_Type", 					cache_get_field_content_int( i, "houseType", g_Handle ), X );
		SetGVarInt( "house_Level", 					cache_get_field_content_int( i, "houseLevel", g_Handle ), X );
		SetGVarInt( "house_Lock", 					cache_get_field_content_int( i, "houseLock", g_Handle ), X );

		SetGVarFloat( "house_EnterX", 				cache_get_field_content_float( i, "houseEnterX", g_Handle ), X );
		SetGVarFloat( "house_EnterY", 				cache_get_field_content_float( i, "houseEnterY", g_Handle ), X );
		SetGVarFloat( "house_EnterZ", 				cache_get_field_content_float( i, "houseEnterZ", g_Handle ), X );

		SetGVarFloat( "house_ExitX", 				cache_get_field_content_float( i, "houseExitX", g_Handle ), X );
		SetGVarFloat( "house_ExitY", 				cache_get_field_content_float( i, "houseExitY", g_Handle ), X );
		SetGVarFloat( "house_ExitZ", 				cache_get_field_content_float( i, "houseExitZ", g_Handle ), X );

		if( GetGVarInt( "house_Virtual", X ) != 0 ) // Verificam sa nu fie o casa NULL
		{
			switch( GetGVarInt( "house_OwnerKey", X ) )
			{
				case 0: // For Sale
				{
					gsString[ 0 ] = EOS;
					format( gsString, sizeof gsString, ""COL_W"House "COL_R"%d\n"COL_W"Owner: "COL_R"%s\n"COL_W"Size: "COL_R"%s\n"COL_W"Level: "COL_R"%d\n"COL_W"Price: "COL_R"$%s\n"COL_R"Type /buyhouse to buy this house", X, GetGVarStringEx( "house_Owner", X ), HouseSize[ GetGVarInt( "house_Type", X ) ], GetGVarInt( "house_Level", X ), FormatNumber(GetGVarInt( "house_Price", X )) );
					SetGVarInt( "HousePickup", CreateDynamicPickup( 1273, 23, GetGVarFloat( "house_EnterX", X ), GetGVarFloat( "house_EnterY", X ), GetGVarFloat( "house_EnterZ", X ) ), X );
					SetGVarInt( "House3DText", _:CreateDynamic3DTextLabel( gsString, ~1, GetGVarFloat( "house_EnterX", X ), GetGVarFloat( "house_EnterY", X ), GetGVarFloat( "house_EnterZ", X ), 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1 ), X );
				    pickupInfo[ GetGVarInt( "HousePickup", X ) ][house_pickups] = X;
				}
				case 1: // AdmBot
				{
					gsString[ 0 ] = EOS;
					format( gsString, sizeof gsString, ""COL_W"House "COL_R"%d\n"COL_W"Owner: "COL_R"%s\n"COL_W"Size: "COL_R"%s\n"COL_W"Level: "COL_R"%d\n"COL_R"House will be auctioned", X, GetGVarStringEx( "house_Owner", X ), HouseSize[ GetGVarInt( "house_Type", X ) ], GetGVarInt( "house_Level", X ) );
					SetGVarInt( "HousePickup", CreateDynamicPickup( 19524, 23, GetGVarFloat( "house_EnterX", X ), GetGVarFloat( "house_EnterY", X ), GetGVarFloat( "house_EnterZ", X ) ), X );
					SetGVarInt( "House3DText", _:CreateDynamic3DTextLabel( gsString, ~1, GetGVarFloat( "house_EnterX", X ), GetGVarFloat( "house_EnterY", X ), GetGVarFloat( "house_EnterZ", X ), 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1 ), X );
				    pickupInfo[ GetGVarInt( "HousePickup", X )][house_pickups] = X;
				}
				default: // Owned
				{
					gsString[ 0 ] = EOS;
					format( gsString, sizeof gsString, ""COL_W"House "COL_R"%d\n"COL_R"%s\n"COL_W"Owner: "COL_R"%s\n"COL_W"Size: "COL_R"%s\n"COL_W"Level: "COL_R"%d\n"COL_W"Rent: "COL_R"%d$\n"COL_R"To rent a room type /rent room", X, GetGVarStringEx( "house_Name", X ), GetGVarStringEx( "house_Owner", X ), HouseSize[ GetGVarInt( "house_Type", X ) ], GetGVarInt( "house_Level", X ), GetGVarInt( "house_Rent", X ) );
					SetGVarInt( "HousePickup", CreateDynamicPickup( 19522, 23, GetGVarFloat( "house_EnterX", X ), GetGVarFloat( "house_EnterY", X ), GetGVarFloat( "house_EnterZ", X ) ), X );
					SetGVarInt( "House3DText", _:CreateDynamic3DTextLabel( gsString, ~1, GetGVarFloat( "house_EnterX", X ), GetGVarFloat( "house_EnterY", X ), GetGVarFloat( "house_EnterZ", X ), 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1 ), X );
				    pickupInfo[ GetGVarInt( "HousePickup", X )][house_pickups] = X;
				}
			}
		}
	}
	printf( "Successfully Loaded [ %d ] Houses", Rows );
	return true;
}
SQL_Function LoadServerBusiness()
{
	new Field[ 128 ], X, Rows, Fields;
	cache_get_data( Rows, Fields, g_Handle );

	for( new i = 0; i < Rows; i++ )
	{
		X = cache_get_field_content_int( i, "busKey", g_Handle );

		Iter_Add(ServerBusiness, X);
		server_bussines++;
		cache_get_field_content( i, "busName", Field, g_Handle, 128 );
		SetGVarString( "bus_Name", Field, X );

		cache_get_field_content( i, "busOwner", Field, g_Handle, 128 );
		SetGVarString( "bus_Owner", Field, X );

		SetGVarInt( "bus_Status", 					cache_get_field_content_int( i, "busStatus", g_Handle ), X );
		SetGVarInt( "bus_Created", 					cache_get_field_content_int( i, "busCreated", g_Handle ), X );

		// < check if business available >
		if( GetGVarInt( "bus_Created", X ) )
		{
			SetGVarInt( "bus_Robbed", 					INVALID_PLAYER_ID, X );
			SetGVarInt( "bus_OwnerKey", 				cache_get_field_content_int( i, "busOwnerKey", g_Handle ), X );
			SetGVarInt( "bus_Price", 					cache_get_field_content_int( i, "busPrice", g_Handle ), X );
			SetGVarInt( "bus_Virtual", 					cache_get_field_content_int( i, "busVirtual", g_Handle ), X );
			SetGVarInt( "bus_Pickup", 					cache_get_field_content_int( i, "busPickup", g_Handle ), X );
			SetGVarInt( "bus_MapIcon", 					cache_get_field_content_int( i, "busMapIcon", g_Handle ), X );
			SetGVarInt( "bus_Interior", 				cache_get_field_content_int( i, "busInterior", g_Handle ), X );
			SetGVarInt( "bus_Type", 					cache_get_field_content_int( i, "busType", g_Handle ), X );

			SetGVarInt( "bus_Money", 					cache_get_field_content_int( i, "busMoney", g_Handle ), X );
			SetGVarInt( "bus_Level", 					cache_get_field_content_int( i, "busLevel", g_Handle ), X );
			SetGVarInt( "bus_Fee", 						cache_get_field_content_int( i, "busFee", g_Handle ), X );
			SetGVarInt( "bus_Fuel", 					cache_get_field_content_int( i, "busFuel", g_Handle ), X );

			SetGVarFloat( "bus_EnterX", 				cache_get_field_content_float( i, "busEnterX", g_Handle ), X );
			SetGVarFloat( "bus_EnterY", 				cache_get_field_content_float( i, "busEnterY", g_Handle ), X );
			SetGVarFloat( "bus_EnterZ", 				cache_get_field_content_float( i, "busEnterZ", g_Handle ), X );

			SetGVarFloat( "bus_ExitX", 					cache_get_field_content_float( i, "busExitX", g_Handle ), X );
			SetGVarFloat( "bus_ExitY", 					cache_get_field_content_float( i, "busExitY", g_Handle ), X );
			SetGVarFloat( "bus_ExitZ", 					cache_get_field_content_float( i, "busExitZ", g_Handle ), X );

			switch( GetGVarInt( "bus_Type", X ) )
			{
				case 1: // 24/7
				{
					SetGVarInt( "Business_Actor", CreateActor( 233, -29.0484, -186.8179, 1003.5469, 359.6548 ), X ), SetActorVirtualWorld( GetGVarInt( "Business_Actor", X ), GetGVarInt( "bus_Virtual", X ) );
				}
				case 2: // Gunshop
				{
					switch( X )
					{
						case 2: SetGVarInt( "Business_Actor", CreateActor( 179, 290.3064, -111.5325, 1001.5156, 350.7520 ), X ), SetActorVirtualWorld( GetGVarInt( "Business_Actor", X ), GetGVarInt( "bus_Virtual", X ) );
						case 3: SetGVarInt( "Business_Actor", CreateActor( 179, 316.1085, -134.5475, 999.6016, 139.4007 ), X ), SetActorVirtualWorld( GetGVarInt( "Business_Actor", X ), GetGVarInt( "bus_Virtual", X ) );
						case 37: SetGVarInt( "Business_Actor", CreateActor( 179, 316.1085, -134.5475, 999.6016, 139.4007 ), X ), SetActorVirtualWorld( GetGVarInt( "Business_Actor", X ), GetGVarInt( "bus_Virtual", X ) );
					}
				}
				case 4: // Clothes
				{
					switch( X )
					{
						case 5: SetGVarInt( "Business_Actor", CreateActor( 48, 204.3179, -157.8303, 1000.5234, 182.1815 ), X ), SetActorVirtualWorld( GetGVarInt( "Business_Actor", X ), GetGVarInt( "bus_Virtual", X ) );
						case 6: SetGVarInt( "Business_Actor", CreateActor( 48, 161.4488, -81.1915, 1001.8047, 180.8297 ), X ), SetActorVirtualWorld( GetGVarInt( "Business_Actor", X ), GetGVarInt( "bus_Virtual", X ) );
						case 34: SetGVarInt( "Business_Actor", CreateActor( 48, 161.4488, -81.1915, 1001.8047, 180.8297 ), X ), SetActorVirtualWorld( GetGVarInt( "Business_Actor", X ), GetGVarInt( "bus_Virtual", X ) );
						case 35: SetGVarInt( "Business_Actor", CreateActor( 48, 204.3179, -157.8303, 1000.5234, 182.1815 ), X ), SetActorVirtualWorld( GetGVarInt( "Business_Actor", X ), GetGVarInt( "bus_Virtual", X ) );
						case 36: SetGVarInt( "Business_Actor", CreateActor( 48, 161.4488, -81.1915, 1001.8047, 180.8297 ), X ), SetActorVirtualWorld( GetGVarInt( "Business_Actor", X ), GetGVarInt( "bus_Virtual", X ) );
					}
				}
				case 6: // Gas Station
				{
					SetGVarInt( "Business_Actor", CreateActor( 222, 665.1924, -566.6785, 16.3249, 178.1311 ), X ), SetActorVirtualWorld( GetGVarInt( "Business_Actor", X ), GetGVarInt( "bus_Virtual", X ) );
				}
				case 7: // Burgershot
				{
					SetGVarInt( "Business_Actor", CreateActor( 205, 376.5162, -65.8495, 1001.5078, 182.6431 ), X ), SetActorVirtualWorld( GetGVarInt( "Business_Actor", X ), GetGVarInt( "bus_Virtual", X ) );
				}
				case 10: // Club Alahambra
				{
					SetGVarInt( "Business_Actor", CreateActor( 11, 501.6992, -20.3824, 1000.6797, 89.3931 ), X ), SetActorVirtualWorld( GetGVarInt( "Business_Actor", X ), GetGVarInt( "bus_Virtual", X ) );
				}
			}
			gsString[ 0 ] = EOS;
			switch( GetGVarInt( "bus_Type", X ) )
			{
				case 6: // Gas Station
				{
					if(GetBusinessTurfID(X) == 0)
					{
						switch( GetGVarInt( "bus_Status", X ) )
						{
							case 0: format( gsString, sizeof gsString, ""COL_B"%s\n{FFFFFF}Business "COL_B"#%d\n{FFFFFF}Fuel Price: "COL_B"$%d {FFFFFF}(/fill)\n{FFFFFF}Price: "COL_B"$%s\nLevel: %d\n{FFFFFF}Owner: "COL_B"%s\n"COL_B"Press F to enter", GetGVarStringEx( "bus_Name", X ), X, GetGVarInt( "bus_Fuel", X ), FormatNumber( GetGVarInt( "bus_Price", X ) ), GetGVarInt( "bus_Level", X ), GetGVarStringEx( "bus_Owner", X ) );
							case 1: format( gsString, sizeof gsString, ""COL_B"%s\n{FFFFFF}Business "COL_B"#%d\n{FFFFFF}Fuel Price: "COL_B"$%d {FFFFFF}(/fill)\n{FFFFFF}Price: "COL_B"$%s\nLevel: %d\n{FFFFFF}Owner: "COL_B"%s\n"COL_B"This business is locked!", GetGVarStringEx( "bus_Name", X ), X, GetGVarInt( "bus_Fuel", X ), FormatNumber( GetGVarInt( "bus_Price", X ) ), GetGVarInt( "bus_Level", X ), GetGVarStringEx( "bus_Owner", X ) );
						}
					}
					else
					{
						switch( GetGVarInt( "bus_Status", X ) )
						{
							case 0: format( gsString, sizeof gsString, ""COL_B"%s\n{FFFFFF}Business "COL_B"#%d\n{FFFFFF}Fuel Price: "COL_B"$%d {FFFFFF}(/fill)\n{FFFFFF}Price: "COL_B"$%s\nLevel: %d\n{FFFFFF}Owner: "COL_B"%s\n{FFFFFF}Extortion: {690808}%d%%\n"COL_B"Press F to enter", GetGVarStringEx( "bus_Name", X ), X, GetGVarInt( "bus_Fuel", X ), FormatNumber( GetGVarInt( "bus_Price", X ) ), 
								GetGVarInt( "bus_Level", X ), GetGVarStringEx( "bus_Owner", X ), GetGVarInt("faction_busExtortion", GetGVarInt("turf_Owner", GetBusinessTurfID(X))) );
							case 1: format( gsString, sizeof gsString, ""COL_B"%s\n{FFFFFF}Business "COL_B"#%d\n{FFFFFF}Fuel Price: "COL_B"$%d {FFFFFF}(/fill)\n{FFFFFF}Price: "COL_B"$%s\nLevel: %d\n{FFFFFF}Owner: "COL_B"%s\n{FFFFFF}Extortion: {690808}%d%%\n"COL_B"This business is locked!", GetGVarStringEx( "bus_Name", X ), X, GetGVarInt( "bus_Fuel", X ), FormatNumber( GetGVarInt( "bus_Price", X ) ), 
								GetGVarInt( "bus_Level", X ), GetGVarStringEx( "bus_Owner", X ), GetGVarInt("faction_busExtortion", GetGVarInt("turf_Owner", GetBusinessTurfID(X))) );
						}
					}
					SetGVarInt( "Business_Zone", CreateDynamicCircle( GetGVarFloat( "bus_EnterX", X ), GetGVarFloat( "bus_EnterY", X ), 50, -1, -1, -1 ), X );
				}
				case 5: // PNS
				{
					if(GetBusinessTurfID(X) == 0)
					{
						if(X != 54)
						{
						    format( gsString, sizeof gsString, ""COL_B"%s\n{FFFFFF}Business "COL_B"#%d\n{FFFFFF}Enter Fee: "COL_B"$%d\n{FFFFFF}Price: "COL_B"$%s\n{FFFFFF}Level: "COL_B"%d\n{FFFFFF}Owner: "COL_B"%s\n\n"COL_B"This business has no interior!", GetGVarStringEx( "bus_Name", X ), X, GetGVarInt( "bus_Fee", X ), FormatNumber( GetGVarInt( "bus_Price", X ) ), GetGVarInt( "bus_Level", X ), GetGVarStringEx( "bus_Owner", X ) );
					    }
					    else if(X == 54)
					    {
					    	format( gsString, sizeof gsString, ""COL_B"%s\n{FFFFFF}Business "COL_B"#%d\n{FFFFFF}Enter Fee: "COL_B"$%d\n{FFFFFF}Price: "COL_B"$%s\n{FFFFFF}Level: "COL_B"%d\n{FFFFFF}Owner: "COL_B"%s\n\n"COL_B"This business has no interior!\n{FFFFFF}PRESS {690808} 'Y' {FFFFFF}TO JOIN SPRAY VEHICLE", GetGVarStringEx( "bus_Name", X ), X, GetGVarInt( "bus_Fee", X ), FormatNumber( GetGVarInt( "bus_Price", X ) ), GetGVarInt( "bus_Level", X ), GetGVarStringEx( "bus_Owner", X ) );
					    }
					}
					else
					{
						if(X != 54)
						{
							format( gsString, sizeof gsString, ""COL_B"%s\n{FFFFFF}Business "COL_B"#%d\n{FFFFFF}Enter Fee: "COL_B"$%d\n{FFFFFF}Price: "COL_B"$%s\n{FFFFFF}Level: "COL_B"%d\n{FFFFFF}Owner: "COL_B"%s\n{FFFFFF}Extortion: {690808}%d%%\n\n"COL_B"This business has no interior!", GetGVarStringEx( "bus_Name", X ), X, GetGVarInt( "bus_Fee", X ), FormatNumber( GetGVarInt( "bus_Price", X ) ), 
								GetGVarInt( "bus_Level", X ), GetGVarStringEx( "bus_Owner", X ), GetGVarInt("faction_busExtortion", GetGVarInt("turf_Owner", GetBusinessTurfID(X))) );
						}
						else if(X == 54)
						{
							format( gsString, sizeof gsString, ""COL_B"%s\n{FFFFFF}Business "COL_B"#%d\n{FFFFFF}Enter Fee: "COL_B"$%d\n{FFFFFF}Price: "COL_B"$%s\n{FFFFFF}Level: "COL_B"%d\n{FFFFFF}Owner: "COL_B"%s\n{FFFFFF}Extortion: {690808}%d%%\n\n"COL_B"This business has no interior!\n{FFFFFF}PRESS {690808}'Y' {FFFFFF}TO JOIN SPRAY VEHICLE", GetGVarStringEx( "bus_Name", X ), X, GetGVarInt( "bus_Fee", X ), FormatNumber( GetGVarInt( "bus_Price", X ) ), 
								GetGVarInt( "bus_Level", X ), GetGVarStringEx( "bus_Owner", X ), GetGVarInt("faction_busExtortion", GetGVarInt("turf_Owner", GetBusinessTurfID(X))) );
						}	
					}
					SetGVarInt( "Business_Zone", CreateDynamicCircle( GetGVarFloat( "bus_EnterX", X ), GetGVarFloat( "bus_EnterY", X ), 50, -1, -1, -1 ), X );
				}
				case 11: // Tuning
				{
					if(GetBusinessTurfID(X) == 0)
					{
						format( gsString, sizeof gsString, ""COL_B"%s\n{FFFFFF}Business "COL_B"#%d\n{FFFFFF}Tuning Fee: "COL_B"$%s\n{FFFFFF}Price: "COL_B"$%s\n{FFFFFF}Level: "COL_B"%d\n{FFFFFF}Owner: "COL_B"%s\n\n"COL_LR"No interior!", GetGVarStringEx( "bus_Name", X ), X, FormatNumber( GetGVarInt( "bus_Fee", X ) ), FormatNumber( GetGVarInt( "bus_Price", X ) ), GetGVarInt( "bus_Level", X ), GetGVarStringEx( "bus_Owner", X ) );
					}
					else
					{
						format( gsString, sizeof gsString, ""COL_B"%s\n{FFFFFF}Business "COL_B"#%d\n{FFFFFF}Tuning Fee: "COL_B"$%s\n{FFFFFF}Price: "COL_B"$%s\n{FFFFFF}Level: "COL_B"%d\n{FFFFFF}Owner: "COL_B"%s\n{FFFFFF}Extortion: {690808}%d%%\n\n"COL_LR"No interior!", GetGVarStringEx( "bus_Name", X ), X, FormatNumber( GetGVarInt( "bus_Fee", X ) ), FormatNumber( GetGVarInt( "bus_Price", X ) ), 
							GetGVarInt( "bus_Level", X ), GetGVarStringEx( "bus_Owner", X ), GetGVarStringEx( "bus_Owner", X ), GetGVarInt("faction_busExtortion", GetGVarInt("turf_Owner", GetBusinessTurfID(X))) );
					}
					SetGVarInt( "Business_Zone", CreateDynamicCircle( GetGVarFloat( "bus_EnterX", X ), GetGVarFloat( "bus_EnterY", X ), 50, -1, -1, -1 ), X );
				}
				case 12: // Airport Fuel Pump
				{
					if(GetBusinessTurfID(X) == 0)
					{
						format( gsString, sizeof gsString, ""COL_B"%s\n{FFFFFF}Business "COL_B"#%d\n{FFFFFF}Fuel Price: "COL_B"$%d/L {FFFFFF}(/fillplane)\n{FFFFFF}Price: "COL_B"$%s\n{FFFFFF}Level: "COL_B"%d\n{FFFFFF}Owner: "COL_B"%s", GetGVarStringEx( "bus_Name", X ), X, GetGVarInt( "bus_Fuel", X ), FormatNumber( GetGVarInt( "bus_Price", X ) ), GetGVarInt( "bus_Level", X ), GetGVarStringEx( "bus_Owner", X ) );
					}
					else
					{
						format( gsString, sizeof gsString, ""COL_B"%s\n{FFFFFF}Business "COL_B"#%d\n{FFFFFF}Fuel Price: "COL_B"$%d/L {FFFFFF}(/fillplane)\n{FFFFFF}Price: "COL_B"$%s\n{FFFFFF}Level: "COL_B"%d\n{FFFFFF}Owner: "COL_B"%s\n{FFFFFF}Extortion: {690808}%d%%", GetGVarStringEx( "bus_Name", X ), X, GetGVarInt( "bus_Fuel", X ), FormatNumber( GetGVarInt( "bus_Price", X ) ), 
							GetGVarInt( "bus_Level", X ), GetGVarStringEx( "bus_Owner", X ), GetGVarInt("faction_busExtortion", GetGVarInt("turf_Owner", GetBusinessTurfID(X))) );
					}
					SetGVarInt( "Business_Zone", CreateDynamicCircle( GetGVarFloat( "bus_EnterX", X ), GetGVarFloat( "bus_EnterY", X ), 50, -1, -1, -1 ), X );
				}
				case 16: // hotel
				{
					switch(GetGVarInt("bus_OwnerKey", X))
					{
						case 0:
						{
							format( gsString, sizeof gsString, "{FFFFFF}Hotel "COL_B"LURK\n{FFFFFF}Hotel price: "COL_B"$%s\n{FFFFFF}Hotel Level: "COL_B"%d\n{FFFFFF}Type "COL_B"/buyhotel {FFFFFF}for buy the hotel",
								FormatNumber(GetGVarInt("bus_Price", X)), GetGVarInt("bus_Level", X));
						}
						default:
						{
							format( gsString, sizeof gsString, "{FFFFFF}Hotel "COL_B"LURK\n{FFFFFF}Hotel Level: "COL_B"%d\n{FFFFFF}Hotel Owner "COL_B"%s",
								GetGVarInt("bus_Level", X), GetGVarStringEx("bus_Owner", X));
						}
					}
					SetGVarInt( "Business_Zone", CreateDynamicCircle( GetGVarFloat( "bus_EnterX", X ), GetGVarFloat( "bus_EnterY", X ), 50, -1, -1, -1 ), X );
				}
				default:
				{
					if(GetBusinessTurfID(X) == 0)
					{
						switch( GetGVarInt( "bus_Status", X ) )
						{
							case 0: format( gsString, sizeof gsString, ""COL_B"%s\n{FFFFFF}Business "COL_B"#%d\n{FFFFFF}Enter Fee: "COL_B"$%d\n{FFFFFF}Price: "COL_B"$%s\n{FFFFFF}Level: "COL_B"%d\n{FFFFFF}Owner: "COL_B"%s\n\n"COL_B"Press F to enter", GetGVarStringEx( "bus_Name", X ), X, GetGVarInt( "bus_Fee", X ), FormatNumber( GetGVarInt( "bus_Price", X ) ), GetGVarInt( "bus_Level", X ), GetGVarStringEx( "bus_Owner", X ));
							case 1: format( gsString, sizeof gsString, ""COL_B"%s\n{FFFFFF}Business "COL_B"#%d\n{FFFFFF}Enter Fee: "COL_B"$%d\n{FFFFFF}Price: "COL_B"$%s\n{FFFFFF}Owner: "COL_B"%s\n\n"COL_B"This business is locked!", GetGVarStringEx( "bus_Name", X ), X, GetGVarInt( "bus_Fee", X ), FormatNumber( GetGVarInt( "bus_Price", X ) ), GetGVarStringEx( "bus_Owner", X ));
						}
					}
					else
					{
						switch( GetGVarInt( "bus_Status", X ) )
						{
							case 0: format( gsString, sizeof gsString, ""COL_B"%s\n{FFFFFF}Business "COL_B"#%d\n{FFFFFF}Enter Fee: "COL_B"$%d\n{FFFFFF}Price: "COL_B"$%s\n{FFFFFF}Level: "COL_B"%d\n{FFFFFF}Owner: "COL_B"%s\n{FFFFFF}Extortion: {690808}%d%%\n\n"COL_B"Press F to enter", GetGVarStringEx( "bus_Name", X ), X, GetGVarInt( "bus_Fee", X ), FormatNumber( GetGVarInt( "bus_Price", X ) ), 
								GetGVarInt( "bus_Level", X ), GetGVarStringEx( "bus_Owner", X ), GetGVarInt("faction_busExtortion", GetGVarInt("turf_Owner", GetBusinessTurfID(X))));
							case 1: format( gsString, sizeof gsString, ""COL_B"%s\n{FFFFFF}Business "COL_B"#%d\n{FFFFFF}Enter Fee: "COL_B"$%d\n{FFFFFF}Price: "COL_B"$%s\n{FFFFFF}Owner: "COL_B"%s\n{FFFFFF}Extortion: {690808}%d%%\n\n"COL_B"This business is locked!", GetGVarStringEx( "bus_Name", X ), X, GetGVarInt( "bus_Fee", X ), 
								FormatNumber( GetGVarInt( "bus_Price", X ) ), GetGVarStringEx( "bus_Owner", X ), GetGVarInt("faction_busExtortion", GetGVarInt("turf_Owner", GetBusinessTurfID(X))));
						}
					}
				}
			}

			SetGVarInt( "BusinessMapIcon", CreateDynamicMapIcon( GetGVarFloat( "bus_EnterX", X ), GetGVarFloat( "bus_EnterY", X ), GetGVarFloat( "bus_EnterZ", X ), GetGVarInt( "bus_MapIcon", X ), GetGVarInt( "bus_MapIcon", X ) ), X );
			SetGVarInt( "BusinessPickup", CreateDynamicPickup( GetGVarInt( "bus_Pickup", X ), 23, GetGVarFloat( "bus_EnterX", X ), GetGVarFloat( "bus_EnterY", X ), GetGVarFloat( "bus_EnterZ", X ) ), X );
            pickupInfo[ GetGVarInt( "BusinessPickup", X)][ bizz_pickups ] = X;

			SetGVarInt( "Business3DText", _:CreateDynamic3DTextLabel( gsString, 0xFFFF66FF, GetGVarFloat( "bus_EnterX", X ), GetGVarFloat( "bus_EnterY", X ), GetGVarFloat( "bus_EnterZ", X ), 50.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1 ), X );
			SetGVarInt( "Business3DTextExit", _:CreateDynamic3DTextLabel( "Press F to exit!", 0xFFFF66FF, GetGVarFloat( "bus_ExitX", X ), GetGVarFloat( "bus_ExitY", X ), GetGVarFloat( "bus_ExitZ", X ), 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, -1 ), X );
		}
		else
		{
			// nu se creeaza
		}
	}
	printf( "Successfully Loaded [ %d ] Business", Rows );
	return true;
}
SQL_Function CheckiPhoneNumber( playerid, phoneNumber )
{
	new Rows, Fields;
	cache_get_data( Rows, Fields, g_Handle );

	if( Rows )
		return SendClientMessage( playerid, COLOR_WHITE, "Acest numar de telefon este folosit de un alt jucator. Incearca sa alegi alt numar de telefon!" );
	else
	{
		TakePlayerPremiumPoints( playerid, 10 );

        playerVariables[ playerid ][ pPhone ] = 2;
        ChangePlayerPhoneNumber(playerid, phoneNumber);

		SendClientMessagef( playerid, COLOR_GREY, "Ai cumparat un iPhone pentru 10 puncte premium. Numarul tau de telefon este: %d.", playerVariables[ playerid ][ pPhoneNumber ] );
		SendClientMessage( playerid, COLOR_GREY, "Pentru a dezactiva apelurile si a primi doar SMS-uri, foloseste /togphone." );
		SendClientMessage( playerid, COLOR_GREY, "Pentru a raspunde la ultimul SMS primit, foloseste /reply [text]." );

		gsString[ 0 ] = EOS;
		format( gsString, sizeof gsString, "%s[user:%d] bought an iPhone[number: %d] for 10 PP. [/shop]", playerVariables[ playerid ][ pNormalName ], GetPlayerMysqlID(playerid), playerVariables[ playerid ][ pPhoneNumber ] );
		submitToAdmins(gsString, COLOR_YELLOW);
		InsertPlayerLog( GetPlayerMysqlID(playerid), 0, gsString );	
	}
	return true;
}
SQL_Function LoadForbidenWords()
{
	new Rows, Fields;
	cache_get_data( Rows, Fields, g_Handle );

	for( new i = 0; i < Rows; i++ )
	{
		cache_get_field_content( i, "wordText", forbidWords[ i ], g_Handle, 64 );
		serverVariables[ forbidWordsCount ]++;
	}
	printf( "Successfully Loaded [ %d ] Forbid Words", Rows );
	return true;
}
SQL_Function LoadServerClans()
{
	new Field[ 512 ], X, Rows, Fields, clanRank[ MAX_CLANS ][ 7 ][ 128 ];
	cache_get_data( Rows, Fields, g_Handle );

	for( new i = 0; i < Rows; i++ )
	{
		X = cache_get_field_content_int( i, "clanKey", g_Handle );
		Iter_Add(ServerClans, X);

		cache_get_field_content( i, "clanName", Field, g_Handle, 128 );
		SetGVarString( "clan_Name", Field, X );

		cache_get_field_content( i, "clanTag", Field, g_Handle, 128 );
		SetGVarString( "clan_Tag", Field, X );

		cache_get_field_content( i, "clanMOTD", Field, g_Handle, 128 );
		SetGVarString( "clan_MOTD", Field, X );

		cache_get_field_content( i, "clanColor", Field, g_Handle, 128 );
		SetGVarString( "clan_Color", Field, X );

		// < Load Clan Ranks )
		cache_get_field_content( i, "clanRanks", Field, g_Handle, 256 );
		sscanf( Field, "p<:>s[32]s[32]s[32]s[32]s[32]s[32]s[32]", clanRank[ X ][ 0 ], clanRank[ X ][ 1 ], clanRank[ X ][ 2 ], clanRank[ X ][ 3 ], clanRank[ X ][ 4 ], clanRank[ X ][ 5 ], clanRank[ X ][ 6 ] );

		SetGVarString( "clan_Rank1", clanRank[ X ][ 0 ], X );
		SetGVarString( "clan_Rank2", clanRank[ X ][ 1 ], X );
		SetGVarString( "clan_Rank3", clanRank[ X ][ 2 ], X );
		SetGVarString( "clan_Rank4", clanRank[ X ][ 3 ], X );
		SetGVarString( "clan_Rank5", clanRank[ X ][ 4 ], X );
		SetGVarString( "clan_Rank6", clanRank[ X ][ 5 ], X );
		SetGVarString( "clan_Rank7", clanRank[ X ][ 6 ], X );

		SetGVarInt( "clan_Members", 		cache_get_field_content_int( i, "clanMembers", g_Handle ), X );
		SetGVarInt( "clan_Slots", 			cache_get_field_content_int( i, "clanSlots", g_Handle ), X );
		//SetGVarInt( "clan_Active", 			cache_get_field_content_int( i, "clanActive", g_Handle ), X );
		//SetGVarInt( "clan_Expire", 			cache_get_field_content_int( i, "clanExpire", g_Handle ), X );
	}
	printf( "Successfully Loaded [ %d ] Clans", Rows );
	return true;
}
SQL_Function LoadServerFactions()
{
	new Field[ 256 ], X, Rows, Fields, Skins[ MAX_FACTIONS ][ 8 ], FRank[ MAX_FACTIONS ][ 7 ][ 128 ];
	cache_get_data( Rows, Fields, g_Handle );

	SetGVarString( "faction_Name", "Civil", 0 );
	for( new i = 0; i < Rows; i++ )
	{
		X = cache_get_field_content_int( i, "factionKey", g_Handle );

		Iter_Add(ServerFactions, X);
		cache_get_field_content( i, "factionName", Field, g_Handle, 256 );
		SetGVarString( "faction_Name", Field, X );

		cache_get_field_content( i, "factionTag", Field, g_Handle, 256 );
		SetGVarString( "faction_Tag", Field, X );

		cache_get_field_content( i, "factionMOTD", Field, g_Handle, 256 );
		SetGVarString( "faction_MOTD", Field, X );

		cache_get_field_content( i, "factionSkins", Field, g_Handle, 256 );
		sscanf( Field, "p<:>dddddddd", Skins[ X ][ 0 ], Skins[ X ][ 1 ], Skins[ X ][ 2 ], Skins[ X ][ 3 ], Skins[ X ][ 4 ], Skins[ X ][ 5 ], Skins[ X ][ 6 ], Skins[ X ][ 7 ] );

		SetGVarInt( "faction_SkinR1", Skins[ X ][ 0 ], X );
		SetGVarInt( "faction_SkinR2", Skins[ X ][ 1 ], X );
		SetGVarInt( "faction_SkinR3", Skins[ X ][ 2 ], X );
		SetGVarInt( "faction_SkinR4", Skins[ X ][ 3 ], X );
		SetGVarInt( "faction_SkinR5", Skins[ X ][ 4 ], X );
		SetGVarInt( "faction_SkinR6", Skins[ X ][ 5 ], X );
		SetGVarInt( "faction_SkinR7", Skins[ X ][ 6 ], X );
		SetGVarInt( "faction_SkinR8", Skins[ X ][ 7 ], X );

		// < Load Faction Ranks ) TDString[ 4 ][ 1024 ]
		cache_get_field_content( i, "factionRanks", Field, g_Handle, 256 );
		sscanf( Field, "p<:>s[32]s[32]s[32]s[32]s[32]s[32]s[32]", FRank[ X ][ 0 ], FRank[ X ][ 1 ], FRank[ X ][ 2 ], FRank[ X ][ 3 ], FRank[ X ][ 4 ], FRank[ X ][ 5 ], FRank[ X ][ 6 ] );

		SetGVarString( "faction_Rank1", FRank[ X ][ 0 ], X );
		SetGVarString( "faction_Rank2", FRank[ X ][ 1 ], X );
		SetGVarString( "faction_Rank3", FRank[ X ][ 2 ], X );
		SetGVarString( "faction_Rank4", FRank[ X ][ 3 ], X );
		SetGVarString( "faction_Rank5", FRank[ X ][ 4 ], X );

		SetGVarString( "faction_Rank6", FRank[ X ][ 5 ], X );
		SetGVarString( "faction_Rank7", FRank[ X ][ 6 ], X );

		SetGVarInt( "faction_WarID", 				0, X );
		SetGVarInt( "faction_WarTurf",              0, X );
		SetGVarInt( "faction_WarStatus", 			0, X );
		SetGVarInt( "faction_Locked", 				0, X );

		SetGVarInt( "faction_Status", 				cache_get_field_content_int( i, "factionStatus", g_Handle ), X );
		SetGVarInt( "faction_Materials", 			cache_get_field_content_int( i, "factionMaterials", g_Handle ), X );
		SetGVarInt( "faction_Money", 				cache_get_field_content_int( i, "factionMoney", g_Handle ), X );
		SetGVarInt( "faction_Drugs", 				cache_get_field_content_int( i, "factionDrugs", g_Handle ), X );
		SetGVarInt( "faction_Key", 					cache_get_field_content_int( i, "factionKey", g_Handle ), X );

		SetGVarInt( "faction_Applications", 		cache_get_field_content_int( i, "factionApplications", g_Handle ), X );
		SetGVarInt( "faction_Pickup", 				cache_get_field_content_int( i, "factionPickup", g_Handle ), X );
		SetGVarInt( "faction_MapIcon", 				cache_get_field_content_int( i, "factionMapIcon", g_Handle ), X );
		SetGVarInt( "faction_Members", 				cache_get_field_content_int( i, "factionMembers", g_Handle ), X );
		SetGVarInt( "faction_Leaders", 				cache_get_field_content_int( i, "factionLeaders", g_Handle ), X );
		SetGVarInt( "faction_busExtortion", 		cache_get_field_content_int( i, "factionBusExtortion", g_Handle ), X );
		SetGVarInt( "faction_Slots", 				cache_get_field_content_int( i, "factionSlots", g_Handle ), X );
		SetGVarInt( "faction_Interior", 			cache_get_field_content_int( i, "factionHQInterior", g_Handle ), X );
		SetGVarInt( "faction_InteriorEnter", 		cache_get_field_content_int( i, "factionInterior", g_Handle ), X );
		SetGVarInt( "faction_Virtual", 				cache_get_field_content_int( i, "factionVirtual", g_Handle ), X );
		SetGVarFloat( "faction_EnterX", 			cache_get_field_content_float( i, "factionHQEnterX", g_Handle ), X );
		SetGVarFloat( "faction_EnterY", 			cache_get_field_content_float( i, "factionHQEnterY", g_Handle ), X );
		SetGVarFloat( "faction_EnterZ", 			cache_get_field_content_float( i, "factionHQEnterZ", g_Handle ), X );

		SetGVarFloat( "faction_ExitX", 				cache_get_field_content_float( i, "factionHQExitX", g_Handle ), X );
		SetGVarFloat( "faction_ExitY", 				cache_get_field_content_float( i, "factionHQExitY", g_Handle ), X );
		SetGVarFloat( "faction_ExitZ", 				cache_get_field_content_float( i, "factionHQExitZ", g_Handle ), X );

		SetGVarFloat( "faction_SeifX", 				cache_get_field_content_float( i, "factionSeifX", g_Handle ), X );
		SetGVarFloat( "faction_SeifY", 				cache_get_field_content_float( i, "factionSeifY", g_Handle ), X );
		SetGVarFloat( "faction_SeifZ", 				cache_get_field_content_float( i, "factionSeifZ", g_Handle ), X );
		SetGVarFloat( "faction_SeifRX", 			cache_get_field_content_float( i, "factionSeifRX", g_Handle ), X );
		SetGVarFloat( "faction_SeifRY", 			cache_get_field_content_float( i, "factionSeifRY", g_Handle ), X );
		SetGVarFloat( "faction_SeifRZ", 			cache_get_field_content_float( i, "factionSeifRZ", g_Handle ), X );

		// < Check if factions it's enabled )
		// < Create Safe Object )
		SetGVarInt( "FactionSeif", CreateDynamicObject( 1829, GetGVarFloat( "faction_SeifX", X ), GetGVarFloat( "faction_SeifY", X ), GetGVarFloat( "faction_SeifZ", X ), GetGVarFloat( "faction_SeifRX", X ), GetGVarFloat( "faction_SeifRY", X ), GetGVarFloat( "faction_SeifRZ", X ), GetGVarInt( "faction_Virtual", X ), GetGVarInt( "faction_Interior", X ), -1, 500.0), X );

		// < Create the Safe )
		switch( GetFactionType( X ) )
		{
			case 1:
			{
				gsString[ 0 ] = EOS;
				format( gsString, sizeof gsString, "Faction Safe\n%s\n\nMaterials: %s\nMoney: %s", GetGVarStringEx( "faction_Name", X ), FormatNumber(GetGVarInt( "faction_Materials", X )), FormatNumber(GetGVarInt( "faction_Money", X )) );
				SetGVarInt( "FactionSeif3DText", _:CreateDynamic3DTextLabel( gsString, 0xFFFF66FF, GetGVarFloat( "faction_SeifX", X ), GetGVarFloat( "faction_SeifY", X ), GetGVarFloat( "faction_SeifZ", X ), 50.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, GetGVarInt( "faction_Virtual", X ), GetGVarInt( "faction_Interior", X ) ), X );
			}
			case 2:
			{
				gsString[ 0 ] = EOS;
				format( gsString, sizeof gsString, "Faction Safe\n%s\n\nMaterials: %s\nMoney: %s\nDrugs: %s", GetGVarStringEx( "faction_Name", X ), FormatNumber(GetGVarInt( "faction_Materials", X )), FormatNumber(GetGVarInt( "faction_Money", X )), FormatNumber(GetGVarInt( "faction_Drugs", X )) );
				SetGVarInt( "FactionSeif3DText", _:CreateDynamic3DTextLabel( gsString, 0xFFFF66FF, GetGVarFloat( "faction_SeifX", X ), GetGVarFloat( "faction_SeifY", X ), GetGVarFloat( "faction_SeifZ", X ), 50.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, GetGVarInt( "faction_Virtual", X ), GetGVarInt( "faction_Interior", X ) ), X );
			}
		}
		gsString[ 0 ] = EOS;
		format( gsString, sizeof gsString, "%s's HQ\nFaction ID: %d\n\nPress ~k~~F to enter", GetGVarStringEx( "faction_Name", X ), X );
		SetGVarInt( "Faction3DText", _:CreateDynamic3DTextLabel( gsString, 0xFFFFffFF, GetGVarFloat( "faction_EnterX", X ), GetGVarFloat( "faction_EnterY", X ), GetGVarFloat( "faction_EnterZ", X ), 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1 ), X );
		SetGVarInt( "Faction3DTextExit", _:CreateDynamic3DTextLabel( "Press F to exit the HQ!", 0xFFFFffFF, GetGVarFloat( "faction_ExitX", X ), GetGVarFloat( "faction_ExitY", X ), GetGVarFloat( "faction_ExitZ", X ), 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, GetGVarInt( "faction_Virtual", X ), GetGVarInt( "faction_Interior", X ) ), X );
		SetGVarInt( "FactionMapIcon", CreateDynamicMapIcon( GetGVarFloat( "faction_EnterX", X ), GetGVarFloat( "faction_EnterY", X ), GetGVarFloat( "faction_EnterZ", X ), GetGVarInt( "faction_MapIcon", X ), GetGVarInt( "faction_MapIcon", X ) ), X );
		SetGVarInt( "FactionPickup", CreateDynamicPickup( GetGVarInt( "faction_Pickup", X ), 23, GetGVarFloat( "faction_EnterX", X ), GetGVarFloat( "faction_EnterY", X ), GetGVarFloat( "faction_EnterZ", X ) ), X );
	    pickupInfo[ GetGVarInt("FactionPickup", X)][ faction_pickups ] = X;
	}
	printf( "Successfully Loaded [ %d ] Factions", Rows );
	return true;
}

forward LoadRaces();
public LoadRaces()
{
	new Rows, Fields;
	cache_get_data( Rows, Fields, g_Handle );

	for( new i = 0; i < Rows; i++ )
	{
		cache_get_field_content( i, "raceName", raceSystem[i][rName], g_Handle, 40 );
		cache_get_field_content( i, "BestRacerTimeDate", raceSystem[i][BestRacerDateTime], g_Handle, 40 );
		cache_get_field_content( i, "BestRacer", raceSystem[i][BestRacer], g_Handle, 40 );

		raceSystem[i][rTotalCP] 			= cache_get_field_content_int( i, "raceTotalCP", g_Handle );
		raceSystem[i][BestRacerTime] 		= cache_get_field_content_int( i, "BestTimeRacer", g_Handle );

	}
	printf( "Successfully Loaded [ %d ] Races", Rows );
	return 1;
}
SQL_Function LoadServerStats()
{
	new Rows, Fields;
	cache_get_data( Rows, Fields, g_Handle );

	for( new i = 0; i < Rows; i++ )
	{
		serverVariables[ GiftBoxStatus ] 		= cache_get_field_content_int( i, "giftStatus", g_Handle );
		serverVariables[ GiftBoxPos ][ 0 ] 		= cache_get_field_content_float( i, "giftPosX", g_Handle );
		serverVariables[ GiftBoxPos ][ 1 ]		= cache_get_field_content_float( i, "giftPosY", g_Handle );
		serverVariables[ GiftBoxPos ][ 2 ]		= cache_get_field_content_float( i, "giftPosZ", g_Handle );
		serverVariables[ GiftBoxPos ][ 3 ]		= cache_get_field_content_float( i, "giftPosR", g_Handle );
		printf( "[GiftBox Status: %d] Positions: %.2f, %.2f, %.2f, %.2f", serverVariables[ GiftBoxStatus ], serverVariables[ GiftBoxPos ][ 0 ], serverVariables[ GiftBoxPos ][ 1 ], serverVariables[ GiftBoxPos ][ 2 ], serverVariables[ GiftBoxPos ][ 3 ] );

		switch( serverVariables[ GiftBoxStatus ] )
		{
			case 1:
			{
				serverVariables[ GiftBoxObject ] 	= CreateDynamicObject( 19056, serverVariables[ GiftBoxPos ][ 0 ], serverVariables[ GiftBoxPos ][ 1 ], serverVariables[ GiftBoxPos ][ 2 ] - 0.4, 0.0, 0.0, serverVariables[ GiftBoxPos ][ 3 ] );
				serverVariables[ GiftBoxText ] 		= CreateDynamic3DTextLabel( ""SERVER_NAME" Giftbox\nUse /getgift to get a gift", 0xA9C4E4CC, serverVariables[ GiftBoxPos ][ 0 ], serverVariables[ GiftBoxPos ][ 1 ], serverVariables[ GiftBoxPos ][ 2 ]+0.40, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1 );
				serverVariables[ GiftBoxStatus ] 	= 1;
			}
			case 0: serverVariables[ GiftBoxStatus ] = 0;
		}
	}
	return true;	
}
SQL_Function LoadServerTurfs()
{
	new X, Rows, Fields;
	cache_get_data( Rows, Fields, g_Handle );

	for( new i = 0; i < Rows; i++ )
	{
		X = cache_get_field_content_int( i, "turfKey", g_Handle );
		Iter_Add(ServerTurfs, X);
		SetGVarInt( "turf_Status", 			0, X );
		SetGVarInt( "turf_LastAttack", 		0, X );

		SetGVarInt( "turf_Key", 			cache_get_field_content_int( i, "turfKey", g_Handle ), X );
		SetGVarInt( "turf_Owner", 			cache_get_field_content_int( i, "turfOwner", g_Handle ), X );
		SetGVarFloat( "turf_MinX", 			cache_get_field_content_float( i, "turfMinX", g_Handle ), X );
		SetGVarFloat( "turf_MinY", 			cache_get_field_content_float( i, "turfMinY", g_Handle ), X );
		SetGVarFloat( "turf_MaxX", 			cache_get_field_content_float( i, "turfMaxX", g_Handle ), X );
		SetGVarFloat( "turf_MaxY", 			cache_get_field_content_float( i, "turfMaxY", g_Handle ), X );

		SetGVarInt( "TurfID", GangZoneCreateEx( GetGVarFloat( "turf_MinX", X ), GetGVarFloat( "turf_MinY", X ), GetGVarFloat( "turf_MaxX", X ), GetGVarFloat( "turf_MaxY", X ), X, 1.0 ), X );
		SetGVarInt( "TurfREC", CreateDynamicRectangle( GetGVarFloat( "turf_MinX", X ), GetGVarFloat( "turf_MinY", X ), GetGVarFloat( "turf_MaxX", X ), GetGVarFloat( "turf_MaxY", X ) ), X );
		#if defined DEBUG_SERVER
			printf( "[DEBUG-TURF] TurfID: %d | TurfOwner: %d | TurfColor: %d", GetGVarInt( "TurfID", X ), GetGVarInt( "turf_Owner", X ), GetTeamZoneColor( GetGVarInt( "turf_Owner", X ) ) );
		#endif
	}
	printf( "Successfully Loaded [ %d ] Turfs", Rows );
	return true;
}
SQL_Function LoadServerJobs()
{
	new Field[ 128 ], X, Rows, Fields;
	cache_get_data( Rows, Fields, g_Handle );

	SetGVarString( "job_Name", "Unemployed", 0 );
	for( new i = 0; i < Rows; i++ )
	{
		X = cache_get_field_content_int( i, "jobKey", g_Handle );

		Iter_Add(ServerJobs, X);
		cache_get_field_content( i, "jobName", Field, g_Handle, 128 );
		SetGVarString( "job_Name", Field, X );

		cache_get_field_content( i, "jobLocation", Field, g_Handle, 128 );
		SetGVarString( "job_Location", Field, X );

		// < Load job pickup )
		SetGVarInt( "job_Level", 			cache_get_field_content_int( i, "jobLevel", g_Handle ), X );
		SetGVarInt( "job_Skin", 			cache_get_field_content_int( i, "jobSkin", g_Handle ), X );
		SetGVarInt( "job_Type", 			cache_get_field_content_int( i, "jobType", g_Handle ), X );
		SetGVarFloat( "job_PosX", 			cache_get_field_content_float( i, "jobPosX", g_Handle ), X );
		SetGVarFloat( "job_PosY", 			cache_get_field_content_float( i, "jobPosY", g_Handle ), X );
		SetGVarFloat( "job_PosZ", 			cache_get_field_content_float( i, "jobPosZ", g_Handle ), X );
		SetGVarInt( "Job_Pickup", CreateDynamicPickup( 1239, 23, GetGVarFloat( "job_PosX", X ), GetGVarFloat( "job_PosY", X ), GetGVarFloat( "job_PosZ", X ) ), X );

		// < Load job actor )
		SetGVarFloat( "job_ActorX", 			cache_get_field_content_float( i, "jobActorX", g_Handle ), X );
		SetGVarFloat( "job_ActorY", 			cache_get_field_content_float( i, "jobActorY", g_Handle ), X );
		SetGVarFloat( "job_ActorZ", 			cache_get_field_content_float( i, "jobActorZ", g_Handle ), X );
		SetGVarFloat( "job_ActorR", 			cache_get_field_content_float( i, "jobActorR", g_Handle ), X );
		SetGVarInt( "Job_Actor", CreateActor( GetGVarInt( "job_Skin", X ), GetGVarFloat( "job_ActorX", X ), GetGVarFloat( "job_ActorY", X ), GetGVarFloat( "job_ActorZ", X ), GetGVarFloat( "job_ActorR", X ) ), X );
		ApplyActorAnimation( GetGVarInt( "Job_Actor", X ), "COP_AMBIENT", "Coplook_loop", 4.0, 1, 0, 0, 0, 0 );
		SetActorInvulnerable( GetGVarInt( "Job_Actor", X ), true );
		pickupInfo[ GetGVarInt("Job_Pickup", X)][ jobs_pickups ] = X;

		gsString[ 0 ] = EOS;
		format( gsString, sizeof gsString, "Job "COL_JOB"#%d"COL_W": %s\nUse "COL_JOB"/getjob "COL_W"to take the job!\nType "COL_JOB"/work "COL_W"to start the job!", X, GetGVarStringEx( "job_Name", X ) );
		SetGVarInt( "Job3DText", _:CreateDynamic3DTextLabel( gsString, 0xFFFFffFF, GetGVarFloat( "job_PosX", X ), GetGVarFloat( "job_PosY", X ), GetGVarFloat( "job_PosZ", X ), 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1 ), X );
	}
	printf( "Successfully Loaded [ %d ] Jobs", Rows );
	return true;
}
SQL_Function LoadServerVehicles()
{
	new Field[ 128 ], X, Rows, Fields;
	cache_get_data( Rows, Fields, g_Handle );

	for( new i = 0; i < Rows; i++ )
	{
		X = cache_get_field_content_int( i, "vehicleID", g_Handle );

		Iter_Add(ServerVehicles, X);
		server_vehicles++;
		cache_get_field_content( i, "vehicleNumberPlate", Field, g_Handle, 128 );
		SetGVarString( "veh_Plate", Field, X );

		SetGVarInt( "veh_Model", 			cache_get_field_content_int( i, "vehicleModelID", g_Handle ), X );
		SetGVarInt( "veh_Faction", 			cache_get_field_content_int( i, "vehicleFaction", g_Handle ), X );
		SetGVarInt( "veh_FactionRank", 		cache_get_field_content_int( i, "vehicleFactionRank", g_Handle ), X );

		SetGVarInt( "veh_Color1", 			cache_get_field_content_int( i, "vehicleCol1", g_Handle ), X );
		SetGVarInt( "veh_Color2", 			cache_get_field_content_int( i, "vehicleCol2", g_Handle ), X );

		SetGVarInt( "vehAPARTMENT", 	    cache_get_field_content_int( i, "IS_HOTEL_CAR", g_Handle ), X );

		SetGVarFloat( "veh_PosX", 			cache_get_field_content_float( i, "vehiclePosX", g_Handle ), X );
		SetGVarFloat( "veh_PosY", 			cache_get_field_content_float( i, "vehiclePosY", g_Handle ), X );
		SetGVarFloat( "veh_PosZ", 			cache_get_field_content_float( i, "vehiclePosZ", g_Handle ), X );
		SetGVarFloat( "veh_PosR", 			cache_get_field_content_float( i, "vehiclePosRotation", g_Handle ), X );

		// < Create the vehicle! )
		switch( X )
		{
			case 1..4: 	SetGVarInt( "Server_Vehicle", CreateVehicle( GetGVarInt( "veh_Model", X ), GetGVarFloat( "veh_PosX", X ), GetGVarFloat( "veh_PosY", X ), GetGVarFloat( "veh_PosZ", X ), GetGVarFloat( "veh_PosR", X ), GetGVarInt( "veh_Color1", X ), GetGVarInt( "veh_Color2", X ), -1, 1 ), X );
			default: 	SetGVarInt( "Server_Vehicle", CreateVehicle( GetGVarInt( "veh_Model", X ), GetGVarFloat( "veh_PosX", X ), GetGVarFloat( "veh_PosY", X ), GetGVarFloat( "veh_PosZ", X ), GetGVarFloat( "veh_PosR", X ), GetGVarInt( "veh_Color1", X ), GetGVarInt( "veh_Color2", X ), -1 ), X );
		}
		// < Check if any attachment )
		switch( X )
		{
			/* #if defined CITY_LV
			case 9..10: // LVPD
			{
				SetGVarInt( "Faction_Giro", CreateDynamicObject( 19797, 0, 0, 0, 0, 0, 0, 0 ), X );
				SetGVarInt( "Faction_Siren", CreateDynamicObject( 19620, 0, 0, 0, 0, 0, 0, 0 ), X );
				SetGVarInt( "Faction_Text", CreateDynamicObject( 19327, 0, 0, 0, 0, 0, 0, 0 ), X );
				AttachDynamicObjectToVehicle( GetGVarInt( "Faction_Giro", X ), GetGVarInt( "Server_Vehicle", X ), -0.00710, 0.46250, 0.53160, 0.00000, 0.00000, 179.77400 );
				AttachDynamicObjectToVehicle( GetGVarInt( "Faction_Siren", X ), GetGVarInt( "Server_Vehicle", X ), -0.03970, 0.14510, 0.68090, 0.00000, 0.00000, 358.88480 );

				// < Police Text - Infernus )
				SetDynamicObjectMaterialText( GetGVarInt( "Faction_Text", X ), 0, "POLICE", OBJECT_MATERIAL_SIZE_128x64, "Arial", 25, 1, -16777216, 0, 1 );
				AttachDynamicObjectToVehicle( GetGVarInt( "Faction_Text", X ), GetGVarInt( "Server_Vehicle", X ), 0.00000, -2.04130, 0.27680, 270.00000, 0.00000, 0.00000 );
			}
			#endif */
			case 1..4: // LSPD
			{
				SetGVarInt( "Faction_Giro", CreateDynamicObject( 19797, 0, 0, 0, 0, 0, 0, 0 ), X );
				SetGVarInt( "Faction_Siren", CreateDynamicObject( 19620, 0, 0, 0, 0, 0, 0, 0 ), X );
				SetGVarInt( "Faction_Text", CreateDynamicObject( 19327, 0, 0, 0, 0, 0, 0, 0 ), X );
				AttachDynamicObjectToVehicle( GetGVarInt( "Faction_Giro", X ), GetGVarInt( "Server_Vehicle", X ), 0.00000, 0.46250, 0.53160, 0.00000, 0.00000, 179.77400 );
				AttachDynamicObjectToVehicle( GetGVarInt( "Faction_Siren", X ), GetGVarInt( "Server_Vehicle", X ), 0.00000, 0.14510, 0.68090, 0.00000, 0.00000, 358.88480 );

				// < Police Text - Infernus )
				SetDynamicObjectMaterialText( GetGVarInt( "Faction_Text", X ), 0, "POLICE", OBJECT_MATERIAL_SIZE_128x64, "Arial", 25, 1, -16777216, 0, 1 );
				AttachDynamicObjectToVehicle( GetGVarInt( "Faction_Text", X ), GetGVarInt( "Server_Vehicle", X ), 0.00000, -2.04130, 0.27680, 270.00000, 0.00000, 0.00000 );
			}
			/* #if defined CITY_LV
			case 20..23: // Taxi LV
			{
				SetGVarInt( "Faction_Siren", CreateDynamicObject( 19311, 0, 0, 0, 0, 0, 0, 0 ), X );
				AttachDynamicObjectToVehicle( GetGVarInt( "Faction_Siren", X ), GetGVarInt( "Server_Vehicle", X ), -0.01410, -0.21560, 0.92090, 0.00000, 0.00000, 0.00000 );
			}
			#endif */
			case 45..52: // Taxi LS
			{
				SetGVarInt( "Faction_Siren", CreateDynamicObject( 19311, 0, 0, 0, 0, 0, 0, 0 ), X );
				AttachDynamicObjectToVehicle( GetGVarInt( "Faction_Siren", X ), GetGVarInt( "Server_Vehicle", X ), -0.01410, -0.21560, 0.92090, 0.00000, 0.00000, 0.00000 );
			}
		}
		new plate_string[ 64 ];
		format( plate_string, sizeof plate_string, "%s-%d", GetGVarStringEx( "veh_Plate", X ), X );
		SetVehicleNumberPlate( GetGVarInt( "Server_Vehicle", X ), plate_string );
		serverVariables[ VehicleGas ][ GetGVarInt( "Server_Vehicle", X ) ] = 100;
	}
	// < Spawn Bikes - LS )
	
	CreateVehicle(510, 546.5030, -1502.7517, 14.3265, 116.3638, -1, -1, -1);
	CreateVehicle(510, 546.5030, -1503.9136, 14.3265, 116.3638, -1, -1, -1);
	CreateVehicle(510, 546.5030, -1505.3545, 14.3265, 116.3638, -1, -1, -1);
	CreateVehicle(510, 546.5030, -1506.5826, 14.3265, 116.3638, -1, -1, -1);
	CreateVehicle(510, 546.5030, -1507.9734, 14.3265, 116.3638, -1, -1, -1);
	CreateVehicle(510, 546.5030, -1509.4438, 14.3265, 116.3638, -1, -1, -1);
	CreateVehicle(510, 546.5030, -1510.7742, 14.3265, 116.3638, -1, -1, -1);
	CreateVehicle(510, 546.5030, -1512.3838, 14.3265, 116.3638, -1, -1, -1);
	
	#if defined CITY_LV
		// < Spawn Bikes - LV )
		CreateVehicle(510, 1695.2836, 1471.9647, 10.3689, -98.8200, -1, -1, -1);
		CreateVehicle(510, 1695.7706, 1474.3213, 10.3689, -98.8200, -1, -1, -1);
		CreateVehicle(510, 1696.1088, 1476.5510, 10.3689, -98.8200, -1, -1, -1);
		CreateVehicle(510, 1696.6322, 1479.1410, 10.3689, -98.8200, -1, -1, -1);
		CreateVehicle(510, 1697.1113, 1481.4835, 10.3689, -98.8200, -1, -1, -1);
		CreateVehicle(510, 1697.6266, 1483.9082, 10.3689, -98.8200, -1, -1, -1);
		CreateVehicle(510, 1698.1757, 1486.9546, 10.3689, -98.8200, -1, -1, -1);
		CreateVehicle(510, 1698.8975, 1490.1042, 10.3689, -98.8200, -1, -1, -1);
	#endif
	printf( "Successfully Loaded [ %d ] Vehicles", Rows );
	return true;
}
SQL_Function LoadServerTeles()
{
	new Field[ 128 ], X, Rows, Fields;
	cache_get_data( Rows, Fields, g_Handle );

	for( new i = 0; i < Rows; i++ )
	{
		X = cache_get_field_content_int( i, "teleKey", g_Handle );

		cache_get_field_content( i, "teleName", Field, g_Handle, 128 );
		SetGVarString( "tele_Name", Field, X );
		SetGVarInt( "tele_Status", 0, X );

		SetGVarInt( "tele_Interior", 					cache_get_field_content_int( i, "teleInterior", g_Handle ), X );
		SetGVarInt( "tele_InteriorExit", 				cache_get_field_content_int( i, "teleInteriorExit", g_Handle ), X );
		SetGVarInt( "tele_Pickup", 						cache_get_field_content_int( i, "telePickup", g_Handle ), X );
		SetGVarInt( "tele_Virtual", 					cache_get_field_content_int( i, "teleVirtual", g_Handle ), X );
		SetGVarInt( "tele_VirtualExit", 				cache_get_field_content_int( i, "teleVirtualExit", g_Handle ), X );

		SetGVarFloat( "tele_EnterX", 					cache_get_field_content_float( i, "teleEnterX", g_Handle ), X );
		SetGVarFloat( "tele_EnterY", 					cache_get_field_content_float( i, "teleEnterY", g_Handle ), X );
		SetGVarFloat( "tele_EnterZ", 					cache_get_field_content_float( i, "teleEnterZ", g_Handle ), X );

		SetGVarFloat( "tele_ExitX", 					cache_get_field_content_float( i, "teleExitX", g_Handle ), X );
		SetGVarFloat( "tele_ExitY", 					cache_get_field_content_float( i, "teleExitY", g_Handle ), X );
		SetGVarFloat( "tele_ExitZ", 					cache_get_field_content_float( i, "teleExitZ", g_Handle ), X );

		SetGVarInt( "TeleEnter", CreateDynamicPickup( GetGVarInt( "tele_Pickup", X ), 23, GetGVarFloat( "tele_EnterX", X ), GetGVarFloat( "tele_EnterY", X ), GetGVarFloat( "tele_EnterZ", X ) ), X );
		SetGVarInt( "TeleExit", CreateDynamicPickup( GetGVarInt( "tele_Pickup", X ), 23, GetGVarFloat( "tele_ExitX", X ), GetGVarFloat( "tele_ExitY", X ), GetGVarFloat( "tele_ExitZ", X ) ), X );
        pickupInfo[ GetGVarInt("TeleEnter", X) ][tele_pickups] = X;
        pickupInfo[ GetGVarInt("TeleExit", X) ][tele_pickupss] = X;

		gsString[ 0 ] = EOS;
		format( gsString, sizeof gsString, "%s\nPress F to enter!", GetGVarStringEx( "tele_Name", X ) );
		SetGVarInt( "TeleEnter3D", _:CreateDynamic3DTextLabel( gsString, COLOR_YELLOW_3D, GetGVarFloat( "tele_EnterX", X ), GetGVarFloat( "tele_EnterY", X ), GetGVarFloat( "tele_EnterZ", X ), 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, GetGVarInt( "tele_Virtual", X ) ), X );

		gsString[ 0 ] = EOS;
		format( gsString, sizeof gsString, "%s\nPress F to exit!", GetGVarStringEx( "tele_Name", X ) );
		SetGVarInt( "TeleExit3D", _:CreateDynamic3DTextLabel( gsString, COLOR_YELLOW_3D, GetGVarFloat( "tele_ExitX", X ), GetGVarFloat( "tele_ExitY", X ), GetGVarFloat( "tele_ExitZ", X ), 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, GetGVarInt( "tele_VirtualExit", X ) ), X );
	}
	printf( "Successfully Loaded [ %d ] Teleports", Rows );
	return true;
}
SQL_Function LoadServerATMS()
{
	new Field[ 128 ], X, Rows, Fields;
	cache_get_data( Rows, Fields, g_Handle );

	for( new i = 0; i < Rows; i++ )
	{
		X = cache_get_field_content_int( i, "atmKey", g_Handle );

		Iter_Add(ServerATMS, X);
		cache_get_field_content( i, "atmName", Field, g_Handle, 128 );
		SetGVarString( "atm_Name", Field, X );

		SetGVarInt( "atm_Tax", 					cache_get_field_content_int( i, "atmTax", g_Handle ), X );
		SetGVarFloat( "atm_X", 					cache_get_field_content_float( i, "atmPosX", g_Handle ), X );
		SetGVarFloat( "atm_Y", 					cache_get_field_content_float( i, "atmPosY", g_Handle ), X );
		SetGVarFloat( "atm_Z", 					cache_get_field_content_float( i, "atmPosZ", g_Handle ), X );

		SetGVarFloat( "atm_RX", 				cache_get_field_content_float( i, "atmRotX", g_Handle ), X );
		SetGVarFloat( "atm_RY", 				cache_get_field_content_float( i, "atmRotY", g_Handle ), X );
		SetGVarFloat( "atm_RZ", 				cache_get_field_content_float( i, "atmRotZ", g_Handle ), X );

		//SetGVarInt( "ATMMapIcon", CreateDynamicMapIcon( GetGVarFloat( "atm_X", X ), GetGVarFloat( "atm_Y", X ), GetGVarFloat( "atm_Z", X ), 37, 37 ), X );
		SetGVarInt( "ATMObject", CreateDynamicObject( 19324, GetGVarFloat( "atm_X", X ), GetGVarFloat( "atm_Y", X ), GetGVarFloat( "atm_Z", X ) + 0.1, GetGVarFloat( "atm_RX", X ), GetGVarFloat( "atm_RY", X ), GetGVarFloat( "atm_RZ", X ), -1, -1, -1, 500.0), X );

		gsString[ 0 ] = EOS;
		format( gsString, sizeof gsString, "%s ATM (Tax: %d%%)\n\nWithdraw your cash here!\nPress ~k~~F to use this ATM", GetGVarStringEx( "atm_Name", X ), GetGVarInt( "atm_Tax", X ) );
		SetGVarInt( "ATM3DText", _:CreateDynamic3DTextLabel( gsString, COLOR_YELLOW_3D, GetGVarFloat( "atm_X", X ), GetGVarFloat( "atm_Y", X ), GetGVarFloat( "atm_Z", X )+2.0, 7.0), X );
	}
	printf( "Successfully Loaded [ %d ] ATMs", Rows );
	return true;
}
SQL_Function ShowLocationsDialog( playerid )
{
	new X, Rows, Fields, Field[ 128 ];
	cache_get_data( Rows, Fields, g_Handle );

	gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, "Location\tGoods\tDistance\n" );
	for( new i = 0; i < Rows; i++ )
	{
		X = cache_get_field_content_int( i, "locKey", g_Handle );

		cache_get_field_content( i, "locText", Field, g_Handle, 128 );
		SetPVarStringEx( playerid, "loc_Text", Field, X );

		SetPVarIntEx( playerid, "loc_Trailer", 		cache_get_field_content_int( i, "locTrailer", g_Handle ), X );
		SetPVarIntEx( playerid, "loc_JobID", 		cache_get_field_content_int( i, "locJobID", g_Handle ), X );
		SetPVarFloatEx( playerid, "loc_PosX", 		cache_get_field_content_float( i, "locPosX", g_Handle ), X );
		SetPVarFloatEx( playerid, "loc_PosY", 		cache_get_field_content_float( i, "locPosY", g_Handle ), X );
		SetPVarFloatEx( playerid, "loc_PosZ", 		cache_get_field_content_float( i, "locPosZ", g_Handle ), X );

		SetPVarStringEx( playerid, "loc_Name", 		GetPlayer3DZone2( GetPVarFloatEx( playerid, "loc_PosX", X ), GetPVarFloatEx( playerid, "loc_PosY", X ), GetPVarFloatEx( playerid, "loc_PosZ", X ) ), X );
		SetPVarFloatEx( playerid, "loc_Distance",   GetPlayerDistanceFromPoint( playerid, GetPVarFloatEx( playerid, "loc_PosX", X ), GetPVarFloatEx( playerid, "loc_PosY", X ), GetPVarFloatEx( playerid, "loc_PosZ", X ) )/100, X );

		format( gsString, sizeof gsString, "%s"COL_W"%s\t"COL_W"%s\t"COL_R"%0.2f "COL_W"KM\n", gsString, GetPVarStringExx( playerid, "loc_Name", X ), GetPVarStringExx( playerid, "loc_Text", X ), GetPVarFloatEx( playerid, "loc_Distance", X ) );
	}
	#if defined DEBUG_SERVER
		printf( "Successfully Loaded [ %d ] Job Locations", Rows );
	#endif
	ShowPlayerDialog( playerid, DIALOG_SELECT_TRUCKER_LOCATION, DIALOG_STYLE_TABLIST_HEADERS, "Mission Locations", gsString, "Select", "" );
	return true;
}
SQL_Function ShowFriendsDialog( playerid )
{
	new Rows, Field[ 32 ], Fields;
	cache_get_data( Rows, Fields, g_Handle );

	gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, "{f0b23b}[+] Add Friend\n" );
	for( new i = 0; i < Rows; i++ )
	{
		cache_get_field_content( i, "friendsFriendName", Field, g_Handle, 32 );
		SetPVarStringEx( playerid, "friends_Name", Field, i );
		#if defined DEBUG_SERVER
			printf( "[DEBUG FRIENDS] Name: %s[id:%i]", Field, i );
		#endif
		SetPVarInt( playerid, "count_friends", Rows );
		SetPVarIntEx( playerid, "friends_Key", cache_get_field_content_int( i, "friendsFriendID", g_Handle ), i );
		new pID = GetPlayerIDFromKey( GetPVarIntEx(playerid, "friends_Key", i));

        status_string[ 0 ] = EOS;
		if(pID != INVALID_PLAYER_ID)
			status_string = "{228b22}[online]{ffffff}";
		else 
			status_string = "{dc143c}[offline]";

		format( gsString, sizeof gsString, "%s%s %s\n", gsString, status_string, GetPVarStringExx( playerid, "friends_Name", i ) );
	}
	ShowPlayerDialog( playerid, DIALOG_FRIENDS, DIALOG_STYLE_LIST, "Friends", gsString, "Select", "Exit" );
	return true;
}
SQL_Function ShowFactionsDialog( playerid )
{
	new X, Rows, Fields;
	cache_get_data( Rows, Fields, g_Handle );

	gsBigString[ 0 ] = EOS;
	for( new i = 0; i < Rows; i++ )
	{
		X = cache_get_field_content_int( i, "factionKey", g_Handle );
		SetGVarInt( "faction_Applications", 		cache_get_field_content_int( i, "factionApplications", g_Handle ), X );
		SetGVarInt( "faction_Members", 				cache_get_field_content_int( i, "factionMembers", g_Handle ), X );
		SetGVarInt( "faction_Slots", 				cache_get_field_content_int( i, "factionSlots", g_Handle ), X );
	}
	gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, "Nume Factiune\tMembri\tSloturi\tAplicatii\n" );
	foreach( new f : ServerFactions )
		format( gsString, sizeof gsString, "%s%s\t%d\t%d\t%s"COL_W"\n", 
			gsString, GetGVarStringEx( "faction_Name", f ), GetGVarInt( "faction_Members", f ), GetGVarInt( "faction_Slots", f ), ( GetGVarInt( "faction_Applications", f ) ) ? ("{7CFC00}Deschise") : ("{ec2913}Inchise" ) );

	ShowPlayerDialog( playerid, DIALOG_FACTIONS, DIALOG_STYLE_TABLIST_HEADERS, "Server: Factions", gsString, "FindHQ", "Cancel" );
	return true;
}
SQL_Function ShowUpdatesDialog( playerid )
{
	new Rows, Fields, updatesField[ 4096 ];
	cache_get_data( Rows, Fields, g_Handle );

	for( new i = 0; i < Rows; i++ )
		cache_get_field_content( i, "cfgUpdates", updatesField, g_Handle, 4096 ), strtr( updatesField, "<br>", "\n" );

	gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, "%s", updatesField );
	ShowPlayerDialog( playerid, DIALOG_NULL, DIALOG_STYLE_MSGBOX, "Server: Last Update", gsString, "Close", "" );
	return true;
}
SQL_Function ShowDealerDialog( playerid, type )
{
	new X, Rows, Fields;
	cache_get_data( Rows, Fields, g_Handle );

	gsBigString[ 0 ] = EOS;
	format( gsBigString, sizeof gsBigString, "Model\tPrice\tStock\tTop Speed\n" );
	for( new i = 0; i < Rows; i++ )
	{
		X = cache_get_field_content_int( i, "Key", g_Handle );

		SetPVarIntEx( playerid, "ds_carID", 				cache_get_field_content_int( i, "carID", g_Handle ), X );
		SetPVarIntEx( playerid, "ds_stock", 				cache_get_field_content_int( i, "stock", g_Handle ), X );
		SetPVarIntEx( playerid, "ds_price", 				cache_get_field_content_int( i, "price", g_Handle ), X );
		SetPVarIntEx( playerid, "ds_pprice", 				cache_get_field_content_int( i, "premiumprice", g_Handle ), X );
		SetPVarIntEx( playerid, "ds_speed",                 cache_get_field_content_int( i, "topspeed", g_Handle ), X );

		if( type == 5 ) // Premium
			format( gsBigString, 4096, "%s%s\t%d PP\t%d\t%d km/h\n", gsBigString, 
				VehicleName( GetPVarIntEx( playerid, "ds_carID", X ) ), GetPVarIntEx( playerid, "ds_pprice", X ), GetPVarIntEx( playerid, "ds_stock", X ), GetPVarIntEx(playerid, "ds_speed", X) );
		else format( gsBigString, 4096, "%s%s\t$%s\t%d\t%d km/h\n", gsBigString, 
				VehicleName( GetPVarIntEx( playerid, "ds_carID", X ) ), FormatNumber( GetPVarIntEx( playerid, "ds_price", X ) ), GetPVarIntEx( playerid, "ds_stock", X ), GetPVarIntEx(playerid, "ds_speed", X) );
	}
	gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, "Dealership: %s", GetDealerType( type ) );
	ShowPlayerDialog( playerid, DIALOG_DEALER_BUY, DIALOG_STYLE_TABLIST_HEADERS, gsString, gsBigString, "Buy", "Back" );
	return true;
}
CMD:gotointerior( playerid, params[] )
{
	AHCheck( playerid, 1, 4 );
	CheckPlayerAction( playerid );

	new interior;
	if( sscanf( params, "d", interior ) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/gotointerior [ interiorid (see list in /interiorlist) ]" );

	if(interior >= 146 || interior < 0)
		return SendClientMessage(playerid, COLOR_GREY, "Use /interiorlist to see all interiors available.");

	SendClientMessagef(playerid, COLOR_WHITE, "Teleported to interior %s [id in /interiorlist: %d] - interior id: %d.", IntName[interior], interior, IntArray2[interior]);
	SetPlayerPos(playerid, IntArray[interior][0], IntArray[interior][1], IntArray[interior][2]);
	SetPlayerFacingAngle(playerid, IntArray[interior][3]);
	SetPlayerInterior(playerid, IntArray2[interior][0]);

	return 1;
}

CMD:interiorlist( playerid, params[] )
{
	AHCheck( playerid, 1, 4 );
	gsBigString[ 0 ] = EOS;
	for(new i; i < 146; i++)
	{
		format(gsBigString, sizeof(gsBigString), "%s#%d %s\n", gsBigString, i, IntName[i]);
	}
	ShowPlayerDialog(playerid, DIALOG_INTERIORS, DIALOG_STYLE_LIST, "SERVER: Interiors list", gsBigString, "Select", "");

	return 1;
}
CMD:startserverbids( playerid, params[] )
{
	AHCheck( playerid, 6, 5 );
	SendClientMessage( playerid, COLOR_BID, "[BID] Ai pornit cu success licitatiile!" );
	StartServerBids();
	return true;
}
CMD:checkbids( playerid, params[] )
{
	AHCheck( playerid, 6, 5 );
	CheckServerBIDDays();
	return SendClientMessage( playerid, COLOR_BID, "[BID] Ai verificat proprietatile!" );
}
CMD:bid( playerid, params[] )
{
	if( serverVariables[ currentBID ] == -1 )
		return SendClientMessage( playerid, COLOR_GREY, "There is no active Bid right now!" );

	if( playerVariables[ playerid ][ pLevel ] < 5 )
		return SendClientMessage( playerid, COLOR_GREY, "Your level should be 5 or higher!" );

	if( serverVariables[ currentBIDPlayer ] == playerid )
		return SendClientMessage( playerid, COLOR_GREY, "You are the last player who bid, please wait for a higher offer!" );

	new bidValue, bidID = serverVariables[ currentBID ];
	switch( GetGVarInt( "bid_Type", bidID ) )
	{
		case 0:
		{
			if( playerVariables[ playerid ][ pHouse ] )
				return SendClientMessage( playerid, COLOR_GREY, "Your already own a house!" );

			if( GetGVarInt( "house_Level", GetGVarInt( "bid_Value", bidID ) ) > playerVariables[ playerid ][ pLevel ] )
				return SendClientMessagef( playerid, COLOR_GREY, "You need level %d to buy this house!", GetGVarInt( "house_Level", GetGVarInt( "bid_Value", bidID ) ) );
		}
		case 1:
		{
			if( playerVariables[ playerid ][ pBusiness ] )
				return SendClientMessage( playerid, COLOR_GREY, "Your already own a business!" );

			if( GetGVarInt( "bus_Level", GetGVarInt( "bid_Value", bidID ) ) > playerVariables[ playerid ][ pLevel ] )
				return SendClientMessagef( playerid, COLOR_GREY, "You need level %d to buy this business!", GetGVarInt( "bus_Level", GetGVarInt( "bid_Value", bidID ) ) );	
		}
	}
	if( sscanf( params, "d", bidValue ) )
		return SendClientMessage( playerid, COLOR_GREY, SYNTAX_MESSAGE"/bid <bidValue> [Ex. /bid 1 = 1k = $1.000]" );

	bidValue = bidValue * 1000;
	if( bidValue > playerVariables[ playerid ][ pMoney ] )
		return SendClientMessagef( playerid, COLOR_GREY, "You don't have $%s in your account!", FormatNumber( bidValue ) );

	if( bidValue <= GetGVarInt( "bid_Money", bidID ) )
		return SendClientMessagef( playerid, COLOR_GREY, "You have to bid more than $%s", FormatNumber( GetGVarInt("bid_Money", bidID ) ) );

	if( bidValue > GetGVarInt( "bid_Money", bidID ) + 100000 )
		return SendClientMessagef( playerid, COLOR_GREY, "You can only bid max $%s", FormatNumber( GetGVarInt("bid_Money", bidID ) + 100000 ) );

	// < Give back player's money )
	if( IsPlayerConnected( serverVariables[ currentBIDPlayer ] ) )
		playerVariables[ serverVariables[ currentBIDPlayer ] ][ pMoney ] += GetGVarInt( "bid_Money", bidID ), SendClientMessage( playerid, COLOR_LIGHT_BID, "> Ai primit banii inapoi, cineva a licitat mai mult decat tine!" );

	// < Set the value of the variables )
	serverVariables[ currentBIDPlayer ] = playerid;
	serverVariables[ currentBIDTimer ] = 130;
	playerVariables[ playerid ][ pMoney ] -= bidValue;
	SetGVarInt( "bid_Money", bidValue, bidID );

	// < Announce the server )
	SendClientMessagef( playerid, COLOR_BID, "> Ai licitat suma de $%s pentru %s cu ID-ul %d", FormatNumber( bidValue ), GetBidTypeString( bidID ), GetGVarInt( "bid_Value", bidID ) );
	Iter_Remove(Player, playerid);
	foreach(new i : Player)
		SendClientMessagef( i, COLOR_BID, "> %s a licitat suma de $%s pentru %s cu ID-ul %d", playerVariables[ playerid ][ pNormalName ], FormatNumber( bidValue ), GetBidTypeString( bidID ), GetGVarInt( "bid_Value", bidID ) );
	
	Iter_Add(Player, playerid);
	return true;
}	
#if defined HEIST_SYSTEM
function StartHeist(i)
{
	if(Iter_Contains(Heists[playerVariables[i][pHeistOwner]], i))
	{
		SetTimedMessage(i, COLOR_LIGHTRED, "Mike Toreno{FFFFFF}: Totul este stabilit, plecati si faceti-va treaba.", 500);
		SetTimedMessage(i, COLOR_LIGHTRED, "Mike Toreno{FFFFFF}: O sa va mai contactez in timpul misiunii si o sa va informez despre ceea ce se intampla.", 1000);
		SetPlayerCheckpoint( i, GetGVarFloat( "bus_EnterX", playerVariables[playerVariables[i][pHeistOwner]][pHeistBizz] ), GetGVarFloat( "bus_EnterY", playerVariables[playerVariables[i][pHeistOwner]][pHeistBizz] ), GetGVarFloat( "bus_EnterZ", playerVariables[playerVariables[i][pHeistOwner]][pHeistBizz] ), 5.0 );
		SetCameraBehindPlayer(i);
		SetPlayerPos(i, 1461.0526+frandom(5.0), -1843.9872, 13.5469);
		SetPlayerFacingAngle(i, 263.9082);
		SetPlayerInterior(i, 0);
		TogglePlayerControllable(i, 1);
		SetTimedMessage( i, COLOR_LIGHTRED, "Mike Toreno{FFFFFF}: V-am facut rost de o masina, liderul vostru o s-o conduca !", 500);
		SetTimedMessage(i, COLOR_ULTRARED, "Atentie: {FFFFFF}Urcati-va toti in acelasi vehicul sau o sa fiti prinsi ({FF0000}fail automat{FFFFFF}) !", 1000);
		if(i == playerVariables[i][pHeistOwner])
		{
			playerVariables[ i ][ pHeistVehicle ] = CreateVehicle( 560, 1460.4343, -1841.0543, 13.2501, 269.8381, -1, -1, -1 ); // Sultan
			serverVariables[ VehicleGas ][ playerVariables[ i ][ pHeistVehicle ] ] = 500.0;
			serverVariables[ VehicleOwnerHeist ][ playerVariables[ i ][ pHeistVehicle ] ] = i;
			SetGVarInt( "veh_Faction", 0, playerVariables[ i ][ pHeistVehicle ] );
			new g_engine, g_lights, g_alarm, g_doors, g_bonnet, g_boot, g_objective;
			GetVehicleParamsEx( playerVariables[ i ][ pHeistVehicle ], g_engine, g_lights, g_alarm, g_doors, g_bonnet, g_boot, g_objective );
			SetVehicleParamsEx( playerVariables[ i ][ pHeistVehicle ], g_engine, g_lights, g_alarm, VEHICLE_PARAMS_ON, g_bonnet, g_boot, g_objective );
			AddVehicleComponent( playerVariables[ i ][ pHeistVehicle ], 1010 );
			AddVehicleComponent( playerVariables[ i ][ pHeistVehicle ], 1080 );
		}
		SetVehicleParamsForPlayer(playerVariables[ playerVariables[i][pHeistOwner] ][ pHeistVehicle ], i, 0, 1);
	}
	return 1;
}

function SetTimedMessage(playerid, color, string[], time)
{
	SetTimerEx("SetTimedMessage2", time, 0, "iis[256]", playerid, color, string);
	return 1;
}

function SetTimedMessage2(playerid, color, string[])
{
	SendClientMessage(playerid, color, string);
	return 1;
}

function SetView(playerid)
{
	TogglePlayerControllable(playerid, 0);
	SetPlayerPos(playerid, 366.1770, 161.8883, 1025.7891);
	SetPlayerInterior(playerid, 3);
	ClearPlayerChat(playerid);
	ApplyActorAnimation(Mike2, "PED", "IDLE_CHAT", 4.0, 1, 0, 0, 0, 0 );
	SetTimedMessage(playerid, COLOR_LIGHTRED, "Mike Toreno{FFFFFF}: Baieti, am acces la niste informatii confidentiale despre anumite cladiri din San Andreas.", 500);
	SetTimedMessage(playerid, COLOR_LIGHTRED, "Mike Toreno{FFFFFF}: V-am chemat aici sa va propun un jaf. Aceasta este harta magazinului de bijuterii din Los Santos.", 2000);
	SetTimedMessage(playerid, COLOR_LIGHTRED, "Mike Toreno{FFFFFF}: Sursele mele m-au anuntat ca au primit marfa noua.", 3500);
	SetTimerEx("PrepareHeist", 7000, 0, "i", playerid);
	InterpolateCameraPos(playerid, 359.626159, 157.917495, 1028.399658, 359.626159, 157.917495, 1028.399658, 1500);
	InterpolateCameraLookAt(playerid, 363.280181, 155.869537, 1025.669433, 363.280181, 155.869537, 1025.669433, 1500);
	return 1;
}

function PrepareHeist(i)
{
	SetTimedMessage(i, COLOR_LIGHTRED, "Mike Toreno{FFFFFF}: Odata ce intrati in magazin, doi dintre voi veti imobiliza angajatii si civilii.", 500);
	SetTimedMessage(i, COLOR_LIGHTRED, "Mike Toreno{FFFFFF}: Nu va apropiati de ce vedeti in vitrine.", 2000);
	SetTimedMessage(i, COLOR_LIGHTRED, "Mike Toreno{FFFFFF}: Adevarata valoare se afla in camera din spate, unde sunt depozitate noile bijuterii.", 3500);
	SetTimerEx("StartHeist", 13000, 0, "i", i);
	return 1;
}

function AnimationToMike()
{
	ApplyActorAnimation(Mike, "SMOKING", "M_smklean_loop", 4.0, 1, 0, 0, 0, 0 );
	ApplyActorAnimation(Mike3, "SMOKING", "M_smklean_loop", 4.0, 1, 0, 0, 0, 0 );
	return 1;
}
#endif

SQL_Function CheckBID_House()
{
	new Rows, Fields;
	cache_get_data( Rows, Fields, g_Handle );

	// < Select the bid from the database )
	if( Rows )
	{
		for( new i = 0; i < Rows; i++ )
		{
			new houseID = cache_get_field_content_int( i, "playerHouse", g_Handle );
			printf( "[BID-SYSTEM]: House ID %d will be auctioned!", houseID );

			gsQuery[ 0 ] = EOS;
			mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerHouse` = 0 WHERE `playerHouse` = %d", houseID );
			mysql_tquery( g_Handle, gsQuery, "", "" );

			gsQuery[ 0 ] = EOS;
			mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_houses` SET `houseOwner` = 'AdmBot', `houseOwnerKey` = 1 WHERE `houseKey` = %d", houseID );
			mysql_tquery( g_Handle, gsQuery, "", "" );

			SetGVarInt( "house_OwnerKey", 1, houseID );
			SetGVarString( "house_Owner", "AdmBot", houseID );
			DestroyDynamicPickup( GetGVarInt( "HousePickup", houseID ) );
		
			DeleteGVar( "HousePickup", houseID );
			SetGVarInt( "HousePickup", CreateDynamicPickup( 19524, 23, GetGVarFloat( "house_EnterX", houseID ), GetGVarFloat( "house_EnterY", houseID ), GetGVarFloat( "house_EnterZ", houseID ) ), houseID );
            pickupInfo[ GetGVarInt( "HousePickup", houseID ) ][house_pickups] = houseID;


			UpdateHouseText( houseID, 2 );
		}
	}
}
SQL_Function CheckBID_Business()
{
	new Rows, Fields;
	cache_get_data( Rows, Fields, g_Handle );

	// < Select the bid from the database )
	if( Rows )
	{
		for( new i = 0; i < Rows; i++ )
		{
			new bizID = cache_get_field_content_int( i, "playerBusiness", g_Handle );
			printf( "[BID-SYSTEM]: Business ID %d will be auctioned!", bizID );

			if(bizID != 56)
			{	

				gsQuery[ 0 ] = EOS;
				mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_accounts` SET `playerBusiness` = 0 WHERE `playerBusiness` = %d", bizID );
				mysql_tquery( g_Handle, gsQuery, "", "" );

				gsQuery[ 0 ] = EOS;
				mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_business` SET `busOwner` = 'AdmBot', `bus_OwnerKey` = 1 WHERE `busKey` = %d", bizID );
				mysql_tquery( g_Handle, gsQuery, "", "" );

				SetGVarInt( "bus_OwnerKey", 1, bizID );
				SetGVarString( "bus_Owner", "AdmBot", bizID );
				UpdateBusinessText( bizID );
			}	
		}
	}
}
SQL_Function LoadServerBids()
{
	new X, Rows, Fields;
	cache_get_data( Rows, Fields, g_Handle );

	// < Reset bid variables )
	serverVariables[ currentBID ] = -1;

	// < Select the bid from the database )
	if( Rows )
	{
		serverVariables[ currentBIDTimer ] = 600; // Pana la 300 are 300 secunde - 5 minute!
		serverVariables[ currentBIDPlayer ] = INVALID_PLAYER_ID;

		for( new b = 0; b < Rows; b++ )
		{
			X = cache_get_field_content_int( b, "bidKey", g_Handle );
			serverVariables[ currentBID ] = X;

			SetGVarInt( "bid_Type", 					cache_get_field_content_int( b, "bidType", g_Handle ), X );
			SetGVarInt( "bid_Value", 					cache_get_field_content_int( b, "bidValue", g_Handle ), X );
			SetGVarInt( "bid_Status", 0, X );
			SetGVarInt( "bid_Money", GetGVarInt( "bid_Type", X ) ? GetGVarInt( "bus_Price", GetGVarInt( "bid_Value", X ) ) : GetGVarInt( "house_Price", GetGVarInt( "bid_Value", X ) ), X );

			gsQuery[ 0 ] = EOS;
			mysql_format( g_Handle, gsQuery, sizeof gsQuery, "UPDATE `server_bids` SET `bidStatus` = 1 WHERE `bidValue` = %d", GetGVarInt( "bid_Value", X ) );
			mysql_tquery( g_Handle, gsQuery, "", "" );

			SendClientMessageToAllf( COLOR_BID, "[BID] Acum se poate licita pentru %s cu ID-ul: %d", GetBidTypeString( X ), GetGVarInt( "bid_Value", X ) );

			SendClientMessageToAll( COLOR_LIGHT_BID, "[BID] Poti folosi /bid pentru a licita. Odata ce ai licitat, iti vor fi retrasi banii din cont." );
			SendClientMessageToAll( COLOR_LIGHT_BID, "[BID] Daca un alt jucator liciteaza mai mult, iti vei primi banii licitati inapoi." );	
		}
	}
}
Help_String()
{
	gsString[ 0 ] = EOS;
	strcat( gsString, "General Commands\n" );
	strcat( gsString, "Faction Commands\n" );
	strcat( gsString, "Vehicle Commands\n" );
	strcat( gsString, "Anim Commands\n" );
	strcat( gsString, "Bank Commands\n" );
	strcat( gsString, "Rob System Commands\n" );
	strcat( gsString, "Chat Commands\n" );
	strcat( gsString, "Jobs Commands\n" );
	strcat( gsString, "House Commands\n" );
	strcat( gsString, "Business Commands\n" );
	strcat( gsString, "Helper Commands\n" );
	strcat( gsString, "Hotel Commands" );
	return gsString;
}
HelperColor_String()
{
	gsString[ 0 ] = EOS;
	strcat( gsString, "{00ff00}Green\n" );
	strcat( gsString, "{228B22}Light Green\n" );
	strcat( gsString, "{006400}Dark Green" );
	return gsString;
}
AdminColor_String()
{
	gsString[ 0 ] = EOS;
	strcat( gsString, "{FF0000}Red\n" );
	strcat( gsString, "{8B0000}Dark Red\n" );
	strcat( gsString, "{00008B}Dark Blue" );
	return gsString;
}
Help_Jobs()
{
	gsString[ 0 ] = EOS;
	strcat( gsString, "/getjob - Angajeaza-te la un job\n" );
	strcat( gsString, "/quitjob - Renunta la job-ul actual\n" );
	strcat( gsString, "/work - Incepe sa lucrezi\n" );
	strcat( gsString, "/skills - Vizualizeaza skill jobs" );
	return gsString;
}
Help_Houses()
{
	gsString[ 0 ] = EOS;
	strcat( gsString, "/buyhouse - Cumperi o locuinta\n" );
	strcat( gsString, "/sellhousetostate - Vinzi locuinta la stat\n" );
	strcat( gsString, "/sellhouseto - Vinzi locuinta unui jucator de pe server\n" );
	strcat( gsString, "/canceltrade - Anulezi trade-urile active\n" );
	strcat( gsString, "/home - Arata locatia casei\n" );
	strcat( gsString, "/setrent - Setezi pretul de inchiriere\n" );
	strcat( gsString, "/evict - Dai un jucator afara\n" );
	strcat( gsString, "/lockhouse - Inchizi sau deschizi casa\n" );
	strcat( gsString, "/hbalance - Verifica suma de bani din seiful casei\n" );
	strcat( gsString, "/hdeposit - Depozitezi bani in seiful casei\n" );
	strcat( gsString, "/hwithdraw - Scoti bani din seiful casei \n" );
	strcat( gsString, "/tenants - Afiseaza lista chiriasilor" );
	return gsString;
}
Help_Business()
{
	gsString[ 0 ] = EOS;
	strcat( gsString, "/buybizz - Cumperi un business\n" );
	strcat( gsString, "/sellbizztostate - Vinzi business-ul la stat\n" );
	strcat( gsString, "/sellbizzto - Vinzi business-ul unui jucator de pe server\n" );
	strcat( gsString, "/canceltrade - Anulezi trade-urile active\n" );
	strcat( gsString, "/bizz - Arata locatia business-ului\n" );
	strcat( gsString, "/lockbizz - Inchizi sau deschizi business-ul\n" );
	strcat( gsString, "/bizzfee - Setezi pretul de intrare \n" );
	//strcat( gsString, "/bizzname - Schimbi numele business-ului\n" );
	strcat( gsString, "/bizzbalance - Afiseaza banii business-ului\n" );
	strcat( gsString, "/bwithdraw - Scoti bani din bugetul business-ului" );
	return gsString;
}
Help_Vehicles()
{
	gsString[ 0 ] = EOS;
	strcat( gsString, "/lock (N) - Inchizi masina personala\n" );
	strcat( gsString, "/cars | /v - Afiseaza lista masinilor personale\n" );
	strcat( gsString, "/park - Setezi loc de parcare\n" );
	strcat( gsString, "/carcolor - Setezi culorile masinii\n" );
	strcat( gsString, "/carplate - Schimba numar de inmatriculare\n" );
	strcat( gsString, "/swapcolors - Schimba culorile intre ele\n" );
	strcat( gsString, "/removetuning - Indeparteaza tuningul activ pe vehicul\n" );
	strcat( gsString, "/buycar - Cumpara un vehicul de la Dealership\n" );
	strcat( gsString, "/sellcar - Vinzi vehiculul la Dealership\n" );
	strcat( gsString, "/sellcarto - Vinzi masina unui player\n\n" );
	strcat( gsString, "/vipname - Schimba textul VIP de pe masina\n" );
	strcat( gsString, "/vipwheels - Schimba rotile masinii VIP\n" );
	strcat( gsString, "/vipneon - Adaugi neon masinii VIP\n" );
	return gsString;
}
Help_Bank()
{
	gsString[ 0 ] = EOS;
	strcat( gsString, "/deposit - Depozitezi bani in banca\n" );
	strcat( gsString, "/withdraw - Scoti bani din banca\n" );
	strcat( gsString, "/transfer - Dai bani unui player\n" );
	strcat( gsString, "/balance - Afiseaza banii din cont" );
	return gsString;
}
Help_Chat()
{
	gsString[ 0 ] = EOS;
	strcat( gsString, "/n - Chatul de ajutor\n" );
	strcat( gsString, "/w - Vorbesti cu un player de langa tine in mod privat\n" );
	strcat( gsString, "/cw - Vorbesti cu playerii aflati in masina\n" );
	strcat( gsString, "/me - Afiseaza un text scris de tine\n" );
	strcat( gsString, "/do - Afiseaza o actiune facuta de tine\n" );
	strcat( gsString, "/wt - Vorbesti pe frecventa walkie talkie\n" );
	strcat( gsString, "/sms  - Vorbesti in privat cu un player\n" );
	strcat( gsString, "/call - Suni un player de pe server" );
	return gsString;
}
Help_General()
{
	gsString[ 0 ] = EOS;
	strcat( gsString, "/stats - Afiseaza statisticile jucatorului\n" );
	strcat( gsString, "/changepass - Schimbi parola contului\n" );
	strcat( gsString, "/spawnchange - Setezi locatia de spawn\n" );
	strcat( gsString, "/id [id] - Afiseaza date despre un jucator\n" );
	strcat( gsString, "/service [taxi/medic] - Solicita un medic sau un taxi\n" );
	strcat( gsString, "/instructors - Afiseaza lista cu instructori online\n" );
	strcat( gsString, "/reporters - Afiseaza lista cu reporteri online\n" );
	strcat( gsString, "/mechanics - Afiseaza lista cu mecanici online\n" );
	strcat( gsString, "/helpers - Afiseaza lista helperilor online\n" );
	strcat( gsString, "/admins - Afiseaza lista adminilor online\n" );
	strcat( gsString, "/pay - Dai o suma de bani unui jucator\n" );
	strcat( gsString, "/gps - Afiseaza locatiile serverului\n" );
	strcat( gsString, "/rent car - Poti folosi aceasta comanda la un business de tip Rent Car\n" );
	strcat( gsString, "/rent room - Inchirezi o casa\n" );
	strcat( gsString, "/unrent room - Anulezi chiria casei\n" );
	strcat( gsString, "/eject - Scoti un player din masina\n" );
	strcat( gsString, "/gotoevent - Mergi la un eveniment organizat\n" );
	strcat( gsString, "/killcp - Anulezi un checkpoint curent\n" );
	strcat( gsString, "/hud - Activeaza HUDs pentru Health/Armour/FPS\n" );
	strcat( gsString, "/togphone - pornesti/opresti apelurile\n" );
	strcat( gsString, "/rent apartment - inchiriezi un apartament\n " );
	strcat( gsString, "/unrent app - Anulezi chiria apartamentului ");
	return gsString;
}
Help_RobSystem()
{
	gsString[ 0 ] = EOS;
	strcat( gsString, "[Rob simplu - Detalii] \n" );
	strcat( gsString, "/rob - Incepi sa jefuiesti business-ul\n" );
	strcat( gsString, "Comanda /rob poate fi folosita in orice business de pe server\n" );
	strcat( gsString, "Levelul necesar pentru a jefui o afacere este 3\n" );
	strcat( gsString, "Poti castiga o suma intre $8.000 si $15.000  pe fiecare checkpoint\n\n" );

	strcat( gsString, "[Rob dinamic (LV) - Detalii]\n" );
	strcat( gsString, "/startrob - Incepi sa jefuiesti banca din 'Las Venturas'\n" );
	strcat( gsString, "Comanda /startrob poate fi folosita doar la banca din 'Las Venturas'\n" );
	strcat( gsString, "Pentru a ajunge la banca foloseste /gps si alege 'Las Venturas Bank'\n" );
	strcat( gsString, "Ai nevoie de un pistol Deagle in mana si minim level 5\n" );
	strcat( gsString, "Poti castiga o suma intre $30.000 si $50.000 la sfarsitul rob-ului" );
	return gsString;
}
Help_Police()
{
	gsString[ 0 ] = EOS;
	strcat( gsString, "/r - Radio Chat\n" );
	strcat( gsString, "/d - Departament Chat\n" );
	strcat( gsString, "/so [playerID] - Somezi un player\n" );
	strcat( gsString, "/su [playerID] [lvl] [motiv] - Acordare wanted suspectului\n" );
	strcat( gsString, "/mdc [playerID] - Verifici daca un player are wanted\n" );
	strcat( gsString, "/wanted  - Afiseaza lista cu suspecti\n" );
	strcat( gsString, "/duty - Pentru a primi arme (spray, mp5, m4 si deagle)[doar in HQ]\n" );
	strcat( gsString, "/arrest [playerID] - Pentru a aresta un suspect\n" );
	strcat( gsString, "/free [playerID] - Ofera free unui detinut pentru o suma de bani\n" );
	strcat( gsString, "/cuff - Pentru a lega cu catuse un suspect\n" );
	strcat( gsString, "/uncuff - Pentru a dezlega de catuse un suspect\n" );
	strcat( gsString, "/ticket [playerID] [suma] - Pentru a acorda o amenda\n" );
	strcat( gsString, "/confiscate [playerID] [item] - Pentru a confisa diverse playerilor\n" );
	strcat( gsString, "/find - Pentru a cauta suspectul\n" );
	strcat( gsString, "/taser - Pistol ce 'ingheata' playerii timp de 5 secunde\n" );
	strcat( gsString, "/checkseatbelt - Verifica daca jucatorul are centura pusa!\n" );
	strcat( gsString, "/frisk - Perchezitioneaza un jucator: droguri, arme!\n" );
	#if defined RADAR
	strcat( gsString, "/radar(off) - Plaseaza un radar pentru a intercepta viteza!\n" );
	#endif

	strcat( gsString, "/backup - Cerere ajutoare\n" );
	strcat( gsString, "/acceptbackup [playerID] - Acceptare cerere ajutor\n" );
	strcat( gsString, "/cancelbackup - Anulare cerere ajutor\n" );
	strcat( gsString, "/showmotd - Afisare M.O.T.D. factiune\n" );
	strcat( gsString, "/fdeposit - Depozitare in seiful factiunii\n\n" );

	strcat( gsString, "/invite - Inviti un membru in factiune. \n" );
	strcat( gsString, "/members - Administreaza factiunea\n" );
	strcat( gsString, "/fmotd - Schimbi textul MOTD-ului. \n" );	
	strcat( gsString, "/fvr - Respawnezi masinile factiunii\n" );
	strcat( gsString, "/fsetrankname - Schimbi numele rankurilor \n" );
	strcat( gsString, "/fwithdraw - Scoti bunuri din seif \n\n" );

	strcat( gsString, "Legenda: Member Commands | Leader Commands" );
	return gsString;
}
Help_Taxi()
{
	gsString[ 0 ] = EOS;
	strcat( gsString, "/taxi accept [playerID] - Accepti solicitarea unui player\n" );
	strcat( gsString, "/taxi cancel - Anulezi solicitarea\n" );
	strcat( gsString, "/fare [suma de bani] - Te pui duty ca Taximetrist\n" );
	strcat( gsString, "/showmotd - Afisare M.O.T.D. factiune\n" );
	strcat( gsString, "/fdeposit - Depozitare in seiful factiunii\n\n" );

	strcat( gsString, "/invite - Inviti un membru in factiune. \n" );
	strcat( gsString, "/members - Administreaza factiunea\n" );
	strcat( gsString, "/fmotd - Schimbi textul MOTD-ului. \n" );	
	strcat( gsString, "/fvr - Respawnezi masinile factiunii\n" );
	strcat( gsString, "/fsetrankname - Schimbi numele rankurilor \n" );
	strcat( gsString, "/fwithdraw - Scoti bunuri din seif \n\n" );

	strcat( gsString, "Legenda: Member Commands | Leader Commands" );
	return gsString;
}
Help_Paramedic()
{
	gsString[ 0 ] = EOS;
	strcat( gsString, "/heal [playerID] - Ofera heal unui jucador (Doar in ambulanta) \n" );
	strcat( gsString, "/medic accept [playerID] - Accepti solicitarea unui player\n" );
	strcat( gsString, "/medic cancel - Anulezi solicitarea\n" );
	strcat( gsString, "/showmotd - Afisare M.O.T.D. factiune\n" );
	strcat( gsString, "/fdeposit - Depozitare in seiful factiunii\n\n" );

	strcat( gsString, "/invite - Inviti un membru in factiune. \n" );
	strcat( gsString, "/members - Administreaza factiunea \n" );
	strcat( gsString, "/fmotd - Schimbi textul MOTD-ului. \n" );
	
	strcat( gsString, "/fvr - Respawnezi masinile factiunii\n" );
	strcat( gsString, "/fsetrankname - Schimbi numele rankurilor \n" );
	strcat( gsString, "/fwithdraw - Scoti bunuri din seif \n\n" );

	strcat( gsString, "Legenda: Member Commands | Leader Commands" );
	return gsString;
}
Help_SchoolInstructors()
{
	gsString[ 0 ] = EOS;
	strcat( gsString, "/startlesson - Inceperea testului pentru licentele fly/boat \n" );
	strcat( gsString, "/givelicense [id] [tip] - Acordarea de licente.\n" );
	strcat( gsString, "/givegun [id] - Da playerului un pistol cu 10 gloante \n" );
	strcat( gsString, "/showmotd - Afisare M.O.T.D. factiune\n" );
	strcat( gsString, "/fdeposit - Depozitare in seiful factiunii\n\n" );

	strcat( gsString, "/invite - Inviti un membru in factiune. \n" );
	strcat( gsString, "/members - Administreaza factiunea \n" );
	strcat( gsString, "/fmotd - Schimbi textul MOTD-ului. \n" );
	
	strcat( gsString, "/fvr - Respawnezi masinile factiunii\n" );
	strcat( gsString, "/fsetrankname - Schimbi numele rankurilor \n" );
	strcat( gsString, "/fwithdraw - Scoti bunuri din seif \n\n" );

	strcat( gsString, "Legenda: Member Commands | Leader Commands" );
	return gsString;
}
Help_Mafii()
{
	gsString[ 0 ] = EOS;
	strcat( gsString, "/order [1-6] - Cumperi arme\n " );
	strcat( gsString, "/fwithdraw - Poti lua droguri din seiful factiunii\n " );
	strcat( gsString, "/attack - Ataci un turf in war\n " );
	strcat( gsString, "/turfs - Afisarea tuturor turfs-urilor\n" );
	strcat( gsString, "/top - Afisarea topului mafiilor\n " );
	strcat( gsString, "/showmotd - Afisare M.O.T.D. factiune\n" );
	strcat( gsString, "/fdeposit - Depozitare in seiful factiunii\n\n" );

	strcat( gsString, "/members - Administreaza factiunea \n" );
	strcat( gsString, "/fvr - Respawnezi masinile factiunii\n" );
	strcat( gsString, "/fsetrankname - Schimbi numele rankurilor \n" );
	strcat( gsString, "/fwithdraw - Scoti bunuri din seif \n\n" );

	strcat( gsString, "Legenda: Member Commands | Leader Commands" );
	return gsString;
}
Help_NewsReporters()
{
	gsString[ 0 ] = EOS;
	strcat( gsString, "/news - Plasarea de anunturi(Doar in masinile factiunii)\n" );
	strcat( gsString, "/live - Pornesti un live\n" );
	strcat( gsString, "/kicklive [playerid] - Dai afara un player din live\n" );
	strcat( gsString, "/endlive - Opresti live-ul\n" );
	strcat( gsString, "/camera - Primesti o camera\n" );
	strcat( gsString, "/showmotd - Afisare M.O.T.D. factiune\n" );
	strcat( gsString, "/fdeposit - Depozitare in seiful factiunii\n\n" );

	strcat( gsString, "/invite - Inviti un membru in factiune. \n" );
	strcat( gsString, "/members - Administreaza factiunea\n" );
	strcat( gsString, "/fmotd - Schimbi textul MOTD-ului. \n" );
	
	strcat( gsString, "/fvr - Respawnezi masinile factiunii\n" );
	strcat( gsString, "/fsetrankname - Schimbi numele rankurilor \n" );
	strcat( gsString, "/fwithdraw - Scoti bunuri din seif \n\n" );

	strcat( gsString, "Legenda: Member Commands | Leader Commands" );
	return gsString;
}
Help_Hitman()
{
	gsString[ 0 ] = EOS;
	strcat( gsString, "/contracts - Afisarea lista cu contracte\n" );
	strcat( gsString, "/gethit [id] - Acceptarea unui contract. \n" );
	strcat( gsString, "/cancelhit - Anularea contractului \n" );
	strcat( gsString, "/undercover - Iti ascunzi numele\n" );
	strcat( gsString, "/find [id] - Pentru a cauta playerul cu contract\n" );
	strcat( gsString, "/showmotd - Afisare M.O.T.D. factiune\n" );
	strcat( gsString, "/gdeposit - Depozitare in seiful factiunii\n\n" );

	strcat( gsString, "/invite - Inviti un membru in factiune. \n" );
	strcat( gsString, "/members - Administreaza factiunea\n" );
	strcat( gsString, "/fmotd - Schimbi textul MOTD-ului. \n" );
	
	strcat( gsString, "/fvr - Respawnezi masinile factiunii\n" );
	strcat( gsString, "/fsetrankname - Schimbi numele rankurilor \n" );
	strcat( gsString, "/fwithdraw - Scoti bunuri din seif \n\n" );

	strcat( gsString, "Legenda: Member Commands | Leader Commands" );
	return gsString;
}
Anims_String()
{
	gsString[ 0 ] = EOS;
	strcat( gsString, "/lifejump /exhaust /rcarjack1 /lcarjack1 /rcarjack2 /lcarjack2 /hoodfrisked\n" );
	strcat( gsString, "/lightcig /tapcig /bat /lean /clearanim /dancing /box /lowthrow /highthrow /leftslap\n" );
	strcat( gsString, "/handsup /fall /fallback /sup /rap /push /akick /lowbodypush /spray /headbutt /pee\n" );
	strcat( gsString, "/koface /kostomach /kiss /rollfall /lay2 /hitch /beach /medic /scratch /sit /drunk\n" );
	strcat( gsString, "/bomb /getarrested /laugh /lookout /aim /crossarms /lay /hide /vomit /wave\n" );
	strcat( gsString, "/shouting /chant /frisked /exhausted /injured /slapass /deal /dealstance /crack\n" );
	strcat( gsString, "/wank /gro /sit /chat /fucku /taichi /knife /basket /jumpwater\n" );
	strcat( gsString, "/robman /crabs /getjiggy /reload /salute /pedmove /finger" );
	return gsString;
}
Hotel_Commands()
{
	gsString[ 0 ] = EOS;
	strcat( gsString, "/edithotel /sellhotel /rent apartment /unrent app /awithdraw\n" );
	strcat( gsString, "/bizzbalance" );

	return gsString;
}
Help_Helper( playerid )
{
	gsString[ 0 ] = EOS;
	switch( playerVariables[ playerid ][ pHelper ] )
	{
		case 0: strcat( gsString, "You're not helper on this server!" );
		case 1:
		{
			strcat( gsString, "/slap /myn\n" );
			strcat( gsString, "/e /nre /nd(elete) /hduty /nmute /gotols /pm /hcolor\n" );
		}
		case 2:
		{
			strcat( gsString, "/slap /myn\n" );
			strcat( gsString, "/clearchat /setjob /goto /spec /up\n" );
			strcat( gsString, "/e /nre /nd(elete)/hduty /nmute /gotols /pm /hcolor\n" );
		}
		case 3:
		{
			strcat( gsString, "/slap /myn\n" );
			strcat( gsString, "/freeze /unfreeze\n" );
			strcat( gsString, "/clearchat /setjob /goto /spec /up\n" );
			strcat( gsString, "/e /nre /nd(elete) /hduty /nmute /gotols /pm /hcolor\n" );
		}
	}
	return gsString;
}
String_Spawn()
{
	gsString[ 0 ] = EOS;
	strcat( gsString, ""COL_W"Bun venit pe serverul "COL_LR""SERVER_NAME"\n"COL_LYE""SERVER_PANEL"\n\n" );
	strcat( gsString, ""COL_W"Daca esti un jucator nou foloseste comanda: "COL_LR"/help\n" );
	strcat( gsString, ""COL_W"Gaseste mai usor Jobs pe server folosind comanda: "COL_LR"/jobs\n" );
	strcat( gsString, ""COL_W"Factiunile actuale poti sa le gasesti in lista: "COL_LR"/factions\n" );
	strcat( gsString, ""COL_W"Pentru permisul de conducere: "COL_LR"/exam "COL_W"si va fi afisat pe GPS DMV-ul!" );
	return gsString;
}
String_VehicleInfo()
{
	gsString[ 0 ] = EOS;
	strcat( gsString, "Vehicle Info\n" );
	strcat( gsString, "Tow Vehicle\n" );
	strcat( gsString, "Find Vehicle\n" );
	strcat( gsString, "Buy Insurance\n" );
	strcat( gsString, "Clear Age and KM - {F0B301}20 premium points\n" );
	strcat( gsString, "Upgrade to VIP Vehicle - {F0B301}100 premium points\n" );
	strcat( gsString, "Unstuck Vehicle" );
	return gsString;
}
Dealer_String()
{
	gsString[ 0 ] = EOS;
	strcat( gsString, "Cheap Vehicles\n" );
	strcat( gsString, "Regular Vehicles\n" );
	strcat( gsString, "Expensive Vehicles\n" );
	strcat( gsString, "Bikes/Moto\n" );
	strcat( gsString, "Premium Vehicles" );
	return gsString;
}
Shop_String()
{
	gsString[ 0 ] = EOS;
	strcat( gsString, "Item\tPrice\n" );
	strcat( gsString, "Phone\t$150\n" );
	strcat( gsString, "Phone Book\t$100\n" );
	strcat( gsString, "Phone Credit(30)\t$50\n" );
	strcat( gsString, "Walkie Talkie\t$200" );
	return gsString;
}
Paintball_Vote_Weapon()
{
	gsString[ 0 ] = EOS;
	strcat( gsString, "Deagle, M4, Grenade & Spray\n" );
	strcat( gsString, "Baseball Bat\n" );
	strcat( gsString, "Chainsaw" );
	return gsString;
}
ClanMember_String( itemid )
{
	gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, "User: %s\n", GetGVarStringEx( "Cmembers_Name", itemid ) );
	format( gsString, sizeof gsString, "%sRank: %d\n", gsString, GetGVarInt( "Cmembers_ClanRank", itemid ) );
	format( gsString, sizeof gsString, "%sWarns: %d/3\n", gsString, GetGVarInt( "Cmembers_ClanWarns", itemid ) );
	format( gsString, sizeof gsString, "%sJoined: %s\n", gsString, GetGVarStringEx( "Cmembers_Joined", itemid ) );
	format( gsString, sizeof gsString, "%sLast login: %s\n", gsString, GetGVarStringEx( "Cmembers_LastOnline", itemid ) );
	format( gsString, sizeof gsString, "%sDays in clan: %d\n", gsString, GetGVarInt( "Cmembers_ClanDays", itemid ) );
	return gsString;
}
String_InsertEvent(playerid)
{
	gsString[0] = EOS;
	svString[0] = EOS;
	format(gsString, sizeof(gsString), "Option\tValue\n");
	format(svString, 70, "Event Date\t%d\n", GetPVarInt(playerid, "PEventDate"));
	strcat(gsString, svString);
	format(svString, 70, "Event Hour\t%d\n", GetPVarInt(playerid, "PEventHour"));
	strcat(gsString, svString);
	format(svString, 170, "Event Prize\t%s\n", GetPVarStringEx(playerid, "PEventPrize"));
	strcat(gsString, svString);
	format(svString, 70, "Event Item\t%d\n", GetPVarInt(playerid, "PEventItem"));
	strcat(gsString, svString);
	format(svString, 70, "Event Value\t%d\n", GetPVarInt(playerid, "PEventValue"));
	strcat(gsString, svString);
	format(svString, 70, "Event Type\t%d\n", GetPVarInt(playerid, "PEventType"));
	strcat(gsString, svString);
	strcat(gsString, "CREATE EVENT!");
	return ShowPlayerDialog(playerid, DIALOG_INSERT_EVENT, DIALOG_STYLE_TABLIST_HEADERS, "SERVER: Insert Event", gsString, "Edit", "Cancel");
}
String_PlayerSkills( playerid )
{
	gsString[ 0 ] = EOS;
	format( gsString, sizeof gsString, "Trucker: %d/5 | Need for next skill: %s\n", playerVariables[ playerid ][ jSkill ][ 1 ], ForNextLevel( playerid, 1 ) );
	format( gsString, sizeof gsString, "%sFarmer: %d/5 | Need for next skill: %s\n", gsString, playerVariables[ playerid ][ jSkill ][ 2 ], ForNextLevel( playerid, 2 ) );
	format( gsString, sizeof gsString, "%sPizza Boy: %d/5 | Need for next skill: %s\n", gsString, playerVariables[ playerid ][ jSkill ][ 3 ], ForNextLevel( playerid, 3 ) );
	format( gsString, sizeof gsString, "%sPilot Job: %d/5 | Need for next skill: %s\n", gsString, playerVariables[ playerid ][ jSkill ][ 4 ], ForNextLevel( playerid, 4 ) );
	format( gsString, sizeof gsString, "%sArms Dealer: %d/5 | Need for next skill: %s\n", gsString, playerVariables[ playerid ][ jSkill ][ 5 ], ForNextLevel( playerid, 5 ) );
	format( gsString, sizeof gsString, "%sCar Jacker: %d/5 | Need for next skill: %s\n", gsString, playerVariables[ playerid ][ jSkill ][ 6 ], ForNextLevel( playerid, 6 ) );
	format( gsString, sizeof gsString, "%sFisherman: %d/5 | Need for next skill: %s\n", gsString, playerVariables[ playerid ][ jSkill ][ 8 ], ForNextLevel( playerid, 8 ) );
	format( gsString, sizeof gsString, "%sMechanic: %d/5 | Need for next skill: %s\n", gsString, playerVariables[ playerid ][ jSkill ][ 10 ], ForNextLevel( playerid, 10 ) );
	format( gsString, sizeof gsString, "%sSweeper: %d/5 | Need for next skill: %s\n", gsString, playerVariables[ playerid ][ jSkill ][ 11 ], ForNextLevel( playerid, 11 ) );
	format( gsString, sizeof gsString, "%sGarbage Man: %d/5 | Need for next skill: %s\n", gsString, playerVariables[ playerid ][ jSkill ][ 12 ], ForNextLevel( playerid, 12 ) );
	format( gsString, sizeof gsString, "%sTransporter: %d/5 | Need for next skill: %s\n", gsString, playerVariables[ playerid ][ jSkill ][ 14 ], ForNextLevel( playerid, 14 ) );
	format(gsString, sizeof gsString, "%sGambling Skill: %d/5 | Need for next skill: %s", gsString, playerVariables[playerid][pGamblingSkill], playerVariables[playerid][pGamblingNextLevel]);
	return ShowPlayerDialog(playerid, DIALOG_SHOWPLAYERSKILL, DIALOG_STYLE_MSGBOX, "Job Skills", gsString, "Ok", "");
}
Admin_Commands( playerid )
{
	gsString[ 0 ] = EOS;
	strcat( gsString, "Admin level 1\n" );
	strcat( gsString, "/fly /desync /dad /gotopoint /checks0b /reports /aaa2 /acolor /gotointerior /interiorlist /pm /showfreq /nmute /rmute /clearchat\n" );
	strcat( gsString, "/spawncar /vre /ban /banip /cr /dr /ns /nre /re /nd(elete) /aduty /spawnme /checkv /flip /settempskin\n" );
	strcat( gsString, "/(un)freeze /get /up /down /goto /setint /setvw /disarm /(un)mute /unwarn /check\n" );
	strcat( gsString, "/goto(ls/lv/sf/dmv/ea/ds/paint/m) /slap /spec /(s)kick /o /e /a /ajail /unjail\n\n" );
	if( playerVariables[ playerid ][ pAdminLevel ] >= 2 )
	{
		strcat( gsString, "Admin level 2\n" );
		strcat( gsString, "/slapcar /nos /areaheal /aheal /areaarmour /areagun /areadisarm /area(un)freeze\n" );
		strcat( gsString, "/areaskin /closestcar /getcar /gotocar /checkhp /checkgun /jetpack /agl /atl\n" );
		strcat( gsString, "/startevent(in pozitie) /stopevent(opreste teleport)\n\n" );
	}
	if( playerVariables[ playerid ][ pAdminLevel ] >= 3 )
	{
		strcat( gsString, "Admin level 3\n" );
		strcat( gsString, "/vname /gunname /lockarena /anno /gotohq /setjob /gotohouse /gotobusiness /gotojob /fv\n\n" );
	}
	if( playerVariables[ playerid ][ pAdminLevel ] >= 4 )
	{
		strcat( gsString, "Admin level 4\n" );
		strcat( gsString, "/clear /rac /fuelcars /giveweapon /lp /weatherall /leaderwarn\n\n" );
	}
	if( playerVariables[ playerid ][ pAdminLevel ] >= 5 )
	{
		strcat( gsString, "Admin level 5\n" );
		strcat( gsString, "/makeleader /makehelper /auninvite /giveallrp /set /clearkills\n" );
		strcat( gsString, "/fspec(off) /fchat\n\n" );
	}
	if( playerVariables[ playerid ][ pAdminLevel ] >= 6 )
	{
		strcat( gsString, "Admin level 6\n" );
		strcat( gsString, "/play /parrot /killparrot /giveallmoney /givealllevel /killv\n" );
		strcat( gsString, "/clearwarns /unblock /GetPlayerIPEx /saverestart /setvrank /resetplayervehicles\n" );
		strcat( gsString, "/setbizzlevel /sethouse[level/price] /mark /gotomark \n" );
		strcat( gsString, "/bonusstatus /resetplayergetgift /resetallgetgift /resetplayervehicle\n\n" );
	}
	if( playerVariables[ playerid ][ pAdminLevel ] >= 7 ) // Scripter
	{
		strcat( gsString, "Admin level 8\n" );
		strcat( gsString, "/asellhouse /asellbizz /addhousetobids /addbizztobids\n" );
		strcat( gsString, "/giveplayermoney /reloadwords /testgift\n\n" );

		strcat( gsString, ""COL_R"RCON\n" );
		strcat( gsString, "/giveplayerpp (cumparate) /priceapp /serverpass /servername\n" );
		strcat( gsString, "/addhousetobids /createhouse /setclanslots /giveplayervehicle\n\n" );
	}
	return gsString;
}
#if defined HEIST_SYSTEM
Heist_Text( heistKey )
{
	gsString[ 0 ] = EOS;
	switch( heistKey )
	{
		case 1:
		{
			strcat( gsString, "Mike Toreno, un vechi prieten de-al tau, s-a reintors in San Andreas dupa o sedere indelungata in Vice City.\n" );
			strcat( gsString, "Angajandu-se la primaria din Los Santos, are acces la niste informatii foarte importante despre majoritatea cladirilor din San Andreas.\n" );
			strcat( gsString, "Acesta te-a contactat sa-ti propuna o serie de jafuri.\n" );
			strcat( gsString, "Ia-ti echipa de 4 oameni si mergi la primaria din Los Santos dupa ce gardianii pleaca si intocmiti-va planul." );
		}
	}
	return gsString;
}
#endif
RaceVehicle_ID(id)
{
	gsString[ 0 ] = EOS;
	switch(id)
	{
		//Convertibles\nLowriders\nOff Road\nSport Vehicles\nSaloons\nMotorcycles
		case 0:
		{
			gsString = "Stallion\nComet\nFeltzer\nWindsor";
		}
		case 1:
		{
			gsString = "Savanna\nBlade\nVoodoo\nSlamvan";
		}
		case 2:
		{
			gsString = "Rancher\nSandking\nHuntley\nBandito";
		}
		case 3:
		{
			gsString = "Buffalo\nBanshee\nBullet\nHotring Racer A";
		}
		case 4:
		{
			gsString = "Premier\nSultan\nClover\nElegy";
		}
		case 5:
		{
			gsString = "Sanchez\nBMX\nPCJ\nFreeway";
		}
	}

	return gsString;
}
Vipname_color()
{
	gsString[ 0 ] = EOS;
	
	strcat( gsString, "{FFFFFF}White\n" );
	strcat( gsString, "{0BA10B}Dark green\n" );
	strcat( gsString, "{D1FF99}Light green\n" );
	strcat( gsString, "{FF3D98}Pink\n" );
	strcat( gsString, "{F9FF3D}Yellow\n" );
	strcat( gsString, "{FFEF85}Light yellow\n" );
	strcat( gsString, "{3DE5FF}Lightblue\n" );
	strcat( gsString, "{FFAB3D}Orange\n" );
	strcat( gsString, "{A13DFF}Mauve\n" );
	strcat( gsString, "{FFC27D}Gold\n" );
	strcat( gsString, "{FFA3A3}Light red\n" );
	strcat( gsString, "{C5A3FF}Purple" );

	return gsString;
}
hudString( playerid )
{
	new playerHudStatus[ 6 ][ 80 ];
	playerHudStatus[ 0 ] = ( playerVariables[ playerid ][ pHud ][ 0 ] ) ? ("{7CFC00}enabled") : ("{FF2020}disabled" );
	playerHudStatus[ 1 ] = ( playerVariables[ playerid ][ pHud ][ 1 ] ) ? ("{7CFC00}enabled") : ("{FF2020}disabled" );
	playerHudStatus[ 2 ] = ( playerVariables[ playerid ][ pHud ][ 2 ] ) ? ("{7CFC00}enabled") : ("{FF2020}disabled" );
	playerHudStatus[ 3 ] = ( playerVariables[ playerid ][ pHud ][ 3 ] ) ? ("{7CFC00}enabled") : ("{FF2020}disabled" );
	playerHudStatus[ 4 ] = ( playerVariables[ playerid ][ pHud ][ 4 ] ) ? ("{7CFC00}enabled") : ("{FF2020}disabled" );
	playerHudStatus[ 5 ] = ( playerVariables[ playerid ][ pHud ][ 5 ] ) ? ("{7CFC00}enabled") : ("{FF2020}disabled" );
	if( playerVariables[ playerid ][ pAdminLevel ] == 0 ) {
		gsString[ 0 ] = EOS;
		format( gsString, sizeof gsString, "Hud Name\tStatus\n" );
		format( gsString, sizeof gsString, "%sFPS Hud\t%s\nHP Hud\t%s\nArmour HUD\t%s\nLevel HUD\t%s\nDMG Informer\t%s", gsString, playerHudStatus[ 0 ], playerHudStatus[ 1 ], playerHudStatus[ 2 ], playerHudStatus[ 3 ], playerHudStatus[ 5 ]);
	}
	else {
		gsString[ 0 ] = EOS;
		format( gsString, sizeof gsString, "Hud Name\tStatus\n" );
		format( gsString, sizeof gsString, "%sFPS Hud\t%s\nHP Hud\t%s\nArmour HUD\t%s\nLevel HUD\t%s\nAdmin HUD\t%s\nDMG Informer\t%s", gsString, playerHudStatus[ 0 ], playerHudStatus[ 1 ], playerHudStatus[ 2 ], playerHudStatus[ 3 ], playerHudStatus[ 4 ], playerHudStatus[ 5 ]);
	}
	return gsString;
}
// ====================================[ SERVER'S HOOKS ]=================================== //
#if defined OBJECT_QUEST
	#include "/INCLUDES_FILES/INCLUDE_QUEST"
#endif

#if defined EVENT_CALENDAR
	#include "/INCLUDES_FILES/INCLUDE_EVENTS"
#endif

#if defined XMAS_MODE
	#include "/INCLUDES_FILES/INCLUDE_XMAS"
#endif

#if defined EMOTES_SYSTEM
    #include "INCLUDE_EMOTES"
#endif

#if defined APARTMENT_SYS
    #include "INCLUDE_APARTMENTS"
#endif
#if defined CASINO
	#include "/INCLUDES_FILES/INCLUDE_ROULETTE"
#endif
#include "/INCLUDES_FILES/INCLUDE_GYM"
//#include <ls_beachside.pwn>
#include <vector>